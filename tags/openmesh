!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddFaceEdgeInfo	Mesh/PolyConnectivity.hh	/^       struct AddFaceEdgeInfo$/;"	s	class:OpenMesh::PolyConnectivity	access:private
ArrayItems	Mesh/ArrayItems.hh	/^struct ArrayItems$/;"	s	namespace:OpenMesh
ArrayKernel	Mesh/ArrayKernel.cc	/^ArrayKernel::ArrayKernel()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
ArrayKernel	Mesh/ArrayKernel.hh	/^  ArrayKernel();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
ArrayKernel	Mesh/ArrayKernel.hh	/^class OPENMESHDLLEXPORT ArrayKernel : public BaseKernel, public ArrayItems$/;"	c	namespace:OpenMesh	inherits:BaseKernel,ArrayItems
AssertCompile	Utils/GenProg.hh	/^template <> struct AssertCompile<true> {};$/;"	s	namespace:OpenMesh::GenProg
AttribKernel	Mesh/AttribKernelT.hh	/^  typedef AttribKernelT<MeshItems,Connectivity>  AttribKernel;$/;"	t	class:OpenMesh::AttribKernelT	access:public
AttribKernel	Mesh/PolyMesh_ArrayKernelT.hh	/^  typedef AttribKernelT<MeshItems, PolyConnectivity>  AttribKernel;$/;"	t	struct:OpenMesh::PolyMesh_ArrayKernel_GeneratorT	access:public
AttribKernel	Mesh/TriMesh_ArrayKernelT.hh	/^  typedef AttribKernelT<MeshItems, TriConnectivity>   AttribKernel;$/;"	t	struct:OpenMesh::TriMesh_ArrayKernel_GeneratorT	access:public
AttribKernelT	Mesh/AttribKernelT.hh	/^  AttribKernelT()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
AttribKernelT	Mesh/AttribKernelT.hh	/^class AttribKernelT : public Connectivity$/;"	c	namespace:OpenMesh	inherits:Connectivity
Attribs	Mesh/AttribKernelT.hh	/^  enum Attribs  {$/;"	g	class:OpenMesh::AttribKernelT	access:public
Attribs	Mesh/FinalMeshItemsT.hh	/^  enum Attribs$/;"	g	struct:OpenMesh::FinalMeshItemsT	access:public
AttributeBits	Mesh/Attributes.hh	/^enum AttributeBits$/;"	g	namespace:OpenMesh::Attributes
Attributes	Mesh/Attributes.hh	/^namespace Attributes {$/;"	n	namespace:OpenMesh
Attributes	Mesh/Status.hh	/^namespace Attributes {$/;"	n	namespace:OpenMesh
AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  AutoPropertyHandleT()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  AutoPropertyHandleT(Mesh& _m, PropertyHandle _pph)$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(Mesh& _m, PropertyHandle _pph)
AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  AutoPropertyHandleT(const Self& _other)$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(const Self& _other)
AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  explicit AutoPropertyHandleT(Mesh& _m, const std::string& _pp_name = std::string())$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(Mesh& _m, const std::string& _pp_name = std::string())
AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^class AutoPropertyHandleT : public PropertyHandle_$/;"	c	namespace:OpenMesh	inherits:PropertyHandle_
AutoStatusSetT	Mesh/ArrayKernel.hh	/^    AutoStatusSetT(ArrayKernel& _kernel)$/;"	f	class:OpenMesh::ArrayKernel::AutoStatusSetT	access:public	signature:(ArrayKernel& _kernel)
AutoStatusSetT	Mesh/ArrayKernel.hh	/^  class AutoStatusSetT : public StatusSetT<Handle>$/;"	c	class:OpenMesh::ArrayKernel	inherits:StatusSetT	access:public
BEGIN_NS_GEOMETRY	Geometry/Config.hh	61;"	d
Base	Geometry/VectorT_inc.hh	/^  typedef DERIVED                           Base;$/;"	t	class:CLASSNAME	access:private
Base	Mesh/ArrayKernel.hh	/^    typedef AutoStatusSetT<Handle>          Base;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public
Base	Mesh/ArrayKernel.hh	/^    typedef StatusSetT<Handle>              Base;$/;"	t	class:OpenMesh::ArrayKernel::AutoStatusSetT	access:private
Base	Utils/AutoPropertyHandleT.hh	/^  typedef PropertyHandle                    Base;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
BaseExporter	IO/exporter/BaseExporter.hh	/^class OPENMESHDLLEXPORT BaseExporter$/;"	c	namespace:OpenMesh::IO
BaseHandle	Mesh/Handles.hh	/^  explicit BaseHandle(int _idx=-1) : idx_(_idx) {}$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(int _idx=-1)
BaseHandle	Mesh/Handles.hh	/^class BaseHandle$/;"	c	namespace:OpenMesh
BaseImporter	IO/importer/BaseImporter.hh	/^class OPENMESHDLLEXPORT BaseImporter$/;"	c	namespace:OpenMesh::IO
BaseKernel	Mesh/BaseKernel.hh	/^  BaseKernel() {}$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
BaseKernel	Mesh/BaseKernel.hh	/^class OPENMESHDLLEXPORT BaseKernel$/;"	c	namespace:OpenMesh
BaseMesh	Mesh/BaseMesh.hh	/^class BaseMesh {$/;"	c	namespace:OpenMesh
BasePropHandleT	Utils/Property.hh	/^  explicit BasePropHandleT(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::BasePropHandleT	access:public	signature:(int _idx=-1)
BasePropHandleT	Utils/Property.hh	/^struct BasePropHandleT : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
BaseProperty	Utils/BaseProperty.hh	/^  BaseProperty(const BaseProperty & _rhs)$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(const BaseProperty & _rhs)
BaseProperty	Utils/BaseProperty.hh	/^  BaseProperty(const std::string& _name = "<unknown>")$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(const std::string& _name = Ó)
BaseProperty	Utils/BaseProperty.hh	/^class OPENMESHDLLEXPORT BaseProperty$/;"	c	namespace:OpenMesh
BaseReader	IO/reader/BaseReader.hh	/^class OPENMESHDLLEXPORT BaseReader$/;"	c	namespace:OpenMesh::IO
BaseWriter	IO/writer/BaseWriter.hh	/^class OPENMESHDLLEXPORT BaseWriter$/;"	c	namespace:OpenMesh::IO
Binary	IO/Options.hh	/^      Binary         = 0x0001, \/\/\/< Set binary mode for r\/w$/;"	e	enum:OpenMesh::IO::Options::Flag
BitMaskContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<unsigned int>          BitMaskContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
Bool2Type	Utils/GenProg.hh	/^template <bool b> struct Bool2Type { enum { my_bool = b }; };$/;"	s	namespace:OpenMesh::GenProg
C	IO/OMFormat.hh	/^    size_t C     = 0;$/;"	l
CEIter	Mesh/PolyConnectivity.hh	/^  typedef ConstEdgeIter      CEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CFEIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceEdgeIter          CFEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CFFIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceFaceIter          CFFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CFHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceHalfedgeIter      CFHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CFIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceIter      CFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CFVIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceVertexIter        CFVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstHalfedgeIter  CHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CLASSNAME	Geometry/VectorT.hh	122;"	d
CLASSNAME	Geometry/VectorT.hh	135;"	d
CLASSNAME	Geometry/VectorT.hh	147;"	d
CLASSNAME	Geometry/VectorT.hh	185;"	d
CLASSNAME	Geometry/VectorT_inc.hh	/^class CLASSNAME : public DERIVED$/;"	c	inherits:DERIVED
CLASSNAME	Geometry/VectorT_inc.hh	52;"	d
CLASSNAME::Base	Geometry/VectorT_inc.hh	/^  typedef DERIVED                           Base;$/;"	t	class:CLASSNAME	access:private
CLASSNAME::Base::values_	Geometry/VectorT_inc.hh	/^    Base::values_[0] = v0; Base::values_[1] = v1;$/;"	m	class:CLASSNAME::Base
CLASSNAME::Base::values_	Geometry/VectorT_inc.hh	/^    Base::values_[0]=v0; Base::values_[1]=v1; Base::values_[2]=v2; Base::values_[3]=v3;$/;"	m	class:CLASSNAME::Base
CLASSNAME::Base::values_	Geometry/VectorT_inc.hh	/^    Base::values_[0]=v0; Base::values_[1]=v1; Base::values_[2]=v2;$/;"	m	class:CLASSNAME::Base
CLASSNAME::Base::values_	Geometry/VectorT_inc.hh	/^    Base::values_[0]=v0; Base::values_[1]=v1;Base::values_[2]=v2; Base::values_[3]=v3; Base::values_[4]=v4;$/;"	m	class:CLASSNAME::Base
CLASSNAME::Base::values_	Geometry/VectorT_inc.hh	/^    Base::values_[3]=v3; Base::values_[4]=v4; Base::values_[5]=v5;$/;"	m	class:CLASSNAME::Base
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  explicit inline VectorT(const Scalar _values[DIM]) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar _values[DIM])
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  explicit inline VectorT(const Scalar& v) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v)
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  explicit inline VectorT(const VectorT<otherScalarType,DIM>& _rhs) {$/;"	f	class:CLASSNAME	access:public	signature:(const VectorT<otherScalarType,DIM>& _rhs)
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT() {}$/;"	f	class:CLASSNAME	access:public	signature:()
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1)
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1, const Scalar& v2) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2)
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1, const Scalar& v2,$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2, const Scalar& v3, const Scalar& v4)
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1, const Scalar& v2,$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2, const Scalar& v3, const Scalar& v4, const Scalar& v5)
CLASSNAME::VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1,$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2, const Scalar& v3)
CLASSNAME::data	Geometry/VectorT_inc.hh	/^  inline Scalar* data() { return Base::values_; }$/;"	f	class:CLASSNAME	access:public	signature:()
CLASSNAME::data	Geometry/VectorT_inc.hh	/^  inline const Scalar*data() const { return Base::values_; }$/;"	f	class:CLASSNAME	access:public	signature:() const
CLASSNAME::dim	Geometry/VectorT_inc.hh	/^  static inline int dim() { return DIM; }$/;"	f	class:CLASSNAME	access:public	signature:()
CLASSNAME::operator =	Geometry/VectorT_inc.hh	/^  inline vector_type& operator=(const VectorT<otherScalarType,DIM>& _rhs) {$/;"	f	class:CLASSNAME	access:public	signature:(const VectorT<otherScalarType,DIM>& _rhs)
CLASSNAME::operator =	Geometry/VectorT_inc.hh	/^  inline vector_type& operator=(const vector_type& _rhs) {$/;"	f	class:CLASSNAME	access:public	signature:(const vector_type& _rhs)
CLASSNAME::operator []	Geometry/VectorT_inc.hh	/^  inline Scalar& operator[](size_t _i) {$/;"	f	class:CLASSNAME	access:public	signature:(size_t _i)
CLASSNAME::size	Geometry/VectorT_inc.hh	/^  static inline size_t size() { return DIM; }$/;"	f	class:CLASSNAME	access:public	signature:()
CLASSNAME::size_	Geometry/VectorT_inc.hh	/^  static const size_t size_ = DIM;$/;"	m	class:CLASSNAME	access:public
CLASSNAME::value_type	Geometry/VectorT_inc.hh	/^  typedef Scalar value_type;$/;"	t	class:CLASSNAME	access:public
CLASSNAME::vector_type	Geometry/VectorT_inc.hh	/^  typedef VectorT<Scalar,DIM>  vector_type;$/;"	t	class:CLASSNAME	access:public
COLORALPHA	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
COLORBLUE	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
COLORGREEN	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
COLORRED	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
COPY_STATUS_PROPERTY	Mesh/ArrayKernel.cc	80;"	d	file:
COPY_STATUS_PROPERTY	Mesh/ArrayKernel.cc	94;"	d	file:
CVEIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexEdgeIter        CVEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CVFIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexFaceIter        CVFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CVIHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexIHalfedgeIter   CVIHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CVIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexIter    CVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CVOHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexOHalfedgeIter   CVOHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
CVVIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexVertexIter      CVVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ChooseSelector	Utils/GenProg.hh	/^template <> struct ChooseSelector<false> {$/;"	s	namespace:OpenMesh::GenProg
ChooseSelector	Utils/GenProg.hh	/^template <bool condition> struct ChooseSelector {$/;"	s	namespace:OpenMesh::GenProg
Chunk	IO/OMFormat.hh	/^  struct Chunk$/;"	s	namespace:OpenMesh::IO::OMFormat
ChunkHeader	IO/reader/OMReader.hh	/^  typedef OMFormat::Chunk::Header       ChunkHeader;$/;"	t	class:OpenMesh::IO::_OMReader_	access:private
CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT() : mesh_(0), active_(false) {}$/;"	f	class:CirculatorT	access:public	signature:()
CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(const CirculatorT& _rhs) :$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT& _rhs)
CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(const NonConstCircT<Mesh>& _rhs) :$/;"	f	class:CirculatorT	access:public	signature:(const NonConstCircT<Mesh>& _rhs)
CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(mesh_ref _mesh, HalfedgeHandle _heh) :$/;"	f	class:CirculatorT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh)
CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(mesh_ref _mesh, SourceHandle _start) :$/;"	f	class:CirculatorT	access:public	signature:(mesh_ref _mesh, SourceHandle _start)
CirculatorT	Mesh/gen/circulators_template.hh	/^class CirculatorT$/;"	c
CirculatorT::CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT() : mesh_(0), active_(false) {}$/;"	f	class:CirculatorT	access:public	signature:()
CirculatorT::CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(const CirculatorT& _rhs) :$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT& _rhs)
CirculatorT::CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(const NonConstCircT<Mesh>& _rhs) :$/;"	f	class:CirculatorT	access:public	signature:(const NonConstCircT<Mesh>& _rhs)
CirculatorT::CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(mesh_ref _mesh, HalfedgeHandle _heh) :$/;"	f	class:CirculatorT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh)
CirculatorT::CirculatorT	Mesh/gen/circulators_template.hh	/^  CirculatorT(mesh_ref _mesh, SourceHandle _start) :$/;"	f	class:CirculatorT	access:public	signature:(mesh_ref _mesh, SourceHandle _start)
CirculatorT::HalfedgeHandle	Mesh/gen/circulators_template.hh	/^  typedef typename Mesh::HalfedgeHandle   HalfedgeHandle;$/;"	t	class:CirculatorT	access:public
CirculatorT::active_	Mesh/gen/circulators_template.hh	/^  bool             active_;$/;"	m	class:CirculatorT	access:private
CirculatorT::current_halfedge_handle	Mesh/gen/circulators_template.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:CirculatorT	access:public	signature:() const
CirculatorT::handle	Mesh/gen/circulators_template.hh	/^  TargetHandle handle() const {$/;"	f	class:CirculatorT	access:public	signature:() const
CirculatorT::heh_	Mesh/gen/circulators_template.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:CirculatorT	access:private
CirculatorT::mesh_	Mesh/gen/circulators_template.hh	/^  mesh_ptr         mesh_;$/;"	m	class:CirculatorT	access:private
CirculatorT::mesh_ptr	Mesh/gen/circulators_template.hh	/^  typedef Mesh*               mesh_ptr;$/;"	t	class:CirculatorT	access:public
CirculatorT::mesh_ptr	Mesh/gen/circulators_template.hh	/^  typedef const Mesh*         mesh_ptr;$/;"	t	class:CirculatorT	access:public
CirculatorT::mesh_ref	Mesh/gen/circulators_template.hh	/^  typedef Mesh&               mesh_ref;$/;"	t	class:CirculatorT	access:public
CirculatorT::mesh_ref	Mesh/gen/circulators_template.hh	/^  typedef const Mesh&         mesh_ref;$/;"	t	class:CirculatorT	access:public
CirculatorT::operator !=	Mesh/gen/circulators_template.hh	/^  bool operator!=(const CirculatorT& _rhs) const {$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT& _rhs) const
CirculatorT::operator *	Mesh/gen/circulators_template.hh	/^  reference operator*() const { $/;"	f	class:CirculatorT	access:public	signature:() const
CirculatorT::operator ++	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator++() { $/;"	f	class:CirculatorT	access:public	signature:()
CirculatorT::operator --	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator--() { $/;"	f	class:CirculatorT	access:public	signature:()
CirculatorT::operator ->	Mesh/gen/circulators_template.hh	/^  pointer operator->() const { $/;"	f	class:CirculatorT	access:public	signature:() const
CirculatorT::operator =	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator=(const CirculatorT<Mesh>& _rhs)$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT<Mesh>& _rhs)
CirculatorT::operator =	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator=(const NonConstCircT<Mesh>& _rhs)$/;"	f	class:CirculatorT	access:public	signature:(const NonConstCircT<Mesh>& _rhs)
CirculatorT::operator ==	Mesh/gen/circulators_template.hh	/^  bool operator==(const CirculatorT& _rhs) const {$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT& _rhs) const
CirculatorT::operator TargetHandle	Mesh/gen/circulators_template.hh	/^  operator TargetHandle() const {$/;"	f	class:CirculatorT	access:public	signature:() const
CirculatorT::operator bool	Mesh/gen/circulators_template.hh	/^  operator bool() const { $/;"	f	class:CirculatorT	access:public	signature:() const
CirculatorT::pointer	Mesh/gen/circulators_template.hh	/^  typedef TargetType*         pointer;$/;"	t	class:CirculatorT	access:public
CirculatorT::pointer	Mesh/gen/circulators_template.hh	/^  typedef const TargetType*   pointer;$/;"	t	class:CirculatorT	access:public
CirculatorT::reference	Mesh/gen/circulators_template.hh	/^  typedef TargetType&         reference;$/;"	t	class:CirculatorT	access:public
CirculatorT::reference	Mesh/gen/circulators_template.hh	/^  typedef const TargetType&   reference;$/;"	t	class:CirculatorT	access:public
CirculatorT::start_	Mesh/gen/circulators_template.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:CirculatorT	access:private
CirculatorT::value_handle	Mesh/gen/circulators_template.hh	/^  typedef TargetHandle         value_handle;$/;"	t	class:CirculatorT	access:public
CirculatorT::value_type	Mesh/gen/circulators_template.hh	/^  typedef TargetType           value_type;$/;"	t	class:CirculatorT	access:public
ClearAll	Utils/PropertyContainer.hh	/^    ClearAll() {}$/;"	f	struct:OpenMesh::ClearAll	access:public	signature:()
ClearAll	Utils/PropertyContainer.hh	/^  struct ClearAll$/;"	s	namespace:OpenMesh
CmpVec	IO/reader/STLReader.cc	/^  CmpVec(float _eps=FLT_MIN) : eps_(_eps) {}$/;"	f	class:OpenMesh::IO::CmpVec	access:public	signature:(float _eps=FLT_MIN)
CmpVec	IO/reader/STLReader.cc	/^class CmpVec$/;"	c	namespace:OpenMesh::IO	file:
Color	IO/importer/ImporterT.hh	/^  typedef typename Mesh::Color       Color;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
Color	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Color         Color;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Color	Mesh/Attributes.hh	/^  Color         = 2,  \/\/\/< Add colors to mesh item (vertices\/faces\/edges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
Color	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::Color            Color;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
Color	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Color           Color;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
Color	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Color     Color;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Color	Mesh/Traits.hh	/^    typedef typename T1::Color    Color;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
Color	Mesh/Traits.hh	/^  typedef Vec3uc Color;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
Color	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Color              Color;$/;"	t	class:OpenMesh::TriMeshT	access:public
ColorAlpha	IO/Options.hh	/^      ColorAlpha     = 0x0800,  \/\/\/< Has (r) \/ store (w) alpha values for colors$/;"	e	enum:OpenMesh::IO::Options::Flag
ColorFloat	IO/Options.hh	/^      ColorFloat     = 0x1000  \/\/\/< Has (r) \/ store (w) float values for colors (currently only implemented for PLY and OFF files)$/;"	e	enum:OpenMesh::IO::Options::Flag
ConstEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef EdgeIter ConstEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstEdgeIter              ConstEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstEdgeIter      ConstEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstEdgeRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstEdgeIter, &PolyConnectivity::edges_begin, &PolyConnectivity::edges_end> ConstEdgeRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstFaceEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceEdgeIterT<This>         ConstFaceEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstFaceEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceEdgeIter         ConstFaceEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstFaceEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceEdgeIter        ConstFaceEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:()
ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(const ConstFaceEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT& _rhs)
ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(const FaceEdgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const FaceEdgeIterT<Mesh>& _rhs)
ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^class ConstFaceEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
ConstFaceFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceFaceIterT<This>         ConstFaceFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstFaceFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceFaceIter         ConstFaceFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstFaceFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceFaceIter        ConstFaceFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:()
ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(const ConstFaceFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT& _rhs)
ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(const FaceFaceIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const FaceFaceIterT<Mesh>& _rhs)
ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^class ConstFaceFaceIterT$/;"	c	namespace:OpenMesh::Iterators
ConstFaceHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceHalfedgeIterT<This>     ConstFaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstFaceHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceHalfedgeIter     ConstFaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstFaceHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceHalfedgeIter    ConstFaceHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:()
ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(const ConstFaceHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT& _rhs)
ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(const FaceHalfedgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT<Mesh>& _rhs)
ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^class ConstFaceHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
ConstFaceIter	Mesh/PolyConnectivity.hh	/^  typedef FaceIter ConstFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceIter              ConstFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceIter      ConstFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstFaceRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstFaceIter, &PolyConnectivity::faces_begin, &PolyConnectivity::faces_end> ConstFaceRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstFaceVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceVertexIterT<This>       ConstFaceVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstFaceVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceVertexIter       ConstFaceVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstFaceVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceVertexIter      ConstFaceVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:()
ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(const ConstFaceVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT& _rhs)
ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(const FaceVertexIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const FaceVertexIterT<Mesh>& _rhs)
ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^class ConstFaceVertexIterT$/;"	c	namespace:OpenMesh::Iterators
ConstHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef HalfedgeIter ConstHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstHalfedgeIter          ConstHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstHalfedgeRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstHalfedgeIter, &PolyConnectivity::halfedges_begin, &PolyConnectivity::halfedges_end> ConstHalfedgeRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexEdgeIterT<This>       ConstVertexEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexEdgeIter       ConstVertexEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstVertexEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexEdgeIter      ConstVertexEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:()
ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(const ConstVertexEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT& _rhs)
ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(const VertexEdgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const VertexEdgeIterT<Mesh>& _rhs)
ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^class ConstVertexEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
ConstVertexFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexFaceIterT<This>       ConstVertexFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexFaceIter       ConstVertexFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstVertexFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexFaceIter      ConstVertexFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:()
ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(const ConstVertexFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT& _rhs)
ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(const VertexFaceIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const VertexFaceIterT<Mesh>& _rhs)
ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^class ConstVertexFaceIterT$/;"	c	namespace:OpenMesh::Iterators
ConstVertexIHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexIHalfedgeIterT<This>  ConstVertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexIHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexIHalfedgeIter  ConstVertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstVertexIHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexIHalfedgeIter ConstVertexIHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:()
ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(const ConstVertexIHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT& _rhs)
ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(const VertexIHalfedgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT<Mesh>& _rhs)
ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^class ConstVertexIHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
ConstVertexIter	Mesh/PolyConnectivity.hh	/^  typedef VertexIter ConstVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexIter            ConstVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexIter    ConstVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstVertexOHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexOHalfedgeIterT<This>  ConstVertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexOHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexOHalfedgeIter  ConstVertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstVertexOHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexOHalfedgeIter ConstVertexOHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:()
ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(const ConstVertexOHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT& _rhs)
ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(const VertexOHalfedgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT<Mesh>& _rhs)
ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^class ConstVertexOHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
ConstVertexRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstVertexIter, &PolyConnectivity::vertices_begin, &PolyConnectivity::vertices_end> ConstVertexRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexVertexIterT<This>     ConstVertexVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
ConstVertexVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexVertexIter     ConstVertexVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
ConstVertexVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexVertexIter    ConstVertexVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT() : mesh_(0), lap_counter_(0) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:()
ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(const ConstVertexVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT& _rhs)
ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(const VertexVertexIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const VertexVertexIterT<Mesh>& _rhs)
ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^class ConstVertexVertexIterT$/;"	c	namespace:OpenMesh::Iterators
Create	Utils/SingletonT.hh	/^  static void Create()$/;"	f	class:OpenMesh::SingletonT	access:private	signature:()
DELETED	Mesh/Status.hh	/^  DELETED               = 1,    \/\/\/< Item has been deleted$/;"	e	enum:OpenMesh::Attributes::StatusBits
DERIVED	Geometry/VectorT.hh	123;"	d
DERIVED	Geometry/VectorT.hh	136;"	d
DERIVED	Geometry/VectorT.hh	148;"	d
DERIVED	Geometry/VectorT.hh	186;"	d
DERIVED	Geometry/VectorT_inc.hh	53;"	d
DIM	Geometry/VectorT.hh	120;"	d
DIM	Geometry/VectorT.hh	133;"	d
DIM	Geometry/VectorT.hh	151;"	d
DIM	Geometry/VectorT.hh	156;"	d
DIM	Geometry/VectorT.hh	162;"	d
DIM	Geometry/VectorT.hh	167;"	d
DIM	Geometry/VectorT.hh	173;"	d
DIM	Geometry/VectorT.hh	178;"	d
DIM	Geometry/VectorT_inc.hh	50;"	d
DataEPropHandle	Mesh/AttribKernelT.hh	/^  typedef EPropHandleT<EdgeData>                DataEPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
DataFPropHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<FaceData>                DataFPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
DataHPropHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<HalfedgeData>            DataHPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
DataVPropHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<VertexData>              DataVPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Default	IO/Options.hh	/^      Default        = 0x0000, \/\/\/< No options$/;"	e	enum:OpenMesh::IO::Options::Flag
DefaultTraits	Mesh/Traits.hh	/^struct DefaultTraits$/;"	s	namespace:OpenMesh
Delete	Utils/PropertyContainer.hh	/^    Delete() {}$/;"	f	struct:OpenMesh::Delete	access:public	signature:()
Delete	Utils/PropertyContainer.hh	/^  struct Delete$/;"	s	namespace:OpenMesh
Dim	IO/OMFormat.hh	/^    enum Dim {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
Dim_1D	IO/OMFormat.hh	/^      Dim_1D = 0x00,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
Dim_2D	IO/OMFormat.hh	/^      Dim_2D = 0x01,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
Dim_3D	IO/OMFormat.hh	/^      Dim_3D = 0x02,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
Dim_4D	IO/OMFormat.hh	/^      Dim_4D = 0x03,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
Dim_5D	IO/OMFormat.hh	/^      Dim_5D = 0x04,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
Dim_6D	IO/OMFormat.hh	/^      Dim_6D = 0x05,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
Dim_7D	IO/OMFormat.hh	/^      Dim_7D = 0x06,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
Dim_8D	IO/OMFormat.hh	/^      Dim_8D = 0x07$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
EAttribs	Mesh/AttribKernelT.hh	/^    EAttribs = MeshItems::EAttribs,$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
EAttribs	Mesh/FinalMeshItemsT.hh	/^    EAttribs = Traits::EdgeAttributes,$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
EHandle	Mesh/PolyConnectivity.hh	/^  typedef EdgeHandle      EHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
EIter	Mesh/PolyConnectivity.hh	/^  typedef EdgeIter      EIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
END_NS_GEOMETRY	Geometry/Config.hh	62;"	d
EPropHandleT	Utils/Property.hh	/^  explicit EPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::EPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
EPropHandleT	Utils/Property.hh	/^  explicit EPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::EPropHandleT	access:public	signature:(int _idx=-1)
EPropHandleT	Utils/Property.hh	/^struct EPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
Edge	Mesh/ArrayItems.hh	/^  class Edge$/;"	c	struct:OpenMesh::ArrayItems	access:public
Edge	Mesh/ArrayKernel.hh	/^    edges_.push_back(Edge());$/;"	p	signature:()
Edge	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Edge       Edge;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Edge	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Edge      Edge;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Edge	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Edge               Edge;$/;"	t	class:OpenMesh::TriMeshT	access:public
EdgeAttributes	Mesh/Traits.hh	83;"	d
EdgeColor	IO/Options.hh	/^      EdgeColor      = 0x0080, \/\/\/< Has (r) \/ store (w) edge colors$/;"	e	enum:OpenMesh::IO::Options::Flag
EdgeColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef EPropHandleT<Color>               EdgeColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
EdgeContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<Edge>                  EdgeContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
EdgeData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::EdgeData      EdgeData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
EdgeData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template EdgeT<ITraits, Refs>        EdgeData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
EdgeHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::EdgeHandle              EdgeHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
EdgeHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::EdgeHandle              EdgeHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
EdgeHandle	Mesh/Handles.hh	/^  explicit EdgeHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::EdgeHandle	access:public	signature:(int _idx=-1)
EdgeHandle	Mesh/Handles.hh	/^struct EdgeHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
EdgeHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::EdgeHandle         EdgeHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
EdgeHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::EdgeHandle         EdgeHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
EdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::EdgeHandle, ArrayKernel, &This::has_edge_status, &This::n_edges> EdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
EdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::EdgeIter                   EdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
EdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::EdgeIter           EdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
EdgeStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef EPropHandleT<StatusInfo>          EdgeStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
EdgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<EdgeHandle>        EdgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
EdgeT	Mesh/Traits.hh	/^    template <class Base, class Refs> class EdgeT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,EdgeT	access:public
EdgeTraits	Mesh/Traits.hh	97;"	d
Enabler	IO/writer/OMWriter.cc	/^  Enabler( T& obj ) : obj_(obj)$/;"	f	struct:OpenMesh::IO::Enabler	access:public	signature:( T& obj )
Enabler	IO/writer/OMWriter.cc	/^template <typename T> struct Enabler$/;"	s	namespace:OpenMesh::IO	file:
Endian	Utils/Endian.hh	/^class OPENMESHDLLEXPORT Endian$/;"	c	namespace:OpenMesh
Entity	IO/OMFormat.hh	/^    enum Entity {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
EntityRange	Mesh/PolyConnectivity.hh	/^          EntityRange(CONTAINER_TYPE &container) : container_(container) {}$/;"	f	class:OpenMesh::PolyConnectivity::EntityRange	access:public	signature:(CONTAINER_TYPE &container)
EntityRange	Mesh/PolyConnectivity.hh	/^  class EntityRange {$/;"	c	class:OpenMesh::PolyConnectivity	access:public
Entity_Edge	IO/OMFormat.hh	/^      Entity_Edge      = 0x04,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
Entity_Face	IO/OMFormat.hh	/^      Entity_Face      = 0x02,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
Entity_Halfedge	IO/OMFormat.hh	/^      Entity_Halfedge  = 0x06$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
Entity_Mesh	IO/OMFormat.hh	/^      Entity_Mesh      = 0x01,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
Entity_Vertex	IO/OMFormat.hh	/^      Entity_Vertex    = 0x00,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
ExporterT	IO/exporter/ExporterT.hh	/^  ExporterT(const Mesh& _mesh) : mesh_(_mesh) {}$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(const Mesh& _mesh)
ExporterT	IO/exporter/ExporterT.hh	/^class ExporterT : public BaseExporter$/;"	c	namespace:OpenMesh::IO	inherits:BaseExporter
ExtEdgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<EdgeHandle>         ExtEdgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
ExtFaceStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<FaceHandle>         ExtFaceStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
ExtHalfedgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<HalfedgeHandle>     ExtHalfedgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
ExtStatusSetT	Mesh/ArrayKernel.hh	/^    ExtStatusSetT(ArrayKernel& _kernel, unsigned int _capacity_hint = 0)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(ArrayKernel& _kernel, unsigned int _capacity_hint = 0)
ExtStatusSetT	Mesh/ArrayKernel.hh	/^  class ExtStatusSetT : public AutoStatusSetT<Handle>$/;"	c	class:OpenMesh::ArrayKernel	inherits:AutoStatusSetT	access:public
ExtVertexStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<VertexHandle>       ExtVertexStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
FAttribs	Mesh/AttribKernelT.hh	/^    FAttribs = MeshItems::FAttribs$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
FAttribs	Mesh/FinalMeshItemsT.hh	/^    FAttribs = Traits::FaceAttributes$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
FEATURE	Mesh/Status.hh	/^  FEATURE               = 16,   \/\/\/< Item is a feature or belongs to a feature.$/;"	e	enum:OpenMesh::Attributes::StatusBits
FEIter	Mesh/PolyConnectivity.hh	/^  typedef FaceEdgeIter          FEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FFIter	Mesh/PolyConnectivity.hh	/^  typedef FaceFaceIter          FFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FHIter	Mesh/PolyConnectivity.hh	/^  typedef FaceHalfedgeIter      FHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FHandle	Mesh/PolyConnectivity.hh	/^  typedef FaceHandle      FHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FIXEDNONMANIFOLD	Mesh/Status.hh	/^  FIXEDNONMANIFOLD      = 128,  \/\/\/< Item was non-two-manifold and had to be fixed$/;"	e	enum:OpenMesh::Attributes::StatusBits
FIter	Mesh/PolyConnectivity.hh	/^  typedef FaceIter      FIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FPropHandleT	Utils/Property.hh	/^  explicit FPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::FPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
FPropHandleT	Utils/Property.hh	/^  explicit FPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::FPropHandleT	access:public	signature:(int _idx=-1)
FPropHandleT	Utils/Property.hh	/^struct FPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
FVIter	Mesh/PolyConnectivity.hh	/^  typedef FaceVertexIter        FVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
Face	Mesh/ArrayItems.hh	/^  class Face$/;"	c	struct:OpenMesh::ArrayItems	access:public
Face	Mesh/ArrayKernel.hh	/^    faces_.push_back(Face());$/;"	p	signature:()
Face	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Face       Face;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Face	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Face      Face;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Face	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Face               Face;$/;"	t	class:OpenMesh::TriMeshT	access:public
FaceAttributes	Mesh/Traits.hh	86;"	d
FaceColor	IO/Options.hh	/^      FaceColor      = 0x0200, \/\/\/< Has (r) \/ store (w) face colors$/;"	e	enum:OpenMesh::IO::Options::Flag
FaceColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<Color>               FaceColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
FaceContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<Face>                  FaceContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
FaceData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::FaceData      FaceData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
FaceData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template FaceT<ITraits, Refs>        FaceData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
FaceEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceEdgeIterT<This>              FaceEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FaceEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceEdgeIter              FaceEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
FaceEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceEdgeIter             FaceEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:()
FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT(const FaceEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT& _rhs)
FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
FaceEdgeIterT	Mesh/CirculatorsT.hh	/^class FaceEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
FaceFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceFaceIterT<This>              FaceFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FaceFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceFaceIter              FaceFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
FaceFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceFaceIter             FaceFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:()
FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT(const FaceFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT& _rhs)
FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
FaceFaceIterT	Mesh/CirculatorsT.hh	/^class FaceFaceIterT$/;"	c	namespace:OpenMesh::Iterators
FaceHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceHalfedgeIterT<This>          FaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FaceHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceHalfedgeIter          FaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
FaceHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceHalfedgeIter         FaceHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:()
FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT(const FaceHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT& _rhs)
FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^class FaceHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
FaceHandle	IO/reader/OMReader.cc	/^          _bi.set_color(FaceHandle(fidx), v3uc);$/;"	p	file:	signature:(fidx)
FaceHandle	IO/reader/OMReader.cc	/^          _bi.set_normal(FaceHandle(fidx), v3f);$/;"	p	file:	signature:(fidx)
FaceHandle	IO/writer/OBJWriter.cc	/^    _be.get_vhandles(FaceHandle(i), vhandles);$/;"	p	file:	signature:(i)
FaceHandle	IO/writer/OFFWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	p	file:	signature:(i)
FaceHandle	IO/writer/PLYWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	p	file:	signature:(i)
FaceHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::FaceHandle              FaceHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
FaceHandle	Mesh/ArrayKernelT.cc	/^  for (i=0; i<nF; ++i) fh_map.push_back(FaceHandle(i));$/;"	p	file:	signature:(i)
FaceHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::FaceHandle              FaceHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
FaceHandle	Mesh/Handles.hh	/^  explicit FaceHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::FaceHandle	access:public	signature:(int _idx=-1)
FaceHandle	Mesh/Handles.hh	/^struct FaceHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
FaceHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceHandle         FaceHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
FaceHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceHandle         FaceHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
FaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::FaceHandle, ArrayKernel, &This::has_face_status, &This::n_faces> FaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceIter                   FaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
FaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceIter           FaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
FaceNormal	IO/Options.hh	/^      FaceNormal     = 0x0100, \/\/\/< Has (r) \/ store (w) face normals$/;"	e	enum:OpenMesh::IO::Options::Flag
FaceNormalsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<Normal>              FaceNormalsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
FaceStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef FPropHandleT<StatusInfo>          FaceStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
FaceStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<FaceHandle>        FaceStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
FaceT	Mesh/Traits.hh	/^    template <class Base, class Refs> class FaceT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,FaceT	access:public
FaceTexCoord	IO/Options.hh	/^      FaceTexCoord   = 0x0400, \/\/\/< Has (r) \/ store (w) face texture coordinates$/;"	e	enum:OpenMesh::IO::Options::Flag
FaceTextureIndexPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<TextureIndex>        FaceTextureIndexPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
FaceTraits	Mesh/Traits.hh	101;"	d
FaceVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceVertexIterT<This>            FaceVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
FaceVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceVertexIter            FaceVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
FaceVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceVertexIter           FaceVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:()
FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT(const FaceVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT& _rhs)
FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
FaceVertexIterT	Mesh/CirculatorsT.hh	/^class FaceVertexIterT$/;"	c	namespace:OpenMesh::Iterators
False	Utils/GenProg.hh	/^typedef Bool2Type<false> False;$/;"	t	namespace:OpenMesh::GenProg
FinalMeshItemsT	Mesh/FinalMeshItemsT.hh	/^struct FinalMeshItemsT$/;"	s	namespace:OpenMesh
Flag	IO/Options.hh	/^  enum Flag {$/;"	g	class:OpenMesh::IO::Options	access:public
Float_128	IO/OMFormat.hh	/^      Float_128 = 0x02  \/\/ 16 bytes for long double (an assumption!)$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Float_Size
Float_32	IO/OMFormat.hh	/^      Float_32  = 0x00, \/\/  4 bytes for float$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Float_Size
Float_64	IO/OMFormat.hh	/^      Float_64  = 0x01, \/\/  8 bytes for double$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Float_Size
Float_Size	IO/OMFormat.hh	/^    enum Float_Size {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
FunctorRestore	IO/SR_binary_spec.hh	/^  FunctorRestore( std::istream& _is, bool _swap) : is_(_is), swap_(_swap) { }$/;"	f	struct:OpenMesh::IO::FunctorRestore	access:public	signature:( std::istream& _is, bool _swap)
FunctorRestore	IO/SR_binary_spec.hh	/^struct FunctorRestore {$/;"	s	namespace:OpenMesh::IO
FunctorStore	IO/SR_binary_spec.hh	/^  FunctorStore( std::ostream& _os, bool _swap) : os_(_os), swap_(_swap) { }$/;"	f	struct:OpenMesh::IO::FunctorStore	access:public	signature:( std::ostream& _os, bool _swap)
FunctorStore	IO/SR_binary_spec.hh	/^struct FunctorStore {$/;"	s	namespace:OpenMesh::IO
GenProg	Utils/GenProg.hh	/^namespace GenProg  {$/;"	n	namespace:OpenMesh
GenericIteratorT	Mesh/IteratorsT.hh	/^        GenericIteratorT()$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
GenericIteratorT	Mesh/IteratorsT.hh	/^        GenericIteratorT(mesh_ref _mesh, value_handle _hnd, bool _skip=false)$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:(mesh_ref _mesh, value_handle _hnd, bool _skip=false)
GenericIteratorT	Mesh/IteratorsT.hh	/^class GenericIteratorT {$/;"	c	namespace:OpenMesh::Iterators
Geometry	Geometry/QuadricT.hh	/^namespace Geometry { \/\/BEGIN_NS_GEOMETRY$/;"	n	namespace:OpenMesh
HAttribs	Mesh/AttribKernelT.hh	/^    HAttribs = MeshItems::HAttribs,$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
HAttribs	Mesh/FinalMeshItemsT.hh	/^    HAttribs = Traits::HalfedgeAttributes,$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
HHandle	Mesh/PolyConnectivity.hh	/^  typedef HalfedgeHandle  HHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
HIDDEN	Mesh/Status.hh	/^  HIDDEN                = 8,    \/\/\/< Item is hidden.$/;"	e	enum:OpenMesh::Attributes::StatusBits
HIter	Mesh/PolyConnectivity.hh	/^  typedef HalfedgeIter  HIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
HPropHandleT	Utils/Property.hh	/^  explicit HPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::HPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
HPropHandleT	Utils/Property.hh	/^  explicit HPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::HPropHandleT	access:public	signature:(int _idx=-1)
HPropHandleT	Utils/Property.hh	/^struct HPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
Halfedge	Mesh/ArrayItems.hh	/^  typedef Halfedge_with_prev                Halfedge;$/;"	t	struct:OpenMesh::ArrayItems	access:public
Halfedge	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Halfedge   Halfedge;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Halfedge	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Halfedge  Halfedge;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Halfedge	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Halfedge           Halfedge;$/;"	t	class:OpenMesh::TriMeshT	access:public
HalfedgeAttributes	Mesh/Traits.hh	/^  HalfedgeAttributes(Attributes::PrevHalfedge);$/;"	p	struct:OpenMesh::DefaultTraits	access:public	signature:(Attributes::PrevHalfedge)
HalfedgeAttributes	Mesh/Traits.hh	80;"	d
HalfedgeColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<Color>               HalfedgeColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
HalfedgeData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::HalfedgeData  HalfedgeData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
HalfedgeData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template HalfedgeT<ITraits, Refs>    HalfedgeData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
HalfedgeHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::HalfedgeHandle          HalfedgeHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
HalfedgeHandle	Mesh/ArrayKernelT.cc	/^  for (i=0; i<nH; ++i) hh_map.push_back(HalfedgeHandle(i));$/;"	p	file:	signature:(i)
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
HalfedgeHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::HalfedgeHandle          HalfedgeHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
HalfedgeHandle	Mesh/Handles.hh	/^  explicit HalfedgeHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::HalfedgeHandle	access:public	signature:(int _idx=-1)
HalfedgeHandle	Mesh/Handles.hh	/^struct HalfedgeHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
HalfedgeHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
HalfedgeHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
HalfedgeHandle	Mesh/gen/circulators_template.hh	/^  typedef typename Mesh::HalfedgeHandle   HalfedgeHandle;$/;"	t	class:CirculatorT	access:public
HalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::HalfedgeHandle, ArrayKernel, &This::has_halfedge_status, &This::n_halfedges> HalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
HalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::HalfedgeIter               HalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
HalfedgeNormalsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<Normal>              HalfedgeNormalsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
HalfedgeStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef HPropHandleT<StatusInfo>          HalfedgeStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
HalfedgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<HalfedgeHandle>    HalfedgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
HalfedgeT	Mesh/Traits.hh	/^    template <class Base, class Refs> class HalfedgeT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,HalfedgeT	access:public
HalfedgeTexCoords1DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<TexCoord1D>          HalfedgeTexCoords1DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
HalfedgeTexCoords2DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<TexCoord2D>          HalfedgeTexCoords2DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
HalfedgeTexCoords3DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<TexCoord3D>          HalfedgeTexCoords3DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
HalfedgeTraits	Mesh/Traits.hh	93;"	d
Halfedge_with_prev	Mesh/ArrayItems.hh	/^  class Halfedge_with_prev : public Halfedge_without_prev$/;"	c	struct:OpenMesh::ArrayItems	inherits:Halfedge_without_prev	access:public
Halfedge_without_prev	Mesh/ArrayItems.hh	/^  class Halfedge_without_prev$/;"	c	struct:OpenMesh::ArrayItems	access:public
Handle	Mesh/ArrayKernel.hh	/^        erase(Handle(i));$/;"	p	signature:(i)
Handle	Mesh/ArrayKernel.hh	/^      Base::kernel_.push_bit_mask(Handle(), Base::bit_mask_);$/;"	p	signature:()
HandleContainer	Mesh/ArrayKernel.hh	/^    typedef std::vector<Handle>             HandleContainer;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:protected
HasPrevHalfedge	Mesh/ArrayItems.hh	/^  typedef GenProg::Bool2Type<true>          HasPrevHalfedge;$/;"	t	struct:OpenMesh::ArrayItems	access:public
Header	IO/OMFormat.hh	/^    struct Header \/\/ 16 bits long$/;"	s	struct:OpenMesh::IO::OMFormat::Chunk	access:public
Header	IO/OMFormat.hh	/^  struct Header$/;"	s	namespace:OpenMesh::IO::OMFormat
Header	IO/reader/OMReader.hh	/^  typedef OMFormat::Header              Header;$/;"	t	class:OpenMesh::IO::_OMReader_	access:private
IF	Utils/GenProg.hh	/^class IF $/;"	c	namespace:OpenMesh::GenProg
IF	Utils/GenProg.hh	/^struct IF { typedef Then Result; };$/;"	s	namespace:OpenMesh::GenProg
IF	Utils/GenProg.hh	/^struct IF<false, Then, Else> { typedef Else Result; };$/;"	s	namespace:OpenMesh::GenProg
INT_TYPE	System/mostream.hh	101;"	d
IO	IO/BinaryHelper.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/BinaryHelper.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/IOInstances.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/IOManager.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/IOManager.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/MeshIO.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
IO	IO/OFFFormat.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
IO	IO/OMFormat.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/OMFormat.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
IO	IO/OMFormatT.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/Options.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
IO	IO/SR_binary.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/SR_binary_spec.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/SR_rbo.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/SR_types.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/StoreRestore.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/exporter/BaseExporter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/exporter/ExporterT.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/importer/BaseImporter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/importer/ImporterT.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/reader/BaseReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/reader/BaseReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/reader/OBJReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/reader/OBJReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/reader/OFFReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/reader/OFFReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/reader/OMReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/reader/OMReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/reader/PLYReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/reader/PLYReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/reader/STLReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/reader/STLReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/writer/BaseWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/writer/BaseWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/writer/OBJWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/writer/OBJWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/writer/OFFWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/writer/OFFWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/writer/OMWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/writer/OMWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/writer/PLYWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/writer/PLYWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IO	IO/writer/STLWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
IO	IO/writer/STLWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
IOManager	IO/IOManager.cc	/^_IOManager_& IOManager()$/;"	f	namespace:OpenMesh::IO	signature:()
IOManager	IO/IOManager.hh	/^  friend OPENMESHDLLEXPORT _IOManager_& IOManager();$/;"	p	class:OpenMesh::IO::_IOManager_	access:friend	signature:()
IOManager	IO/IOManager.hh	/^OPENMESHDLLEXPORT _IOManager_& IOManager();$/;"	p	namespace:OpenMesh::IO	signature:()
ITraits	Mesh/FinalMeshItemsT.hh	/^  class ITraits$/;"	c	struct:OpenMesh::FinalMeshItemsT	access:public
ImporterT	IO/importer/ImporterT.hh	/^  ImporterT(Mesh& _mesh) : mesh_(_mesh), halfedgeNormals_() {}$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(Mesh& _mesh)
ImporterT	IO/importer/ImporterT.hh	/^class ImporterT : public BaseImporter$/;"	c	namespace:OpenMesh::IO	inherits:BaseImporter
Instance	Utils/SingletonT.hh	/^  static T& Instance()$/;"	f	class:OpenMesh::SingletonT	access:public	signature:()
Int2Type	Utils/GenProg.hh	/^template <int i>  struct Int2Type  { enum { my_int = i }; };$/;"	s	namespace:OpenMesh::GenProg
Integer_16	IO/OMFormat.hh	/^      Integer_16  = 0x01, \/\/ 2 bytes for short$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
Integer_32	IO/OMFormat.hh	/^      Integer_32  = 0x02, \/\/ 4 bytes for long$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
Integer_64	IO/OMFormat.hh	/^      Integer_64  = 0x03  \/\/ 8 bytes for long long$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
Integer_8	IO/OMFormat.hh	/^      Integer_8   = 0x00, \/\/ 1 byte for (unsigned) char$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
Integer_Size	IO/OMFormat.hh	/^    enum Integer_Size {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
InvalidEdgeHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::EdgeHandle      PolyConnectivity::InvalidEdgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
InvalidEdgeHandle	Mesh/PolyConnectivity.hh	/^  static const EdgeHandle                             InvalidEdgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
InvalidFaceHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::FaceHandle      PolyConnectivity::InvalidFaceHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
InvalidFaceHandle	Mesh/PolyConnectivity.hh	/^  static const FaceHandle                             InvalidFaceHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
InvalidHalfedgeHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::HalfedgeHandle  PolyConnectivity::InvalidHalfedgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
InvalidHalfedgeHandle	Mesh/PolyConnectivity.hh	/^  static const HalfedgeHandle                         InvalidHalfedgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
InvalidVertexHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::VertexHandle    PolyConnectivity::InvalidVertexHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
InvalidVertexHandle	Mesh/PolyConnectivity.hh	/^  static const VertexHandle                           InvalidVertexHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
IsPolyMesh	Mesh/PolyMeshT.hh	/^  enum { IsPolyMesh = 1 };$/;"	e	enum:OpenMesh::PolyMeshT::__anon10
IsPolyMesh	Mesh/TriMeshT.hh	/^  enum { IsPolyMesh = 0 };$/;"	e	enum:OpenMesh::TriMeshT::__anon8
IsTriMesh	Mesh/PolyMeshT.hh	/^  enum { IsTriMesh  = 0 };$/;"	e	enum:OpenMesh::PolyMeshT::__anon11
IsTriMesh	Mesh/TriMeshT.hh	/^  enum { IsTriMesh  = 1 };$/;"	e	enum:OpenMesh::TriMeshT::__anon9
IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT() $/;"	f	class:IteratorT	access:public	signature:()
IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT(const IteratorT& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const IteratorT& _rhs)
IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT(const NonConstIterT<Mesh>& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const NonConstIterT<Mesh>& _rhs)
IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT(mesh_ref _mesh, value_handle _hnd, bool _skip=false) $/;"	f	class:IteratorT	access:public	signature:(mesh_ref _mesh, value_handle _hnd, bool _skip=false)
IteratorT	Mesh/gen/iterators_template.hh	/^class IteratorT$/;"	c
IteratorT::IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT() $/;"	f	class:IteratorT	access:public	signature:()
IteratorT::IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT(const IteratorT& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const IteratorT& _rhs)
IteratorT::IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT(const NonConstIterT<Mesh>& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const NonConstIterT<Mesh>& _rhs)
IteratorT::IteratorT	Mesh/gen/iterators_template.hh	/^  IteratorT(mesh_ref _mesh, value_handle _hnd, bool _skip=false) $/;"	f	class:IteratorT	access:public	signature:(mesh_ref _mesh, value_handle _hnd, bool _skip=false)
IteratorT::__decrement	Mesh/gen/iterators_template.hh	/^      hnd_.__decrement();$/;"	p	signature:()
IteratorT::__decrement	Mesh/gen/iterators_template.hh	/^  { hnd_.__decrement(); if (skip_bits_) skip_bwd(); return *this; }$/;"	p	signature:()
IteratorT::__increment	Mesh/gen/iterators_template.hh	/^      hnd_.__increment();$/;"	p	signature:()
IteratorT::__increment	Mesh/gen/iterators_template.hh	/^  { hnd_.__increment(); if (skip_bits_) skip_fwd(); return *this; }$/;"	p	signature:()
IteratorT::disable_skipping	Mesh/gen/iterators_template.hh	/^  void disable_skipping() { skip_bits_ = 0; }$/;"	f	class:IteratorT	access:public	signature:()
IteratorT::enable_skipping	Mesh/gen/iterators_template.hh	/^  void enable_skipping()$/;"	f	class:IteratorT	access:public	signature:()
IteratorT::handle	Mesh/gen/iterators_template.hh	/^  value_handle handle() const { return hnd_; }$/;"	f	class:IteratorT	access:public	signature:() const
IteratorT::hnd_	Mesh/gen/iterators_template.hh	/^  value_handle  hnd_;$/;"	m	class:IteratorT	access:private
IteratorT::mesh_	Mesh/gen/iterators_template.hh	/^  mesh_ptr      mesh_;$/;"	m	class:IteratorT	access:private
IteratorT::mesh_ptr	Mesh/gen/iterators_template.hh	/^  typedef Mesh*                mesh_ptr;$/;"	t	class:IteratorT	access:public
IteratorT::mesh_ptr	Mesh/gen/iterators_template.hh	/^  typedef const Mesh*          mesh_ptr;$/;"	t	class:IteratorT	access:public
IteratorT::mesh_ref	Mesh/gen/iterators_template.hh	/^  typedef Mesh&                mesh_ref;$/;"	t	class:IteratorT	access:public
IteratorT::mesh_ref	Mesh/gen/iterators_template.hh	/^  typedef const Mesh&          mesh_ref;$/;"	t	class:IteratorT	access:public
IteratorT::operator !=	Mesh/gen/iterators_template.hh	/^  bool operator!=(const IteratorT& _rhs) const $/;"	f	class:IteratorT	access:public	signature:(const IteratorT& _rhs) const
IteratorT::operator *	Mesh/gen/iterators_template.hh	/^  reference operator*()  const { return mesh_->deref(hnd_); }$/;"	f	class:IteratorT	access:public	signature:() const
IteratorT::operator ++	Mesh/gen/iterators_template.hh	/^  IteratorT& operator++() $/;"	f	class:IteratorT	access:public	signature:()
IteratorT::operator --	Mesh/gen/iterators_template.hh	/^  IteratorT& operator--() $/;"	f	class:IteratorT	access:public	signature:()
IteratorT::operator ->	Mesh/gen/iterators_template.hh	/^  pointer   operator->() const { return &(mesh_->deref(hnd_)); }$/;"	f	class:IteratorT	access:public	signature:() const
IteratorT::operator =	Mesh/gen/iterators_template.hh	/^  IteratorT& operator=(const IteratorT<Mesh>& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const IteratorT<Mesh>& _rhs)
IteratorT::operator =	Mesh/gen/iterators_template.hh	/^  IteratorT& operator=(const NonConstIterT<Mesh>& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const NonConstIterT<Mesh>& _rhs)
IteratorT::operator ==	Mesh/gen/iterators_template.hh	/^  bool operator==(const IteratorT& _rhs) const $/;"	f	class:IteratorT	access:public	signature:(const IteratorT& _rhs) const
IteratorT::operator value_handle	Mesh/gen/iterators_template.hh	/^  operator value_handle() const { return hnd_; }$/;"	f	class:IteratorT	access:public	signature:() const
IteratorT::pointer	Mesh/gen/iterators_template.hh	/^  typedef const value_type*    pointer;$/;"	t	class:IteratorT	access:public
IteratorT::pointer	Mesh/gen/iterators_template.hh	/^  typedef value_type*          pointer;$/;"	t	class:IteratorT	access:public
IteratorT::reference	Mesh/gen/iterators_template.hh	/^  typedef const value_type&    reference;$/;"	t	class:IteratorT	access:public
IteratorT::reference	Mesh/gen/iterators_template.hh	/^  typedef value_type&          reference;$/;"	t	class:IteratorT	access:public
IteratorT::set_deleted	Mesh/gen/iterators_template.hh	/^      status.set_deleted(true);$/;"	p	signature:(true)
IteratorT::set_hidden	Mesh/gen/iterators_template.hh	/^      status.set_hidden(true);$/;"	p	signature:(true)
IteratorT::skip_bits_	Mesh/gen/iterators_template.hh	/^  unsigned int  skip_bits_;$/;"	m	class:IteratorT	access:private
IteratorT::skip_bwd	Mesh/gen/iterators_template.hh	/^  void skip_bwd() $/;"	f	class:IteratorT	access:private	signature:()
IteratorT::skip_fwd	Mesh/gen/iterators_template.hh	/^  void skip_fwd() $/;"	f	class:IteratorT	access:private	signature:()
IteratorT::status	Mesh/gen/iterators_template.hh	/^      Attributes::StatusInfo status;$/;"	l
IteratorT::value_handle	Mesh/gen/iterators_template.hh	/^  typedef TargetHandle         value_handle;$/;"	t	class:IteratorT	access:public
IteratorT::value_type	Mesh/gen/iterators_template.hh	/^  typedef TargetType           value_type;$/;"	t	class:IteratorT	access:public
Iterators	Mesh/CirculatorsT.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
Iterators	Mesh/IteratorsT.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
Iterators	Mesh/gen/circulators_header.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
Iterators	Mesh/gen/iterators_header.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
Ka	IO/reader/OBJReader.hh	/^    const Vec3f& Ka( void ) const { return Ka_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
Ka_	IO/reader/OBJReader.hh	/^    Vec3f Ka_;                          bool Ka_is_set_; \/\/ ambient$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
Ka_is_set_	IO/reader/OBJReader.hh	/^    Vec3f Ka_;                          bool Ka_is_set_; \/\/ ambient$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
Kd	IO/reader/OBJReader.hh	/^    const Vec3f& Kd( void ) const { return Kd_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
Kd_	IO/reader/OBJReader.hh	/^    Vec3f Kd_;                          bool Kd_is_set_; \/\/ diffuse$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
Kd_is_set_	IO/reader/OBJReader.hh	/^    Vec3f Kd_;                          bool Kd_is_set_; \/\/ diffuse$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
KernelConstEdgeIter	Mesh/ArrayKernel.hh	/^  typedef EdgeContainer::const_iterator      KernelConstEdgeIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
KernelConstFaceIter	Mesh/ArrayKernel.hh	/^  typedef FaceContainer::const_iterator      KernelConstFaceIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
KernelConstVertexIter	Mesh/ArrayKernel.hh	/^  typedef VertexContainer::const_iterator    KernelConstVertexIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
KernelEdgeIter	Mesh/ArrayKernel.hh	/^  typedef EdgeContainer::iterator            KernelEdgeIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
KernelFaceIter	Mesh/ArrayKernel.hh	/^  typedef FaceContainer::iterator            KernelFaceIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
KernelVertexIter	Mesh/ArrayKernel.hh	/^  typedef VertexContainer::iterator          KernelVertexIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
Ks	IO/reader/OBJReader.hh	/^    const Vec3f& Ks( void ) const { return Ks_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
Ks_	IO/reader/OBJReader.hh	/^    Vec3f Ks_;                          bool Ks_is_set_; \/\/ specular$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
Ks_is_set_	IO/reader/OBJReader.hh	/^    Vec3f Ks_;                          bool Ks_is_set_; \/\/ specular$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
LINE_LEN	IO/reader/OFFReader.cc	43;"	d	file:
LINE_LEN	IO/reader/PLYReader.cc	42;"	d	file:
LOCKED	Mesh/Status.hh	/^  LOCKED                = 2,    \/\/\/< Item is locked.$/;"	e	enum:OpenMesh::Attributes::StatusBits
LOOPSCHEMEMASKT_HH	Geometry/LoopSchemeMaskT.hh	43;"	d
LSB	IO/Options.hh	/^      LSB            = 0x0004, \/\/\/< Assume little endian byte ordering$/;"	e	enum:OpenMesh::IO::Options::Flag
LSB	Utils/Endian.hh	/^    LSB = 1, \/\/\/< Little endian (Intel family and clones)$/;"	e	enum:OpenMesh::Endian::Type
LoopSchemeMaskT	Geometry/LoopSchemeMaskT.hh	/^  LoopSchemeMaskT()$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:public	signature:()
LoopSchemeMaskT	Geometry/LoopSchemeMaskT.hh	/^class LoopSchemeMaskT$/;"	c	namespace:OpenMesh
MATHDEFS_HH	Geometry/MathDefs.hh	43;"	d
MPropHandleT	Utils/Property.hh	/^  explicit MPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::MPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
MPropHandleT	Utils/Property.hh	/^  explicit MPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::MPropHandleT	access:public	signature:(int _idx=-1)
MPropHandleT	Utils/Property.hh	/^struct MPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
MSB	IO/Options.hh	/^      MSB            = 0x0002, \/\/\/< Assume big endian byte ordering$/;"	e	enum:OpenMesh::IO::Options::Flag
MSB	Utils/Endian.hh	/^    MSB      \/\/\/< big endian (Motorola's 68x family, DEC Alpha, MIPS)$/;"	e	enum:OpenMesh::Endian::Type
M_PI	Geometry/MathDefs.hh	49;"	d
Material	IO/reader/OBJReader.hh	/^    Material() { cleanup(); }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:()
Material	IO/reader/OBJReader.hh	/^  class Material$/;"	c	class:OpenMesh::IO::_OBJReader_	access:private
MaterialList	IO/reader/OBJReader.hh	/^  typedef std::map<std::string, Material> MaterialList;$/;"	t	class:OpenMesh::IO::_OBJReader_	access:private
MergeTraits	Mesh/Traits.hh	/^template <class _Traits1, class _Traits2> struct MergeTraits$/;"	s	namespace:OpenMesh
Mesh	Mesh/PolyMesh_ArrayKernelT.hh	/^  typedef PolyMeshT<AttribKernel>                     Mesh;$/;"	t	struct:OpenMesh::PolyMesh_ArrayKernel_GeneratorT	access:public
Mesh	Mesh/TriMesh_ArrayKernelT.hh	/^  typedef TriMeshT<AttribKernel>                      Mesh;$/;"	t	struct:OpenMesh::TriMesh_ArrayKernel_GeneratorT	access:public
Mesh	Utils/AutoPropertyHandleT.hh	/^  typedef Mesh_                             Mesh;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
MeshItems	Mesh/PolyMesh_ArrayKernelT.hh	/^  typedef FinalMeshItemsT<Traits, false>              MeshItems;$/;"	t	struct:OpenMesh::PolyMesh_ArrayKernel_GeneratorT	access:public
MeshItems	Mesh/TriMesh_ArrayKernelT.hh	/^  typedef FinalMeshItemsT<Traits, true>               MeshItems;$/;"	t	struct:OpenMesh::TriMesh_ArrayKernel_GeneratorT	access:public
N	Utils/Property.hh	/^    size_t N = data_.size() \/ 8;$/;"	l
NEW_STYLE	IO/writer/OMWriter.cc	319;"	d	file:
NEW_STYLE	IO/writer/OMWriter.cc	346;"	d	file:
NEW_STYLE	IO/writer/OMWriter.cc	354;"	d	file:
NONE	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	e	enum:OpenMesh::IO::_STLReader_::STL_Type
Noncopyable	Utils/Noncopyable.hh	/^  Noncopyable( const Noncopyable& );$/;"	p	class:OpenMesh::Utils::Noncopyable	access:private	signature:( const Noncopyable& )
Noncopyable	Utils/Noncopyable.hh	/^  Noncopyable() { }$/;"	f	class:OpenMesh::Utils::Noncopyable	access:public	signature:()
Noncopyable	Utils/Noncopyable.hh	/^class Noncopyable$/;"	c	namespace:OpenMesh::Utils
None	Mesh/Attributes.hh	/^  None          = 0,  \/\/\/< Clear all attribute bits$/;"	e	enum:OpenMesh::Attributes::AttributeBits
Normal	IO/importer/ImporterT.hh	/^  typedef typename Mesh::Normal      Normal;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
Normal	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Normal        Normal;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Normal	Mesh/Attributes.hh	/^  Normal        = 1,  \/\/\/< Add normals to mesh item (vertices\/faces)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
Normal	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::Normal           Normal;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
Normal	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Normal          Normal;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
Normal	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Normal    Normal;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Normal	Mesh/Traits.hh	/^    typedef typename T1::Normal   Normal;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
Normal	Mesh/Traits.hh	/^  typedef Vec3f  Normal;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
Normal	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Normal             Normal;$/;"	t	class:OpenMesh::TriMeshT	access:public
NormalConeT	Geometry/NormalConeT.cc	/^NormalConeT(const Vec3& _center_normal, Scalar _angle)$/;"	f	class:OpenMesh::NormalConeT	signature:(const Vec3& _center_normal, Scalar _angle)
NormalConeT	Geometry/NormalConeT.hh	/^  NormalConeT() {}$/;"	f	class:OpenMesh::NormalConeT	access:public	signature:()
NormalConeT	Geometry/NormalConeT.hh	/^  NormalConeT(const Vec3& _center_normal, Scalar _angle=0.0);$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const Vec3& _center_normal, Scalar _angle=0.0)
NormalConeT	Geometry/NormalConeT.hh	/^class NormalConeT$/;"	c	namespace:OpenMesh
OBJReader	IO/reader/OBJReader.cc	/^_OBJReader_& OBJReader() { return __OBJReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OBJReader	IO/reader/OBJReader.hh	/^OPENMESHDLLEXPORT _OBJReader_& OBJReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OBJReaderInstance	IO/IOInstances.hh	/^static BaseReader* OBJReaderInstance = &OBJReader();$/;"	m	namespace:OpenMesh::IO
OBJWriter	IO/writer/OBJWriter.cc	/^_OBJWriter_& OBJWriter() { return __OBJWriterinstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OBJWriter	IO/writer/OBJWriter.hh	/^OPENMESHDLLEXPORT _OBJWriter_& OBJWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OBJWriterInstance	IO/IOInstances.hh	/^static BaseWriter* OBJWriterInstance = &OBJWriter();$/;"	m	namespace:OpenMesh::IO
OFFFormat	IO/OFFFormat.hh	/^struct OPENMESHDLLEXPORT OFFFormat$/;"	s	namespace:OpenMesh::IO
OFFReader	IO/reader/OFFReader.cc	/^_OFFReader_&  OFFReader() { return __OFFReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OFFReader	IO/reader/OFFReader.hh	/^OPENMESHDLLEXPORT _OFFReader_& OFFReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OFFReaderInstance	IO/IOInstances.hh	/^static BaseReader* OFFReaderInstance = &OFFReader();$/;"	m	namespace:OpenMesh::IO
OFFWriter	IO/writer/OFFWriter.cc	/^_OFFWriter_& OFFWriter() { return __OFFWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OFFWriter	IO/writer/OFFWriter.hh	/^OPENMESHDLLEXPORT _OFFWriter_& OFFWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OFFWriterInstance	IO/IOInstances.hh	/^static BaseWriter* OFFWriterInstance = &OFFWriter();$/;"	m	namespace:OpenMesh::IO
OFF_BITS	IO/OMFormat.hh	/^    static const int OFF_BITS     = SIZE_DIM      + OFF_DIM;    \/\/ 14$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OFF_DIM	IO/OMFormat.hh	/^    static const int OFF_DIM      = SIZE_FLOAT    + OFF_FLOAT;  \/\/ 11$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OFF_ENTITY	IO/OMFormat.hh	/^    static const int OFF_ENTITY   = SIZE_NAME     + OFF_NAME;   \/\/  3$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OFF_FLOAT	IO/OMFormat.hh	/^    static const int OFF_FLOAT    = SIZE_SIGNED   + OFF_SIGNED; \/\/ 10$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OFF_NAME	IO/OMFormat.hh	/^    static const int OFF_NAME     = SIZE_RESERVED + OFF_RESERVED; \/\/  2$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OFF_RESERVED	IO/OMFormat.hh	/^    static const int OFF_RESERVED = 0;                          \/\/  0$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OFF_SIGNED	IO/OMFormat.hh	/^    static const int OFF_SIGNED   = SIZE_TYPE     + OFF_TYPE;   \/\/  9$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OFF_TYPE	IO/OMFormat.hh	/^    static const int OFF_TYPE     = SIZE_ENTITY   + OFF_ENTITY; \/\/  5$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OMFormat	IO/OMFormat.cc	/^namespace OMFormat {$/;"	n	namespace:OpenMesh::IO	file:
OMFormat	IO/OMFormat.hh	/^namespace OMFormat {$/;"	n	namespace:OpenMesh::IO
OMReader	IO/reader/OMReader.cc	/^_OMReader_&  OMReader() { return __OMReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OMReader	IO/reader/OMReader.hh	/^OPENMESHDLLEXPORT _OMReader_&  OMReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OMReaderInstance	IO/IOInstances.hh	/^static BaseReader* OMReaderInstance  = &OMReader();$/;"	m	namespace:OpenMesh::IO
OMWriter	IO/writer/OMWriter.cc	/^_OMWriter_& OMWriter() { return __OMWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OMWriter	IO/writer/OMWriter.hh	/^OPENMESHDLLEXPORT _OMWriter_& OMWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OMWriterInstance	IO/IOInstances.hh	/^static BaseWriter* OMWriterInstance  = &OMWriter();$/;"	m	namespace:OpenMesh::IO
OM_CC	System/compiler.hh	101;"	d
OM_CC	System/compiler.hh	131;"	d
OM_CC	System/compiler.hh	143;"	d
OM_CC	System/compiler.hh	162;"	d
OM_CC_GCC	System/compiler.hh	116;"	d
OM_CC_ICC	System/compiler.hh	135;"	d
OM_CC_MIPS	System/compiler.hh	157;"	d
OM_CC_MSVC	System/compiler.hh	76;"	d
OM_CC_MSVC	System/compiler.hh	82;"	d
OM_CC_VERSION	System/compiler.hh	102;"	d
OM_CC_VERSION	System/compiler.hh	132;"	d
OM_CC_VERSION	System/compiler.hh	144;"	d
OM_CC_VERSION	System/compiler.hh	163;"	d
OM_DEBUG	System/compiler.hh	55;"	d
OM_FORCE_STATIC_CAST	Utils/PropertyContainer.hh	47;"	d
OM_GCC_MAJOR	System/compiler.hh	118;"	d
OM_GCC_MINOR	System/compiler.hh	119;"	d
OM_GCC_VERSION	System/compiler.hh	117;"	d
OM_GET_MAJ	System/config.h	66;"	d
OM_GET_MIN	System/config.h	67;"	d
OM_GET_VER	System/config.h	65;"	d
OM_INCLUDE_TEMPLATES	System/compiler.hh	124;"	d
OM_INCLUDE_TEMPLATES	System/compiler.hh	139;"	d
OM_INCLUDE_TEMPLATES	System/compiler.hh	161;"	d
OM_INCLUDE_TEMPLATES	System/compiler.hh	80;"	d
OM_INCLUDE_TEMPLATES	System/compiler.hh	86;"	d
OM_INCLUDE_TEMPLATES	System/compiler.hh	92;"	d
OM_MESHIO_HH	IO/MeshIO.hh	44;"	d
OM_MISSING_HEADER_LIMITS	IO/OMFormat.hh	59;"	d
OM_MISSING_HEADER_LIMITS	IO/OMFormat.hh	721;"	d
OM_Merge_Traits	Mesh/Traits.hh	221;"	d
OM_Merge_Traits_In_Template	Mesh/Traits.hh	229;"	d
OM_OUT_OF_CLASS_TEMPLATE	System/compiler.hh	122;"	d
OM_OUT_OF_CLASS_TEMPLATE	System/compiler.hh	137;"	d
OM_OUT_OF_CLASS_TEMPLATE	System/compiler.hh	159;"	d
OM_OUT_OF_CLASS_TEMPLATE	System/compiler.hh	78;"	d
OM_OUT_OF_CLASS_TEMPLATE	System/compiler.hh	84;"	d
OM_OUT_OF_CLASS_TEMPLATE	System/compiler.hh	90;"	d
OM_PARTIAL_SPECIALIZATION	System/compiler.hh	123;"	d
OM_PARTIAL_SPECIALIZATION	System/compiler.hh	138;"	d
OM_PARTIAL_SPECIALIZATION	System/compiler.hh	160;"	d
OM_PARTIAL_SPECIALIZATION	System/compiler.hh	79;"	d
OM_PARTIAL_SPECIALIZATION	System/compiler.hh	85;"	d
OM_PARTIAL_SPECIALIZATION	System/compiler.hh	91;"	d
OM_REENTRANT	System/compiler.hh	129;"	d
OM_REENTRANT	System/compiler.hh	141;"	d
OM_REENTRANT	System/compiler.hh	99;"	d
OM_STATIC_BUILD	System/compiler.hh	147;"	d
OM_STATIC_BUILD	System/compiler.hh	49;"	d
OM_STATIC_BUILD	System/compiler.hh	97;"	d
OM_TYPENAME	System/compiler.hh	121;"	d
OM_TYPENAME	System/compiler.hh	136;"	d
OM_TYPENAME	System/compiler.hh	158;"	d
OM_TYPENAME	System/compiler.hh	77;"	d
OM_TYPENAME	System/compiler.hh	83;"	d
OM_TYPENAME	System/compiler.hh	89;"	d
OM_USE_INTEL_COMPILER	System/compiler.hh	66;"	d
OM_VERSION	System/config.h	60;"	d
OPENMESHDLLEXPORT	System/OpenMeshDLLMacros.hh	51;"	d
OPENMESHDLLEXPORT	System/OpenMeshDLLMacros.hh	54;"	d
OPENMESHDLLEXPORT	System/OpenMeshDLLMacros.hh	58;"	d
OPENMESHDLLEXPORT	System/OpenMeshDLLMacros.hh	62;"	d
OPENMESHDLLEXPORTONLY	System/OpenMeshDLLMacros.hh	52;"	d
OPENMESHDLLEXPORTONLY	System/OpenMeshDLLMacros.hh	55;"	d
OPENMESHDLLEXPORTONLY	System/OpenMeshDLLMacros.hh	59;"	d
OPENMESHDLLEXPORTONLY	System/OpenMeshDLLMacros.hh	63;"	d
OPENMESH_ARRAY_ITEMS_HH	Mesh/ArrayItems.hh	43;"	d
OPENMESH_ARRAY_KERNEL_C	Mesh/ArrayKernelT.cc	42;"	d	file:
OPENMESH_ARRAY_KERNEL_HH	Mesh/ArrayKernel.hh	51;"	d
OPENMESH_ARRAY_KERNEL_TEMPLATES	Mesh/ArrayKernel.hh	853;"	d
OPENMESH_ATTRIBKERNEL_HH	Mesh/AttribKernelT.hh	43;"	d
OPENMESH_ATTRIBUTES_HH	Mesh/Attributes.hh	50;"	d
OPENMESH_ATTRIBUTE_STATUS_HH	Mesh/Status.hh	51;"	d
OPENMESH_AutoPropertyHandleT_HH	Utils/AutoPropertyHandleT.hh	43;"	d
OPENMESH_BASEMESH_HH	Mesh/BaseMesh.hh	51;"	d
OPENMESH_BASEPROPERTY_HH	Utils/BaseProperty.hh	43;"	d
OPENMESH_BASE_KERNEL_HH	Mesh/BaseKernel.hh	51;"	d
OPENMESH_BINARY_HELPER_HH	IO/BinaryHelper.hh	50;"	d
OPENMESH_CASTS_HH	Mesh/Casts.hh	43;"	d
OPENMESH_CIRCULATORS_HH	Mesh/CirculatorsT.hh	43;"	d
OPENMESH_CIRCULATORS_HH	Mesh/gen/circulators_header.hh	43;"	d
OPENMESH_COLOR_CAST_HH	Utils/color_cast.hh	51;"	d
OPENMESH_COMPILER_H	System/compiler.hh	44;"	d
OPENMESH_CONFIG_H	System/config.h	50;"	d
OPENMESH_GENPROG_HH	Utils/GenProg.hh	50;"	d
OPENMESH_GEOMETRY_CONFIG_HH	Geometry/Config.hh	50;"	d
OPENMESH_GEOMETRY_QUADRIC_HH	Geometry/QuadricT.hh	53;"	d
OPENMESH_HANDLES_HH	Mesh/Handles.hh	43;"	d
OPENMESH_IO_OFFFORMAT_HH	IO/OFFFormat.hh	44;"	d
OPENMESH_IO_OMFORMAT_CC	IO/OMFormatT.cc	50;"	d	file:
OPENMESH_IO_OMFORMAT_HH	IO/OMFormat.hh	44;"	d
OPENMESH_IO_OMFORMAT_TEMPLATES	IO/OMFormat.hh	725;"	d
OPENMESH_IO_OPTIONS_HH	IO/Options.hh	44;"	d
OPENMESH_ITERATORS_HH	Mesh/IteratorsT.hh	43;"	d
OPENMESH_ITERATORS_HH	Mesh/gen/iterators_header.hh	43;"	d
OPENMESH_MESH_ITEMS_HH	Mesh/FinalMeshItemsT.hh	43;"	d
OPENMESH_MOSTREAM_HH	System/mostream.hh	49;"	d
OPENMESH_NONCOPYABLE_HH	Utils/Noncopyable.hh	50;"	d
OPENMESH_NORMALCONE_C	Geometry/NormalConeT.cc	51;"	d	file:
OPENMESH_NORMALCONE_HH	Geometry/NormalConeT.hh	53;"	d
OPENMESH_NORMALCONE_TEMPLATES	Geometry/NormalConeT.hh	118;"	d
OPENMESH_OMSTREAMS_HH	System/omstream.hh	49;"	d
OPENMESH_PLANE3D_HH	Geometry/Plane3d.hh	50;"	d
OPENMESH_POLYCONNECTIVITY_HH	Mesh/PolyConnectivity.hh	43;"	d
OPENMESH_POLYMESHT_HH	Mesh/PolyMeshT.hh	51;"	d
OPENMESH_POLYMESH_C	Mesh/PolyMeshT.cc	50;"	d	file:
OPENMESH_POLYMESH_TEMPLATES	Mesh/PolyMeshT.hh	502;"	d
OPENMESH_POLY_MESH_ARRAY_KERNEL_HH	Mesh/PolyMesh_ArrayKernelT.hh	51;"	d
OPENMESH_PROPERTYCONTAINER	Utils/PropertyContainer.hh	43;"	d
OPENMESH_PROPERTY_HH	Utils/Property.hh	43;"	d
OPENMESH_SINGLETON_C	Utils/SingletonT.cc	50;"	d	file:
OPENMESH_SINGLETON_TEMPLATES	Utils/SingletonT.hh	143;"	d
OPENMESH_SR_BINARY_HH	IO/SR_binary.hh	50;"	d
OPENMESH_SR_BINARY_SPEC_HH	IO/SR_binary_spec.hh	50;"	d
OPENMESH_SR_RBO_HH	IO/SR_rbo.hh	50;"	d
OPENMESH_SR_STORE_HH	IO/SR_store.hh	50;"	d
OPENMESH_SR_TYPES_HH	IO/SR_types.hh	50;"	d
OPENMESH_STORERESTORE_HH	IO/StoreRestore.hh	50;"	d
OPENMESH_TRAITS_HH	Mesh/Traits.hh	55;"	d
OPENMESH_TRICONNECTIVITY_HH	Mesh/TriConnectivity.hh	43;"	d
OPENMESH_TRIMESH_ARRAY_KERNEL_HH	Mesh/TriMesh_ArrayKernelT.hh	51;"	d
OPENMESH_TRIMESH_C	Mesh/TriMeshT.cc	50;"	d	file:
OPENMESH_TRIMESH_HH	Mesh/TriMeshT.hh	51;"	d
OPENMESH_TRIMESH_TEMPLATES	Mesh/TriMeshT.hh	364;"	d
OPENMESH_UTILS_ENDIAN_HH	Utils/Endian.hh	51;"	d
OPENMESH_UTILS_RANDOMNUMBERGENERATOR_HH	Utils/RandomNumberGenerator.hh	52;"	d
OPENMESH_VECTORCAST_HH	Utils/vector_cast.hh	51;"	d
OPENMESH_VECTOR_HH	Geometry/VectorT.hh	57;"	d
OPENMESH_VECTOR_HH	Geometry/VectorT_inc.hh	48;"	d
OPENMESH_VECTOR_TRAITS_HH	Utils/vector_traits.hh	51;"	d
OnDeadReference	Utils/SingletonT.hh	/^  static void OnDeadReference()$/;"	f	class:OpenMesh::SingletonT	access:private	signature:()
OpenMesh	Geometry/LoopSchemeMaskT.hh	/^namespace OpenMesh$/;"	n
OpenMesh	Geometry/MathDefs.hh	/^namespace OpenMesh$/;"	n
OpenMesh	Geometry/NormalConeT.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	Geometry/NormalConeT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Geometry/Plane3d.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Geometry/QuadricT.hh	/^namespace OpenMesh { \/\/BEGIN_NS_OPENMESH$/;"	n
OpenMesh	Geometry/VectorT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/BinaryHelper.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/BinaryHelper.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/IOInstances.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/IOManager.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/IOManager.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/MeshIO.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/OFFFormat.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/OMFormat.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/OMFormat.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/OMFormatT.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/Options.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/SR_binary.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/SR_binary_spec.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/SR_rbo.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/SR_types.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/StoreRestore.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/exporter/BaseExporter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/exporter/ExporterT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/importer/BaseImporter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/importer/ImporterT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/reader/BaseReader.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/reader/BaseReader.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/reader/OBJReader.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/reader/OBJReader.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/reader/OFFReader.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/reader/OFFReader.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/reader/OMReader.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/reader/OMReader.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/reader/PLYReader.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/reader/PLYReader.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/reader/STLReader.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/reader/STLReader.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/writer/BaseWriter.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/writer/BaseWriter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/writer/OBJWriter.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/writer/OBJWriter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/writer/OFFWriter.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/writer/OFFWriter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/writer/OMWriter.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/writer/OMWriter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/writer/PLYWriter.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/writer/PLYWriter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	IO/writer/STLWriter.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	IO/writer/STLWriter.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/ArrayItems.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/ArrayKernel.cc	/^namespace OpenMesh$/;"	n	file:
OpenMesh	Mesh/ArrayKernel.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/ArrayKernelT.cc	/^namespace OpenMesh$/;"	n	file:
OpenMesh	Mesh/AttribKernelT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/Attributes.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/BaseKernel.cc	/^namespace OpenMesh$/;"	n	file:
OpenMesh	Mesh/BaseKernel.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/BaseMesh.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/Casts.hh	/^namespace OpenMesh $/;"	n
OpenMesh	Mesh/CirculatorsT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/FinalMeshItemsT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/Handles.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/IteratorsT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/PolyConnectivity.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	Mesh/PolyConnectivity.hh	/^namespace OpenMesh$/;"	n
OpenMesh	Mesh/PolyMeshT.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	Mesh/PolyMeshT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/PolyMesh_ArrayKernelT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/Status.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/Traits.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/TriConnectivity.cc	/^namespace OpenMesh$/;"	n	file:
OpenMesh	Mesh/TriConnectivity.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/TriMeshT.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	Mesh/TriMeshT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/TriMesh_ArrayKernelT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/gen/circulators_header.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Mesh/gen/iterators_header.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	System/mostream.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/AutoPropertyHandleT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/BaseProperty.cc	/^namespace OpenMesh$/;"	n	file:
OpenMesh	Utils/BaseProperty.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/Endian.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	Utils/Endian.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/GenProg.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/Noncopyable.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/Property.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/PropertyContainer.hh	/^namespace OpenMesh$/;"	n
OpenMesh	Utils/PropertyManager.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/RandomNumberGenerator.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	Utils/RandomNumberGenerator.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/SingletonT.cc	/^namespace OpenMesh {$/;"	n	file:
OpenMesh	Utils/SingletonT.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/color_cast.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/vector_cast.hh	/^namespace OpenMesh {$/;"	n
OpenMesh	Utils/vector_traits.hh	/^namespace OpenMesh {$/;"	n
OpenMesh::ArrayItems	Mesh/ArrayItems.hh	/^struct ArrayItems$/;"	s	namespace:OpenMesh
OpenMesh::ArrayItems::Edge	Mesh/ArrayItems.hh	/^  class Edge$/;"	c	struct:OpenMesh::ArrayItems	access:public
OpenMesh::ArrayItems::Edge::halfedges_	Mesh/ArrayItems.hh	/^    Halfedge  halfedges_[2];$/;"	m	class:OpenMesh::ArrayItems::Edge	access:private
OpenMesh::ArrayItems::Face	Mesh/ArrayItems.hh	/^  class Face$/;"	c	struct:OpenMesh::ArrayItems	access:public
OpenMesh::ArrayItems::Face::halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Face	access:private
OpenMesh::ArrayItems::Halfedge	Mesh/ArrayItems.hh	/^  typedef Halfedge_with_prev                Halfedge;$/;"	t	struct:OpenMesh::ArrayItems	access:public
OpenMesh::ArrayItems::Halfedge_with_prev	Mesh/ArrayItems.hh	/^  class Halfedge_with_prev : public Halfedge_without_prev$/;"	c	struct:OpenMesh::ArrayItems	inherits:Halfedge_without_prev	access:public
OpenMesh::ArrayItems::Halfedge_with_prev::prev_halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  prev_halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_with_prev	access:private
OpenMesh::ArrayItems::Halfedge_without_prev	Mesh/ArrayItems.hh	/^  class Halfedge_without_prev$/;"	c	struct:OpenMesh::ArrayItems	access:public
OpenMesh::ArrayItems::Halfedge_without_prev::face_handle_	Mesh/ArrayItems.hh	/^    FaceHandle      face_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_without_prev	access:private
OpenMesh::ArrayItems::Halfedge_without_prev::next_halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  next_halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_without_prev	access:private
OpenMesh::ArrayItems::Halfedge_without_prev::vertex_handle_	Mesh/ArrayItems.hh	/^    VertexHandle    vertex_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_without_prev	access:private
OpenMesh::ArrayItems::HasPrevHalfedge	Mesh/ArrayItems.hh	/^  typedef GenProg::Bool2Type<true>          HasPrevHalfedge;$/;"	t	struct:OpenMesh::ArrayItems	access:public
OpenMesh::ArrayItems::Vertex	Mesh/ArrayItems.hh	/^  class Vertex$/;"	c	struct:OpenMesh::ArrayItems	access:public
OpenMesh::ArrayItems::Vertex::halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Vertex	access:private
OpenMesh::ArrayKernel	Mesh/ArrayKernel.hh	/^class OPENMESHDLLEXPORT ArrayKernel : public BaseKernel, public ArrayItems$/;"	c	namespace:OpenMesh	inherits:BaseKernel,ArrayItems
OpenMesh::ArrayKernel::ArrayKernel	Mesh/ArrayKernel.cc	/^ArrayKernel::ArrayKernel()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
OpenMesh::ArrayKernel::ArrayKernel	Mesh/ArrayKernel.hh	/^  ArrayKernel();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::AutoStatusSetT	Mesh/ArrayKernel.hh	/^  class AutoStatusSetT : public StatusSetT<Handle>$/;"	c	class:OpenMesh::ArrayKernel	inherits:StatusSetT	access:public
OpenMesh::ArrayKernel::AutoStatusSetT::AutoStatusSetT	Mesh/ArrayKernel.hh	/^    AutoStatusSetT(ArrayKernel& _kernel)$/;"	f	class:OpenMesh::ArrayKernel::AutoStatusSetT	access:public	signature:(ArrayKernel& _kernel)
OpenMesh::ArrayKernel::AutoStatusSetT::Base	Mesh/ArrayKernel.hh	/^    typedef StatusSetT<Handle>              Base;$/;"	t	class:OpenMesh::ArrayKernel::AutoStatusSetT	access:private
OpenMesh::ArrayKernel::AutoStatusSetT::Base::bit_mask_	Mesh/ArrayKernel.hh	/^      Base::kernel_.push_bit_mask(Handle(), Base::bit_mask_);$/;"	m	class:OpenMesh::ArrayKernel::AutoStatusSetT::Base
OpenMesh::ArrayKernel::AutoStatusSetT::Handle	Mesh/ArrayKernel.hh	/^      Base::kernel_.push_bit_mask(Handle(), Base::bit_mask_);$/;"	p	signature:()
OpenMesh::ArrayKernel::AutoStatusSetT::~AutoStatusSetT	Mesh/ArrayKernel.hh	/^    ~AutoStatusSetT()$/;"	f	class:OpenMesh::ArrayKernel::AutoStatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::BitMaskContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<unsigned int>          BitMaskContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::Edge	Mesh/ArrayKernel.hh	/^    edges_.push_back(Edge());$/;"	p	signature:()
OpenMesh::ArrayKernel::EdgeContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<Edge>                  EdgeContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::EdgeHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::EdgeHandle              EdgeHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::EdgeStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef EPropHandleT<StatusInfo>          EdgeStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::EdgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<EdgeHandle>        EdgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::ExtEdgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<EdgeHandle>         ExtEdgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::ExtFaceStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<FaceHandle>         ExtFaceStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::ExtHalfedgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<HalfedgeHandle>     ExtHalfedgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::ExtStatusSetT	Mesh/ArrayKernel.hh	/^  class ExtStatusSetT : public AutoStatusSetT<Handle>$/;"	c	class:OpenMesh::ArrayKernel	inherits:AutoStatusSetT	access:public
OpenMesh::ArrayKernel::ExtStatusSetT::Base	Mesh/ArrayKernel.hh	/^    typedef AutoStatusSetT<Handle>          Base;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public
OpenMesh::ArrayKernel::ExtStatusSetT::Base::insert	Mesh/ArrayKernel.hh	/^        Base::insert(_hnd);$/;"	p	class:OpenMesh::ArrayKernel::ExtStatusSetT::Base	signature:(_hnd)
OpenMesh::ArrayKernel::ExtStatusSetT::ExtStatusSetT	Mesh/ArrayKernel.hh	/^    ExtStatusSetT(ArrayKernel& _kernel, unsigned int _capacity_hint = 0)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(ArrayKernel& _kernel, unsigned int _capacity_hint = 0)
OpenMesh::ArrayKernel::ExtStatusSetT::HandleContainer	Mesh/ArrayKernel.hh	/^    typedef std::vector<Handle>             HandleContainer;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:protected
OpenMesh::ArrayKernel::ExtStatusSetT::back	Mesh/ArrayKernel.hh	/^    inline Handle&                          back()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::ExtStatusSetT::back	Mesh/ArrayKernel.hh	/^    inline const Handle&                    back() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
OpenMesh::ArrayKernel::ExtStatusSetT::begin	Mesh/ArrayKernel.hh	/^    inline const_iterator                   begin() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
OpenMesh::ArrayKernel::ExtStatusSetT::begin	Mesh/ArrayKernel.hh	/^    inline iterator                         begin()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::ExtStatusSetT::clear	Mesh/ArrayKernel.hh	/^      handles_.clear();$/;"	p	signature:()
OpenMesh::ArrayKernel::ExtStatusSetT::clear	Mesh/ArrayKernel.hh	/^    inline void                             clear()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::ExtStatusSetT::const_iterator	Mesh/ArrayKernel.hh	/^                                            const_iterator;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public
OpenMesh::ArrayKernel::ExtStatusSetT::empty	Mesh/ArrayKernel.hh	/^    inline bool                             empty() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
OpenMesh::ArrayKernel::ExtStatusSetT::end	Mesh/ArrayKernel.hh	/^    inline const_iterator                   end() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
OpenMesh::ArrayKernel::ExtStatusSetT::end	Mesh/ArrayKernel.hh	/^    inline iterator                         end()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::ExtStatusSetT::erase	Mesh/ArrayKernel.hh	/^    inline void                             erase(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(Handle _hnd)
OpenMesh::ArrayKernel::ExtStatusSetT::erase	Mesh/ArrayKernel.hh	/^    inline void                             erase(iterator _it)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(iterator _it)
OpenMesh::ArrayKernel::ExtStatusSetT::front	Mesh/ArrayKernel.hh	/^    inline Handle&                          front()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::ExtStatusSetT::front	Mesh/ArrayKernel.hh	/^    inline const Handle&                    front() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
OpenMesh::ArrayKernel::ExtStatusSetT::handles_	Mesh/ArrayKernel.hh	/^    HandleContainer                         handles_;$/;"	m	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:protected
OpenMesh::ArrayKernel::ExtStatusSetT::insert	Mesh/ArrayKernel.hh	/^    inline void                             insert(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(Handle _hnd)
OpenMesh::ArrayKernel::ExtStatusSetT::it	Mesh/ArrayKernel.hh	/^        iterator it = std::find(begin(), end(), _hnd);$/;"	l
OpenMesh::ArrayKernel::ExtStatusSetT::iterator	Mesh/ArrayKernel.hh	/^                                            iterator;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public
OpenMesh::ArrayKernel::ExtStatusSetT::pop_back	Mesh/ArrayKernel.hh	/^      *_it.pop_back();$/;"	p	signature:()
OpenMesh::ArrayKernel::ExtStatusSetT::push_back	Mesh/ArrayKernel.hh	/^        handles_.push_back(_hnd);$/;"	p	signature:(_hnd)
OpenMesh::ArrayKernel::ExtStatusSetT::reserve	Mesh/ArrayKernel.hh	/^    { handles_.reserve(_capacity_hint); }$/;"	p	signature:(_capacity_hint)
OpenMesh::ArrayKernel::ExtStatusSetT::size	Mesh/ArrayKernel.hh	/^    inline unsigned int                     size() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
OpenMesh::ArrayKernel::ExtStatusSetT::~ExtStatusSetT	Mesh/ArrayKernel.hh	/^    ~ExtStatusSetT()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::ExtVertexStatusSet	Mesh/ArrayKernel.hh	/^  typedef ExtStatusSetT<VertexHandle>       ExtVertexStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::Face	Mesh/ArrayKernel.hh	/^    faces_.push_back(Face());$/;"	p	signature:()
OpenMesh::ArrayKernel::FaceContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<Face>                  FaceContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::FaceHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::FaceHandle              FaceHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::FaceStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef FPropHandleT<StatusInfo>          FaceStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::FaceStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<FaceHandle>        FaceStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::HalfedgeHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::HalfedgeHandle          HalfedgeHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::HalfedgeStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef HPropHandleT<StatusInfo>          HalfedgeStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::HalfedgeStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<HalfedgeHandle>    HalfedgeStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::KernelConstEdgeIter	Mesh/ArrayKernel.hh	/^  typedef EdgeContainer::const_iterator      KernelConstEdgeIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::KernelConstFaceIter	Mesh/ArrayKernel.hh	/^  typedef FaceContainer::const_iterator      KernelConstFaceIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::KernelConstVertexIter	Mesh/ArrayKernel.hh	/^  typedef VertexContainer::const_iterator    KernelConstVertexIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::KernelEdgeIter	Mesh/ArrayKernel.hh	/^  typedef EdgeContainer::iterator            KernelEdgeIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::KernelFaceIter	Mesh/ArrayKernel.hh	/^  typedef FaceContainer::iterator            KernelFaceIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::KernelVertexIter	Mesh/ArrayKernel.hh	/^  typedef VertexContainer::iterator          KernelVertexIter;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::StatusInfo	Mesh/ArrayKernel.hh	/^  typedef Attributes::StatusInfo            StatusInfo;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::StatusSetT	Mesh/ArrayKernel.hh	/^  class StatusSetT$/;"	c	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::StatusSetT::Handle	Mesh/ArrayKernel.hh	/^        erase(Handle(i));$/;"	p	signature:(i)
OpenMesh::ArrayKernel::StatusSetT::StatusSetT	Mesh/ArrayKernel.hh	/^    StatusSetT(ArrayKernel& _kernel, unsigned int _bit_mask)$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(ArrayKernel& _kernel, unsigned int _bit_mask)
OpenMesh::ArrayKernel::StatusSetT::bit_mask_	Mesh/ArrayKernel.hh	/^    const unsigned int                      bit_mask_;$/;"	m	class:OpenMesh::ArrayKernel::StatusSetT	access:public
OpenMesh::ArrayKernel::StatusSetT::clear	Mesh/ArrayKernel.hh	/^    void                                    clear()$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::StatusSetT::erase	Mesh/ArrayKernel.hh	/^    inline void                             erase(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(Handle _hnd)
OpenMesh::ArrayKernel::StatusSetT::insert	Mesh/ArrayKernel.hh	/^    inline void                             insert(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(Handle _hnd)
OpenMesh::ArrayKernel::StatusSetT::is_in	Mesh/ArrayKernel.hh	/^    inline bool                             is_in(Handle _hnd) const$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(Handle _hnd) const
OpenMesh::ArrayKernel::StatusSetT::kernel_	Mesh/ArrayKernel.hh	/^    ArrayKernel&                            kernel_;$/;"	m	class:OpenMesh::ArrayKernel::StatusSetT	access:protected
OpenMesh::ArrayKernel::StatusSetT::n_elements	Mesh/ArrayKernel.hh	/^      unsigned int n_elements = kernel_.status_pph(Handle()).is_valid() ?$/;"	l
OpenMesh::ArrayKernel::StatusSetT::size	Mesh/ArrayKernel.hh	/^    unsigned int                            size() const$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:() const
OpenMesh::ArrayKernel::StatusSetT::sz	Mesh/ArrayKernel.hh	/^      unsigned int sz = 0;$/;"	l
OpenMesh::ArrayKernel::StatusSetT::~StatusSetT	Mesh/ArrayKernel.hh	/^    ~StatusSetT()$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:()
OpenMesh::ArrayKernel::Vertex	Mesh/ArrayKernel.hh	/^    vertices_.push_back(Vertex());$/;"	p	signature:()
OpenMesh::ArrayKernel::VertexContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<Vertex>                VertexContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::VertexHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::VertexHandle            VertexHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::VertexStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef VPropHandleT<StatusInfo>          VertexStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::VertexStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<VertexHandle>      VertexStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
OpenMesh::ArrayKernel::assign_connectivity	Mesh/ArrayKernel.cc	/^void ArrayKernel::assign_connectivity(const ArrayKernel& _other)$/;"	f	class:OpenMesh::ArrayKernel	signature:(const ArrayKernel& _other)
OpenMesh::ArrayKernel::assign_connectivity	Mesh/ArrayKernel.hh	/^  void                                      assign_connectivity(const ArrayKernel& _other);$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(const ArrayKernel& _other)
OpenMesh::ArrayKernel::bit_mask	Mesh/ArrayKernel.hh	/^    unsigned int bit_mask = bit_masks(_hnd).back();$/;"	l
OpenMesh::ArrayKernel::bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(EdgeHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(EdgeHandle )
OpenMesh::ArrayKernel::bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(FaceHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(FaceHandle )
OpenMesh::ArrayKernel::bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(HalfedgeHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(HalfedgeHandle )
OpenMesh::ArrayKernel::bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(VertexHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(VertexHandle )
OpenMesh::ArrayKernel::ccw_rotated_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle ccw_rotated_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::clean	Mesh/ArrayKernel.cc	/^void ArrayKernel::clean()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
OpenMesh::ArrayKernel::clean	Mesh/ArrayKernel.hh	/^  void clean();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::clear	Mesh/ArrayKernel.cc	/^void ArrayKernel::clear()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
OpenMesh::ArrayKernel::clear	Mesh/ArrayKernel.hh	/^  void clear();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::cw_rotated_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle cw_rotated_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::delete_isolated_vertices	Mesh/ArrayKernel.cc	/^unsigned int ArrayKernel::delete_isolated_vertices()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
OpenMesh::ArrayKernel::delete_isolated_vertices	Mesh/ArrayKernel.hh	/^  unsigned int delete_isolated_vertices();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::edge	Mesh/ArrayKernel.hh	/^  Edge& edge(EdgeHandle _eh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh)
OpenMesh::ArrayKernel::edge	Mesh/ArrayKernel.hh	/^  const Edge& edge(EdgeHandle _eh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh) const
OpenMesh::ArrayKernel::edge_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          edge_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::edge_handle	Mesh/ArrayKernel.hh	/^  EdgeHandle edge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::edge_handle	Mesh/ArrayKernel.hh	/^  EdgeHandle edge_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
OpenMesh::ArrayKernel::edge_status_	Mesh/ArrayKernel.hh	/^  EdgeStatusPropertyHandle                  edge_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::edge_status_pph	Mesh/ArrayKernel.hh	/^  inline EdgeStatusPropertyHandle           edge_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::edges_	Mesh/ArrayKernel.hh	/^  EdgeContainer                             edges_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::edges_begin	Mesh/ArrayKernel.hh	/^  KernelConstEdgeIter   edges_begin() const     { return edges_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
OpenMesh::ArrayKernel::edges_begin	Mesh/ArrayKernel.hh	/^  KernelEdgeIter        edges_begin()           { return edges_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
OpenMesh::ArrayKernel::edges_empty	Mesh/ArrayKernel.hh	/^  bool edges_empty()     const { return edges_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::edges_end	Mesh/ArrayKernel.hh	/^  KernelConstEdgeIter   edges_end() const       { return edges_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
OpenMesh::ArrayKernel::edges_end	Mesh/ArrayKernel.hh	/^  KernelEdgeIter        edges_end()             { return edges_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
OpenMesh::ArrayKernel::eh	Mesh/ArrayKernel.hh	/^    unsigned int eh = ( (char*)&_he - (char*)&edges_.front() ) \/  sizeof(Edge)  ;$/;"	l
OpenMesh::ArrayKernel::face	Mesh/ArrayKernel.hh	/^  Face& face(FaceHandle _fh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh)
OpenMesh::ArrayKernel::face	Mesh/ArrayKernel.hh	/^  const Face& face(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
OpenMesh::ArrayKernel::face_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          face_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::face_handle	Mesh/ArrayKernel.hh	/^  FaceHandle face_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::face_handle	Mesh/ArrayKernel.hh	/^  FaceHandle face_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
OpenMesh::ArrayKernel::face_status_	Mesh/ArrayKernel.hh	/^  FaceStatusPropertyHandle                  face_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::face_status_pph	Mesh/ArrayKernel.hh	/^  inline FaceStatusPropertyHandle           face_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::faces_	Mesh/ArrayKernel.hh	/^  FaceContainer                             faces_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::faces_begin	Mesh/ArrayKernel.hh	/^  KernelConstFaceIter   faces_begin() const     { return faces_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
OpenMesh::ArrayKernel::faces_begin	Mesh/ArrayKernel.hh	/^  KernelFaceIter        faces_begin()           { return faces_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
OpenMesh::ArrayKernel::faces_empty	Mesh/ArrayKernel.hh	/^  bool faces_empty()     const { return faces_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::faces_end	Mesh/ArrayKernel.hh	/^  KernelConstFaceIter   faces_end() const       { return faces_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
OpenMesh::ArrayKernel::faces_end	Mesh/ArrayKernel.hh	/^  KernelFaceIter        faces_end()             { return faces_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
OpenMesh::ArrayKernel::from_vertex_handle	Mesh/ArrayKernel.hh	/^  VertexHandle from_vertex_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::garbage_collection	Mesh/ArrayKernel.cc	/^void ArrayKernel::garbage_collection(bool _v, bool _e, bool _f)$/;"	f	class:OpenMesh::ArrayKernel	signature:(bool _v, bool _e, bool _f)
OpenMesh::ArrayKernel::garbage_collection	Mesh/ArrayKernel.hh	/^  void garbage_collection(bool _v=true, bool _e=true, bool _f=true);$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(bool _v=true, bool _e=true, bool _f=true)
OpenMesh::ArrayKernel::garbage_collection	Mesh/ArrayKernel.hh	/^  void garbage_collection(std_API_Container_VHandlePointer& vh_to_update,$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(std_API_Container_VHandlePointer& vh_to_update, std_API_Container_HHandlePointer& hh_to_update, std_API_Container_FHandlePointer& fh_to_update, bool _v=true, bool _e=true, bool _f=true)
OpenMesh::ArrayKernel::garbage_collection	Mesh/ArrayKernelT.cc	/^void ArrayKernel::garbage_collection(std_API_Container_VHandlePointer& vh_to_update,$/;"	f	class:OpenMesh::ArrayKernel	signature:(std_API_Container_VHandlePointer& vh_to_update, std_API_Container_HHandlePointer& hh_to_update, std_API_Container_FHandlePointer& fh_to_update, bool _v, bool _e, bool _f)
OpenMesh::ArrayKernel::halfedge	Mesh/ArrayKernel.hh	/^  Halfedge& halfedge(HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh)
OpenMesh::ArrayKernel::halfedge	Mesh/ArrayKernel.hh	/^  const Halfedge& halfedge(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::halfedge_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          halfedge_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::halfedge_handle	Mesh/ArrayKernel.hh	/^    HalfedgeHandle heh0(halfedge_handle(eh, 0));$/;"	p	signature:(eh, 0)
OpenMesh::ArrayKernel::halfedge_handle	Mesh/ArrayKernel.hh	/^    HalfedgeHandle heh1(halfedge_handle(eh, 1));$/;"	p	signature:(eh, 1)
OpenMesh::ArrayKernel::halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(EdgeHandle _eh, unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh, unsigned int _i) const
OpenMesh::ArrayKernel::halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
OpenMesh::ArrayKernel::halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
OpenMesh::ArrayKernel::halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
OpenMesh::ArrayKernel::halfedge_status_	Mesh/ArrayKernel.hh	/^  HalfedgeStatusPropertyHandle              halfedge_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::halfedge_status_pph	Mesh/ArrayKernel.hh	/^  inline HalfedgeStatusPropertyHandle       halfedge_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::halfedges_empty	Mesh/ArrayKernel.hh	/^  bool halfedges_empty() const { return edges_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::handle	Mesh/ArrayKernel.hh	/^    EdgeHandle eh(handle(edges_.back()));$/;"	p	signature:(edges_.back())
OpenMesh::ArrayKernel::handle	Mesh/ArrayKernel.hh	/^  EdgeHandle handle(const Edge& _e) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Edge& _e) const
OpenMesh::ArrayKernel::handle	Mesh/ArrayKernel.hh	/^  FaceHandle handle(const Face& _f) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Face& _f) const
OpenMesh::ArrayKernel::handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle handle(const Halfedge& _he) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Halfedge& _he) const
OpenMesh::ArrayKernel::handle	Mesh/ArrayKernel.hh	/^  VertexHandle handle(const Vertex& _v) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Vertex& _v) const
OpenMesh::ArrayKernel::has_edge_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_edge_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::has_face_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_face_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::has_halfedge_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_halfedge_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::has_vertex_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_vertex_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::heh	Mesh/ArrayKernel.hh	/^      HalfedgeHandle  heh(_heh);$/;"	p	signature:(_heh)
OpenMesh::ArrayKernel::init_bit_masks	Mesh/ArrayKernel.cc	/^void ArrayKernel::init_bit_masks()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
OpenMesh::ArrayKernel::init_bit_masks	Mesh/ArrayKernel.cc	/^void ArrayKernel::init_bit_masks(BitMaskContainer& _bmc)$/;"	f	class:OpenMesh::ArrayKernel	signature:(BitMaskContainer& _bmc)
OpenMesh::ArrayKernel::init_bit_masks	Mesh/ArrayKernel.hh	/^  void                                      init_bit_masks();$/;"	p	class:OpenMesh::ArrayKernel	access:private	signature:()
OpenMesh::ArrayKernel::init_bit_masks	Mesh/ArrayKernel.hh	/^  void                                      init_bit_masks(BitMaskContainer& _bmc);$/;"	p	class:OpenMesh::ArrayKernel	access:private	signature:(BitMaskContainer& _bmc)
OpenMesh::ArrayKernel::invalidate	Mesh/ArrayKernel.hh	/^  { halfedge(_heh).face_handle_.invalidate(); }$/;"	p	signature:()
OpenMesh::ArrayKernel::invalidate	Mesh/ArrayKernel.hh	/^  { vertex(_vh).halfedge_handle_.invalidate(); }$/;"	p	signature:()
OpenMesh::ArrayKernel::is_boundary	Mesh/ArrayKernel.hh	/^  bool is_boundary(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::is_isolated	Mesh/ArrayKernel.hh	/^  bool is_isolated(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_eh));$/;"	p	signature:(_eh)
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_fh));$/;"	p	signature:(_fh)
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_heh));$/;"	p	signature:(_heh)
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_nheh));$/;"	p	signature:(_nheh)
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_pheh));$/;"	p	signature:(_pheh)
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_vh));$/;"	p	signature:(_vh)
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(EdgeHandle _eh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh) const
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
OpenMesh::ArrayKernel::n_edges	Mesh/ArrayKernel.hh	/^    eprops_resize(n_edges());\/\/TODO:should it be push_back()?$/;"	p	signature:()
OpenMesh::ArrayKernel::n_edges	Mesh/ArrayKernel.hh	/^  unsigned int n_edges()     const { return edges_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::n_faces	Mesh/ArrayKernel.hh	/^    fprops_resize(n_faces());$/;"	p	signature:()
OpenMesh::ArrayKernel::n_faces	Mesh/ArrayKernel.hh	/^  unsigned int n_faces()     const { return faces_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::n_halfedges	Mesh/ArrayKernel.hh	/^    hprops_resize(n_halfedges());\/\/TODO:should it be push_back()?$/;"	p	signature:()
OpenMesh::ArrayKernel::n_halfedges	Mesh/ArrayKernel.hh	/^  unsigned int n_halfedges() const { return 2*edges_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::n_vertices	Mesh/ArrayKernel.hh	/^    vprops_resize(n_vertices());\/\/TODO:should it be push_back()?$/;"	p	signature:()
OpenMesh::ArrayKernel::n_vertices	Mesh/ArrayKernel.hh	/^  unsigned int n_vertices()  const { return vertices_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::new_edge	Mesh/ArrayKernel.hh	/^  inline HalfedgeHandle new_edge(VertexHandle _start_vh, VertexHandle _end_vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _start_vh, VertexHandle _end_vh)
OpenMesh::ArrayKernel::new_face	Mesh/ArrayKernel.hh	/^  inline FaceHandle new_face()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::new_face	Mesh/ArrayKernel.hh	/^  inline FaceHandle new_face(const Face& _f)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Face& _f)
OpenMesh::ArrayKernel::new_vertex	Mesh/ArrayKernel.hh	/^  inline VertexHandle new_vertex()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::next_halfedge_handle	Mesh/ArrayKernel.hh	/^      HalfedgeHandle  next_heh(next_halfedge_handle(heh));$/;"	p	signature:(heh)
OpenMesh::ArrayKernel::next_halfedge_handle	Mesh/ArrayKernel.hh	/^      HalfedgeHandle next_heh(next_halfedge_handle(curr_heh));$/;"	p	signature:(curr_heh)
OpenMesh::ArrayKernel::next_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle next_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::opposite_halfedge_handle	Mesh/ArrayKernel.hh	/^      HalfedgeHandle curr_heh(opposite_halfedge_handle(_heh));$/;"	p	signature:(_heh)
OpenMesh::ArrayKernel::opposite_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle opposite_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::pop_bit_mask	Mesh/ArrayKernel.hh	/^  unsigned int                              pop_bit_mask(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(Handle _hnd)
OpenMesh::ArrayKernel::prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle prev_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle prev_halfedge_handle(HalfedgeHandle _heh, GenProg::False) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, GenProg::False) const
OpenMesh::ArrayKernel::prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle prev_halfedge_handle(HalfedgeHandle _heh, GenProg::True) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, GenProg::True) const
OpenMesh::ArrayKernel::push_back	Mesh/ArrayKernel.hh	/^    faces_.push_back(_f);$/;"	p	signature:(_f)
OpenMesh::ArrayKernel::push_bit_mask	Mesh/ArrayKernel.hh	/^  void                                      push_bit_mask(Handle _hnd, unsigned int _bit_mask)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(Handle _hnd, unsigned int _bit_mask)
OpenMesh::ArrayKernel::refcount_estatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_estatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::refcount_fstatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_fstatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::refcount_hstatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_hstatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::refcount_vstatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_vstatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::release_edge_status	Mesh/ArrayKernel.hh	/^  void release_edge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::release_face_status	Mesh/ArrayKernel.hh	/^  void release_face_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::release_halfedge_status	Mesh/ArrayKernel.hh	/^  void release_halfedge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::release_vertex_status	Mesh/ArrayKernel.hh	/^  void release_vertex_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::request_edge_status	Mesh/ArrayKernel.hh	/^  void request_edge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::request_face_status	Mesh/ArrayKernel.hh	/^  void request_face_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::request_halfedge_status	Mesh/ArrayKernel.hh	/^  void request_halfedge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::request_vertex_status	Mesh/ArrayKernel.hh	/^  void request_vertex_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::ArrayKernel::reserve	Mesh/ArrayKernel.cc	/^void ArrayKernel::reserve(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )$/;"	f	class:OpenMesh::ArrayKernel	signature:(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
OpenMesh::ArrayKernel::reserve	Mesh/ArrayKernel.hh	/^  void reserve(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces );$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
OpenMesh::ArrayKernel::resize	Mesh/ArrayKernel.cc	/^void ArrayKernel::resize( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )$/;"	f	class:OpenMesh::ArrayKernel	signature:( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
OpenMesh::ArrayKernel::resize	Mesh/ArrayKernel.hh	/^  void resize( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces );$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
OpenMesh::ArrayKernel::set_boundary	Mesh/ArrayKernel.hh	/^  void set_boundary(HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh)
OpenMesh::ArrayKernel::set_face_handle	Mesh/ArrayKernel.hh	/^  void set_face_handle(HalfedgeHandle _heh, FaceHandle _fh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, FaceHandle _fh)
OpenMesh::ArrayKernel::set_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_halfedge_handle(FaceHandle _fh, HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh, HalfedgeHandle _heh)
OpenMesh::ArrayKernel::set_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_halfedge_handle(VertexHandle _vh, HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh, HalfedgeHandle _heh)
OpenMesh::ArrayKernel::set_isolated	Mesh/ArrayKernel.hh	/^  void set_isolated(VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh)
OpenMesh::ArrayKernel::set_next_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_next_halfedge_handle(HalfedgeHandle _heh, HalfedgeHandle _nheh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, HalfedgeHandle _nheh)
OpenMesh::ArrayKernel::set_prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_prev_halfedge_handle(HalfedgeHandle \/* _heh *\/, HalfedgeHandle \/* _pheh *\/,$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle , HalfedgeHandle , GenProg::False)
OpenMesh::ArrayKernel::set_prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_prev_halfedge_handle(HalfedgeHandle _heh, HalfedgeHandle _pheh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, HalfedgeHandle _pheh)
OpenMesh::ArrayKernel::set_prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_prev_halfedge_handle(HalfedgeHandle _heh, HalfedgeHandle _pheh,$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, HalfedgeHandle _pheh, GenProg::True)
OpenMesh::ArrayKernel::set_vertex_handle	Mesh/ArrayKernel.hh	/^  void set_vertex_handle(HalfedgeHandle _heh, VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, VertexHandle _vh)
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(EdgeHandle _eh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh)
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(FaceHandle _fh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh)
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _hh)
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh)
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(EdgeHandle _eh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh) const
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(HalfedgeHandle _hh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _hh) const
OpenMesh::ArrayKernel::status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
OpenMesh::ArrayKernel::status_pph	Mesh/ArrayKernel.hh	/^  inline EdgeStatusPropertyHandle           status_pph(EdgeHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle ) const
OpenMesh::ArrayKernel::status_pph	Mesh/ArrayKernel.hh	/^  inline FaceStatusPropertyHandle           status_pph(FaceHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle ) const
OpenMesh::ArrayKernel::status_pph	Mesh/ArrayKernel.hh	/^  inline HalfedgeStatusPropertyHandle       status_pph(HalfedgeHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle ) const
OpenMesh::ArrayKernel::status_pph	Mesh/ArrayKernel.hh	/^  inline VertexStatusPropertyHandle         status_pph(VertexHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle ) const
OpenMesh::ArrayKernel::to_vertex_handle	Mesh/ArrayKernel.hh	/^  VertexHandle to_vertex_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::ArrayKernel::vertex	Mesh/ArrayKernel.hh	/^  Vertex& vertex(VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh)
OpenMesh::ArrayKernel::vertex	Mesh/ArrayKernel.hh	/^  const Vertex& vertex(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
OpenMesh::ArrayKernel::vertex_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          vertex_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::vertex_handle	Mesh/ArrayKernel.hh	/^  VertexHandle vertex_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
OpenMesh::ArrayKernel::vertex_status_	Mesh/ArrayKernel.hh	/^  VertexStatusPropertyHandle                vertex_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::vertex_status_pph	Mesh/ArrayKernel.hh	/^  inline VertexStatusPropertyHandle         vertex_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::vertices_	Mesh/ArrayKernel.hh	/^  VertexContainer                           vertices_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
OpenMesh::ArrayKernel::vertices_begin	Mesh/ArrayKernel.hh	/^  KernelConstVertexIter vertices_begin() const  { return vertices_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
OpenMesh::ArrayKernel::vertices_begin	Mesh/ArrayKernel.hh	/^  KernelVertexIter      vertices_begin()        { return vertices_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
OpenMesh::ArrayKernel::vertices_empty	Mesh/ArrayKernel.hh	/^  bool vertices_empty()  const { return vertices_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
OpenMesh::ArrayKernel::vertices_end	Mesh/ArrayKernel.hh	/^  KernelConstVertexIter vertices_end() const    { return vertices_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
OpenMesh::ArrayKernel::vertices_end	Mesh/ArrayKernel.hh	/^  KernelVertexIter      vertices_end()          { return vertices_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
OpenMesh::ArrayKernel::~ArrayKernel	Mesh/ArrayKernel.cc	/^ArrayKernel::~ArrayKernel()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
OpenMesh::ArrayKernel::~ArrayKernel	Mesh/ArrayKernel.hh	/^  virtual ~ArrayKernel();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
OpenMesh::AttribKernelT	Mesh/AttribKernelT.hh	/^class AttribKernelT : public Connectivity$/;"	c	namespace:OpenMesh	inherits:Connectivity
OpenMesh::AttribKernelT::AttribKernel	Mesh/AttribKernelT.hh	/^  typedef AttribKernelT<MeshItems,Connectivity>  AttribKernel;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::AttribKernelT	Mesh/AttribKernelT.hh	/^  AttribKernelT()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::Attribs	Mesh/AttribKernelT.hh	/^  enum Attribs  {$/;"	g	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::Color	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Color         Color;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::Connectivity::request_edge_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_edge_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
OpenMesh::AttribKernelT::Connectivity::request_face_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_face_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
OpenMesh::AttribKernelT::Connectivity::request_halfedge_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_halfedge_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
OpenMesh::AttribKernelT::Connectivity::request_vertex_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_vertex_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
OpenMesh::AttribKernelT::DataEPropHandle	Mesh/AttribKernelT.hh	/^  typedef EPropHandleT<EdgeData>                DataEPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::DataFPropHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<FaceData>                DataFPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::DataHPropHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<HalfedgeData>            DataHPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::DataVPropHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<VertexData>              DataVPropHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::EAttribs	Mesh/AttribKernelT.hh	/^    EAttribs = MeshItems::EAttribs,$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
OpenMesh::AttribKernelT::Edge	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Edge       Edge;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::EdgeColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef EPropHandleT<Color>               EdgeColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::EdgeData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::EdgeData      EdgeData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::FAttribs	Mesh/AttribKernelT.hh	/^    FAttribs = MeshItems::FAttribs$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
OpenMesh::AttribKernelT::Face	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Face       Face;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::FaceColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<Color>               FaceColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::FaceData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::FaceData      FaceData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::FaceNormalsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<Normal>              FaceNormalsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::FaceTextureIndexPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef FPropHandleT<TextureIndex>        FaceTextureIndexPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::HAttribs	Mesh/AttribKernelT.hh	/^    HAttribs = MeshItems::HAttribs,$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
OpenMesh::AttribKernelT::Halfedge	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Halfedge   Halfedge;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::HalfedgeColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<Color>               HalfedgeColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::HalfedgeData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::HalfedgeData  HalfedgeData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::HalfedgeNormalsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<Normal>              HalfedgeNormalsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::HalfedgeTexCoords1DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<TexCoord1D>          HalfedgeTexCoords1DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::HalfedgeTexCoords2DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<TexCoord2D>          HalfedgeTexCoords2DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::HalfedgeTexCoords3DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef HPropHandleT<TexCoord3D>          HalfedgeTexCoords3DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::Normal	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Normal        Normal;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::Point	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Point         Point;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::PointsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<Point>               PointsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::Scalar	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Scalar        Scalar;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::TexCoord1D	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TexCoord1D    TexCoord1D;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::TexCoord2D	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TexCoord2D    TexCoord2D;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::TexCoord3D	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TexCoord3D    TexCoord3D;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::TextureIndex	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TextureIndex  TextureIndex;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::VAttribs	Mesh/AttribKernelT.hh	/^    VAttribs = MeshItems::VAttribs,$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
OpenMesh::AttribKernelT::Vertex	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Vertex     Vertex;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::VertexColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<Color>               VertexColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::VertexData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::VertexData    VertexData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::VertexNormalsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<Normal>              VertexNormalsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::VertexTexCoords1DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<TexCoord1D>          VertexTexCoords1DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::VertexTexCoords2DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<TexCoord2D>          VertexTexCoords2DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::VertexTexCoords3DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<TexCoord3D>          VertexTexCoords3DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
OpenMesh::AttribKernelT::assign	Mesh/AttribKernelT.hh	/^  void assign(const _AttribKernel& _other)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(const _AttribKernel& _other)
OpenMesh::AttribKernelT::color	Mesh/AttribKernelT.hh	/^  const Color& color(EdgeHandle _eh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::AttribKernelT::color	Mesh/AttribKernelT.hh	/^  const Color& color(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
OpenMesh::AttribKernelT::color	Mesh/AttribKernelT.hh	/^  const Color& color(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::AttribKernelT::color	Mesh/AttribKernelT.hh	/^  const Color& color(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  EdgeData&                                 data(EdgeHandle _eh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh)
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  FaceData&                                 data(FaceHandle _fh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh)
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  HalfedgeData&                             data(HalfedgeHandle _heh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh)
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  VertexData&                               data(VertexHandle _vh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh)
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  const EdgeData&                           data(EdgeHandle _eh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  const FaceData&                           data(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  const HalfedgeData&                       data(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::AttribKernelT::data	Mesh/AttribKernelT.hh	/^  const VertexData&                         data(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
OpenMesh::AttribKernelT::data_epph_	Mesh/AttribKernelT.hh	/^  DataEPropHandle                           data_epph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::data_fpph_	Mesh/AttribKernelT.hh	/^  DataFPropHandle                           data_fpph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::data_hpph_	Mesh/AttribKernelT.hh	/^  DataHPropHandle                           data_hpph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::data_vpph_	Mesh/AttribKernelT.hh	/^  DataVPropHandle                           data_vpph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::edge_colors	Mesh/AttribKernelT.hh	/^  const Color* edge_colors() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::edge_colors_	Mesh/AttribKernelT.hh	/^  EdgeColorsPropertyHandle                  edge_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::edge_colors_pph	Mesh/AttribKernelT.hh	/^  EdgeColorsPropertyHandle                  edge_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::face_colors_	Mesh/AttribKernelT.hh	/^  FaceColorsPropertyHandle                  face_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::face_colors_pph	Mesh/AttribKernelT.hh	/^  FaceColorsPropertyHandle                  face_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::face_normals_	Mesh/AttribKernelT.hh	/^  FaceNormalsPropertyHandle                 face_normals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::face_normals_pph	Mesh/AttribKernelT.hh	/^  FaceNormalsPropertyHandle                 face_normals_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::face_texture_index_	Mesh/AttribKernelT.hh	/^  FaceTextureIndexPropertyHandle            face_texture_index_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::face_texture_index_pph	Mesh/AttribKernelT.hh	/^  FaceTextureIndexPropertyHandle            face_texture_index_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::halfedge_colors	Mesh/AttribKernelT.hh	/^  const Color* halfedge_colors() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::halfedge_colors_	Mesh/AttribKernelT.hh	/^  HalfedgeColorsPropertyHandle              halfedge_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::halfedge_colors_pph	Mesh/AttribKernelT.hh	/^  HalfedgeColorsPropertyHandle              halfedge_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::halfedge_normals_	Mesh/AttribKernelT.hh	/^  HalfedgeNormalsPropertyHandle             halfedge_normals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::halfedge_normals_pph	Mesh/AttribKernelT.hh	/^  HalfedgeNormalsPropertyHandle              halfedge_normals_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::halfedge_texcoords1D_	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords1DPropertyHandle         halfedge_texcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::halfedge_texcoords1D_pph	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords1DPropertyHandle           halfedge_texcoords1D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::halfedge_texcoords2D_	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords2DPropertyHandle         halfedge_texcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::halfedge_texcoords2D_pph	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords2DPropertyHandle           halfedge_texcoords2D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::halfedge_texcoords3D_	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords3DPropertyHandle         halfedge_texcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::halfedge_texcoords3D_pph	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords3DPropertyHandle           halfedge_texcoords3D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_edge_colors	Mesh/AttribKernelT.hh	/^  bool has_edge_colors()          const { return edge_colors_.is_valid();         }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_face_colors	Mesh/AttribKernelT.hh	/^  bool has_face_colors()          const { return face_colors_.is_valid();         }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_face_normals	Mesh/AttribKernelT.hh	/^  bool has_face_normals()         const { return face_normals_.is_valid();        }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_face_texture_index	Mesh/AttribKernelT.hh	/^  bool has_face_texture_index()   const { return face_texture_index_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_halfedge_colors	Mesh/AttribKernelT.hh	/^  bool has_halfedge_colors()      const { return halfedge_colors_.is_valid();     }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_halfedge_normals	Mesh/AttribKernelT.hh	/^  bool has_halfedge_normals()     const { return halfedge_normals_.is_valid();    }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_halfedge_texcoords1D	Mesh/AttribKernelT.hh	/^  bool has_halfedge_texcoords1D() const { return halfedge_texcoords1D_.is_valid();}$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_halfedge_texcoords2D	Mesh/AttribKernelT.hh	/^  bool has_halfedge_texcoords2D() const { return halfedge_texcoords2D_.is_valid();}$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_halfedge_texcoords3D	Mesh/AttribKernelT.hh	/^  bool has_halfedge_texcoords3D() const { return halfedge_texcoords3D_.is_valid();}$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_vertex_colors	Mesh/AttribKernelT.hh	/^  bool has_vertex_colors()        const { return vertex_colors_.is_valid();       }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_vertex_normals	Mesh/AttribKernelT.hh	/^  bool has_vertex_normals()       const { return vertex_normals_.is_valid();      }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_vertex_texcoords1D	Mesh/AttribKernelT.hh	/^  bool has_vertex_texcoords1D()   const { return vertex_texcoords1D_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_vertex_texcoords2D	Mesh/AttribKernelT.hh	/^  bool has_vertex_texcoords2D()   const { return vertex_texcoords2D_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::has_vertex_texcoords3D	Mesh/AttribKernelT.hh	/^  bool has_vertex_texcoords3D()   const { return vertex_texcoords3D_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::htexcoords1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D* htexcoords1D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::htexcoords2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D* htexcoords2D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::htexcoords3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D* htexcoords3D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::normal	Mesh/AttribKernelT.hh	/^  const Normal& normal(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
OpenMesh::AttribKernelT::normal	Mesh/AttribKernelT.hh	/^  const Normal& normal(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::AttribKernelT::normal	Mesh/AttribKernelT.hh	/^  const Normal& normal(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
OpenMesh::AttribKernelT::point	Mesh/AttribKernelT.hh	/^  Point& point(VertexHandle _vh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh)
OpenMesh::AttribKernelT::point	Mesh/AttribKernelT.hh	/^  const Point& point(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
OpenMesh::AttribKernelT::points	Mesh/AttribKernelT.hh	/^  const Point* points() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::points_	Mesh/AttribKernelT.hh	/^  PointsPropertyHandle                      points_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::points_pph	Mesh/AttribKernelT.hh	/^  PointsPropertyHandle                      points_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::refcount_ecolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_ecolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_fcolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_fcolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_fnormals_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_fnormals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_ftextureIndex_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_ftextureIndex_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_hecolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_hecolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_henormals_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_henormals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_htexcoords1D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_htexcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_htexcoords2D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_htexcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_htexcoords3D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_htexcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_vcolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vcolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_vnormals_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vnormals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_vtexcoords1D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vtexcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_vtexcoords2D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vtexcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::refcount_vtexcoords3D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vtexcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::release_edge_colors	Mesh/AttribKernelT.hh	/^  void release_edge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_face_colors	Mesh/AttribKernelT.hh	/^  void release_face_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_face_normals	Mesh/AttribKernelT.hh	/^  void release_face_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_face_texture_index	Mesh/AttribKernelT.hh	/^  void release_face_texture_index()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_halfedge_colors	Mesh/AttribKernelT.hh	/^  void release_halfedge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_halfedge_normals	Mesh/AttribKernelT.hh	/^  void release_halfedge_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_halfedge_texcoords1D	Mesh/AttribKernelT.hh	/^  void release_halfedge_texcoords1D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_halfedge_texcoords2D	Mesh/AttribKernelT.hh	/^  void release_halfedge_texcoords2D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_halfedge_texcoords3D	Mesh/AttribKernelT.hh	/^  void release_halfedge_texcoords3D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_vertex_colors	Mesh/AttribKernelT.hh	/^  void release_vertex_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_vertex_normals	Mesh/AttribKernelT.hh	/^  void release_vertex_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_vertex_texcoords1D	Mesh/AttribKernelT.hh	/^  void release_vertex_texcoords1D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_vertex_texcoords2D	Mesh/AttribKernelT.hh	/^  void release_vertex_texcoords2D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::release_vertex_texcoords3D	Mesh/AttribKernelT.hh	/^  void release_vertex_texcoords3D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_edge_colors	Mesh/AttribKernelT.hh	/^  void request_edge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_face_colors	Mesh/AttribKernelT.hh	/^  void request_face_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_face_normals	Mesh/AttribKernelT.hh	/^  void request_face_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_face_texture_index	Mesh/AttribKernelT.hh	/^  void request_face_texture_index()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_halfedge_colors	Mesh/AttribKernelT.hh	/^  void request_halfedge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_halfedge_normals	Mesh/AttribKernelT.hh	/^  void request_halfedge_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_halfedge_texcoords1D	Mesh/AttribKernelT.hh	/^  void request_halfedge_texcoords1D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_halfedge_texcoords2D	Mesh/AttribKernelT.hh	/^  void request_halfedge_texcoords2D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_halfedge_texcoords3D	Mesh/AttribKernelT.hh	/^  void request_halfedge_texcoords3D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_vertex_colors	Mesh/AttribKernelT.hh	/^  void request_vertex_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_vertex_normals	Mesh/AttribKernelT.hh	/^  void request_vertex_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_vertex_texcoords1D	Mesh/AttribKernelT.hh	/^  void request_vertex_texcoords1D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_vertex_texcoords2D	Mesh/AttribKernelT.hh	/^  void request_vertex_texcoords2D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::request_vertex_texcoords3D	Mesh/AttribKernelT.hh	/^  void request_vertex_texcoords3D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::AttribKernelT::set_color	Mesh/AttribKernelT.hh	/^  void set_color(EdgeHandle _eh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh, const Color& _c)
OpenMesh::AttribKernelT::set_color	Mesh/AttribKernelT.hh	/^  void set_color(FaceHandle _fh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh, const Color& _c)
OpenMesh::AttribKernelT::set_color	Mesh/AttribKernelT.hh	/^  void set_color(HalfedgeHandle _heh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const Color& _c)
OpenMesh::AttribKernelT::set_color	Mesh/AttribKernelT.hh	/^  void set_color(VertexHandle _vh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const Color& _c)
OpenMesh::AttribKernelT::set_normal	Mesh/AttribKernelT.hh	/^  void set_normal(FaceHandle _fh, const Normal& _n)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh, const Normal& _n)
OpenMesh::AttribKernelT::set_normal	Mesh/AttribKernelT.hh	/^  void set_normal(HalfedgeHandle _heh, const Normal& _n)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const Normal& _n)
OpenMesh::AttribKernelT::set_normal	Mesh/AttribKernelT.hh	/^  void set_normal(VertexHandle _vh, const Normal& _n)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const Normal& _n)
OpenMesh::AttribKernelT::set_point	Mesh/AttribKernelT.hh	/^  void set_point(VertexHandle _vh, const Point& _p)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const Point& _p)
OpenMesh::AttribKernelT::set_texcoord1D	Mesh/AttribKernelT.hh	/^  void set_texcoord1D(HalfedgeHandle _heh, const TexCoord1D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const TexCoord1D& _t)
OpenMesh::AttribKernelT::set_texcoord1D	Mesh/AttribKernelT.hh	/^  void set_texcoord1D(VertexHandle _vh, const TexCoord1D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const TexCoord1D& _t)
OpenMesh::AttribKernelT::set_texcoord2D	Mesh/AttribKernelT.hh	/^  void set_texcoord2D(HalfedgeHandle _heh, const TexCoord2D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const TexCoord2D& _t)
OpenMesh::AttribKernelT::set_texcoord2D	Mesh/AttribKernelT.hh	/^  void set_texcoord2D(VertexHandle _vh, const TexCoord2D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const TexCoord2D& _t)
OpenMesh::AttribKernelT::set_texcoord3D	Mesh/AttribKernelT.hh	/^  void set_texcoord3D(HalfedgeHandle _heh, const TexCoord3D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const TexCoord3D& _t)
OpenMesh::AttribKernelT::set_texcoord3D	Mesh/AttribKernelT.hh	/^  void set_texcoord3D(VertexHandle _vh, const TexCoord3D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const TexCoord3D& _t)
OpenMesh::AttribKernelT::set_texture_index	Mesh/AttribKernelT.hh	/^  void set_texture_index(FaceHandle _fh, const TextureIndex& _t)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh, const TextureIndex& _t)
OpenMesh::AttribKernelT::texcoord1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D& texcoord1D(HalfedgeHandle _heh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::AttribKernelT::texcoord1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D& texcoord1D(VertexHandle _vh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
OpenMesh::AttribKernelT::texcoord2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D& texcoord2D(HalfedgeHandle _heh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::AttribKernelT::texcoord2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D& texcoord2D(VertexHandle _vh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
OpenMesh::AttribKernelT::texcoord3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D& texcoord3D(HalfedgeHandle _heh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::AttribKernelT::texcoord3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D& texcoord3D(VertexHandle _vh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
OpenMesh::AttribKernelT::texcoords1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D* texcoords1D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::texcoords2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D* texcoords2D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::texcoords3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D* texcoords3D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::texture_index	Mesh/AttribKernelT.hh	/^  const TextureIndex& texture_index(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
OpenMesh::AttribKernelT::vertex_colors	Mesh/AttribKernelT.hh	/^  const Color* vertex_colors() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::vertex_colors_	Mesh/AttribKernelT.hh	/^  VertexColorsPropertyHandle                vertex_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::vertex_colors_pph	Mesh/AttribKernelT.hh	/^  VertexColorsPropertyHandle                vertex_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::vertex_normals	Mesh/AttribKernelT.hh	/^  const Normal* vertex_normals() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::vertex_normals_	Mesh/AttribKernelT.hh	/^  VertexNormalsPropertyHandle               vertex_normals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::vertex_normals_pph	Mesh/AttribKernelT.hh	/^  VertexNormalsPropertyHandle               vertex_normals_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::vertex_texcoords1D_	Mesh/AttribKernelT.hh	/^  VertexTexCoords1DPropertyHandle           vertex_texcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::vertex_texcoords1D_pph	Mesh/AttribKernelT.hh	/^  VertexTexCoords1DPropertyHandle           vertex_texcoords1D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::vertex_texcoords2D_	Mesh/AttribKernelT.hh	/^  VertexTexCoords2DPropertyHandle           vertex_texcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::vertex_texcoords2D_pph	Mesh/AttribKernelT.hh	/^  VertexTexCoords2DPropertyHandle           vertex_texcoords2D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::vertex_texcoords3D_	Mesh/AttribKernelT.hh	/^  VertexTexCoords3DPropertyHandle           vertex_texcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
OpenMesh::AttribKernelT::vertex_texcoords3D_pph	Mesh/AttribKernelT.hh	/^  VertexTexCoords3DPropertyHandle           vertex_texcoords3D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
OpenMesh::AttribKernelT::~AttribKernelT	Mesh/AttribKernelT.hh	/^  virtual ~AttribKernelT()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
OpenMesh::Attributes	Mesh/Attributes.hh	/^namespace Attributes {$/;"	n	namespace:OpenMesh
OpenMesh::Attributes	Mesh/Status.hh	/^namespace Attributes {$/;"	n	namespace:OpenMesh
OpenMesh::Attributes::AttributeBits	Mesh/Attributes.hh	/^enum AttributeBits$/;"	g	namespace:OpenMesh::Attributes
OpenMesh::Attributes::Color	Mesh/Attributes.hh	/^  Color         = 2,  \/\/\/< Add colors to mesh item (vertices\/faces\/edges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::DELETED	Mesh/Status.hh	/^  DELETED               = 1,    \/\/\/< Item has been deleted$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::FEATURE	Mesh/Status.hh	/^  FEATURE               = 16,   \/\/\/< Item is a feature or belongs to a feature.$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::FIXEDNONMANIFOLD	Mesh/Status.hh	/^  FIXEDNONMANIFOLD      = 128,  \/\/\/< Item was non-two-manifold and had to be fixed$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::HIDDEN	Mesh/Status.hh	/^  HIDDEN                = 8,    \/\/\/< Item is hidden.$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::LOCKED	Mesh/Status.hh	/^  LOCKED                = 2,    \/\/\/< Item is locked.$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::None	Mesh/Attributes.hh	/^  None          = 0,  \/\/\/< Clear all attribute bits$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::Normal	Mesh/Attributes.hh	/^  Normal        = 1,  \/\/\/< Add normals to mesh item (vertices\/faces)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::PrevHalfedge	Mesh/Attributes.hh	/^  PrevHalfedge  = 4,  \/\/\/< Add storage for previous halfedge (halfedges). The bit is set by default in the DefaultTraits.$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::SELECTED	Mesh/Status.hh	/^  SELECTED              = 4,    \/\/\/< Item is selected.$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::Status	Mesh/Attributes.hh	/^  Status        = 8,  \/\/\/< Add status to mesh item (all items)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::StatusBits	Mesh/Status.hh	/^enum StatusBits {$/;"	g	namespace:OpenMesh::Attributes
OpenMesh::Attributes::StatusInfo	Mesh/Status.hh	/^class StatusInfo$/;"	c	namespace:OpenMesh::Attributes
OpenMesh::Attributes::StatusInfo::StatusInfo	Mesh/Status.hh	/^  StatusInfo() : status_(0) {}$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:()
OpenMesh::Attributes::StatusInfo::bits	Mesh/Status.hh	/^  unsigned int bits() const { return status_; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::change_bit	Mesh/Status.hh	/^  void change_bit(unsigned int _s, bool _b) {  $/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s, bool _b)
OpenMesh::Attributes::StatusInfo::deleted	Mesh/Status.hh	/^  bool deleted() const  { return is_bit_set(DELETED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::feature	Mesh/Status.hh	/^  bool feature() const  { return is_bit_set(FEATURE); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::fixed_nonmanifold	Mesh/Status.hh	/^  bool fixed_nonmanifold() const  { return is_bit_set(FIXEDNONMANIFOLD); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::hidden	Mesh/Status.hh	/^  bool hidden() const  { return is_bit_set(HIDDEN); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::is_bit_set	Mesh/Status.hh	/^  bool is_bit_set(unsigned int _s) const { return (status_ & _s) > 0; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s) const
OpenMesh::Attributes::StatusInfo::locked	Mesh/Status.hh	/^  bool locked() const  { return is_bit_set(LOCKED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::selected	Mesh/Status.hh	/^  bool selected() const  { return is_bit_set(SELECTED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::set_bit	Mesh/Status.hh	/^  void set_bit(unsigned int _s) { status_ |= _s; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s)
OpenMesh::Attributes::StatusInfo::set_bits	Mesh/Status.hh	/^  void set_bits(unsigned int _bits) { status_ = _bits; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _bits)
OpenMesh::Attributes::StatusInfo::set_deleted	Mesh/Status.hh	/^  void set_deleted(bool _b) { change_bit(DELETED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::set_feature	Mesh/Status.hh	/^  void set_feature(bool _b) { change_bit(FEATURE, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::set_fixed_nonmanifold	Mesh/Status.hh	/^  void set_fixed_nonmanifold(bool _b) { change_bit(FIXEDNONMANIFOLD, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::set_hidden	Mesh/Status.hh	/^  void set_hidden(bool _b) { change_bit(HIDDEN, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::set_locked	Mesh/Status.hh	/^  void set_locked(bool _b) { change_bit(LOCKED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::set_selected	Mesh/Status.hh	/^  void set_selected(bool _b) { change_bit(SELECTED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::set_tagged	Mesh/Status.hh	/^  void set_tagged(bool _b) { change_bit(TAGGED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::set_tagged2	Mesh/Status.hh	/^  void set_tagged2(bool _b) { change_bit(TAGGED2, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
OpenMesh::Attributes::StatusInfo::status_	Mesh/Status.hh	/^  value_type status_;$/;"	m	class:OpenMesh::Attributes::StatusInfo	access:private
OpenMesh::Attributes::StatusInfo::tagged	Mesh/Status.hh	/^  bool tagged() const  { return is_bit_set(TAGGED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::tagged2	Mesh/Status.hh	/^  bool tagged2() const  { return is_bit_set(TAGGED2); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
OpenMesh::Attributes::StatusInfo::unset_bit	Mesh/Status.hh	/^  void unset_bit(unsigned int _s) { status_ &= ~_s; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s)
OpenMesh::Attributes::StatusInfo::value_type	Mesh/Status.hh	/^  typedef unsigned int value_type;$/;"	t	class:OpenMesh::Attributes::StatusInfo	access:public
OpenMesh::Attributes::TAGGED	Mesh/Status.hh	/^  TAGGED                = 32,   \/\/\/< Item is tagged.$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::TAGGED2	Mesh/Status.hh	/^  TAGGED2               = 64,   \/\/\/< Alternate bit for tagging an item.$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::Attributes::TexCoord1D	Mesh/Attributes.hh	/^  TexCoord1D    = 16, \/\/\/< Add 1D texture coordinates (vertices, halfedges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::TexCoord2D	Mesh/Attributes.hh	/^  TexCoord2D    = 32, \/\/\/< Add 2D texture coordinates (vertices, halfedges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::TexCoord3D	Mesh/Attributes.hh	/^  TexCoord3D    = 64, \/\/\/< Add 3D texture coordinates (vertices, halfedges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::TextureIndex	Mesh/Attributes.hh	/^  TextureIndex  = 128 \/\/\/< Add texture index (faces)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
OpenMesh::Attributes::UNUSED	Mesh/Status.hh	/^  UNUSED                = 256   \/\/\/< Unused$/;"	e	enum:OpenMesh::Attributes::StatusBits
OpenMesh::AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^class AutoPropertyHandleT : public PropertyHandle_$/;"	c	namespace:OpenMesh	inherits:PropertyHandle_
OpenMesh::AutoPropertyHandleT::AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  AutoPropertyHandleT()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
OpenMesh::AutoPropertyHandleT::AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  AutoPropertyHandleT(Mesh& _m, PropertyHandle _pph)$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(Mesh& _m, PropertyHandle _pph)
OpenMesh::AutoPropertyHandleT::AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  AutoPropertyHandleT(const Self& _other)$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(const Self& _other)
OpenMesh::AutoPropertyHandleT::AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  explicit AutoPropertyHandleT(Mesh& _m, const std::string& _pp_name = std::string())$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(Mesh& _m, const std::string& _pp_name = std::string())
OpenMesh::AutoPropertyHandleT::Base	Utils/AutoPropertyHandleT.hh	/^  typedef PropertyHandle                    Base;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
OpenMesh::AutoPropertyHandleT::Mesh	Utils/AutoPropertyHandleT.hh	/^  typedef Mesh_                             Mesh;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
OpenMesh::AutoPropertyHandleT::PropertyHandle	Utils/AutoPropertyHandleT.hh	/^  typedef PropertyHandle_                   PropertyHandle;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
OpenMesh::AutoPropertyHandleT::Self	Utils/AutoPropertyHandleT.hh	/^                                            Self;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
OpenMesh::AutoPropertyHandleT::Value	Utils/AutoPropertyHandleT.hh	/^  typedef typename PropertyHandle::Value    Value;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
OpenMesh::AutoPropertyHandleT::add_property	Utils/AutoPropertyHandleT.hh	/^  inline void                               add_property(Mesh& _m, const std::string& _pp_name = std::string())$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(Mesh& _m, const std::string& _pp_name = std::string())
OpenMesh::AutoPropertyHandleT::free_property	Utils/AutoPropertyHandleT.hh	/^  inline void                               free_property()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
OpenMesh::AutoPropertyHandleT::m_	Utils/AutoPropertyHandleT.hh	/^  Mesh*                                     m_;$/;"	m	class:OpenMesh::AutoPropertyHandleT	access:protected
OpenMesh::AutoPropertyHandleT::operator []	Utils/AutoPropertyHandleT.hh	/^  inline Value&                             operator [] (_Handle _hnd)$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(_Handle _hnd)
OpenMesh::AutoPropertyHandleT::operator []	Utils/AutoPropertyHandleT.hh	/^  inline const Value&                       operator [] (_Handle _hnd) const$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(_Handle _hnd) const
OpenMesh::AutoPropertyHandleT::own_property	Utils/AutoPropertyHandleT.hh	/^  inline bool                               own_property() const$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:() const
OpenMesh::AutoPropertyHandleT::own_property_	Utils/AutoPropertyHandleT.hh	/^  bool                                      own_property_;\/\/ref counting?$/;"	m	class:OpenMesh::AutoPropertyHandleT	access:protected
OpenMesh::AutoPropertyHandleT::remove_property	Utils/AutoPropertyHandleT.hh	/^  inline void                               remove_property()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
OpenMesh::AutoPropertyHandleT::~AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  ~AutoPropertyHandleT()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
OpenMesh::BaseHandle	Mesh/Handles.hh	/^class BaseHandle$/;"	c	namespace:OpenMesh
OpenMesh::BaseHandle::BaseHandle	Mesh/Handles.hh	/^  explicit BaseHandle(int _idx=-1) : idx_(_idx) {}$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(int _idx=-1)
OpenMesh::BaseHandle::__decrement	Mesh/Handles.hh	/^  void __decrement() { --idx_; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
OpenMesh::BaseHandle::__increment	Mesh/Handles.hh	/^  void __increment() { ++idx_; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
OpenMesh::BaseHandle::idx	Mesh/Handles.hh	/^  int idx() const { return idx_; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:() const
OpenMesh::BaseHandle::idx_	Mesh/Handles.hh	/^  int idx_; $/;"	m	class:OpenMesh::BaseHandle	access:private
OpenMesh::BaseHandle::invalidate	Mesh/Handles.hh	/^  void invalidate() { idx_ = -1; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
OpenMesh::BaseHandle::is_valid	Mesh/Handles.hh	/^  bool is_valid() const { return idx_ != -1; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:() const
OpenMesh::BaseHandle::operator !=	Mesh/Handles.hh	/^  bool operator!=(const BaseHandle& _rhs) const { $/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(const BaseHandle& _rhs) const
OpenMesh::BaseHandle::operator <	Mesh/Handles.hh	/^  bool operator<(const BaseHandle& _rhs) const { $/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(const BaseHandle& _rhs) const
OpenMesh::BaseHandle::operator ==	Mesh/Handles.hh	/^  bool operator==(const BaseHandle& _rhs) const { $/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(const BaseHandle& _rhs) const
OpenMesh::BaseHandle::reset	Mesh/Handles.hh	/^  void reset() { idx_=-1; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
OpenMesh::BaseKernel	Mesh/BaseKernel.hh	/^class OPENMESHDLLEXPORT BaseKernel$/;"	c	namespace:OpenMesh
OpenMesh::BaseKernel::BaseKernel	Mesh/BaseKernel.hh	/^  BaseKernel() {}$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::_add_eprop	Mesh/BaseKernel.hh	/^  size_t _add_eprop( BaseProperty* _bp ) { return eprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
OpenMesh::BaseKernel::_add_fprop	Mesh/BaseKernel.hh	/^  size_t _add_fprop( BaseProperty* _bp ) { return fprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
OpenMesh::BaseKernel::_add_hprop	Mesh/BaseKernel.hh	/^  size_t _add_hprop( BaseProperty* _bp ) { return hprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
OpenMesh::BaseKernel::_add_mprop	Mesh/BaseKernel.hh	/^  size_t _add_mprop( BaseProperty* _bp ) { return mprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
OpenMesh::BaseKernel::_add_vprop	Mesh/BaseKernel.hh	/^  size_t _add_vprop( BaseProperty* _bp ) { return vprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
OpenMesh::BaseKernel::_eprop	Mesh/BaseKernel.hh	/^  BaseProperty& _eprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
OpenMesh::BaseKernel::_eprop	Mesh/BaseKernel.hh	/^  BaseProperty& _eprop( size_t _idx ) { return eprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
OpenMesh::BaseKernel::_eprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _eprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
OpenMesh::BaseKernel::_eprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _eprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
OpenMesh::BaseKernel::_fprop	Mesh/BaseKernel.hh	/^  BaseProperty& _fprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
OpenMesh::BaseKernel::_fprop	Mesh/BaseKernel.hh	/^  BaseProperty& _fprop( size_t _idx ) { return fprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
OpenMesh::BaseKernel::_fprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _fprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
OpenMesh::BaseKernel::_fprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _fprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
OpenMesh::BaseKernel::_get_eprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_eprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
OpenMesh::BaseKernel::_get_eprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_eprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
OpenMesh::BaseKernel::_get_fprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_fprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
OpenMesh::BaseKernel::_get_fprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_fprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
OpenMesh::BaseKernel::_get_hprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_hprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
OpenMesh::BaseKernel::_get_hprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_hprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
OpenMesh::BaseKernel::_get_mprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_mprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
OpenMesh::BaseKernel::_get_mprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_mprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
OpenMesh::BaseKernel::_get_vprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_vprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
OpenMesh::BaseKernel::_get_vprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_vprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
OpenMesh::BaseKernel::_hprop	Mesh/BaseKernel.hh	/^  BaseProperty& _hprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
OpenMesh::BaseKernel::_hprop	Mesh/BaseKernel.hh	/^  BaseProperty& _hprop( size_t _idx ) { return hprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
OpenMesh::BaseKernel::_hprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _hprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
OpenMesh::BaseKernel::_hprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _hprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
OpenMesh::BaseKernel::_mprop	Mesh/BaseKernel.hh	/^  BaseProperty& _mprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
OpenMesh::BaseKernel::_mprop	Mesh/BaseKernel.hh	/^  BaseProperty& _mprop( size_t _idx ) { return mprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
OpenMesh::BaseKernel::_mprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _mprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
OpenMesh::BaseKernel::_mprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _mprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
OpenMesh::BaseKernel::_vprop	Mesh/BaseKernel.hh	/^  BaseProperty& _vprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
OpenMesh::BaseKernel::_vprop	Mesh/BaseKernel.hh	/^  BaseProperty& _vprop( size_t _idx ) { return vprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
OpenMesh::BaseKernel::_vprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _vprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
OpenMesh::BaseKernel::_vprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _vprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
OpenMesh::BaseKernel::add_property	Mesh/BaseKernel.hh	/^  void add_property( EPropHandleT<T>& _ph, const std::string& _name="<eprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( EPropHandleT<T>& _ph, const std::string& _name=Ó)
OpenMesh::BaseKernel::add_property	Mesh/BaseKernel.hh	/^  void add_property( FPropHandleT<T>& _ph, const std::string& _name="<fprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( FPropHandleT<T>& _ph, const std::string& _name=Ó)
OpenMesh::BaseKernel::add_property	Mesh/BaseKernel.hh	/^  void add_property( HPropHandleT<T>& _ph, const std::string& _name="<hprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( HPropHandleT<T>& _ph, const std::string& _name=Ó)
OpenMesh::BaseKernel::add_property	Mesh/BaseKernel.hh	/^  void add_property( MPropHandleT<T>& _ph, const std::string& _name="<mprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( MPropHandleT<T>& _ph, const std::string& _name=Ó)
OpenMesh::BaseKernel::add_property	Mesh/BaseKernel.hh	/^  void add_property( VPropHandleT<T>& _ph, const std::string& _name="<vprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( VPropHandleT<T>& _ph, const std::string& _name=Ó)
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^	eprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^	fprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^	hprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^	vprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^    eprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^    fprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^    hprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^    mprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::clear	Mesh/BaseKernel.hh	/^    vprops_.clear();$/;"	p	signature:()
OpenMesh::BaseKernel::const_prop_iterator	Mesh/BaseKernel.hh	/^  typedef PropertyContainer::const_iterator const_prop_iterator;$/;"	t	class:OpenMesh::BaseKernel	access:public
OpenMesh::BaseKernel::copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(EdgeHandle _eh_from, EdgeHandle _eh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EdgeHandle _eh_from, EdgeHandle _eh_to, bool _copyBuildIn = false)
OpenMesh::BaseKernel::copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(FaceHandle _fh_from, FaceHandle _fh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FaceHandle _fh_from, FaceHandle _fh_to, bool _copyBuildIn = false)
OpenMesh::BaseKernel::copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(HalfedgeHandle _hh_from, HalfedgeHandle _hh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HalfedgeHandle _hh_from, HalfedgeHandle _hh_to, bool _copyBuildIn = false)
OpenMesh::BaseKernel::copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(VertexHandle _vh_from, VertexHandle _vh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VertexHandle _vh_from, VertexHandle _vh_to, bool _copyBuildIn = false)
OpenMesh::BaseKernel::copy_property	Mesh/BaseKernel.hh	/^  void copy_property(EPropHandleT<T> _ph, EdgeHandle _eh_from, EdgeHandle _eh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph, EdgeHandle _eh_from, EdgeHandle _eh_to)
OpenMesh::BaseKernel::copy_property	Mesh/BaseKernel.hh	/^  void copy_property(FPropHandleT<T> _ph, FaceHandle _fh_from, FaceHandle _fh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph, FaceHandle _fh_from, FaceHandle _fh_to)
OpenMesh::BaseKernel::copy_property	Mesh/BaseKernel.hh	/^  void copy_property(HPropHandleT<T> _ph, HalfedgeHandle _hh_from, HalfedgeHandle _hh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph, HalfedgeHandle _hh_from, HalfedgeHandle _hh_to)
OpenMesh::BaseKernel::copy_property	Mesh/BaseKernel.hh	/^  void copy_property(VPropHandleT<T>& _ph, VertexHandle _vh_from, VertexHandle _vh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T>& _ph, VertexHandle _vh_from, VertexHandle _vh_to)
OpenMesh::BaseKernel::eprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::eprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
OpenMesh::BaseKernel::eprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::eprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
OpenMesh::BaseKernel::eprop_stats	Mesh/BaseKernel.hh	/^  void eprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
OpenMesh::BaseKernel::eprop_stats	Mesh/BaseKernel.hh	/^  void eprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
OpenMesh::BaseKernel::eprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  eprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
OpenMesh::BaseKernel::eprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator eprops_begin() const { return eprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::eprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator eprops_begin() { return eprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::eprops_clear	Mesh/BaseKernel.hh	/^  void eprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
OpenMesh::BaseKernel::eprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator eprops_end()   const { return eprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::eprops_end	Mesh/BaseKernel.hh	/^  prop_iterator eprops_end()   { return eprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::eprops_reserve	Mesh/BaseKernel.hh	/^  void eprops_reserve(unsigned int _n) const { eprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::eprops_resize	Mesh/BaseKernel.hh	/^  void eprops_resize(unsigned int _n) const { eprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::eprops_swap	Mesh/BaseKernel.hh	/^  void eprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
OpenMesh::BaseKernel::fprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::fprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
OpenMesh::BaseKernel::fprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::fprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
OpenMesh::BaseKernel::fprop_stats	Mesh/BaseKernel.hh	/^  void fprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
OpenMesh::BaseKernel::fprop_stats	Mesh/BaseKernel.hh	/^  void fprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
OpenMesh::BaseKernel::fprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  fprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
OpenMesh::BaseKernel::fprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator fprops_begin() const { return fprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::fprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator fprops_begin() { return fprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::fprops_clear	Mesh/BaseKernel.hh	/^  void fprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
OpenMesh::BaseKernel::fprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator fprops_end()   const { return fprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::fprops_end	Mesh/BaseKernel.hh	/^  prop_iterator fprops_end()   { return fprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::fprops_reserve	Mesh/BaseKernel.hh	/^  void fprops_reserve(unsigned int _n) const { fprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::fprops_resize	Mesh/BaseKernel.hh	/^  void fprops_resize(unsigned int _n) const { fprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::fprops_swap	Mesh/BaseKernel.hh	/^  void fprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
OpenMesh::BaseKernel::get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(EPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T>& _ph, const std::string& _name) const
OpenMesh::BaseKernel::get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(FPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T>& _ph, const std::string& _name) const
OpenMesh::BaseKernel::get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(HPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T>& _ph, const std::string& _name) const
OpenMesh::BaseKernel::get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(MPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T>& _ph, const std::string& _name) const
OpenMesh::BaseKernel::get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(VPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T>& _ph, const std::string& _name) const
OpenMesh::BaseKernel::hprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::hprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
OpenMesh::BaseKernel::hprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::hprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
OpenMesh::BaseKernel::hprop_stats	Mesh/BaseKernel.hh	/^  void hprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
OpenMesh::BaseKernel::hprop_stats	Mesh/BaseKernel.hh	/^  void hprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
OpenMesh::BaseKernel::hprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  hprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
OpenMesh::BaseKernel::hprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator hprops_begin() const { return hprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::hprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator hprops_begin() { return hprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::hprops_clear	Mesh/BaseKernel.hh	/^  void hprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
OpenMesh::BaseKernel::hprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator hprops_end()   const { return hprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::hprops_end	Mesh/BaseKernel.hh	/^  prop_iterator hprops_end()   { return hprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::hprops_reserve	Mesh/BaseKernel.hh	/^  void hprops_reserve(unsigned int _n) const { hprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::hprops_resize	Mesh/BaseKernel.hh	/^  void hprops_resize(unsigned int _n) const { hprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::hprops_swap	Mesh/BaseKernel.hh	/^  void hprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
OpenMesh::BaseKernel::mprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::mprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
OpenMesh::BaseKernel::mprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::mprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
OpenMesh::BaseKernel::mprop_stats	Mesh/BaseKernel.hh	/^  void mprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
OpenMesh::BaseKernel::mprop_stats	Mesh/BaseKernel.hh	/^  void mprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
OpenMesh::BaseKernel::mproperty	Mesh/BaseKernel.hh	/^  PropertyT<T>& mproperty(MPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph)
OpenMesh::BaseKernel::mproperty	Mesh/BaseKernel.hh	/^  const PropertyT<T>& mproperty(MPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph) const
OpenMesh::BaseKernel::mprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  mprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
OpenMesh::BaseKernel::mprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator mprops_begin() const { return mprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::mprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator mprops_begin() { return mprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::mprops_clear	Mesh/BaseKernel.hh	/^  void mprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
OpenMesh::BaseKernel::mprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator mprops_end()   const { return mprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::mprops_end	Mesh/BaseKernel.hh	/^  prop_iterator mprops_end()   { return mprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::mprops_resize	Mesh/BaseKernel.hh	/^  void mprops_resize(unsigned int _n) const { mprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::n_edges	Mesh/BaseKernel.hh	/^    eprops_.resize(n_edges());$/;"	p	signature:()
OpenMesh::BaseKernel::n_edges	Mesh/BaseKernel.hh	/^  virtual uint n_edges()     const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::n_eprops	Mesh/BaseKernel.hh	/^  size_t n_eprops(void) const { return eprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
OpenMesh::BaseKernel::n_faces	Mesh/BaseKernel.hh	/^    fprops_.resize(n_faces());$/;"	p	signature:()
OpenMesh::BaseKernel::n_faces	Mesh/BaseKernel.hh	/^  virtual uint n_faces()     const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::n_fprops	Mesh/BaseKernel.hh	/^  size_t n_fprops(void) const { return fprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
OpenMesh::BaseKernel::n_halfedges	Mesh/BaseKernel.hh	/^    hprops_.resize(n_halfedges());$/;"	p	signature:()
OpenMesh::BaseKernel::n_halfedges	Mesh/BaseKernel.hh	/^  virtual uint n_halfedges() const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::n_hprops	Mesh/BaseKernel.hh	/^  size_t n_hprops(void) const { return hprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
OpenMesh::BaseKernel::n_mprops	Mesh/BaseKernel.hh	/^  size_t n_mprops(void) const { return mprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
OpenMesh::BaseKernel::n_vertices	Mesh/BaseKernel.hh	/^    vprops_.resize(n_vertices());$/;"	p	signature:()
OpenMesh::BaseKernel::n_vertices	Mesh/BaseKernel.hh	/^  virtual uint n_vertices()  const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::n_vprops	Mesh/BaseKernel.hh	/^  size_t n_vprops(void) const { return vprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
OpenMesh::BaseKernel::prop_iterator	Mesh/BaseKernel.hh	/^  typedef PropertyContainer::iterator prop_iterator;$/;"	t	class:OpenMesh::BaseKernel	access:public
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^      eprops_.property(_ph)[_eh_from.idx()] = eprops_.property(_ph)[_eh_from.idx()];$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^      fprops_.property(_ph)[_fh_from.idx()] = fprops_.property(_ph)[_fh_from.idx()];$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^      hprops_.property(_ph)[_hh_from.idx()] = hprops_.property(_ph)[_hh_from.idx()];$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^      vprops_.property(_ph)[_vh_from.idx()] = vprops_.property(_ph)[_vh_from.idx()];$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(EPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(FPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(HPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(VPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(EPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(FPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(HPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(VPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(EPropHandleT<T> _ph, EdgeHandle _eh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph, EdgeHandle _eh) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(EPropHandleT<T> _ph, EdgeHandle _eh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph, EdgeHandle _eh)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(FPropHandleT<T> _ph, FaceHandle _fh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph, FaceHandle _fh) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(FPropHandleT<T> _ph, FaceHandle _fh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph, FaceHandle _fh)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(HPropHandleT<T> _ph, HalfedgeHandle _hh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph, HalfedgeHandle _hh) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(HPropHandleT<T> _ph, HalfedgeHandle _hh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph, HalfedgeHandle _hh)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(MPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(MPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph)
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(VPropHandleT<T> _ph, VertexHandle _vh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph, VertexHandle _vh) const
OpenMesh::BaseKernel::property	Mesh/BaseKernel.hh	/^  property(VPropHandleT<T> _ph, VertexHandle _vh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph, VertexHandle _vh)
OpenMesh::BaseKernel::property_stats	Mesh/BaseKernel.cc	/^void BaseKernel::property_stats(std::ostream& _ostr) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr) const
OpenMesh::BaseKernel::property_stats	Mesh/BaseKernel.hh	/^  void property_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
OpenMesh::BaseKernel::remove	Mesh/BaseKernel.hh	/^      eprops_.remove(_ph);$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::remove	Mesh/BaseKernel.hh	/^      fprops_.remove(_ph);$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::remove	Mesh/BaseKernel.hh	/^      hprops_.remove(_ph);$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::remove	Mesh/BaseKernel.hh	/^      mprops_.remove(_ph);$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::remove	Mesh/BaseKernel.hh	/^      vprops_.remove(_ph);$/;"	p	signature:(_ph)
OpenMesh::BaseKernel::remove_property	Mesh/BaseKernel.hh	/^  void remove_property(EPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T>& _ph)
OpenMesh::BaseKernel::remove_property	Mesh/BaseKernel.hh	/^  void remove_property(FPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T>& _ph)
OpenMesh::BaseKernel::remove_property	Mesh/BaseKernel.hh	/^  void remove_property(HPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T>& _ph)
OpenMesh::BaseKernel::remove_property	Mesh/BaseKernel.hh	/^  void remove_property(MPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T>& _ph)
OpenMesh::BaseKernel::remove_property	Mesh/BaseKernel.hh	/^  void remove_property(VPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T>& _ph)
OpenMesh::BaseKernel::reserve	Mesh/BaseKernel.hh	/^  void eprops_reserve(unsigned int _n) const { eprops_.reserve(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::reserve	Mesh/BaseKernel.hh	/^  void fprops_reserve(unsigned int _n) const { fprops_.reserve(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::reserve	Mesh/BaseKernel.hh	/^  void hprops_reserve(unsigned int _n) const { hprops_.reserve(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::reserve	Mesh/BaseKernel.hh	/^  void vprops_reserve(unsigned int _n) const { vprops_.reserve(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::reset	Mesh/BaseKernel.hh	/^    _ph.reset();$/;"	p	signature:()
OpenMesh::BaseKernel::resize	Mesh/BaseKernel.hh	/^  void eprops_resize(unsigned int _n) const { eprops_.resize(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::resize	Mesh/BaseKernel.hh	/^  void fprops_resize(unsigned int _n) const { fprops_.resize(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::resize	Mesh/BaseKernel.hh	/^  void hprops_resize(unsigned int _n) const { hprops_.resize(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::resize	Mesh/BaseKernel.hh	/^  void mprops_resize(unsigned int _n) const { mprops_.resize(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::resize	Mesh/BaseKernel.hh	/^  void vprops_resize(unsigned int _n) const { vprops_.resize(_n); }$/;"	p	signature:(_n)
OpenMesh::BaseKernel::swap	Mesh/BaseKernel.hh	/^    eprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
OpenMesh::BaseKernel::swap	Mesh/BaseKernel.hh	/^    fprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
OpenMesh::BaseKernel::swap	Mesh/BaseKernel.hh	/^    hprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
OpenMesh::BaseKernel::swap	Mesh/BaseKernel.hh	/^    vprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
OpenMesh::BaseKernel::vprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::vprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
OpenMesh::BaseKernel::vprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::vprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
OpenMesh::BaseKernel::vprop_stats	Mesh/BaseKernel.hh	/^  void vprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
OpenMesh::BaseKernel::vprop_stats	Mesh/BaseKernel.hh	/^  void vprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
OpenMesh::BaseKernel::vprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  vprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
OpenMesh::BaseKernel::vprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator vprops_begin() const { return vprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::vprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator vprops_begin() { return vprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::vprops_clear	Mesh/BaseKernel.hh	/^  void vprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
OpenMesh::BaseKernel::vprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator vprops_end()   const { return vprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
OpenMesh::BaseKernel::vprops_end	Mesh/BaseKernel.hh	/^  prop_iterator vprops_end()   { return vprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseKernel::vprops_reserve	Mesh/BaseKernel.hh	/^  void vprops_reserve(unsigned int _n) const { vprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::vprops_resize	Mesh/BaseKernel.hh	/^  void vprops_resize(unsigned int _n) const { vprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
OpenMesh::BaseKernel::vprops_swap	Mesh/BaseKernel.hh	/^  void vprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
OpenMesh::BaseKernel::~BaseKernel	Mesh/BaseKernel.hh	/^  virtual ~BaseKernel() {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
OpenMesh::BaseMesh	Mesh/BaseMesh.hh	/^class BaseMesh {$/;"	c	namespace:OpenMesh
OpenMesh::BaseMesh::~BaseMesh	Mesh/BaseMesh.hh	/^  virtual ~BaseMesh(void) {;}$/;"	f	class:OpenMesh::BaseMesh	access:public	signature:(void)
OpenMesh::BasePropHandleT	Utils/Property.hh	/^struct BasePropHandleT : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
OpenMesh::BasePropHandleT::BasePropHandleT	Utils/Property.hh	/^  explicit BasePropHandleT(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::BasePropHandleT	access:public	signature:(int _idx=-1)
OpenMesh::BasePropHandleT::Value	Utils/Property.hh	/^  typedef T                                       Value;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
OpenMesh::BasePropHandleT::const_reference	Utils/Property.hh	/^  typedef typename vector_type::const_reference   const_reference;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
OpenMesh::BasePropHandleT::reference	Utils/Property.hh	/^  typedef typename vector_type::reference         reference;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
OpenMesh::BasePropHandleT::value_type	Utils/Property.hh	/^  typedef T                                       value_type;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
OpenMesh::BasePropHandleT::vector_type	Utils/Property.hh	/^  typedef std::vector<T>                          vector_type;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
OpenMesh::BaseProperty	Utils/BaseProperty.hh	/^class OPENMESHDLLEXPORT BaseProperty$/;"	c	namespace:OpenMesh
OpenMesh::BaseProperty::BaseProperty	Utils/BaseProperty.hh	/^  BaseProperty(const BaseProperty & _rhs)$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(const BaseProperty & _rhs)
OpenMesh::BaseProperty::BaseProperty	Utils/BaseProperty.hh	/^  BaseProperty(const std::string& _name = "<unknown>")$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(const std::string& _name = Ó)
OpenMesh::BaseProperty::UnknownSize	Utils/BaseProperty.hh	/^  static const size_t UnknownSize = size_t(-1);$/;"	m	class:OpenMesh::BaseProperty	access:public
OpenMesh::BaseProperty::check_and_set_persistent	Utils/BaseProperty.hh	/^  void check_and_set_persistent( bool _yn )$/;"	f	class:OpenMesh::BaseProperty	access:protected	signature:( bool _yn )
OpenMesh::BaseProperty::clear	Utils/BaseProperty.hh	/^  virtual void clear() = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:()
OpenMesh::BaseProperty::clone	Utils/BaseProperty.hh	/^  virtual BaseProperty* clone () const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:() const
OpenMesh::BaseProperty::copy	Utils/BaseProperty.hh	/^  virtual void copy(size_t _io, size_t _i1) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _io, size_t _i1)
OpenMesh::BaseProperty::element_size	Utils/BaseProperty.hh	/^  virtual size_t       element_size() const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:() const
OpenMesh::BaseProperty::n_elements	Utils/BaseProperty.hh	/^  virtual size_t       n_elements() const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:() const
OpenMesh::BaseProperty::name	Utils/BaseProperty.hh	/^  const std::string& name() const { return name_; }$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:() const
OpenMesh::BaseProperty::name_	Utils/BaseProperty.hh	/^  std::string name_;$/;"	m	class:OpenMesh::BaseProperty	access:private
OpenMesh::BaseProperty::persistent	Utils/BaseProperty.hh	/^  bool persistent(void) const { return persistent_; }$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(void) const
OpenMesh::BaseProperty::persistent_	Utils/BaseProperty.hh	/^  bool        persistent_;$/;"	m	class:OpenMesh::BaseProperty	access:private
OpenMesh::BaseProperty::push_back	Utils/BaseProperty.hh	/^  virtual void push_back() = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:()
OpenMesh::BaseProperty::reserve	Utils/BaseProperty.hh	/^  virtual void reserve(size_t _n) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _n)
OpenMesh::BaseProperty::resize	Utils/BaseProperty.hh	/^  virtual void resize(size_t _n) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _n)
OpenMesh::BaseProperty::restore	Utils/BaseProperty.hh	/^  virtual size_t restore( std::istream& _istr, bool _swap ) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:( std::istream& _istr, bool _swap )
OpenMesh::BaseProperty::set_persistent	Utils/BaseProperty.hh	/^  virtual void set_persistent( bool _yn ) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:( bool _yn )
OpenMesh::BaseProperty::size_of	Utils/BaseProperty.hh	/^  virtual size_t       size_of() const$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:() const
OpenMesh::BaseProperty::size_of	Utils/BaseProperty.hh	/^  virtual size_t       size_of(size_t _n_elem) const$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(size_t _n_elem) const
OpenMesh::BaseProperty::stats	Utils/BaseProperty.cc	/^void BaseProperty::stats(std::ostream& _ostr) const$/;"	f	class:OpenMesh::BaseProperty	signature:(std::ostream& _ostr) const
OpenMesh::BaseProperty::stats	Utils/BaseProperty.hh	/^  virtual void stats(std::ostream& _ostr) const;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(std::ostream& _ostr) const
OpenMesh::BaseProperty::store	Utils/BaseProperty.hh	/^  virtual size_t store( std::ostream& _ostr, bool _swap ) const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:( std::ostream& _ostr, bool _swap ) const
OpenMesh::BaseProperty::swap	Utils/BaseProperty.hh	/^  virtual void swap(size_t _i0, size_t _i1) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _i0, size_t _i1)
OpenMesh::BaseProperty::~BaseProperty	Utils/BaseProperty.hh	/^  virtual ~BaseProperty() {}$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:()
OpenMesh::ClearAll	Utils/PropertyContainer.hh	/^  struct ClearAll$/;"	s	namespace:OpenMesh
OpenMesh::ClearAll::ClearAll	Utils/PropertyContainer.hh	/^    ClearAll() {}$/;"	f	struct:OpenMesh::ClearAll	access:public	signature:()
OpenMesh::ClearAll::clear	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->clear(); }$/;"	p	signature:()
OpenMesh::ClearAll::operator ()	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->clear(); }$/;"	f	struct:OpenMesh::ClearAll	access:public	signature:(BaseProperty* _p) const
OpenMesh::DefaultTraits	Mesh/Traits.hh	/^struct DefaultTraits$/;"	s	namespace:OpenMesh
OpenMesh::DefaultTraits::Color	Mesh/Traits.hh	/^  typedef Vec3uc Color;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
OpenMesh::DefaultTraits::HalfedgeAttributes	Mesh/Traits.hh	/^  HalfedgeAttributes(Attributes::PrevHalfedge);$/;"	p	struct:OpenMesh::DefaultTraits	access:public	signature:(Attributes::PrevHalfedge)
OpenMesh::DefaultTraits::Normal	Mesh/Traits.hh	/^  typedef Vec3f  Normal;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
OpenMesh::DefaultTraits::Point	Mesh/Traits.hh	/^  typedef Vec3f  Point;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
OpenMesh::DefaultTraits::TexCoord1D	Mesh/Traits.hh	/^  typedef float  TexCoord1D;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
OpenMesh::DefaultTraits::TexCoord2D	Mesh/Traits.hh	/^  typedef Vec2f  TexCoord2D;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
OpenMesh::DefaultTraits::TexCoord3D	Mesh/Traits.hh	/^  typedef Vec3f  TexCoord3D;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
OpenMesh::DefaultTraits::TextureIndex	Mesh/Traits.hh	/^  typedef int TextureIndex;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
OpenMesh::Delete	Utils/PropertyContainer.hh	/^  struct Delete$/;"	s	namespace:OpenMesh
OpenMesh::Delete::Delete	Utils/PropertyContainer.hh	/^    Delete() {}$/;"	f	struct:OpenMesh::Delete	access:public	signature:()
OpenMesh::Delete::operator ()	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) delete _p; _p=NULL; }$/;"	f	struct:OpenMesh::Delete	access:public	signature:(BaseProperty* _p) const
OpenMesh::EPropHandleT	Utils/Property.hh	/^struct EPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
OpenMesh::EPropHandleT::EPropHandleT	Utils/Property.hh	/^  explicit EPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::EPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
OpenMesh::EPropHandleT::EPropHandleT	Utils/Property.hh	/^  explicit EPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::EPropHandleT	access:public	signature:(int _idx=-1)
OpenMesh::EPropHandleT::Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::EPropHandleT	access:public
OpenMesh::EPropHandleT::value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::EPropHandleT	access:public
OpenMesh::EdgeHandle	Mesh/Handles.hh	/^struct EdgeHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
OpenMesh::EdgeHandle::EdgeHandle	Mesh/Handles.hh	/^  explicit EdgeHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::EdgeHandle	access:public	signature:(int _idx=-1)
OpenMesh::Endian	Utils/Endian.hh	/^class OPENMESHDLLEXPORT Endian$/;"	c	namespace:OpenMesh
OpenMesh::Endian::LSB	Utils/Endian.hh	/^    LSB = 1, \/\/\/< Little endian (Intel family and clones)$/;"	e	enum:OpenMesh::Endian::Type
OpenMesh::Endian::MSB	Utils/Endian.hh	/^    MSB      \/\/\/< big endian (Motorola's 68x family, DEC Alpha, MIPS)$/;"	e	enum:OpenMesh::Endian::Type
OpenMesh::Endian::Type	Utils/Endian.hh	/^  enum Type {$/;"	g	class:OpenMesh::Endian	access:public
OpenMesh::Endian::as_string	Utils/Endian.cc	/^const char * Endian::as_string(Type _t)$/;"	f	class:OpenMesh::Endian	signature:(Type _t)
OpenMesh::Endian::as_string	Utils/Endian.hh	/^  static const char * as_string(Type _t);$/;"	p	class:OpenMesh::Endian	access:public	signature:(Type _t)
OpenMesh::Endian::local	Utils/Endian.hh	/^  static Type local() { return local_; }$/;"	f	class:OpenMesh::Endian	access:public	signature:()
OpenMesh::Endian::local_	Utils/Endian.cc	/^const Endian::Type Endian::local_ = *((unsigned char*)&Endian::one_)$/;"	m	class:OpenMesh::Endian	file:
OpenMesh::Endian::local_	Utils/Endian.hh	/^   static const Type local_;$/;"	m	class:OpenMesh::Endian	access:private
OpenMesh::Endian::one_	Utils/Endian.cc	/^int Endian::one_ = 1;$/;"	m	class:OpenMesh::Endian	file:
OpenMesh::Endian::one_	Utils/Endian.hh	/^   static int one_;$/;"	m	class:OpenMesh::Endian	access:private
OpenMesh::FPropHandleT	Utils/Property.hh	/^struct FPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
OpenMesh::FPropHandleT::FPropHandleT	Utils/Property.hh	/^  explicit FPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::FPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
OpenMesh::FPropHandleT::FPropHandleT	Utils/Property.hh	/^  explicit FPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::FPropHandleT	access:public	signature:(int _idx=-1)
OpenMesh::FPropHandleT::Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::FPropHandleT	access:public
OpenMesh::FPropHandleT::value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::FPropHandleT	access:public
OpenMesh::FaceHandle	Mesh/ArrayKernelT.cc	/^  for (i=0; i<nF; ++i) fh_map.push_back(FaceHandle(i));$/;"	p	file:	signature:(i)
OpenMesh::FaceHandle	Mesh/Handles.hh	/^struct FaceHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
OpenMesh::FaceHandle::FaceHandle	Mesh/Handles.hh	/^  explicit FaceHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::FaceHandle	access:public	signature:(int _idx=-1)
OpenMesh::FinalMeshItemsT	Mesh/FinalMeshItemsT.hh	/^struct FinalMeshItemsT$/;"	s	namespace:OpenMesh
OpenMesh::FinalMeshItemsT::Attribs	Mesh/FinalMeshItemsT.hh	/^  enum Attribs$/;"	g	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::Color	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Color           Color;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::EAttribs	Mesh/FinalMeshItemsT.hh	/^    EAttribs = Traits::EdgeAttributes,$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
OpenMesh::FinalMeshItemsT::EdgeData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template EdgeT<ITraits, Refs>        EdgeData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::FAttribs	Mesh/FinalMeshItemsT.hh	/^    FAttribs = Traits::FaceAttributes$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
OpenMesh::FinalMeshItemsT::FaceData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template FaceT<ITraits, Refs>        FaceData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::HAttribs	Mesh/FinalMeshItemsT.hh	/^    HAttribs = Traits::HalfedgeAttributes,$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
OpenMesh::FinalMeshItemsT::HalfedgeData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template HalfedgeT<ITraits, Refs>    HalfedgeData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::ITraits	Mesh/FinalMeshItemsT.hh	/^  class ITraits$/;"	c	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::Normal	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Normal          Normal;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::Point	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Point           Point;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::Refs	Mesh/FinalMeshItemsT.hh	/^  struct Refs$/;"	s	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::Refs::Color	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::Color            Color;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::EdgeHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::EdgeHandle              EdgeHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::FaceHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::FaceHandle              FaceHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::HalfedgeHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::HalfedgeHandle          HalfedgeHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::Normal	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::Normal           Normal;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::Point	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::Point            Point;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::Scalar	Mesh/FinalMeshItemsT.hh	/^    typedef typename vector_traits<Point>::value_type Scalar;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::TexCoord1D	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TexCoord1D       TexCoord1D;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::TexCoord2D	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TexCoord2D       TexCoord2D;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::TexCoord3D	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TexCoord3D       TexCoord3D;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::TextureIndex	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TextureIndex     TextureIndex;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Refs::VertexHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::VertexHandle            VertexHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
OpenMesh::FinalMeshItemsT::Scalar	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Scalar          Scalar;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::TexCoord1D	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TexCoord1D      TexCoord1D;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::TexCoord2D	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TexCoord2D      TexCoord2D;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::TexCoord3D	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TexCoord3D      TexCoord3D;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::TextureIndex	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TextureIndex    TextureIndex;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::FinalMeshItemsT::VAttribs	Mesh/FinalMeshItemsT.hh	/^    VAttribs = Traits::VertexAttributes,$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
OpenMesh::FinalMeshItemsT::VertexData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template VertexT<ITraits, Refs>      VertexData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
OpenMesh::GenProg	Utils/GenProg.hh	/^namespace GenProg  {$/;"	n	namespace:OpenMesh
OpenMesh::GenProg::AssertCompile	Utils/GenProg.hh	/^template <> struct AssertCompile<true> {};$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::Bool2Type	Utils/GenProg.hh	/^template <bool b> struct Bool2Type { enum { my_bool = b }; };$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::Bool2Type::my_bool	Utils/GenProg.hh	/^template <bool b> struct Bool2Type { enum { my_bool = b }; };$/;"	e	enum:OpenMesh::GenProg::Bool2Type::__anon1
OpenMesh::GenProg::ChooseSelector	Utils/GenProg.hh	/^template <> struct ChooseSelector<false> {$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::ChooseSelector	Utils/GenProg.hh	/^template <bool condition> struct ChooseSelector {$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::ChooseSelector::Result	Utils/GenProg.hh	/^  typedef SelectElse Result;$/;"	t	struct:OpenMesh::GenProg::ChooseSelector	access:public
OpenMesh::GenProg::ChooseSelector::Result	Utils/GenProg.hh	/^  typedef SelectThen Result;$/;"	t	struct:OpenMesh::GenProg::ChooseSelector	access:public
OpenMesh::GenProg::False	Utils/GenProg.hh	/^typedef Bool2Type<false> False;$/;"	t	namespace:OpenMesh::GenProg
OpenMesh::GenProg::IF	Utils/GenProg.hh	/^class IF $/;"	c	namespace:OpenMesh::GenProg
OpenMesh::GenProg::IF	Utils/GenProg.hh	/^struct IF { typedef Then Result; };$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::IF	Utils/GenProg.hh	/^struct IF<false, Then, Else> { typedef Else Result; };$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::IF::Result	Utils/GenProg.hh	/^  typedef typename Selector::template Select<Then, Else>::Result  Result;$/;"	t	class:OpenMesh::GenProg::IF	access:public
OpenMesh::GenProg::IF::Result	Utils/GenProg.hh	/^struct IF { typedef Then Result; };$/;"	t	struct:OpenMesh::GenProg::IF	access:public
OpenMesh::GenProg::IF::Result	Utils/GenProg.hh	/^struct IF<false, Then, Else> { typedef Else Result; };$/;"	t	struct:OpenMesh::GenProg::IF	access:public
OpenMesh::GenProg::IF::Selector	Utils/GenProg.hh	/^  typedef typename ChooseSelector<condition>::Result  Selector;$/;"	t	class:OpenMesh::GenProg::IF	access:private
OpenMesh::GenProg::Int2Type	Utils/GenProg.hh	/^template <int i>  struct Int2Type  { enum { my_int = i }; };$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::Int2Type::my_int	Utils/GenProg.hh	/^template <int i>  struct Int2Type  { enum { my_int = i }; };$/;"	e	enum:OpenMesh::GenProg::Int2Type::__anon2
OpenMesh::GenProg::SelectElse	Utils/GenProg.hh	/^struct SelectElse$/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::SelectElse::Select	Utils/GenProg.hh	/^  template <class Then, class Else> struct Select {$/;"	s	struct:OpenMesh::GenProg::SelectElse	access:public
OpenMesh::GenProg::SelectElse::Select::Result	Utils/GenProg.hh	/^    typedef Else Result;$/;"	t	struct:OpenMesh::GenProg::SelectElse::Select	access:public
OpenMesh::GenProg::SelectThen	Utils/GenProg.hh	/^struct SelectThen $/;"	s	namespace:OpenMesh::GenProg
OpenMesh::GenProg::SelectThen::Select	Utils/GenProg.hh	/^  template <class Then, class Else> struct Select {$/;"	s	struct:OpenMesh::GenProg::SelectThen	access:public
OpenMesh::GenProg::SelectThen::Select::Result	Utils/GenProg.hh	/^    typedef Then Result;$/;"	t	struct:OpenMesh::GenProg::SelectThen::Select	access:public
OpenMesh::GenProg::True	Utils/GenProg.hh	/^typedef Bool2Type<true> True;$/;"	t	namespace:OpenMesh::GenProg
OpenMesh::Geometry	Geometry/QuadricT.hh	/^namespace Geometry { \/\/BEGIN_NS_GEOMETRY$/;"	n	namespace:OpenMesh
OpenMesh::Geometry::QuadricT	Geometry/QuadricT.hh	/^class QuadricT$/;"	c	namespace:OpenMesh::Geometry
OpenMesh::Geometry::QuadricT::QuadricT	Geometry/QuadricT.hh	/^  QuadricT( Scalar _a=0.0, Scalar _b=0.0, Scalar _c=0.0, Scalar _d=0.0 )$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:( Scalar _a=0.0, Scalar _b=0.0, Scalar _c=0.0, Scalar _d=0.0 )
OpenMesh::Geometry::QuadricT::QuadricT	Geometry/QuadricT.hh	/^  QuadricT(Scalar _a, Scalar _b, Scalar _c, Scalar _d,$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(Scalar _a, Scalar _b, Scalar _c, Scalar _d, Scalar _e, Scalar _f, Scalar _g, Scalar _h, Scalar _i, Scalar _j)
OpenMesh::Geometry::QuadricT::QuadricT	Geometry/QuadricT.hh	/^  QuadricT(const _Normal& _n, const _Point& _p)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Normal& _n, const _Point& _p)
OpenMesh::Geometry::QuadricT::QuadricT	Geometry/QuadricT.hh	/^  QuadricT(const _Point& _pt)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Point& _pt)
OpenMesh::Geometry::QuadricT::Self	Geometry/QuadricT.hh	/^  typedef QuadricT<Scalar> Self;$/;"	t	class:OpenMesh::Geometry::QuadricT	access:public
OpenMesh::Geometry::QuadricT::a	Geometry/QuadricT.hh	/^  Scalar a() const { return a_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::a_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::b	Geometry/QuadricT.hh	/^  Scalar b() const { return b_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::b_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::c	Geometry/QuadricT.hh	/^  Scalar c() const { return c_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::c_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::clear	Geometry/QuadricT.hh	/^  void clear()  { a_ = b_ = c_ = d_ = e_ = f_ = g_ = h_ = i_ = j_ = 0.0; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:()
OpenMesh::Geometry::QuadricT::d	Geometry/QuadricT.hh	/^  Scalar d() const { return d_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::d_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::e	Geometry/QuadricT.hh	/^  Scalar e() const { return e_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::e_	Geometry/QuadricT.hh	/^             e_, f_, g_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::evaluate	Geometry/QuadricT.hh	/^  Scalar evaluate(const _Vec3& _v, GenProg::Int2Type<3>\/*_dimension*\/) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:protected	signature:(const _Vec3& _v, GenProg::Int2Type<3> ) const
OpenMesh::Geometry::QuadricT::evaluate	Geometry/QuadricT.hh	/^  Scalar evaluate(const _Vec4& _v, GenProg::Int2Type<4>\/*_dimension*\/) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:protected	signature:(const _Vec4& _v, GenProg::Int2Type<4> ) const
OpenMesh::Geometry::QuadricT::f	Geometry/QuadricT.hh	/^  Scalar f() const { return f_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::f_	Geometry/QuadricT.hh	/^             e_, f_, g_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::g	Geometry/QuadricT.hh	/^  Scalar g() const { return g_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::g_	Geometry/QuadricT.hh	/^             e_, f_, g_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::h	Geometry/QuadricT.hh	/^  Scalar h() const { return h_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::h_	Geometry/QuadricT.hh	/^                 h_, i_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::i	Geometry/QuadricT.hh	/^  Scalar i() const { return i_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::i_	Geometry/QuadricT.hh	/^                 h_, i_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::j	Geometry/QuadricT.hh	/^  Scalar j() const { return j_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::j_	Geometry/QuadricT.hh	/^                     j_;$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
OpenMesh::Geometry::QuadricT::operator ()	Geometry/QuadricT.hh	/^  Scalar operator()(const _Vec& _v) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Vec& _v) const
OpenMesh::Geometry::QuadricT::operator *	Geometry/QuadricT.hh	/^  _Vec4 operator*(const _Vec4& _v) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Vec4& _v) const
OpenMesh::Geometry::QuadricT::operator *=	Geometry/QuadricT.hh	/^  QuadricT<Scalar>& operator*=( Scalar _s)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:( Scalar _s)
OpenMesh::Geometry::QuadricT::operator +=	Geometry/QuadricT.hh	/^  QuadricT<Scalar>& operator+=( const QuadricT<Scalar>& _q )$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:( const QuadricT<Scalar>& _q )
OpenMesh::Geometry::QuadricT::set	Geometry/QuadricT.hh	/^  void set(Scalar _a, Scalar _b, Scalar _c, Scalar _d,$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(Scalar _a, Scalar _b, Scalar _c, Scalar _d, Scalar _e, Scalar _f, Scalar _g, Scalar _h, Scalar _i, Scalar _j)
OpenMesh::Geometry::QuadricT::set_distance_to_plane	Geometry/QuadricT.hh	/^  void set_distance_to_plane(Scalar _a, Scalar _b, Scalar _c, Scalar _d)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(Scalar _a, Scalar _b, Scalar _c, Scalar _d)
OpenMesh::Geometry::QuadricT::set_distance_to_plane	Geometry/QuadricT.hh	/^  void set_distance_to_plane(const _Normal&  _n, const _Point& _p)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Normal& _n, const _Point& _p)
OpenMesh::Geometry::QuadricT::set_distance_to_point	Geometry/QuadricT.hh	/^  void set_distance_to_point(const _Point& _pt)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Point& _pt)
OpenMesh::Geometry::QuadricT::type	Geometry/QuadricT.hh	/^  typedef QuadricT<Scalar> type;$/;"	t	class:OpenMesh::Geometry::QuadricT	access:public
OpenMesh::Geometry::QuadricT::value_type	Geometry/QuadricT.hh	/^  typedef Scalar           value_type;$/;"	t	class:OpenMesh::Geometry::QuadricT	access:public
OpenMesh::Geometry::QuadricT::w	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[3])
OpenMesh::Geometry::QuadricT::ww	Geometry/QuadricT.hh	/^  Scalar ww() const { return j_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::x	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[0])
OpenMesh::Geometry::QuadricT::x	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]);$/;"	p	signature:(_v[0])
OpenMesh::Geometry::QuadricT::xw	Geometry/QuadricT.hh	/^  Scalar xw() const { return d_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::xx	Geometry/QuadricT.hh	/^  Scalar xx() const { return a_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::xy	Geometry/QuadricT.hh	/^  Scalar xy() const { return b_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::xz	Geometry/QuadricT.hh	/^  Scalar xz() const { return c_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::y	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[1])
OpenMesh::Geometry::QuadricT::y	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]);$/;"	p	signature:(_v[1])
OpenMesh::Geometry::QuadricT::yw	Geometry/QuadricT.hh	/^  Scalar yw() const { return g_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::yy	Geometry/QuadricT.hh	/^  Scalar yy() const { return e_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::yz	Geometry/QuadricT.hh	/^  Scalar yz() const { return f_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::z	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[2])
OpenMesh::Geometry::QuadricT::z	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]);$/;"	p	signature:(_v[2])
OpenMesh::Geometry::QuadricT::zw	Geometry/QuadricT.hh	/^  Scalar zw() const { return i_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::QuadricT::zz	Geometry/QuadricT.hh	/^  Scalar zz() const { return h_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
OpenMesh::Geometry::Quadricd	Geometry/QuadricT.hh	/^typedef QuadricT<double> Quadricd;$/;"	t	namespace:OpenMesh::Geometry
OpenMesh::Geometry::Quadricf	Geometry/QuadricT.hh	/^typedef QuadricT<float> Quadricf;$/;"	t	namespace:OpenMesh::Geometry
OpenMesh::HPropHandleT	Utils/Property.hh	/^struct HPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
OpenMesh::HPropHandleT::HPropHandleT	Utils/Property.hh	/^  explicit HPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::HPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
OpenMesh::HPropHandleT::HPropHandleT	Utils/Property.hh	/^  explicit HPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::HPropHandleT	access:public	signature:(int _idx=-1)
OpenMesh::HPropHandleT::Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::HPropHandleT	access:public
OpenMesh::HPropHandleT::value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::HPropHandleT	access:public
OpenMesh::HalfedgeHandle	Mesh/ArrayKernelT.cc	/^  for (i=0; i<nH; ++i) hh_map.push_back(HalfedgeHandle(i));$/;"	p	file:	signature:(i)
OpenMesh::HalfedgeHandle	Mesh/Handles.hh	/^struct HalfedgeHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
OpenMesh::HalfedgeHandle::HalfedgeHandle	Mesh/Handles.hh	/^  explicit HalfedgeHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::HalfedgeHandle	access:public	signature:(int _idx=-1)
OpenMesh::IO	IO/BinaryHelper.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/BinaryHelper.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/IOInstances.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/IOManager.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/IOManager.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/MeshIO.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/OFFFormat.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/OMFormat.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/OMFormat.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/OMFormatT.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/Options.hh	/^namespace IO   {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/SR_binary.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/SR_binary_spec.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/SR_rbo.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/SR_types.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/StoreRestore.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/exporter/BaseExporter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/exporter/ExporterT.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/importer/BaseImporter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/importer/ImporterT.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/reader/BaseReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/reader/BaseReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/reader/OBJReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/reader/OBJReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/reader/OFFReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/reader/OFFReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/reader/OMReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/reader/OMReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/reader/PLYReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/reader/PLYReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/reader/STLReader.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/reader/STLReader.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/writer/BaseWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/writer/BaseWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/writer/OBJWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/writer/OBJWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/writer/OFFWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/writer/OFFWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/writer/OMWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/writer/OMWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/writer/PLYWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/writer/PLYWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO	IO/writer/STLWriter.cc	/^namespace IO {$/;"	n	namespace:OpenMesh	file:
OpenMesh::IO	IO/writer/STLWriter.hh	/^namespace IO {$/;"	n	namespace:OpenMesh
OpenMesh::IO::BaseExporter	IO/exporter/BaseExporter.hh	/^class OPENMESHDLLEXPORT BaseExporter$/;"	c	namespace:OpenMesh::IO
OpenMesh::IO::BaseExporter::color	IO/exporter/BaseExporter.hh	/^  virtual Vec3uc color (FaceHandle _fh)      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::BaseExporter::color	IO/exporter/BaseExporter.hh	/^  virtual Vec3uc color(EdgeHandle _eh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::BaseExporter::color	IO/exporter/BaseExporter.hh	/^  virtual Vec3uc color(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::colorA	IO/exporter/BaseExporter.hh	/^  virtual Vec4uc colorA(EdgeHandle _eh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::BaseExporter::colorA	IO/exporter/BaseExporter.hh	/^  virtual Vec4uc colorA(FaceHandle _fh)      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::BaseExporter::colorA	IO/exporter/BaseExporter.hh	/^  virtual Vec4uc colorA(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::colorAf	IO/exporter/BaseExporter.hh	/^  virtual Vec4f colorAf(EdgeHandle _eh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::BaseExporter::colorAf	IO/exporter/BaseExporter.hh	/^  virtual Vec4f colorAf(FaceHandle _fh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::BaseExporter::colorAf	IO/exporter/BaseExporter.hh	/^  virtual Vec4f colorAf(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::colorAi	IO/exporter/BaseExporter.hh	/^  virtual Vec4ui colorAi(EdgeHandle _eh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::BaseExporter::colorAi	IO/exporter/BaseExporter.hh	/^  virtual Vec4ui colorAi(FaceHandle _fh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::BaseExporter::colorAi	IO/exporter/BaseExporter.hh	/^  virtual Vec4ui colorAi(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::colorf	IO/exporter/BaseExporter.hh	/^  virtual Vec3f colorf(EdgeHandle _eh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::BaseExporter::colorf	IO/exporter/BaseExporter.hh	/^  virtual Vec3f colorf(FaceHandle _fh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::BaseExporter::colorf	IO/exporter/BaseExporter.hh	/^  virtual Vec3f colorf(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::colori	IO/exporter/BaseExporter.hh	/^  virtual Vec3ui colori(EdgeHandle _eh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::BaseExporter::colori	IO/exporter/BaseExporter.hh	/^  virtual Vec3ui colori(FaceHandle _fh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::BaseExporter::colori	IO/exporter/BaseExporter.hh	/^  virtual Vec3ui colori(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::get_vhandles	IO/exporter/BaseExporter.hh	/^  get_vhandles(FaceHandle _fh,$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh, std::vector<VertexHandle>& _vhandles) const
OpenMesh::IO::BaseExporter::has_edge_colors	IO/exporter/BaseExporter.hh	/^  virtual bool has_edge_colors()      const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::has_face_colors	IO/exporter/BaseExporter.hh	/^  virtual bool has_face_colors()      const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::has_face_normals	IO/exporter/BaseExporter.hh	/^  virtual bool has_face_normals()     const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::has_vertex_colors	IO/exporter/BaseExporter.hh	/^  virtual bool has_vertex_colors()    const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::has_vertex_normals	IO/exporter/BaseExporter.hh	/^  virtual bool has_vertex_normals()   const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::has_vertex_texcoords	IO/exporter/BaseExporter.hh	/^  virtual bool has_vertex_texcoords() const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::is_triangle_mesh	IO/exporter/BaseExporter.hh	/^  virtual bool is_triangle_mesh()     const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::kernel	IO/exporter/BaseExporter.hh	/^  virtual const BaseKernel* kernel() { return 0; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:()
OpenMesh::IO::BaseExporter::n_edges	IO/exporter/BaseExporter.hh	/^  virtual size_t n_edges()      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::n_faces	IO/exporter/BaseExporter.hh	/^  virtual size_t n_faces()      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::n_vertices	IO/exporter/BaseExporter.hh	/^  virtual size_t n_vertices()   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
OpenMesh::IO::BaseExporter::normal	IO/exporter/BaseExporter.hh	/^  virtual Vec3f  normal(FaceHandle _fh)      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::BaseExporter::normal	IO/exporter/BaseExporter.hh	/^  virtual Vec3f  normal(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::point	IO/exporter/BaseExporter.hh	/^  virtual Vec3f  point(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::texcoord	IO/exporter/BaseExporter.hh	/^  virtual Vec2f  texcoord(VertexHandle _vh) const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::BaseExporter::~BaseExporter	IO/exporter/BaseExporter.hh	/^  virtual ~BaseExporter() { }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:()
OpenMesh::IO::BaseImporter	IO/importer/BaseImporter.hh	/^class OPENMESHDLLEXPORT BaseImporter$/;"	c	namespace:OpenMesh::IO
OpenMesh::IO::BaseImporter::VHandles	IO/importer/BaseImporter.hh	/^  typedef std::vector<VertexHandle> VHandles;$/;"	t	class:OpenMesh::IO::BaseImporter	access:public
OpenMesh::IO::BaseImporter::add_face	IO/importer/BaseImporter.hh	/^  virtual FaceHandle add_face(const VHandles& _indices) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(const VHandles& _indices)
OpenMesh::IO::BaseImporter::add_face_texcoords	IO/importer/BaseImporter.hh	/^  virtual void add_face_texcoords( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords)
OpenMesh::IO::BaseImporter::add_texture_information	IO/importer/BaseImporter.hh	/^  virtual void add_texture_information( int _id , std::string _name ) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:( int _id , std::string _name )
OpenMesh::IO::BaseImporter::add_vertex	IO/importer/BaseImporter.hh	/^  virtual VertexHandle add_vertex(const Vec3f& _point) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(const Vec3f& _point)
OpenMesh::IO::BaseImporter::finish	IO/importer/BaseImporter.hh	/^  virtual void finish()  {}$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
OpenMesh::IO::BaseImporter::is_triangle_mesh	IO/importer/BaseImporter.hh	/^  virtual bool is_triangle_mesh()     const { return false; }$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
OpenMesh::IO::BaseImporter::kernel	IO/importer/BaseImporter.hh	/^  virtual BaseKernel* kernel() { return 0; }$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
OpenMesh::IO::BaseImporter::n_edges	IO/importer/BaseImporter.hh	/^  virtual size_t n_edges()      const = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
OpenMesh::IO::BaseImporter::n_faces	IO/importer/BaseImporter.hh	/^  virtual size_t n_faces()      const = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
OpenMesh::IO::BaseImporter::n_vertices	IO/importer/BaseImporter.hh	/^  virtual size_t n_vertices()   const = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
OpenMesh::IO::BaseImporter::prepare	IO/importer/BaseImporter.hh	/^  virtual void prepare()  {}$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
OpenMesh::IO::BaseImporter::reserve	IO/importer/BaseImporter.hh	/^  virtual void reserve( unsigned int \/* nV *\/,$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:( unsigned int , unsigned int , unsigned int )
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec3f& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec3uc& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec4f& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec4uc& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec3f& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec3uc& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec4f& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec4uc& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec3f& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec3uc& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec4f& _color)
OpenMesh::IO::BaseImporter::set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec4uc& _color)
OpenMesh::IO::BaseImporter::set_face_texindex	IO/importer/BaseImporter.hh	/^  virtual void set_face_texindex( FaceHandle _fh, int _texId ) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:( FaceHandle _fh, int _texId )
OpenMesh::IO::BaseImporter::set_normal	IO/importer/BaseImporter.hh	/^  virtual void set_normal(FaceHandle _fh, const Vec3f& _normal) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec3f& _normal)
OpenMesh::IO::BaseImporter::set_normal	IO/importer/BaseImporter.hh	/^  virtual void set_normal(VertexHandle _vh, const Vec3f& _normal) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec3f& _normal)
OpenMesh::IO::BaseImporter::set_texcoord	IO/importer/BaseImporter.hh	/^  virtual void set_texcoord(HalfedgeHandle _heh, const Vec2f& _texcoord) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(HalfedgeHandle _heh, const Vec2f& _texcoord)
OpenMesh::IO::BaseImporter::set_texcoord	IO/importer/BaseImporter.hh	/^  virtual void set_texcoord(VertexHandle _vh, const Vec2f& _texcoord) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec2f& _texcoord)
OpenMesh::IO::BaseImporter::~BaseImporter	IO/importer/BaseImporter.hh	/^  virtual ~BaseImporter() {}$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
OpenMesh::IO::BaseReader	IO/reader/BaseReader.hh	/^class OPENMESHDLLEXPORT BaseReader$/;"	c	namespace:OpenMesh::IO
OpenMesh::IO::BaseReader::can_u_read	IO/reader/BaseReader.cc	/^can_u_read(const std::string& _filename) const $/;"	f	class:OpenMesh::IO::BaseReader	signature:(const std::string& _filename) const
OpenMesh::IO::BaseReader::can_u_read	IO/reader/BaseReader.hh	/^  virtual bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:(const std::string& _filename) const
OpenMesh::IO::BaseReader::check_extension	IO/reader/BaseReader.cc	/^check_extension(const std::string& _fname, const std::string& _ext) const$/;"	f	class:OpenMesh::IO::BaseReader	signature:(const std::string& _fname, const std::string& _ext) const
OpenMesh::IO::BaseReader::check_extension	IO/reader/BaseReader.hh	/^  bool check_extension(const std::string& _fname, $/;"	p	class:OpenMesh::IO::BaseReader	access:protected	signature:(const std::string& _fname, const std::string& _ext) const
OpenMesh::IO::BaseReader::get_description	IO/reader/BaseReader.hh	/^  virtual std::string get_description() const = 0;$/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:() const
OpenMesh::IO::BaseReader::get_extensions	IO/reader/BaseReader.hh	/^  virtual std::string get_extensions() const = 0;$/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:() const
OpenMesh::IO::BaseReader::get_magic	IO/reader/BaseReader.hh	/^  virtual std::string get_magic() const { return std::string(""); }$/;"	f	class:OpenMesh::IO::BaseReader	access:public	signature:() const
OpenMesh::IO::BaseReader::read	IO/reader/BaseReader.hh	/^  virtual bool read(const std::string& _filename, $/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::BaseReader::read	IO/reader/BaseReader.hh	/^  virtual bool read(std::istream& _is, $/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::BaseReader::~BaseReader	IO/reader/BaseReader.hh	/^  virtual ~BaseReader() {};$/;"	f	class:OpenMesh::IO::BaseReader	access:public	signature:()
OpenMesh::IO::BaseWriter	IO/writer/BaseWriter.hh	/^class OPENMESHDLLEXPORT BaseWriter$/;"	c	namespace:OpenMesh::IO
OpenMesh::IO::BaseWriter::Option	IO/writer/BaseWriter.hh	/^  typedef unsigned int Option;$/;"	t	class:OpenMesh::IO::BaseWriter	access:public
OpenMesh::IO::BaseWriter::binary_size	IO/writer/BaseWriter.hh	/^  virtual size_t binary_size(BaseExporter&, Options) const { return 0; }$/;"	f	class:OpenMesh::IO::BaseWriter	access:public	signature:(BaseExporter&, Options) const
OpenMesh::IO::BaseWriter::can_u_write	IO/writer/BaseWriter.cc	/^can_u_write(const std::string& _filename) const $/;"	f	class:OpenMesh::IO::BaseWriter	signature:(const std::string& _filename) const
OpenMesh::IO::BaseWriter::can_u_write	IO/writer/BaseWriter.hh	/^  virtual bool can_u_write(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:(const std::string& _filename) const
OpenMesh::IO::BaseWriter::check	IO/writer/BaseWriter.hh	/^  bool check(BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::BaseWriter	access:protected	signature:(BaseExporter& _be, Options _opt) const
OpenMesh::IO::BaseWriter::get_description	IO/writer/BaseWriter.hh	/^  virtual std::string get_description() const = 0;$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:() const
OpenMesh::IO::BaseWriter::get_extensions	IO/writer/BaseWriter.hh	/^  virtual std::string get_extensions() const = 0;$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:() const
OpenMesh::IO::BaseWriter::write	IO/writer/BaseWriter.hh	/^  virtual bool write(const std::string& _filename,$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision = 6) const
OpenMesh::IO::BaseWriter::write	IO/writer/BaseWriter.hh	/^  virtual bool write(std::ostream& _os,$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision = 6) const
OpenMesh::IO::BaseWriter::~BaseWriter	IO/writer/BaseWriter.hh	/^  virtual ~BaseWriter() {};$/;"	f	class:OpenMesh::IO::BaseWriter	access:public	signature:()
OpenMesh::IO::CmpVec	IO/reader/STLReader.cc	/^class CmpVec$/;"	c	namespace:OpenMesh::IO	file:
OpenMesh::IO::CmpVec::CmpVec	IO/reader/STLReader.cc	/^  CmpVec(float _eps=FLT_MIN) : eps_(_eps) {}$/;"	f	class:OpenMesh::IO::CmpVec	access:public	signature:(float _eps=FLT_MIN)
OpenMesh::IO::CmpVec::eps_	IO/reader/STLReader.cc	/^  float eps_;$/;"	m	class:OpenMesh::IO::CmpVec	file:	access:private
OpenMesh::IO::CmpVec::operator ()	IO/reader/STLReader.cc	/^  bool operator()( const Vec3f& _v0, const Vec3f& _v1 ) const$/;"	f	class:OpenMesh::IO::CmpVec	access:public	signature:( const Vec3f& _v0, const Vec3f& _v1 ) const
OpenMesh::IO::Enabler	IO/writer/OMWriter.cc	/^template <typename T> struct Enabler$/;"	s	namespace:OpenMesh::IO	file:
OpenMesh::IO::Enabler::Enabler	IO/writer/OMWriter.cc	/^  Enabler( T& obj ) : obj_(obj)$/;"	f	struct:OpenMesh::IO::Enabler	access:public	signature:( T& obj )
OpenMesh::IO::Enabler::enable	IO/writer/OMWriter.cc	/^  ~Enabler() { obj_.enable(); }$/;"	p	file:	signature:()
OpenMesh::IO::Enabler::obj_	IO/writer/OMWriter.cc	/^  T& obj_;$/;"	m	struct:OpenMesh::IO::Enabler	file:	access:public
OpenMesh::IO::Enabler::~Enabler	IO/writer/OMWriter.cc	/^  ~Enabler() { obj_.enable(); }$/;"	f	struct:OpenMesh::IO::Enabler	access:public	signature:()
OpenMesh::IO::ExporterT	IO/exporter/ExporterT.hh	/^class ExporterT : public BaseExporter$/;"	c	namespace:OpenMesh::IO	inherits:BaseExporter
OpenMesh::IO::ExporterT::ExporterT	IO/exporter/ExporterT.hh	/^  ExporterT(const Mesh& _mesh) : mesh_(_mesh) {}$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(const Mesh& _mesh)
OpenMesh::IO::ExporterT::clear	IO/exporter/ExporterT.hh	/^    _vhandles.clear();$/;"	p	signature:()
OpenMesh::IO::ExporterT::color	IO/exporter/ExporterT.hh	/^  Vec3uc  color(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::ExporterT::color	IO/exporter/ExporterT.hh	/^  Vec3uc color(EdgeHandle _eh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::ExporterT::color	IO/exporter/ExporterT.hh	/^  Vec3uc color(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::colorA	IO/exporter/ExporterT.hh	/^  Vec4uc  colorA(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::ExporterT::colorA	IO/exporter/ExporterT.hh	/^  Vec4uc colorA(EdgeHandle _eh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::ExporterT::colorA	IO/exporter/ExporterT.hh	/^  Vec4uc colorA(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::colorAf	IO/exporter/ExporterT.hh	/^  Vec4f colorAf(EdgeHandle _eh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::ExporterT::colorAf	IO/exporter/ExporterT.hh	/^  Vec4f colorAf(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::ExporterT::colorAf	IO/exporter/ExporterT.hh	/^  Vec4f colorAf(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::colorAi	IO/exporter/ExporterT.hh	/^  Vec4ui  colorAi(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::ExporterT::colorAi	IO/exporter/ExporterT.hh	/^  Vec4ui colorAi(EdgeHandle _eh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::ExporterT::colorAi	IO/exporter/ExporterT.hh	/^  Vec4ui colorAi(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::colorf	IO/exporter/ExporterT.hh	/^  Vec3f colorf(EdgeHandle _eh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::ExporterT::colorf	IO/exporter/ExporterT.hh	/^  Vec3f colorf(FaceHandle _fh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::ExporterT::colorf	IO/exporter/ExporterT.hh	/^  Vec3f colorf(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::colori	IO/exporter/ExporterT.hh	/^  Vec3ui  colori(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::ExporterT::colori	IO/exporter/ExporterT.hh	/^  Vec3ui colori(EdgeHandle _eh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::IO::ExporterT::colori	IO/exporter/ExporterT.hh	/^  Vec3ui colori(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::get_vhandles	IO/exporter/ExporterT.hh	/^  unsigned int get_vhandles(FaceHandle _fh,$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh, std::vector<VertexHandle>& _vhandles) const
OpenMesh::IO::ExporterT::has_edge_colors	IO/exporter/ExporterT.hh	/^  bool has_edge_colors()      const { return mesh_.has_edge_colors();      }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::has_face_colors	IO/exporter/ExporterT.hh	/^  bool has_face_colors()      const { return mesh_.has_face_colors();      }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::has_face_normals	IO/exporter/ExporterT.hh	/^  bool has_face_normals()     const { return mesh_.has_face_normals();     }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::has_vertex_colors	IO/exporter/ExporterT.hh	/^  bool has_vertex_colors()    const { return mesh_.has_vertex_colors();    }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::has_vertex_normals	IO/exporter/ExporterT.hh	/^  bool has_vertex_normals()   const { return mesh_.has_vertex_normals();   }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::has_vertex_texcoords	IO/exporter/ExporterT.hh	/^  bool has_vertex_texcoords() const { return mesh_.has_vertex_texcoords2D(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::is_triangle_mesh	IO/exporter/ExporterT.hh	/^  bool is_triangle_mesh() const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::kernel	IO/exporter/ExporterT.hh	/^  virtual const BaseKernel* kernel() { return &mesh_; }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:()
OpenMesh::IO::ExporterT::mesh_	IO/exporter/ExporterT.hh	/^   const Mesh& mesh_;$/;"	m	class:OpenMesh::IO::ExporterT	access:private
OpenMesh::IO::ExporterT::n_edges	IO/exporter/ExporterT.hh	/^  size_t n_edges()     const { return mesh_.n_edges(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::n_faces	IO/exporter/ExporterT.hh	/^  size_t n_faces()     const { return mesh_.n_faces(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::n_vertices	IO/exporter/ExporterT.hh	/^  size_t n_vertices()  const { return mesh_.n_vertices(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
OpenMesh::IO::ExporterT::normal	IO/exporter/ExporterT.hh	/^  Vec3f  normal(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
OpenMesh::IO::ExporterT::normal	IO/exporter/ExporterT.hh	/^  Vec3f  normal(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::point	IO/exporter/ExporterT.hh	/^  Vec3f  point(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::ExporterT::push_back	IO/exporter/ExporterT.hh	/^      _vhandles.push_back(fv_it.handle());$/;"	p	signature:(fv_it.handle())
OpenMesh::IO::ExporterT::texcoord	IO/exporter/ExporterT.hh	/^  Vec2f  texcoord(VertexHandle _vh) const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
OpenMesh::IO::FaceHandle	IO/reader/OMReader.cc	/^          _bi.set_color(FaceHandle(fidx), v3uc);$/;"	p	file:	signature:(fidx)
OpenMesh::IO::FaceHandle	IO/reader/OMReader.cc	/^          _bi.set_normal(FaceHandle(fidx), v3f);$/;"	p	file:	signature:(fidx)
OpenMesh::IO::FaceHandle	IO/writer/OBJWriter.cc	/^    _be.get_vhandles(FaceHandle(i), vhandles);$/;"	p	file:	signature:(i)
OpenMesh::IO::FaceHandle	IO/writer/OFFWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	p	file:	signature:(i)
OpenMesh::IO::FaceHandle	IO/writer/PLYWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	p	file:	signature:(i)
OpenMesh::IO::FunctorRestore	IO/SR_binary_spec.hh	/^struct FunctorRestore {$/;"	s	namespace:OpenMesh::IO
OpenMesh::IO::FunctorRestore::FunctorRestore	IO/SR_binary_spec.hh	/^  FunctorRestore( std::istream& _is, bool _swap) : is_(_is), swap_(_swap) { }$/;"	f	struct:OpenMesh::IO::FunctorRestore	access:public	signature:( std::istream& _is, bool _swap)
OpenMesh::IO::FunctorRestore::is_	IO/SR_binary_spec.hh	/^  std::istream& is_;$/;"	m	struct:OpenMesh::IO::FunctorRestore	access:public
OpenMesh::IO::FunctorRestore::operator ()	IO/SR_binary_spec.hh	/^  size_t operator () ( size_t _v1, T& _s2 )$/;"	f	struct:OpenMesh::IO::FunctorRestore	access:public	signature:( size_t _v1, T& _s2 )
OpenMesh::IO::FunctorRestore::swap_	IO/SR_binary_spec.hh	/^  bool          swap_;$/;"	m	struct:OpenMesh::IO::FunctorRestore	access:public
OpenMesh::IO::FunctorStore	IO/SR_binary_spec.hh	/^struct FunctorStore {$/;"	s	namespace:OpenMesh::IO
OpenMesh::IO::FunctorStore::FunctorStore	IO/SR_binary_spec.hh	/^  FunctorStore( std::ostream& _os, bool _swap) : os_(_os), swap_(_swap) { }$/;"	f	struct:OpenMesh::IO::FunctorStore	access:public	signature:( std::ostream& _os, bool _swap)
OpenMesh::IO::FunctorStore::operator ()	IO/SR_binary_spec.hh	/^  size_t operator () ( size_t _v1, const T& _s2 )$/;"	f	struct:OpenMesh::IO::FunctorStore	access:public	signature:( size_t _v1, const T& _s2 )
OpenMesh::IO::FunctorStore::os_	IO/SR_binary_spec.hh	/^  std::ostream& os_;$/;"	m	struct:OpenMesh::IO::FunctorStore	access:public
OpenMesh::IO::FunctorStore::swap_	IO/SR_binary_spec.hh	/^  bool          swap_;$/;"	m	struct:OpenMesh::IO::FunctorStore	access:public
OpenMesh::IO::IOManager	IO/IOManager.cc	/^_IOManager_& IOManager()$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::IOManager	IO/IOManager.hh	/^OPENMESHDLLEXPORT _IOManager_& IOManager();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::ImporterT	IO/importer/ImporterT.hh	/^class ImporterT : public BaseImporter$/;"	c	namespace:OpenMesh::IO	inherits:BaseImporter
OpenMesh::IO::ImporterT::Color	IO/importer/ImporterT.hh	/^  typedef typename Mesh::Color       Color;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
OpenMesh::IO::ImporterT::ImporterT	IO/importer/ImporterT.hh	/^  ImporterT(Mesh& _mesh) : mesh_(_mesh), halfedgeNormals_() {}$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(Mesh& _mesh)
OpenMesh::IO::ImporterT::Normal	IO/importer/ImporterT.hh	/^  typedef typename Mesh::Normal      Normal;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
OpenMesh::IO::ImporterT::Point	IO/importer/ImporterT.hh	/^  typedef typename Mesh::Point       Point;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
OpenMesh::IO::ImporterT::TexCoord2D	IO/importer/ImporterT.hh	/^  typedef typename Mesh::TexCoord2D  TexCoord2D;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
OpenMesh::IO::ImporterT::VHandles	IO/importer/ImporterT.hh	/^  typedef std::vector<VertexHandle>  VHandles;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
OpenMesh::IO::ImporterT::add_face	IO/importer/ImporterT.hh	/^  virtual FaceHandle add_face(const VHandles& _indices)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(const VHandles& _indices)
OpenMesh::IO::ImporterT::add_face_texcoords	IO/importer/ImporterT.hh	/^  virtual void add_face_texcoords( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords)
OpenMesh::IO::ImporterT::add_property	IO/importer/ImporterT.hh	/^      mesh_.add_property(property,"TextureMapping");$/;"	p	signature:(property,Ó)
OpenMesh::IO::ImporterT::add_texture_information	IO/importer/ImporterT.hh	/^  virtual void add_texture_information( int _id , std::string _name ) {$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:( int _id , std::string _name )
OpenMesh::IO::ImporterT::add_vertex	IO/importer/ImporterT.hh	/^  virtual VertexHandle add_vertex(const Vec3f& _point)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(const Vec3f& _point)
OpenMesh::IO::ImporterT::clear	IO/importer/ImporterT.hh	/^        halfedgeNormals_.clear();$/;"	p	signature:()
OpenMesh::IO::ImporterT::clear	IO/importer/ImporterT.hh	/^      failed_faces_.clear();$/;"	p	signature:()
OpenMesh::IO::ImporterT::clear	IO/importer/ImporterT.hh	/^  void prepare() { failed_faces_.clear(); }$/;"	p	signature:()
OpenMesh::IO::ImporterT::cur_heh	IO/importer/ImporterT.hh	/^    HalfedgeHandle cur_heh   = mesh_.halfedge_handle(_fh);$/;"	l
OpenMesh::IO::ImporterT::end	IO/importer/ImporterT.hh	/^      VHandles::const_iterator it, it2, end(_indices.end());$/;"	p	signature:(_indices.end())
OpenMesh::IO::ImporterT::end_heh	IO/importer/ImporterT.hh	/^    HalfedgeHandle end_heh   = mesh_.prev_halfedge_handle(cur_heh);$/;"	l
OpenMesh::IO::ImporterT::failed_faces_	IO/importer/ImporterT.hh	/^  std::vector<VHandles>  failed_faces_;$/;"	m	class:OpenMesh::IO::ImporterT	access:private
OpenMesh::IO::ImporterT::fe_it	IO/importer/ImporterT.hh	/^            typename Mesh::FaceEdgeIter fe_it = mesh_.fe_iter(fh);$/;"	l
OpenMesh::IO::ImporterT::fh	IO/importer/ImporterT.hh	/^        FaceHandle fh = mesh_.add_face(vhandles);$/;"	l
OpenMesh::IO::ImporterT::fh	IO/importer/ImporterT.hh	/^    FaceHandle fh;$/;"	l
OpenMesh::IO::ImporterT::finish	IO/importer/ImporterT.hh	/^  void finish()$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:()
OpenMesh::IO::ImporterT::halfedgeNormals_	IO/importer/ImporterT.hh	/^  std::map<VertexHandle,Normal> halfedgeNormals_;$/;"	m	class:OpenMesh::IO::ImporterT	access:private
OpenMesh::IO::ImporterT::heh	IO/importer/ImporterT.hh	/^          typename Mesh::HalfedgeHandle heh = fh_iter.current_halfedge_handle();$/;"	l
OpenMesh::IO::ImporterT::is_triangle_mesh	IO/importer/ImporterT.hh	/^  bool is_triangle_mesh() const$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
OpenMesh::IO::ImporterT::it	IO/importer/ImporterT.hh	/^      VHandles::const_iterator it, it2, end(_indices.end());$/;"	l
OpenMesh::IO::ImporterT::it2	IO/importer/ImporterT.hh	/^      VHandles::const_iterator it, it2, end(_indices.end());$/;"	l
OpenMesh::IO::ImporterT::it_heNs	IO/importer/ImporterT.hh	/^          typename std::map<VertexHandle,Normal>::iterator it_heNs = halfedgeNormals_.find(vh);$/;"	l
OpenMesh::IO::ImporterT::kernel	IO/importer/ImporterT.hh	/^  virtual BaseKernel* kernel() { return &mesh_; }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:()
OpenMesh::IO::ImporterT::mesh_	IO/importer/ImporterT.hh	/^  Mesh& mesh_;$/;"	m	class:OpenMesh::IO::ImporterT	access:private
OpenMesh::IO::ImporterT::n_edges	IO/importer/ImporterT.hh	/^  size_t n_edges()     const { return mesh_.n_edges(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
OpenMesh::IO::ImporterT::n_faces	IO/importer/ImporterT.hh	/^  size_t n_faces()     const { return mesh_.n_faces(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
OpenMesh::IO::ImporterT::n_vertices	IO/importer/ImporterT.hh	/^  size_t n_vertices()  const { return mesh_.n_vertices(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
OpenMesh::IO::ImporterT::p	IO/importer/ImporterT.hh	/^          Point p = mesh_.point(vhandles[j]);$/;"	l
OpenMesh::IO::ImporterT::prepare	IO/importer/ImporterT.hh	/^  void prepare() { failed_faces_.clear(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:()
OpenMesh::IO::ImporterT::property	IO/importer/ImporterT.hh	/^      mesh_.property(property)[_id] = _name;$/;"	p	signature:(property)
OpenMesh::IO::ImporterT::property	IO/importer/ImporterT.hh	/^    OpenMesh::MPropHandleT< std::map< int, std::string > > property;$/;"	l
OpenMesh::IO::ImporterT::push_back	IO/importer/ImporterT.hh	/^            failed_faces_.push_back(_indices);$/;"	p	signature:(_indices)
OpenMesh::IO::ImporterT::push_back	IO/importer/ImporterT.hh	/^        failed_faces_.push_back(_indices);$/;"	p	signature:(_indices)
OpenMesh::IO::ImporterT::reserve	IO/importer/ImporterT.hh	/^    mesh_.reserve(nV, nE, nF);$/;"	p	signature:(nV, nE, nF)
OpenMesh::IO::ImporterT::reserve	IO/importer/ImporterT.hh	/^  void reserve(unsigned int nV, unsigned int nE, unsigned int nF)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(unsigned int nV, unsigned int nE, unsigned int nF)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^          mesh_.set_color(_eh, color_cast<Color>(_color));$/;"	p	signature:(_eh, color_cast<Color>(_color))
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^      mesh_.set_color(_fh, color_cast<Color>(_color));$/;"	p	signature:(_fh, color_cast<Color>(_color))
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^      mesh_.set_color(_vh, color_cast<Color>(_color));$/;"	p	signature:(_vh, color_cast<Color>(_color))
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec3f& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec3uc& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec4f& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec4uc& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec3f& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec3uc& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec4f& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec4uc& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec3f& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec3uc& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec4f& _color)
OpenMesh::IO::ImporterT::set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec4uc& _color)
OpenMesh::IO::ImporterT::set_face_texindex	IO/importer/ImporterT.hh	/^  virtual void set_face_texindex( FaceHandle _fh, int _texId ) {$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:( FaceHandle _fh, int _texId )
OpenMesh::IO::ImporterT::set_normal	IO/importer/ImporterT.hh	/^            mesh_.set_normal(heh,it_heNs->second);$/;"	p	signature:(heh,it_heNs->second)
OpenMesh::IO::ImporterT::set_normal	IO/importer/ImporterT.hh	/^      mesh_.set_normal(_fh, vector_cast<Normal>(_normal));$/;"	p	signature:(_fh, vector_cast<Normal>(_normal))
OpenMesh::IO::ImporterT::set_normal	IO/importer/ImporterT.hh	/^      mesh_.set_normal(_vh, vector_cast<Normal>(_normal));$/;"	p	signature:(_vh, vector_cast<Normal>(_normal))
OpenMesh::IO::ImporterT::set_normal	IO/importer/ImporterT.hh	/^  virtual void set_normal(FaceHandle _fh, const Vec3f& _normal)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec3f& _normal)
OpenMesh::IO::ImporterT::set_normal	IO/importer/ImporterT.hh	/^  virtual void set_normal(VertexHandle _vh, const Vec3f& _normal)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec3f& _normal)
OpenMesh::IO::ImporterT::set_texcoord	IO/importer/ImporterT.hh	/^  virtual void set_texcoord(HalfedgeHandle _heh, const Vec2f& _texcoord)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(HalfedgeHandle _heh, const Vec2f& _texcoord)
OpenMesh::IO::ImporterT::set_texcoord	IO/importer/ImporterT.hh	/^  virtual void set_texcoord(VertexHandle _vh, const Vec2f& _texcoord)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec2f& _texcoord)
OpenMesh::IO::ImporterT::set_texcoord2D	IO/importer/ImporterT.hh	/^      mesh_.set_texcoord2D(_heh, vector_cast<TexCoord2D>(_texcoord));$/;"	p	signature:(_heh, vector_cast<TexCoord2D>(_texcoord))
OpenMesh::IO::ImporterT::set_texcoord2D	IO/importer/ImporterT.hh	/^      mesh_.set_texcoord2D(_vh, vector_cast<TexCoord2D>(_texcoord));$/;"	p	signature:(_vh, vector_cast<TexCoord2D>(_texcoord))
OpenMesh::IO::ImporterT::set_texture_index	IO/importer/ImporterT.hh	/^      mesh_.set_texture_index(_fh , _texId);$/;"	p	signature:(_fh , _texId)
OpenMesh::IO::ImporterT::size	IO/importer/ImporterT.hh	/^      omerr() << failed_faces_.size()$/;"	p	signature:()
OpenMesh::IO::ImporterT::vh	IO/importer/ImporterT.hh	/^          typename Mesh::VertexHandle vh = mesh_.to_vertex_handle(heh);$/;"	l
OpenMesh::IO::ImporterT::vhandles	IO/importer/ImporterT.hh	/^        VHandles&  vhandles = failed_faces_[i];$/;"	l
OpenMesh::IO::OBJReader	IO/reader/OBJReader.cc	/^_OBJReader_& OBJReader() { return __OBJReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OBJReader	IO/reader/OBJReader.hh	/^OPENMESHDLLEXPORT _OBJReader_& OBJReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OBJReaderInstance	IO/IOInstances.hh	/^static BaseReader* OBJReaderInstance = &OBJReader();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::OBJWriter	IO/writer/OBJWriter.cc	/^_OBJWriter_& OBJWriter() { return __OBJWriterinstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OBJWriter	IO/writer/OBJWriter.hh	/^OPENMESHDLLEXPORT _OBJWriter_& OBJWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OBJWriterInstance	IO/IOInstances.hh	/^static BaseWriter* OBJWriterInstance = &OBJWriter();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::OFFFormat	IO/OFFFormat.hh	/^struct OPENMESHDLLEXPORT OFFFormat$/;"	s	namespace:OpenMesh::IO
OpenMesh::IO::OFFFormat::float_type	IO/OFFFormat.hh	/^   typedef float float_type;$/;"	t	struct:OpenMesh::IO::OFFFormat	access:public
OpenMesh::IO::OFFFormat::integer_type	IO/OFFFormat.hh	/^   typedef int   integer_type;$/;"	t	struct:OpenMesh::IO::OFFFormat	access:public
OpenMesh::IO::OFFReader	IO/reader/OFFReader.cc	/^_OFFReader_&  OFFReader() { return __OFFReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OFFReader	IO/reader/OFFReader.hh	/^OPENMESHDLLEXPORT _OFFReader_& OFFReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OFFReaderInstance	IO/IOInstances.hh	/^static BaseReader* OFFReaderInstance = &OFFReader();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::OFFWriter	IO/writer/OFFWriter.cc	/^_OFFWriter_& OFFWriter() { return __OFFWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OFFWriter	IO/writer/OFFWriter.hh	/^OPENMESHDLLEXPORT _OFFWriter_& OFFWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OFFWriterInstance	IO/IOInstances.hh	/^static BaseWriter* OFFWriterInstance = &OFFWriter();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::OMFormat	IO/OMFormat.cc	/^namespace OMFormat {$/;"	n	namespace:OpenMesh::IO	file:
OpenMesh::IO::OMFormat	IO/OMFormat.hh	/^namespace OMFormat {$/;"	n	namespace:OpenMesh::IO
OpenMesh::IO::OMFormat::C	IO/OMFormat.hh	/^    size_t C     = 0;$/;"	l
OpenMesh::IO::OMFormat::Chunk	IO/OMFormat.hh	/^  struct Chunk$/;"	s	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::Chunk::Dim	IO/OMFormat.hh	/^    enum Dim {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::Dim_1D	IO/OMFormat.hh	/^      Dim_1D = 0x00,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Dim_2D	IO/OMFormat.hh	/^      Dim_2D = 0x01,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Dim_3D	IO/OMFormat.hh	/^      Dim_3D = 0x02,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Dim_4D	IO/OMFormat.hh	/^      Dim_4D = 0x03,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Dim_5D	IO/OMFormat.hh	/^      Dim_5D = 0x04,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Dim_6D	IO/OMFormat.hh	/^      Dim_6D = 0x05,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Dim_7D	IO/OMFormat.hh	/^      Dim_7D = 0x06,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Dim_8D	IO/OMFormat.hh	/^      Dim_8D = 0x07$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Dim
OpenMesh::IO::OMFormat::Chunk::Entity	IO/OMFormat.hh	/^    enum Entity {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::Entity_Edge	IO/OMFormat.hh	/^      Entity_Edge      = 0x04,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
OpenMesh::IO::OMFormat::Chunk::Entity_Face	IO/OMFormat.hh	/^      Entity_Face      = 0x02,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
OpenMesh::IO::OMFormat::Chunk::Entity_Halfedge	IO/OMFormat.hh	/^      Entity_Halfedge  = 0x06$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
OpenMesh::IO::OMFormat::Chunk::Entity_Mesh	IO/OMFormat.hh	/^      Entity_Mesh      = 0x01,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
OpenMesh::IO::OMFormat::Chunk::Entity_Vertex	IO/OMFormat.hh	/^      Entity_Vertex    = 0x00,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Entity
OpenMesh::IO::OMFormat::Chunk::Float_128	IO/OMFormat.hh	/^      Float_128 = 0x02  \/\/ 16 bytes for long double (an assumption!)$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Float_Size
OpenMesh::IO::OMFormat::Chunk::Float_32	IO/OMFormat.hh	/^      Float_32  = 0x00, \/\/  4 bytes for float$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Float_Size
OpenMesh::IO::OMFormat::Chunk::Float_64	IO/OMFormat.hh	/^      Float_64  = 0x01, \/\/  8 bytes for double$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Float_Size
OpenMesh::IO::OMFormat::Chunk::Float_Size	IO/OMFormat.hh	/^    enum Float_Size {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::Header	IO/OMFormat.hh	/^    struct Header \/\/ 16 bits long$/;"	s	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::Header::bits_	IO/OMFormat.hh	/^      unsigned bits_    : SIZE_BITS;   \/\/ {8, 16, 32, 64} | {32, 64, 128}$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::dim_	IO/OMFormat.hh	/^      unsigned dim_     : SIZE_DIM;    \/\/ 0 1D, 1 2D, 2 3D, .., 7 8D$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::entity_	IO/OMFormat.hh	/^      unsigned entity_  : SIZE_ENTITY; \/\/ 0 vertex, 1 mesh, 2 edge,$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::float_	IO/OMFormat.hh	/^      unsigned float_   : SIZE_FLOAT;  \/\/ bool$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::name_	IO/OMFormat.hh	/^      unsigned name_    : SIZE_NAME;   \/\/ 1 named property, 0 anonymous$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::reserved_	IO/OMFormat.hh	/^      unsigned reserved_: SIZE_RESERVED;$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::signed_	IO/OMFormat.hh	/^      unsigned signed_  : SIZE_SIGNED; \/\/ bool$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::type_	IO/OMFormat.hh	/^      unsigned type_    : SIZE_TYPE;   \/\/ 0 pos, 1 normal, 2 texcoord,$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Header::unused_	IO/OMFormat.hh	/^      unsigned unused_  : 16; \/\/ fill up to 32 bits$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
OpenMesh::IO::OMFormat::Chunk::Integer_16	IO/OMFormat.hh	/^      Integer_16  = 0x01, \/\/ 2 bytes for short$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
OpenMesh::IO::OMFormat::Chunk::Integer_32	IO/OMFormat.hh	/^      Integer_32  = 0x02, \/\/ 4 bytes for long$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
OpenMesh::IO::OMFormat::Chunk::Integer_64	IO/OMFormat.hh	/^      Integer_64  = 0x03  \/\/ 8 bytes for long long$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
OpenMesh::IO::OMFormat::Chunk::Integer_8	IO/OMFormat.hh	/^      Integer_8   = 0x00, \/\/ 1 byte for (unsigned) char$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Integer_Size
OpenMesh::IO::OMFormat::Chunk::Integer_Size	IO/OMFormat.hh	/^    enum Integer_Size {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_BITS	IO/OMFormat.hh	/^    static const int OFF_BITS     = SIZE_DIM      + OFF_DIM;    \/\/ 14$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_DIM	IO/OMFormat.hh	/^    static const int OFF_DIM      = SIZE_FLOAT    + OFF_FLOAT;  \/\/ 11$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_ENTITY	IO/OMFormat.hh	/^    static const int OFF_ENTITY   = SIZE_NAME     + OFF_NAME;   \/\/  3$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_FLOAT	IO/OMFormat.hh	/^    static const int OFF_FLOAT    = SIZE_SIGNED   + OFF_SIGNED; \/\/ 10$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_NAME	IO/OMFormat.hh	/^    static const int OFF_NAME     = SIZE_RESERVED + OFF_RESERVED; \/\/  2$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_RESERVED	IO/OMFormat.hh	/^    static const int OFF_RESERVED = 0;                          \/\/  0$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_SIGNED	IO/OMFormat.hh	/^    static const int OFF_SIGNED   = SIZE_TYPE     + OFF_TYPE;   \/\/  9$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::OFF_TYPE	IO/OMFormat.hh	/^    static const int OFF_TYPE     = SIZE_ENTITY   + OFF_ENTITY; \/\/  5$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::PropertyName	IO/OMFormat.hh	/^    class PropertyName : public std::string$/;"	c	struct:OpenMesh::IO::OMFormat::Chunk	inherits:std::string	access:public
OpenMesh::IO::OMFormat::Chunk::PropertyName::PropertyName	IO/OMFormat.hh	/^      PropertyName( ) { }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( )
OpenMesh::IO::OMFormat::Chunk::PropertyName::PropertyName	IO/OMFormat.hh	/^      PropertyName( const std::string& _name ) { *this = _name; }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( const std::string& _name )
OpenMesh::IO::OMFormat::Chunk::PropertyName::is_valid	IO/OMFormat.hh	/^	assert( is_valid( _rhs.size() ) );$/;"	p	signature:(_rhs.size() )
OpenMesh::IO::OMFormat::Chunk::PropertyName::is_valid	IO/OMFormat.hh	/^      bool is_valid() const { return is_valid( size() ); }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:() const
OpenMesh::IO::OMFormat::Chunk::PropertyName::is_valid	IO/OMFormat.hh	/^      static bool is_valid( size_t _s ) { return _s <= size_max; }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( size_t _s )
OpenMesh::IO::OMFormat::Chunk::PropertyName::operator =	IO/OMFormat.hh	/^      PropertyName& operator = ( const std::string& _rhs )$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( const std::string& _rhs )
OpenMesh::IO::OMFormat::Chunk::PropertyName::size_max	IO/OMFormat.hh	/^      static const size_t size_max = 256;$/;"	m	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public
OpenMesh::IO::OMFormat::Chunk::PropertyName::std::string::operator =	IO/OMFormat.hh	/^	  std::string::operator = ( _rhs );$/;"	p	class:OpenMesh::IO::OMFormat::Chunk::PropertyName::std::string	signature:( _rhs )
OpenMesh::IO::OMFormat::Chunk::PropertyName::std::string::operator =	IO/OMFormat.hh	/^	  this->std::string::operator = ( _rhs.substr(0, size_max) );$/;"	p	class:OpenMesh::IO::OMFormat::Chunk::PropertyName::std::string	signature:( _rhs.substr(0, size_max) )
OpenMesh::IO::OMFormat::Chunk::SIZE_BITS	IO/OMFormat.hh	/^    static const int SIZE_BITS     = 2; \/\/ 16$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::SIZE_DIM	IO/OMFormat.hh	/^    static const int SIZE_DIM      = 3; \/\/ 14$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::SIZE_ENTITY	IO/OMFormat.hh	/^    static const int SIZE_ENTITY   = 3; \/\/  5$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::SIZE_FLOAT	IO/OMFormat.hh	/^    static const int SIZE_FLOAT    = 1; \/\/ 11$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::SIZE_NAME	IO/OMFormat.hh	/^    static const int SIZE_NAME     = 1; \/\/  2$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::SIZE_RESERVED	IO/OMFormat.hh	/^    static const int SIZE_RESERVED = 1; \/\/  1$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::SIZE_SIGNED	IO/OMFormat.hh	/^    static const int SIZE_SIGNED   = 1; \/\/ 10$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::SIZE_TYPE	IO/OMFormat.hh	/^    static const int SIZE_TYPE     = 4; \/\/  9$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::Type	IO/OMFormat.hh	/^    enum Type {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Chunk::Type_Color	IO/OMFormat.hh	/^      Type_Color     = 0x04,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
OpenMesh::IO::OMFormat::Chunk::Type_Custom	IO/OMFormat.hh	/^      Type_Custom    = 0x06,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
OpenMesh::IO::OMFormat::Chunk::Type_Normal	IO/OMFormat.hh	/^      Type_Normal    = 0x01,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
OpenMesh::IO::OMFormat::Chunk::Type_Pos	IO/OMFormat.hh	/^      Type_Pos       = 0x00,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
OpenMesh::IO::OMFormat::Chunk::Type_Status	IO/OMFormat.hh	/^      Type_Status    = 0x03,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
OpenMesh::IO::OMFormat::Chunk::Type_Texcoord	IO/OMFormat.hh	/^      Type_Texcoord  = 0x02,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
OpenMesh::IO::OMFormat::Chunk::Type_Topology	IO/OMFormat.hh	/^      Type_Topology  = 0x07$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
OpenMesh::IO::OMFormat::Chunk::esize_t	IO/OMFormat.hh	/^    typedef uint32 esize_t; \/\/ element size, used for custom properties$/;"	t	struct:OpenMesh::IO::OMFormat::Chunk	access:public
OpenMesh::IO::OMFormat::Header	IO/OMFormat.hh	/^  struct Header$/;"	s	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::Header::_os	IO/OMFormat.hh	/^      _os.write( (char*)this, 4); \/\/ magic_, mesh_, version_$/;"	p	signature:(char*)this, 4
OpenMesh::IO::OMFormat::Header::bytes	IO/OMFormat.hh	/^      size_t bytes = 4;$/;"	l
OpenMesh::IO::OMFormat::Header::magic_	IO/OMFormat.hh	/^    uchar  magic_[2]; \/\/ OM$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
OpenMesh::IO::OMFormat::Header::mesh_	IO/OMFormat.hh	/^    uchar  mesh_;    \/\/ [T]riangles, [Q]uads, [P]olygonals$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
OpenMesh::IO::OMFormat::Header::n_edges_	IO/OMFormat.hh	/^    uint32 n_edges_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
OpenMesh::IO::OMFormat::Header::n_faces_	IO/OMFormat.hh	/^    uint32 n_faces_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
OpenMesh::IO::OMFormat::Header::n_vertices_	IO/OMFormat.hh	/^    uint32 n_vertices_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
OpenMesh::IO::OMFormat::Header::restore	IO/OMFormat.hh	/^    size_t restore( std::istream& _is, bool _swap )$/;"	f	struct:OpenMesh::IO::OMFormat::Header	access:public	signature:( std::istream& _is, bool _swap )
OpenMesh::IO::OMFormat::Header::store	IO/OMFormat.hh	/^    size_t store( std::ostream& _os, bool _swap ) const$/;"	f	struct:OpenMesh::IO::OMFormat::Header	access:public	signature:( std::ostream& _os, bool _swap ) const
OpenMesh::IO::OMFormat::Header::version_	IO/OMFormat.hh	/^    uint8  version_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
OpenMesh::IO::OMFormat::Type	IO/OMFormat.cc	/^	<< as_string(Chunk::Type(_c.type_));$/;"	p	file:	signature:(_c.type_)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Dim d)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Dim d)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Entity e)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Entity e)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Float_Size d)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Float_Size d)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Integer_Size d)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Integer_Size d)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Type t)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Type t)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Dim d);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Dim d)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Entity e);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Entity e)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Float_Size d);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Float_Size d)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Integer_Size d);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Integer_Size d)
OpenMesh::IO::OMFormat::as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Type t);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Type t)
OpenMesh::IO::OMFormat::bits	IO/OMFormat.hh	/^  unsigned int bits(const T& val)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T& val)
OpenMesh::IO::OMFormat::chunk_data_size	IO/OMFormat.hh	/^  inline size_t chunk_data_size( Header& _hdr,  Chunk::Header& _chunk_hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( Header& _hdr, Chunk::Header& _chunk_hdr )
OpenMesh::IO::OMFormat::chunk_header_size	IO/OMFormat.hh	/^  inline size_t chunk_header_size( void ) { return sizeof(uint16); }$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( void )
OpenMesh::IO::OMFormat::chunk_size	IO/OMFormat.hh	/^  inline size_t chunk_size( Header& _hdr, Chunk::Header& _chunk_hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( Header& _hdr, Chunk::Header& _chunk_hdr )
OpenMesh::IO::OMFormat::dim	IO/OMFormat.hh	/^  Chunk::Dim dim( VecType )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( VecType )
OpenMesh::IO::OMFormat::dim	IO/OMFormat.hh	/^  Chunk::Dim dim( const Chunk::Header& _hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( const Chunk::Header& _hdr )
OpenMesh::IO::OMFormat::dimensions	IO/OMFormat.hh	/^  inline size_t dimensions(const Chunk::Header& _chdr) { return _chdr.dim_+1; }$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const Chunk::Header& _chdr)
OpenMesh::IO::OMFormat::float32	IO/OMFormat.hh	/^  typedef float32_t          float32;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::float64	IO/OMFormat.hh	/^  typedef float64_t          float64;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::float_size	IO/OMFormat.hh	/^  template <typename T> Chunk::Float_Size float_size(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
OpenMesh::IO::OMFormat::header_size	IO/OMFormat.hh	/^  inline size_t header_size(void) { return sizeof(Header); }$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(void)
OpenMesh::IO::OMFormat::int16	IO/OMFormat.hh	/^  typedef int16_t            int16;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::int32	IO/OMFormat.hh	/^  typedef int32_t            int32;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::int64	IO/OMFormat.hh	/^  typedef int64_t            int64;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::int8	IO/OMFormat.hh	/^  typedef int8_t             int8;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::integer_size	IO/OMFormat.hh	/^  template <typename T> Chunk::Integer_Size integer_size(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
OpenMesh::IO::OMFormat::is_float	IO/OMFormat.hh	/^    assert( is_float(d) );$/;"	p	signature:(d)
OpenMesh::IO::OMFormat::is_float	IO/OMFormat.hh	/^  template <typename T> bool is_float(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
OpenMesh::IO::OMFormat::is_integer	IO/OMFormat.hh	/^    assert( is_integer(d) );$/;"	p	signature:(d)
OpenMesh::IO::OMFormat::is_integer	IO/OMFormat.hh	/^  template <typename T> bool is_integer(const T)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T)
OpenMesh::IO::OMFormat::is_signed	IO/OMFormat.hh	/^  template <typename T> bool is_signed(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
OpenMesh::IO::OMFormat::major_version	IO/OMFormat.hh	/^  inline uint16 major_version(const uint8 version)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const uint8 version)
OpenMesh::IO::OMFormat::minor_version	IO/OMFormat.hh	/^  inline uint16 minor_version(const uint8 version)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const uint8 version)
OpenMesh::IO::OMFormat::mk_version	IO/OMFormat.hh	/^  inline uint8 mk_version(const uint16 major, const uint16 minor)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const uint16 major, const uint16 minor)
OpenMesh::IO::OMFormat::needed_bits	IO/OMFormat.cc	/^  Chunk::Integer_Size needed_bits( size_t s )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( size_t s )
OpenMesh::IO::OMFormat::needed_bits	IO/OMFormat.hh	/^  Chunk::Integer_Size needed_bits( size_t s );$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:( size_t s )
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.cc	/^  operator << (Chunk::Header& hdr, const uint16 val)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Header& hdr, const uint16 val)
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.cc	/^  operator << (uint16& val, const Chunk::Header& hdr)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(uint16& val, const Chunk::Header& hdr)
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.cc	/^  std::ostream& operator << ( std::ostream& _os, const Chunk::Header& _c )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Chunk::Header& _c )
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.cc	/^  std::ostream& operator << ( std::ostream& _os, const Header& _h )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Header& _h )
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.hh	/^  Chunk::Header& operator << (Chunk::Header& hdr, const uint16 val);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Header& hdr, const uint16 val)
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.hh	/^  std::ostream& operator << ( std::ostream& _os, const Chunk::Header& _c );$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Chunk::Header& _c )
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.hh	/^  std::ostream& operator << ( std::ostream& _os, const Header& _h );$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Header& _h )
OpenMesh::IO::OMFormat::operator <<	IO/OMFormat.hh	/^  uint16& operator << (uint16& val, const Chunk::Header& hdr);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(uint16& val, const Chunk::Header& hdr)
OpenMesh::IO::OMFormat::scalar_size	IO/OMFormat.hh	/^  inline size_t scalar_size( const Chunk::Header& _hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( const Chunk::Header& _hdr )
OpenMesh::IO::OMFormat::size	IO/OMFormat.hh	/^    assert( vector_traits< VecType >::size() < 9 );$/;"	p	signature:()
OpenMesh::IO::OMFormat::std::cerr	IO/OMFormat.hh	/^	std::cerr << "Invalid value in _chunk_hdr.entity_\\n";$/;"	m	class:OpenMesh::IO::OMFormat::std
OpenMesh::IO::OMFormat::std::clog	IO/OMFormat.cc	/^	std::clog << "as_string(Chunk::Entity): Invalid value!";$/;"	m	class:OpenMesh::IO::OMFormat::std	file:
OpenMesh::IO::OMFormat::std::endl	IO/OMFormat.cc	/^	  << as_string(Chunk::Dim(_c.dim_)) << std::endl;$/;"	m	class:OpenMesh::IO::OMFormat::std	file:
OpenMesh::IO::OMFormat::std::endl	IO/OMFormat.cc	/^	<< as_string(Chunk::Entity(_c.entity_)) << std::endl;$/;"	m	class:OpenMesh::IO::OMFormat::std	file:
OpenMesh::IO::OMFormat::uchar	IO/OMFormat.hh	/^  typedef unsigned char      uchar;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::uint16	IO/OMFormat.hh	/^  typedef uint16_t           uint16;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::uint32	IO/OMFormat.hh	/^  typedef uint32_t           uint32;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::uint64	IO/OMFormat.hh	/^  typedef uint64_t           uint64;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::uint8	IO/OMFormat.hh	/^  typedef uint8_t            uint8;$/;"	t	namespace:OpenMesh::IO::OMFormat
OpenMesh::IO::OMFormat::vector_size	IO/OMFormat.hh	/^  inline size_t vector_size( const Chunk::Header& _chdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( const Chunk::Header& _chdr )
OpenMesh::IO::OMReader	IO/reader/OMReader.cc	/^_OMReader_&  OMReader() { return __OMReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OMReader	IO/reader/OMReader.hh	/^OPENMESHDLLEXPORT _OMReader_&  OMReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OMReaderInstance	IO/IOInstances.hh	/^static BaseReader* OMReaderInstance  = &OMReader();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::OMWriter	IO/writer/OMWriter.cc	/^_OMWriter_& OMWriter() { return __OMWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OMWriter	IO/writer/OMWriter.hh	/^OPENMESHDLLEXPORT _OMWriter_& OMWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::OMWriterInstance	IO/IOInstances.hh	/^static BaseWriter* OMWriterInstance  = &OMWriter();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::Options	IO/Options.hh	/^class Options$/;"	c	namespace:OpenMesh::IO
OpenMesh::IO::Options::Binary	IO/Options.hh	/^      Binary         = 0x0001, \/\/\/< Set binary mode for r\/w$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::ColorAlpha	IO/Options.hh	/^      ColorAlpha     = 0x0800,  \/\/\/< Has (r) \/ store (w) alpha values for colors$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::ColorFloat	IO/Options.hh	/^      ColorFloat     = 0x1000  \/\/\/< Has (r) \/ store (w) float values for colors (currently only implemented for PLY and OFF files)$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::Default	IO/Options.hh	/^      Default        = 0x0000, \/\/\/< No options$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::EdgeColor	IO/Options.hh	/^      EdgeColor      = 0x0080, \/\/\/< Has (r) \/ store (w) edge colors$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::FaceColor	IO/Options.hh	/^      FaceColor      = 0x0200, \/\/\/< Has (r) \/ store (w) face colors$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::FaceNormal	IO/Options.hh	/^      FaceNormal     = 0x0100, \/\/\/< Has (r) \/ store (w) face normals$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::FaceTexCoord	IO/Options.hh	/^      FaceTexCoord   = 0x0400, \/\/\/< Has (r) \/ store (w) face texture coordinates$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::Flag	IO/Options.hh	/^  enum Flag {$/;"	g	class:OpenMesh::IO::Options	access:public
OpenMesh::IO::Options::LSB	IO/Options.hh	/^      LSB            = 0x0004, \/\/\/< Assume little endian byte ordering$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::MSB	IO/Options.hh	/^      MSB            = 0x0002, \/\/\/< Assume big endian byte ordering$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::Options	IO/Options.hh	/^  Options() : flags_( Default )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:()
OpenMesh::IO::Options::Options	IO/Options.hh	/^  Options(Flag _flg) : flags_( _flg)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(Flag _flg)
OpenMesh::IO::Options::Options	IO/Options.hh	/^  Options(const Options& _opt) : flags_(_opt.flags_)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const Options& _opt)
OpenMesh::IO::Options::Options	IO/Options.hh	/^  Options(const value_type _flgs) : flags_( _flgs)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _flgs)
OpenMesh::IO::Options::Swap	IO/Options.hh	/^      Swap           = 0x0006, \/\/\/< Swap byte order in binary mode$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::VertexColor	IO/Options.hh	/^      VertexColor    = 0x0020, \/\/\/< Has (r) \/ store (w) vertex colors$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::VertexNormal	IO/Options.hh	/^      VertexNormal   = 0x0010, \/\/\/< Has (r) \/ store (w) vertex normals$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::VertexTexCoord	IO/Options.hh	/^      VertexTexCoord = 0x0040, \/\/\/< Has (r) \/ store (w) texture coordinates$/;"	e	enum:OpenMesh::IO::Options::Flag
OpenMesh::IO::Options::check	IO/Options.hh	/^  bool check(const value_type _rhs) const$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _rhs) const
OpenMesh::IO::Options::cleanup	IO/Options.hh	/^  void cleanup(void)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(void)
OpenMesh::IO::Options::clear	IO/Options.hh	/^  void clear(void)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(void)
OpenMesh::IO::Options::color_has_alpha	IO/Options.hh	/^  bool color_has_alpha()     const { return check(ColorAlpha); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::color_is_float	IO/Options.hh	/^  bool color_is_float()      const { return check(ColorFloat); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::edge_has_color	IO/Options.hh	/^  bool edge_has_color()      const { return check(EdgeColor); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::enum_type	IO/Options.hh	/^  typedef int       enum_type;$/;"	t	class:OpenMesh::IO::Options	access:public
OpenMesh::IO::Options::face_has_color	IO/Options.hh	/^  bool face_has_color()      const { return check(FaceColor); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::face_has_normal	IO/Options.hh	/^  bool face_has_normal()     const { return check(FaceNormal); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::face_has_texcoord	IO/Options.hh	/^  bool face_has_texcoord()   const { return check(FaceTexCoord); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::flags_	IO/Options.hh	/^  value_type flags_;$/;"	m	class:OpenMesh::IO::Options	access:private
OpenMesh::IO::Options::is_binary	IO/Options.hh	/^  bool is_binary()           const { return check(Binary); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::is_empty	IO/Options.hh	/^  bool is_empty(void) const { return !flags_; }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(void) const
OpenMesh::IO::Options::operator !=	IO/Options.hh	/^  bool operator != (const value_type _rhs) const$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _rhs) const
OpenMesh::IO::Options::operator &&	IO/Options.hh	/^  bool operator && (const value_type _rhs) const;$/;"	p	class:OpenMesh::IO::Options	access:private	signature:(const value_type _rhs) const
OpenMesh::IO::Options::operator +=	IO/Options.hh	/^  Options& operator += ( const value_type _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs )
OpenMesh::IO::Options::operator -=	IO/Options.hh	/^  Options& operator -= ( const value_type _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs )
OpenMesh::IO::Options::operator =	IO/Options.hh	/^  Options& operator = ( const Options& _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const Options& _rhs )
OpenMesh::IO::Options::operator =	IO/Options.hh	/^  Options& operator = ( const value_type _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs )
OpenMesh::IO::Options::operator ==	IO/Options.hh	/^  bool operator == (const value_type _rhs) const$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _rhs) const
OpenMesh::IO::Options::operator value_type	IO/Options.hh	/^  operator value_type ()     const { return flags_; }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::set	IO/Options.hh	/^  Options& set( const value_type _rhs)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs)
OpenMesh::IO::Options::unset	IO/Options.hh	/^  Options& unset( const value_type _rhs)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs)
OpenMesh::IO::Options::value_type	IO/Options.hh	/^  typedef enum_type value_type;$/;"	t	class:OpenMesh::IO::Options	access:public
OpenMesh::IO::Options::vertex_has_color	IO/Options.hh	/^  bool vertex_has_color()    const { return check(VertexColor); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::vertex_has_normal	IO/Options.hh	/^  bool vertex_has_normal()   const { return check(VertexNormal); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::vertex_has_texcoord	IO/Options.hh	/^  bool vertex_has_texcoord() const { return check(VertexTexCoord); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
OpenMesh::IO::Options::~Options	IO/Options.hh	/^  ~Options()$/;"	f	class:OpenMesh::IO::Options	access:public	signature:()
OpenMesh::IO::PLYReader	IO/reader/PLYReader.cc	/^_PLYReader_& PLYReader() {$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::PLYReader	IO/reader/PLYReader.hh	/^OPENMESHDLLEXPORT _PLYReader_&  PLYReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::PLYReaderInstance	IO/IOInstances.hh	/^static BaseReader* PLYReaderInstance = &PLYReader();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::PLYWriter	IO/writer/PLYWriter.cc	/^_PLYWriter_& PLYWriter() { return __PLYWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::PLYWriter	IO/writer/PLYWriter.hh	/^OPENMESHDLLEXPORT _PLYWriter_& PLYWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::PLYWriterInstance	IO/IOInstances.hh	/^static BaseWriter* PLYWriterInstance = &PLYWriter();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(bool);$/;"	p	namespace:OpenMesh::IO	signature:(bool)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(double);$/;"	p	namespace:OpenMesh::IO	signature:(double)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(float);$/;"	p	namespace:OpenMesh::IO	signature:(float)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int16_t);$/;"	p	namespace:OpenMesh::IO	signature:(int16_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int32_t);$/;"	p	namespace:OpenMesh::IO	signature:(int32_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int64_t);$/;"	p	namespace:OpenMesh::IO	signature:(int64_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int8_t);$/;"	p	namespace:OpenMesh::IO	signature:(int8_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(long double);$/;"	p	namespace:OpenMesh::IO	signature:(long double)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint16_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint16_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint32_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint32_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint64_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint64_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint8_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint8_t)
OpenMesh::IO::SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(unsigned long);$/;"	p	namespace:OpenMesh::IO	signature:(unsigned long)
OpenMesh::IO::STLReader	IO/reader/STLReader.cc	/^_STLReader_&  STLReader() { return __STLReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::STLReader	IO/reader/STLReader.hh	/^OPENMESHDLLEXPORT _STLReader_&  STLReader();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::STLReaderInstance	IO/IOInstances.hh	/^static BaseReader* STLReaderInstance = &STLReader();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::STLWriter	IO/writer/STLWriter.cc	/^_STLWriter_& STLWriter() { return __STLWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::STLWriter	IO/writer/STLWriter.hh	/^OPENMESHDLLEXPORT _STLWriter_& STLWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::STLWriterInstance	IO/IOInstances.hh	/^static BaseWriter* STLWriterInstance = &STLWriter();$/;"	m	namespace:OpenMesh::IO
OpenMesh::IO::Vec2f	IO/reader/OBJReader.cc	/^          texcoords.push_back(OpenMesh::Vec2f(u, v));$/;"	p	file:	signature:(u, v)
OpenMesh::IO::Vec3f	IO/reader/OBJReader.cc	/^          normals.push_back(OpenMesh::Vec3f(x,y,z));$/;"	p	file:	signature:(x,y,z)
OpenMesh::IO::VertexHandle	IO/reader/OFFReader.cc	/^         vhandles.push_back(VertexHandle(idx));$/;"	p	file:	signature:(idx)
OpenMesh::IO::VertexHandle	IO/reader/OMReader.cc	/^          _bi.set_color(VertexHandle(vidx), v3uc);$/;"	p	file:	signature:(vidx)
OpenMesh::IO::VertexHandle	IO/reader/OMReader.cc	/^          _bi.set_normal(VertexHandle(vidx), v3f);$/;"	p	file:	signature:(vidx)
OpenMesh::IO::VertexHandle	IO/reader/OMReader.cc	/^          _bi.set_texcoord(VertexHandle(vidx), v2f);$/;"	p	file:	signature:(vidx)
OpenMesh::IO::VertexHandle	IO/reader/OMReader.cc	/^          vhandles.push_back(VertexHandle(vidx));$/;"	p	file:	signature:(vidx)
OpenMesh::IO::VertexHandle	IO/reader/PLYReader.cc	/^                vhandles.push_back(VertexHandle(idx));$/;"	p	file:	signature:(idx)
OpenMesh::IO::_IOManager_	IO/IOManager.hh	/^class OPENMESHDLLEXPORT _IOManager_$/;"	c	namespace:OpenMesh::IO
OpenMesh::IO::_IOManager_::IOManager	IO/IOManager.hh	/^  friend OPENMESHDLLEXPORT _IOManager_& IOManager();$/;"	p	class:OpenMesh::IO::_IOManager_	access:friend	signature:()
OpenMesh::IO::_IOManager_::_IOManager_	IO/IOManager.hh	/^  _IOManager_() {}$/;"	f	class:OpenMesh::IO::_IOManager_	access:private	signature:()
OpenMesh::IO::_IOManager_::binary_size	IO/IOManager.hh	/^  size_t binary_size(const std::string& _format,$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:(const std::string& _format, BaseExporter& _be, Options _opt = Options::Default)
OpenMesh::IO::_IOManager_::bw	IO/IOManager.hh	/^    const BaseWriter *bw = find_writer(_format);$/;"	l
OpenMesh::IO::_IOManager_::can_read	IO/IOManager.cc	/^can_read( const std::string& _format ) const$/;"	f	class:OpenMesh::IO::_IOManager_	signature:( const std::string& _format ) const
OpenMesh::IO::_IOManager_::can_read	IO/IOManager.hh	/^  bool can_read( const std::string& _format ) const;$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:( const std::string& _format ) const
OpenMesh::IO::_IOManager_::can_write	IO/IOManager.cc	/^can_write( const std::string& _format ) const$/;"	f	class:OpenMesh::IO::_IOManager_	signature:( const std::string& _format ) const
OpenMesh::IO::_IOManager_::can_write	IO/IOManager.hh	/^  bool can_write( const std::string& _format ) const;$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:( const std::string& _format ) const
OpenMesh::IO::_IOManager_::find_writer	IO/IOManager.cc	/^find_writer(const std::string& _format)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(const std::string& _format)
OpenMesh::IO::_IOManager_::find_writer	IO/IOManager.hh	/^  const BaseWriter *find_writer(const std::string& _format);$/;"	p	class:OpenMesh::IO::_IOManager_	access:private	signature:(const std::string& _format)
OpenMesh::IO::_IOManager_::insert	IO/IOManager.hh	/^    reader_modules_.insert(_bl);$/;"	p	signature:(_bl)
OpenMesh::IO::_IOManager_::insert	IO/IOManager.hh	/^    writer_modules_.insert(_bw);$/;"	p	signature:(_bw)
OpenMesh::IO::_IOManager_::qt_read_filters	IO/IOManager.hh	/^  const std::string& qt_read_filters()  const { return read_filters_;  }$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:() const
OpenMesh::IO::_IOManager_::qt_write_filters	IO/IOManager.hh	/^  const std::string& qt_write_filters() const { return write_filters_; }$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:() const
OpenMesh::IO::_IOManager_::read	IO/IOManager.cc	/^read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_IOManager_::read	IO/IOManager.cc	/^read(std::istream& _is, const std::string& _ext, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(std::istream& _is, const std::string& _ext, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_IOManager_::read	IO/IOManager.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_IOManager_::read	IO/IOManager.hh	/^  bool read(std::istream& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(std::istream& _filename, const std::string& _ext, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_IOManager_::read_filters_	IO/IOManager.hh	/^  std::string read_filters_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
OpenMesh::IO::_IOManager_::reader_modules_	IO/IOManager.hh	/^  std::set<BaseReader*> reader_modules_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
OpenMesh::IO::_IOManager_::register_module	IO/IOManager.hh	/^  bool register_module(BaseReader* _bl)$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:(BaseReader* _bl)
OpenMesh::IO::_IOManager_::register_module	IO/IOManager.hh	/^  bool register_module(BaseWriter* _bw)$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:(BaseWriter* _bw)
OpenMesh::IO::_IOManager_::update_read_filters	IO/IOManager.cc	/^update_read_filters()$/;"	f	class:OpenMesh::IO::_IOManager_	signature:()
OpenMesh::IO::_IOManager_::update_read_filters	IO/IOManager.hh	/^  void update_read_filters();$/;"	p	class:OpenMesh::IO::_IOManager_	access:private	signature:()
OpenMesh::IO::_IOManager_::update_write_filters	IO/IOManager.cc	/^update_write_filters()$/;"	f	class:OpenMesh::IO::_IOManager_	signature:()
OpenMesh::IO::_IOManager_::update_write_filters	IO/IOManager.hh	/^  void update_write_filters();$/;"	p	class:OpenMesh::IO::_IOManager_	access:private	signature:()
OpenMesh::IO::_IOManager_::write	IO/IOManager.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision)
OpenMesh::IO::_IOManager_::write	IO/IOManager.cc	/^write(std::ostream& _os,const std::string &_ext, BaseExporter& _be, Options _opt, std::streamsize _precision)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(std::ostream& _os,const std::string &_ext, BaseExporter& _be, Options _opt, std::streamsize _precision)
OpenMesh::IO::_IOManager_::write	IO/IOManager.hh	/^  bool write(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(const std::string& _filename, BaseExporter& _be, Options _opt=Options::Default, std::streamsize _precision = 6)
OpenMesh::IO::_IOManager_::write	IO/IOManager.hh	/^  bool write(std::ostream& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(std::ostream& _filename, const std::string& _ext, BaseExporter& _be, Options _opt=Options::Default, std::streamsize _precision = 6)
OpenMesh::IO::_IOManager_::write_filters_	IO/IOManager.hh	/^  std::string write_filters_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
OpenMesh::IO::_IOManager_::writer_modules_	IO/IOManager.hh	/^  std::set<BaseWriter*> writer_modules_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
OpenMesh::IO::_OBJReader_	IO/reader/OBJReader.hh	/^class OPENMESHDLLEXPORT _OBJReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
OpenMesh::IO::_OBJReader_::Material	IO/reader/OBJReader.hh	/^  class Material$/;"	c	class:OpenMesh::IO::_OBJReader_	access:private
OpenMesh::IO::_OBJReader_::Material::Ka	IO/reader/OBJReader.hh	/^    const Vec3f& Ka( void ) const { return Ka_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
OpenMesh::IO::_OBJReader_::Material::Ka_	IO/reader/OBJReader.hh	/^    Vec3f Ka_;                          bool Ka_is_set_; \/\/ ambient$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::Ka_is_set_	IO/reader/OBJReader.hh	/^    Vec3f Ka_;                          bool Ka_is_set_; \/\/ ambient$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::Kd	IO/reader/OBJReader.hh	/^    const Vec3f& Kd( void ) const { return Kd_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
OpenMesh::IO::_OBJReader_::Material::Kd_	IO/reader/OBJReader.hh	/^    Vec3f Kd_;                          bool Kd_is_set_; \/\/ diffuse$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::Kd_is_set_	IO/reader/OBJReader.hh	/^    Vec3f Kd_;                          bool Kd_is_set_; \/\/ diffuse$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::Ks	IO/reader/OBJReader.hh	/^    const Vec3f& Ks( void ) const { return Ks_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
OpenMesh::IO::_OBJReader_::Material::Ks_	IO/reader/OBJReader.hh	/^    Vec3f Ks_;                          bool Ks_is_set_; \/\/ specular$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::Ks_is_set_	IO/reader/OBJReader.hh	/^    Vec3f Ks_;                          bool Ks_is_set_; \/\/ specular$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::Material	IO/reader/OBJReader.hh	/^    Material() { cleanup(); }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:()
OpenMesh::IO::_OBJReader_::Material::Tr	IO/reader/OBJReader.hh	/^    float  Tr( void ) const { return Tr_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
OpenMesh::IO::_OBJReader_::Material::Tr_	IO/reader/OBJReader.hh	/^    float Tr_;                          bool Tr_is_set_; \/\/ transperency$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::Tr_is_set_	IO/reader/OBJReader.hh	/^    float Tr_;                          bool Tr_is_set_; \/\/ transperency$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::cleanup	IO/reader/OBJReader.hh	/^    void cleanup()$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:()
OpenMesh::IO::_OBJReader_::Material::has_Ka	IO/reader/OBJReader.hh	/^    bool has_Ka(void)     { return Ka_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
OpenMesh::IO::_OBJReader_::Material::has_Kd	IO/reader/OBJReader.hh	/^    bool has_Kd(void)     { return Kd_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
OpenMesh::IO::_OBJReader_::Material::has_Ks	IO/reader/OBJReader.hh	/^    bool has_Ks(void)     { return Ks_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
OpenMesh::IO::_OBJReader_::Material::has_Tr	IO/reader/OBJReader.hh	/^    bool has_Tr(void)     { return Tr_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
OpenMesh::IO::_OBJReader_::Material::has_map_Kd	IO/reader/OBJReader.hh	/^    bool has_map_Kd(void) { return map_Kd_is_set_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
OpenMesh::IO::_OBJReader_::Material::index_Kd_	IO/reader/OBJReader.hh	/^    std::string map_Kd_; int index_Kd_; bool map_Kd_is_set_; \/\/ Texture$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::is_valid	IO/reader/OBJReader.hh	/^    bool is_valid(void) const$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void) const
OpenMesh::IO::_OBJReader_::Material::map_Kd	IO/reader/OBJReader.hh	/^    const std::string& map_Kd( void ) { return map_Kd_ ; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void )
OpenMesh::IO::_OBJReader_::Material::map_Kd_	IO/reader/OBJReader.hh	/^    std::string map_Kd_; int index_Kd_; bool map_Kd_is_set_; \/\/ Texture$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::map_Kd_index	IO/reader/OBJReader.hh	/^    const int& map_Kd_index( void ) { return index_Kd_ ; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void )
OpenMesh::IO::_OBJReader_::Material::map_Kd_is_set_	IO/reader/OBJReader.hh	/^    std::string map_Kd_; int index_Kd_; bool map_Kd_is_set_; \/\/ Texture$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
OpenMesh::IO::_OBJReader_::Material::set_Ka	IO/reader/OBJReader.hh	/^    void set_Ka( float r, float g, float b )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float r, float g, float b )
OpenMesh::IO::_OBJReader_::Material::set_Kd	IO/reader/OBJReader.hh	/^    void set_Kd( float r, float g, float b )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float r, float g, float b )
OpenMesh::IO::_OBJReader_::Material::set_Ks	IO/reader/OBJReader.hh	/^    void set_Ks( float r, float g, float b )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float r, float g, float b )
OpenMesh::IO::_OBJReader_::Material::set_Tr	IO/reader/OBJReader.hh	/^    void set_Tr( float t )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float t )
OpenMesh::IO::_OBJReader_::Material::set_map_Kd	IO/reader/OBJReader.hh	/^    void set_map_Kd( std::string _name, int _index_Kd )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( std::string _name, int _index_Kd )
OpenMesh::IO::_OBJReader_::MaterialList	IO/reader/OBJReader.hh	/^  typedef std::map<std::string, Material> MaterialList;$/;"	t	class:OpenMesh::IO::_OBJReader_	access:private
OpenMesh::IO::_OBJReader_::_OBJReader_	IO/reader/OBJReader.cc	/^_OBJReader_()$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:()
OpenMesh::IO::_OBJReader_::_OBJReader_	IO/reader/OBJReader.hh	/^  _OBJReader_();$/;"	p	class:OpenMesh::IO::_OBJReader_	access:public	signature:()
OpenMesh::IO::_OBJReader_::get_description	IO/reader/OBJReader.hh	/^  std::string get_description() const { return "Alias\/Wavefront"; }$/;"	f	class:OpenMesh::IO::_OBJReader_	access:public	signature:() const
OpenMesh::IO::_OBJReader_::get_extensions	IO/reader/OBJReader.hh	/^  std::string get_extensions()  const { return "obj"; }$/;"	f	class:OpenMesh::IO::_OBJReader_	access:public	signature:() const
OpenMesh::IO::_OBJReader_::materials_	IO/reader/OBJReader.hh	/^  MaterialList materials_;$/;"	m	class:OpenMesh::IO::_OBJReader_	access:private
OpenMesh::IO::_OBJReader_::path_	IO/reader/OBJReader.hh	/^  std::string path_;$/;"	m	class:OpenMesh::IO::_OBJReader_	access:private
OpenMesh::IO::_OBJReader_::read	IO/reader/OBJReader.cc	/^read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OBJReader_::read	IO/reader/OBJReader.cc	/^read(std::istream& _in, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OBJReader_::read	IO/reader/OBJReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_OBJReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OBJReader_::read	IO/reader/OBJReader.hh	/^  bool read(std::istream& _in,$/;"	p	class:OpenMesh::IO::_OBJReader_	access:public	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OBJReader_::read_material	IO/reader/OBJReader.cc	/^read_material(std::fstream& _in)$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:(std::fstream& _in)
OpenMesh::IO::_OBJReader_::read_material	IO/reader/OBJReader.hh	/^  bool read_material( std::fstream& _in );$/;"	p	class:OpenMesh::IO::_OBJReader_	access:private	signature:( std::fstream& _in )
OpenMesh::IO::_OBJReader_::~_OBJReader_	IO/reader/OBJReader.hh	/^  virtual ~_OBJReader_() { }$/;"	f	class:OpenMesh::IO::_OBJReader_	access:public	signature:()
OpenMesh::IO::_OBJWriter_	IO/writer/OBJWriter.hh	/^class OPENMESHDLLEXPORT _OBJWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
OpenMesh::IO::_OBJWriter_::_OBJWriter_	IO/writer/OBJWriter.cc	/^_OBJWriter_::_OBJWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:()
OpenMesh::IO::_OBJWriter_::_OBJWriter_	IO/writer/OBJWriter.hh	/^  _OBJWriter_();$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:public	signature:()
OpenMesh::IO::_OBJWriter_::binary_size	IO/writer/OBJWriter.hh	/^  size_t binary_size(BaseExporter&, Options) const { return 0; }$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:(BaseExporter&, Options) const
OpenMesh::IO::_OBJWriter_::getMaterial	IO/writer/OBJWriter.cc	/^int _OBJWriter_::getMaterial(OpenMesh::Vec3f _color) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(OpenMesh::Vec3f _color) const
OpenMesh::IO::_OBJWriter_::getMaterial	IO/writer/OBJWriter.cc	/^int _OBJWriter_::getMaterial(OpenMesh::Vec4f _color) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(OpenMesh::Vec4f _color) const
OpenMesh::IO::_OBJWriter_::getMaterial	IO/writer/OBJWriter.hh	/^  int getMaterial(OpenMesh::Vec3f _color) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:private	signature:(OpenMesh::Vec3f _color) const
OpenMesh::IO::_OBJWriter_::getMaterial	IO/writer/OBJWriter.hh	/^  int getMaterial(OpenMesh::Vec4f _color) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:private	signature:(OpenMesh::Vec4f _color) const
OpenMesh::IO::_OBJWriter_::get_description	IO/writer/OBJWriter.hh	/^  std::string get_description() const  { return "Alias\/Wavefront"; }$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:() const
OpenMesh::IO::_OBJWriter_::get_extensions	IO/writer/OBJWriter.hh	/^  std::string get_extensions()  const  { return "obj"; }$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:() const
OpenMesh::IO::_OBJWriter_::materialA_	IO/writer/OBJWriter.hh	/^  mutable std::vector< OpenMesh::Vec4f > materialA_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
OpenMesh::IO::_OBJWriter_::material_	IO/writer/OBJWriter.hh	/^  mutable std::vector< OpenMesh::Vec3f > material_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
OpenMesh::IO::_OBJWriter_::objName_	IO/writer/OBJWriter.hh	/^  mutable std::string objName_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
OpenMesh::IO::_OBJWriter_::path_	IO/writer/OBJWriter.hh	/^  mutable std::string path_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
OpenMesh::IO::_OBJWriter_::write	IO/writer/OBJWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_OBJWriter_::write	IO/writer/OBJWriter.cc	/^write(std::ostream& _out, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_OBJWriter_::write	IO/writer/OBJWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_OBJWriter_::write	IO/writer/OBJWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_OBJWriter_::writeMaterial	IO/writer/OBJWriter.cc	/^writeMaterial(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
OpenMesh::IO::_OBJWriter_::writeMaterial	IO/writer/OBJWriter.hh	/^  bool writeMaterial(std::ostream& _out, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:private	signature:(std::ostream& _out, BaseExporter&, Options) const
OpenMesh::IO::_OBJWriter_::~_OBJWriter_	IO/writer/OBJWriter.hh	/^  virtual ~_OBJWriter_() {};$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:()
OpenMesh::IO::_OFFReader_	IO/reader/OFFReader.hh	/^class OPENMESHDLLEXPORT _OFFReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
OpenMesh::IO::_OFFReader_::_OFFReader_	IO/reader/OFFReader.cc	/^_OFFReader_::_OFFReader_()$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:()
OpenMesh::IO::_OFFReader_::_OFFReader_	IO/reader/OFFReader.hh	/^  _OFFReader_();$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:()
OpenMesh::IO::_OFFReader_::can_u_read	IO/reader/OFFReader.cc	/^bool _OFFReader_::can_u_read(const std::string& _filename) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(const std::string& _filename) const
OpenMesh::IO::_OFFReader_::can_u_read	IO/reader/OFFReader.cc	/^bool _OFFReader_::can_u_read(std::istream& _is) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _is) const
OpenMesh::IO::_OFFReader_::can_u_read	IO/reader/OFFReader.hh	/^  bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:(const std::string& _filename) const
OpenMesh::IO::_OFFReader_::can_u_read	IO/reader/OFFReader.hh	/^  bool can_u_read(std::istream& _is) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _is) const
OpenMesh::IO::_OFFReader_::getColorType	IO/reader/OFFReader.cc	/^int _OFFReader_::getColorType(std::string& _line, bool _texCoordsAvailable) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::string& _line, bool _texCoordsAvailable) const
OpenMesh::IO::_OFFReader_::getColorType	IO/reader/OFFReader.hh	/^  int getColorType(std::string & _line, bool _texCoordsAvailable) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::string & _line, bool _texCoordsAvailable) const
OpenMesh::IO::_OFFReader_::get_description	IO/reader/OFFReader.hh	/^  std::string get_description() const { return "Object File Format"; }$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:() const
OpenMesh::IO::_OFFReader_::get_extensions	IO/reader/OFFReader.hh	/^  std::string get_extensions()  const { return "off"; }$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:() const
OpenMesh::IO::_OFFReader_::get_magic	IO/reader/OFFReader.hh	/^  std::string get_magic()       const { return "OFF"; }$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:() const
OpenMesh::IO::_OFFReader_::options_	IO/reader/OFFReader.hh	/^  mutable Options options_;$/;"	m	class:OpenMesh::IO::_OFFReader_	access:private
OpenMesh::IO::_OFFReader_::read	IO/reader/OFFReader.cc	/^_OFFReader_::read(const std::string& _filename, BaseImporter& _bi,$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OFFReader_::read	IO/reader/OFFReader.cc	/^_OFFReader_::read(std::istream& _in, BaseImporter& _bi, Options& _opt )$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt )
OpenMesh::IO::_OFFReader_::read	IO/reader/OFFReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OFFReader_::read	IO/reader/OFFReader.hh	/^  bool read(std::istream& _in, BaseImporter& _bi, Options& _opt );$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt )
OpenMesh::IO::_OFFReader_::readValue	IO/reader/OFFReader.cc	/^void _OFFReader_::readValue(std::istream& _in, float& _value) const{$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, float& _value) const
OpenMesh::IO::_OFFReader_::readValue	IO/reader/OFFReader.cc	/^void _OFFReader_::readValue(std::istream& _in, int& _value) const{$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, int& _value) const
OpenMesh::IO::_OFFReader_::readValue	IO/reader/OFFReader.cc	/^void _OFFReader_::readValue(std::istream& _in, unsigned int& _value) const{$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, unsigned int& _value) const
OpenMesh::IO::_OFFReader_::readValue	IO/reader/OFFReader.hh	/^  void readValue(std::istream& _in, float& _value) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, float& _value) const
OpenMesh::IO::_OFFReader_::readValue	IO/reader/OFFReader.hh	/^  void readValue(std::istream& _in, int& _value) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, int& _value) const
OpenMesh::IO::_OFFReader_::readValue	IO/reader/OFFReader.hh	/^  void readValue(std::istream& _in, unsigned int& _value) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, unsigned int& _value) const
OpenMesh::IO::_OFFReader_::read_ascii	IO/reader/OFFReader.cc	/^_OFFReader_::read_ascii(std::istream& _in, BaseImporter& _bi, Options& _opt) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt) const
OpenMesh::IO::_OFFReader_::read_ascii	IO/reader/OFFReader.hh	/^  bool read_ascii(std::istream& _in, BaseImporter& _bi, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt) const
OpenMesh::IO::_OFFReader_::read_binary	IO/reader/OFFReader.cc	/^_OFFReader_::read_binary(std::istream& _in, BaseImporter& _bi, Options& _opt, bool \/*_swap*\/) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt, bool ) const
OpenMesh::IO::_OFFReader_::read_binary	IO/reader/OFFReader.hh	/^  bool read_binary(std::istream& _in, BaseImporter& _bi, Options& _opt, bool swap) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt, bool swap) const
OpenMesh::IO::_OFFReader_::userOptions_	IO/reader/OFFReader.hh	/^  mutable Options userOptions_;$/;"	m	class:OpenMesh::IO::_OFFReader_	access:private
OpenMesh::IO::_OFFReader_::~_OFFReader_	IO/reader/OFFReader.hh	/^  virtual ~_OFFReader_() {};$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:()
OpenMesh::IO::_OFFWriter_	IO/writer/OFFWriter.hh	/^class OPENMESHDLLEXPORT _OFFWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
OpenMesh::IO::_OFFWriter_::_OFFWriter_	IO/writer/OFFWriter.cc	/^_OFFWriter_::_OFFWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:()
OpenMesh::IO::_OFFWriter_::_OFFWriter_	IO/writer/OFFWriter.hh	/^  _OFFWriter_();$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:()
OpenMesh::IO::_OFFWriter_::binary_size	IO/writer/OFFWriter.cc	/^binary_size(BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(BaseExporter& _be, Options _opt) const
OpenMesh::IO::_OFFWriter_::binary_size	IO/writer/OFFWriter.hh	/^  size_t binary_size(BaseExporter& _be, Options _opt) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:(BaseExporter& _be, Options _opt) const
OpenMesh::IO::_OFFWriter_::get_description	IO/writer/OFFWriter.hh	/^  std::string get_description() const { return "no description"; }$/;"	f	class:OpenMesh::IO::_OFFWriter_	access:public	signature:() const
OpenMesh::IO::_OFFWriter_::get_extensions	IO/writer/OFFWriter.hh	/^  std::string get_extensions() const  { return "off"; }$/;"	f	class:OpenMesh::IO::_OFFWriter_	access:public	signature:() const
OpenMesh::IO::_OFFWriter_::write	IO/writer/OFFWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_OFFWriter_::write	IO/writer/OFFWriter.cc	/^write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_OFFWriter_::write	IO/writer/OFFWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_OFFWriter_::write	IO/writer/OFFWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_OFFWriter_::writeValue	IO/writer/OFFWriter.cc	/^void _OFFWriter_::writeValue(std::ostream& _out, float value) const {$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, float value) const
OpenMesh::IO::_OFFWriter_::writeValue	IO/writer/OFFWriter.cc	/^void _OFFWriter_::writeValue(std::ostream& _out, int value) const {$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, int value) const
OpenMesh::IO::_OFFWriter_::writeValue	IO/writer/OFFWriter.cc	/^void _OFFWriter_::writeValue(std::ostream& _out, unsigned int value) const {$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, unsigned int value) const
OpenMesh::IO::_OFFWriter_::writeValue	IO/writer/OFFWriter.hh	/^  void writeValue(std::ostream& _out, float value) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _out, float value) const
OpenMesh::IO::_OFFWriter_::writeValue	IO/writer/OFFWriter.hh	/^  void writeValue(std::ostream& _out, int value) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _out, int value) const
OpenMesh::IO::_OFFWriter_::writeValue	IO/writer/OFFWriter.hh	/^  void writeValue(std::ostream& _out, unsigned int value) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _out, unsigned int value) const
OpenMesh::IO::_OFFWriter_::write_ascii	IO/writer/OFFWriter.cc	/^write_ascii(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
OpenMesh::IO::_OFFWriter_::write_ascii	IO/writer/OFFWriter.hh	/^  bool write_ascii(std::ostream& _in, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _in, BaseExporter&, Options) const
OpenMesh::IO::_OFFWriter_::write_binary	IO/writer/OFFWriter.cc	/^write_binary(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
OpenMesh::IO::_OFFWriter_::write_binary	IO/writer/OFFWriter.hh	/^  bool write_binary(std::ostream& _in, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _in, BaseExporter&, Options) const
OpenMesh::IO::_OFFWriter_::~_OFFWriter_	IO/writer/OFFWriter.hh	/^  virtual ~_OFFWriter_() {};$/;"	f	class:OpenMesh::IO::_OFFWriter_	access:public	signature:()
OpenMesh::IO::_OMReader_	IO/reader/OMReader.hh	/^class OPENMESHDLLEXPORT _OMReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
OpenMesh::IO::_OMReader_::ChunkHeader	IO/reader/OMReader.hh	/^  typedef OMFormat::Chunk::Header       ChunkHeader;$/;"	t	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::Header	IO/reader/OMReader.hh	/^  typedef OMFormat::Header              Header;$/;"	t	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::PropertyName	IO/reader/OMReader.hh	/^  typedef OMFormat::Chunk::PropertyName PropertyName;$/;"	t	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::_OMReader_	IO/reader/OMReader.cc	/^_OMReader_::_OMReader_()$/;"	f	class:OpenMesh::IO::_OMReader_	signature:()
OpenMesh::IO::_OMReader_::_OMReader_	IO/reader/OMReader.hh	/^  _OMReader_();$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:()
OpenMesh::IO::_OMReader_::bytes_	IO/reader/OMReader.hh	/^  mutable size_t       bytes_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::can_u_read	IO/reader/OMReader.cc	/^bool _OMReader_::can_u_read(const std::string& _filename) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(const std::string& _filename) const
OpenMesh::IO::_OMReader_::can_u_read	IO/reader/OMReader.cc	/^bool _OMReader_::can_u_read(std::istream& _is) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is) const
OpenMesh::IO::_OMReader_::can_u_read	IO/reader/OMReader.hh	/^  virtual bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(const std::string& _filename) const
OpenMesh::IO::_OMReader_::can_u_read	IO/reader/OMReader.hh	/^  virtual bool can_u_read(std::istream& _is) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(std::istream& _is) const
OpenMesh::IO::_OMReader_::chunk_header_	IO/reader/OMReader.hh	/^  mutable ChunkHeader  chunk_header_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::fileOptions_	IO/reader/OMReader.hh	/^  mutable Options      fileOptions_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::get_description	IO/reader/OMReader.hh	/^  std::string get_description() const { return "OpenMesh File Format"; }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:() const
OpenMesh::IO::_OMReader_::get_extensions	IO/reader/OMReader.hh	/^  std::string get_extensions()  const { return "om"; }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:() const
OpenMesh::IO::_OMReader_::get_magic	IO/reader/OMReader.hh	/^  std::string get_magic()       const { return "OM"; }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:() const
OpenMesh::IO::_OMReader_::header_	IO/reader/OMReader.hh	/^  mutable Header       header_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::property_name_	IO/reader/OMReader.hh	/^  mutable PropertyName property_name_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
OpenMesh::IO::_OMReader_::read	IO/reader/OMReader.cc	/^bool _OMReader_::read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OMReader_::read	IO/reader/OMReader.cc	/^bool _OMReader_::read(std::istream& _is, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_OMReader_::read	IO/reader/OMReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt )
OpenMesh::IO::_OMReader_::read	IO/reader/OMReader.hh	/^  bool read(std::istream& _is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt )
OpenMesh::IO::_OMReader_::read_ascii	IO/reader/OMReader.cc	/^bool _OMReader_::read_ascii(std::istream& \/* _is *\/, BaseImporter& \/* _bi *\/, Options& \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& , BaseImporter& , Options& ) const
OpenMesh::IO::_OMReader_::read_ascii	IO/reader/OMReader.hh	/^  bool read_ascii(std::istream& _is, BaseImporter& _bi, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt) const
OpenMesh::IO::_OMReader_::read_binary	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary(std::istream& _is, BaseImporter& _bi, Options& _opt) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt) const
OpenMesh::IO::_OMReader_::read_binary	IO/reader/OMReader.hh	/^  bool read_binary(std::istream& _is, BaseImporter& _bi, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt) const
OpenMesh::IO::_OMReader_::read_binary_edge_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_edge_chunk(std::istream &_is, BaseImporter &_bi, Options &\/*_opt *\/, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options & , bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_edge_chunk	IO/reader/OMReader.hh	/^  bool read_binary_edge_chunk(     std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_face_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_face_chunk(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_face_chunk	IO/reader/OMReader.hh	/^  bool read_binary_face_chunk(     std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_halfedge_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_halfedge_chunk(std::istream &_is, BaseImporter &_bi, Options &\/* _opt *\/, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options & , bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_halfedge_chunk	IO/reader/OMReader.hh	/^  bool read_binary_halfedge_chunk( std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_mesh_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_mesh_chunk(std::istream &_is, BaseImporter &_bi, Options & \/* _opt *\/, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options & , bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_mesh_chunk	IO/reader/OMReader.hh	/^  bool read_binary_mesh_chunk(     std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_vertex_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_vertex_chunk(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
OpenMesh::IO::_OMReader_::read_binary_vertex_chunk	IO/reader/OMReader.hh	/^  bool read_binary_vertex_chunk(   std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
OpenMesh::IO::_OMReader_::restore_binary_custom_data	IO/reader/OMReader.cc	/^size_t _OMReader_::restore_binary_custom_data(std::istream& _is, BaseProperty* _bp, size_t _n_elem, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is, BaseProperty* _bp, size_t _n_elem, bool _swap) const
OpenMesh::IO::_OMReader_::restore_binary_custom_data	IO/reader/OMReader.hh	/^  size_t restore_binary_custom_data( std::istream& _is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream& _is, BaseProperty* _bp, size_t _n_elem, bool _swap) const
OpenMesh::IO::_OMReader_::supports	IO/reader/OMReader.cc	/^bool _OMReader_::supports(const OMFormat::uint8 \/* version *\/) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(const OMFormat::uint8 ) const
OpenMesh::IO::_OMReader_::supports	IO/reader/OMReader.hh	/^  bool supports( const OMFormat::uint8 version ) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( const OMFormat::uint8 version ) const
OpenMesh::IO::_OMReader_::~_OMReader_	IO/reader/OMReader.hh	/^  virtual ~_OMReader_() { }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:()
OpenMesh::IO::_OMWriter_	IO/writer/OMWriter.hh	/^class OPENMESHDLLEXPORT _OMWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
OpenMesh::IO::_OMWriter_::_OMWriter_	IO/writer/OMWriter.cc	/^_OMWriter_()$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:()
OpenMesh::IO::_OMWriter_::_OMWriter_	IO/writer/OMWriter.hh	/^  _OMWriter_();$/;"	p	class:OpenMesh::IO::_OMWriter_	access:public	signature:()
OpenMesh::IO::_OMWriter_::binary_size	IO/writer/OMWriter.cc	/^size_t _OMWriter_::binary_size(BaseExporter& \/* _be *\/, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(BaseExporter& , Options ) const
OpenMesh::IO::_OMWriter_::binary_size	IO/writer/OMWriter.hh	/^  size_t binary_size(BaseExporter& _be, Options _opt) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:public	signature:(BaseExporter& _be, Options _opt) const
OpenMesh::IO::_OMWriter_::get_description	IO/writer/OMWriter.hh	/^  std::string get_description() const$/;"	f	class:OpenMesh::IO::_OMWriter_	access:public	signature:() const
OpenMesh::IO::_OMWriter_::get_extensions	IO/writer/OMWriter.hh	/^  std::string get_extensions() const$/;"	f	class:OpenMesh::IO::_OMWriter_	access:public	signature:() const
OpenMesh::IO::_OMWriter_::magic_	IO/writer/OMWriter.cc	/^const OMFormat::uchar _OMWriter_::magic_[3] = "OM";$/;"	m	class:OpenMesh::IO::_OMWriter_	file:
OpenMesh::IO::_OMWriter_::magic_	IO/writer/OMWriter.hh	/^  static const OMFormat::uchar magic_[3];$/;"	m	class:OpenMesh::IO::_OMWriter_	access:protected
OpenMesh::IO::_OMWriter_::store_binary_custom_chunk	IO/writer/OMWriter.cc	/^size_t _OMWriter_::store_binary_custom_chunk(std::ostream& _os,$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(std::ostream& _os, const BaseProperty& _bp, OMFormat::Chunk::Entity _entity, bool _swap) const
OpenMesh::IO::_OMWriter_::store_binary_custom_chunk	IO/writer/OMWriter.hh	/^  size_t store_binary_custom_chunk( std::ostream&, const BaseProperty&,$/;"	p	class:OpenMesh::IO::_OMWriter_	access:protected	signature:( std::ostream&, const BaseProperty&, OMFormat::Chunk::Entity, bool) const
OpenMesh::IO::_OMWriter_::version_	IO/writer/OMWriter.cc	/^const OMFormat::uint8 _OMWriter_::version_  = OMFormat::mk_version(1,2);$/;"	m	class:OpenMesh::IO::_OMWriter_	file:
OpenMesh::IO::_OMWriter_::version_	IO/writer/OMWriter.hh	/^  static const OMFormat::uint8 version_;$/;"	m	class:OpenMesh::IO::_OMWriter_	access:protected
OpenMesh::IO::_OMWriter_::write	IO/writer/OMWriter.cc	/^_OMWriter_::write(const std::string& _filename, BaseExporter& _be,$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize ) const
OpenMesh::IO::_OMWriter_::write	IO/writer/OMWriter.cc	/^_OMWriter_::write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize \/*_precision*\/) const$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize ) const
OpenMesh::IO::_OMWriter_::write	IO/writer/OMWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:protected	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_OMWriter_::write	IO/writer/OMWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_OMWriter_::write_binary	IO/writer/OMWriter.cc	/^bool _OMWriter_::write_binary(std::ostream& _os, BaseExporter& _be,$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt) const
OpenMesh::IO::_OMWriter_::write_binary	IO/writer/OMWriter.hh	/^  bool write_binary(std::ostream&, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:protected	signature:(std::ostream&, BaseExporter&, Options) const
OpenMesh::IO::_OMWriter_::~_OMWriter_	IO/writer/OMWriter.hh	/^  virtual ~_OMWriter_() {};$/;"	f	class:OpenMesh::IO::_OMWriter_	access:public	signature:()
OpenMesh::IO::_PLYReader_	IO/reader/PLYReader.hh	/^class OPENMESHDLLEXPORT _PLYReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
OpenMesh::IO::_PLYReader_::COLORALPHA	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::COLORBLUE	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::COLORGREEN	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::COLORRED	IO/reader/PLYReader.hh	/^    COLORRED,COLORGREEN,COLORBLUE,COLORALPHA,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::TEXX	IO/reader/PLYReader.hh	/^    TEXX,TEXY,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::TEXY	IO/reader/PLYReader.hh	/^    TEXX,TEXY,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::UNSUPPORTED	IO/reader/PLYReader.hh	/^    UNSUPPORTED$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::Unsupported	IO/reader/PLYReader.hh	/^    Unsupported,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueType	IO/reader/PLYReader.hh	/^  enum ValueType {$/;"	g	class:OpenMesh::IO::_PLYReader_	access:public
OpenMesh::IO::_PLYReader_::ValueTypeCHAR	IO/reader/PLYReader.hh	/^    ValueTypeINT8, ValueTypeCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeDOUBLE	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT64, ValueTypeDOUBLE$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeFLOAT	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeFLOAT32	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeFLOAT64	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT64, ValueTypeDOUBLE$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeINT	IO/reader/PLYReader.hh	/^    ValueTypeINT32, ValueTypeINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeINT16	IO/reader/PLYReader.hh	/^    ValueTypeINT16, ValueTypeSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeINT32	IO/reader/PLYReader.hh	/^    ValueTypeINT32, ValueTypeINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeINT8	IO/reader/PLYReader.hh	/^    ValueTypeINT8, ValueTypeCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeSHORT	IO/reader/PLYReader.hh	/^    ValueTypeINT16, ValueTypeSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeUCHAR	IO/reader/PLYReader.hh	/^    ValueTypeUINT8, ValueTypeUCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeUINT	IO/reader/PLYReader.hh	/^    ValueTypeUINT32, ValueTypeUINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeUINT16	IO/reader/PLYReader.hh	/^    ValueTypeUINT16, ValueTypeUSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeUINT32	IO/reader/PLYReader.hh	/^    ValueTypeUINT32, ValueTypeUINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeUINT8	IO/reader/PLYReader.hh	/^    ValueTypeUINT8, ValueTypeUCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::ValueTypeUSHORT	IO/reader/PLYReader.hh	/^    ValueTypeUINT16, ValueTypeUSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
OpenMesh::IO::_PLYReader_::VertexProperty	IO/reader/PLYReader.hh	/^  enum VertexProperty {$/;"	g	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::XCOORD	IO/reader/PLYReader.hh	/^    XCOORD,YCOORD,ZCOORD,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::XNORM	IO/reader/PLYReader.hh	/^    XNORM,YNORM,ZNORM,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::YCOORD	IO/reader/PLYReader.hh	/^    XCOORD,YCOORD,ZCOORD,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::YNORM	IO/reader/PLYReader.hh	/^    XNORM,YNORM,ZNORM,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::ZCOORD	IO/reader/PLYReader.hh	/^    XCOORD,YCOORD,ZCOORD,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::ZNORM	IO/reader/PLYReader.hh	/^    XNORM,YNORM,ZNORM,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
OpenMesh::IO::_PLYReader_::_PLYReader_	IO/reader/PLYReader.cc	/^_PLYReader_::_PLYReader_() {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:()
OpenMesh::IO::_PLYReader_::_PLYReader_	IO/reader/PLYReader.hh	/^  _PLYReader_();$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:()
OpenMesh::IO::_PLYReader_::_count	IO/reader/PLYReader.hh	/^	  _in.read(reinterpret_cast<char*>(&buff[0]), _count);$/;"	l
OpenMesh::IO::_PLYReader_::buff	IO/reader/PLYReader.hh	/^  mutable unsigned char buff[8];$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::can_u_read	IO/reader/PLYReader.cc	/^bool _PLYReader_::can_u_read(const std::string& _filename) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(const std::string& _filename) const
OpenMesh::IO::_PLYReader_::can_u_read	IO/reader/PLYReader.cc	/^bool _PLYReader_::can_u_read(std::istream& _is) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _is) const
OpenMesh::IO::_PLYReader_::can_u_read	IO/reader/PLYReader.hh	/^  bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:(const std::string& _filename) const
OpenMesh::IO::_PLYReader_::can_u_read	IO/reader/PLYReader.hh	/^  bool can_u_read(std::istream& _is) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _is) const
OpenMesh::IO::_PLYReader_::consume_input	IO/reader/PLYReader.hh	/^  void consume_input(std::istream& _in, int _count) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _in, int _count) const
OpenMesh::IO::_PLYReader_::faceCount_	IO/reader/PLYReader.hh	/^  mutable unsigned int faceCount_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::faceEntryType_	IO/reader/PLYReader.hh	/^  mutable ValueType faceEntryType_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::faceIndexType_	IO/reader/PLYReader.hh	/^  mutable ValueType faceIndexType_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::get_description	IO/reader/PLYReader.hh	/^  std::string get_description() const { return "PLY polygon file format"; }$/;"	f	class:OpenMesh::IO::_PLYReader_	access:public	signature:() const
OpenMesh::IO::_PLYReader_::get_extensions	IO/reader/PLYReader.hh	/^  std::string get_extensions()  const { return "ply"; }$/;"	f	class:OpenMesh::IO::_PLYReader_	access:public	signature:() const
OpenMesh::IO::_PLYReader_::get_magic	IO/reader/PLYReader.hh	/^  std::string get_magic()       const { return "PLY"; }$/;"	f	class:OpenMesh::IO::_PLYReader_	access:public	signature:() const
OpenMesh::IO::_PLYReader_::options_	IO/reader/PLYReader.hh	/^  mutable Options options_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::read	IO/reader/PLYReader.cc	/^bool _PLYReader_::read(const std::string& _filename, BaseImporter& _bi, Options& _opt) {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_PLYReader_::read	IO/reader/PLYReader.cc	/^bool _PLYReader_::read(std::istream& _in, BaseImporter& _bi, Options& _opt) {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_PLYReader_::read	IO/reader/PLYReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_PLYReader_::read	IO/reader/PLYReader.hh	/^  bool read(std::istream& _is,$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_PLYReader_::readInteger	IO/reader/PLYReader.cc	/^void _PLYReader_::readInteger(ValueType _type, std::istream& _in, int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, int& _value) const
OpenMesh::IO::_PLYReader_::readInteger	IO/reader/PLYReader.cc	/^void _PLYReader_::readInteger(ValueType _type, std::istream& _in, unsigned int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, unsigned int& _value) const
OpenMesh::IO::_PLYReader_::readInteger	IO/reader/PLYReader.hh	/^  void readInteger(ValueType _type, std::istream& _in, int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type, std::istream& _in, int& _value) const
OpenMesh::IO::_PLYReader_::readInteger	IO/reader/PLYReader.hh	/^  void readInteger(ValueType _type, std::istream& _in, unsigned int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type, std::istream& _in, unsigned int& _value) const
OpenMesh::IO::_PLYReader_::readToFloatValue	IO/reader/PLYReader.hh	/^  float readToFloatValue(ValueType _type , std::fstream& _in) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::fstream& _in) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, double& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, double& _value) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, float& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, float& _value) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, int& _value) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, unsigned int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, unsigned int& _value) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type , std::istream& _in, float& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::istream& _in, float& _value) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type , std::istream& _in, int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::istream& _in, int& _value) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type , std::istream& _in, unsigned int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::istream& _in, unsigned int& _value) const
OpenMesh::IO::_PLYReader_::readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type, std::istream& _in, double& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type, std::istream& _in, double& _value) const
OpenMesh::IO::_PLYReader_::read_ascii	IO/reader/PLYReader.cc	/^bool _PLYReader_::read_ascii(std::istream& _in, BaseImporter& _bi, const Options& _opt) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _in, BaseImporter& _bi, const Options& _opt) const
OpenMesh::IO::_PLYReader_::read_ascii	IO/reader/PLYReader.hh	/^  bool read_ascii(std::istream& _in, BaseImporter& _bi, const Options& _opt) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, const Options& _opt) const
OpenMesh::IO::_PLYReader_::read_binary	IO/reader/PLYReader.cc	/^bool _PLYReader_::read_binary(std::istream& _in, BaseImporter& _bi, bool \/*_swap*\/, const Options& _opt) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _in, BaseImporter& _bi, bool , const Options& _opt) const
OpenMesh::IO::_PLYReader_::read_binary	IO/reader/PLYReader.hh	/^  bool read_binary(std::istream& _in, BaseImporter& _bi, bool swap, const Options& _opt) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, bool swap, const Options& _opt) const
OpenMesh::IO::_PLYReader_::scalar_size_	IO/reader/PLYReader.hh	/^  mutable std::map<ValueType, int> scalar_size_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::userOptions_	IO/reader/PLYReader.hh	/^  mutable Options userOptions_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::vertexCount_	IO/reader/PLYReader.hh	/^  mutable unsigned int vertexCount_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::vertexDimension_	IO/reader/PLYReader.hh	/^  mutable uint vertexDimension_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::vertexPropertyCount_	IO/reader/PLYReader.hh	/^  mutable unsigned int vertexPropertyCount_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::vertexPropertyMap_	IO/reader/PLYReader.hh	/^  mutable std::map< int , std::pair< VertexProperty, ValueType> > vertexPropertyMap_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYReader_::vertexType_	IO/reader/PLYReader.hh	/^  mutable ValueType vertexType_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
OpenMesh::IO::_PLYWriter_	IO/writer/PLYWriter.hh	/^class OPENMESHDLLEXPORT _PLYWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
OpenMesh::IO::_PLYWriter_::Unsupported	IO/writer/PLYWriter.hh	/^    Unsupported ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
OpenMesh::IO::_PLYWriter_::ValueType	IO/writer/PLYWriter.hh	/^  enum ValueType {$/;"	g	class:OpenMesh::IO::_PLYWriter_	access:public
OpenMesh::IO::_PLYWriter_::ValueTypeFLOAT	IO/writer/PLYWriter.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
OpenMesh::IO::_PLYWriter_::ValueTypeFLOAT32	IO/writer/PLYWriter.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
OpenMesh::IO::_PLYWriter_::ValueTypeINT	IO/writer/PLYWriter.hh	/^    ValueTypeUINT8, ValueTypeINT32, ValueTypeINT ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
OpenMesh::IO::_PLYWriter_::ValueTypeINT32	IO/writer/PLYWriter.hh	/^    ValueTypeUINT8, ValueTypeINT32, ValueTypeINT ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
OpenMesh::IO::_PLYWriter_::ValueTypeUCHAR	IO/writer/PLYWriter.hh	/^    ValueTypeUCHAR$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
OpenMesh::IO::_PLYWriter_::ValueTypeUINT8	IO/writer/PLYWriter.hh	/^    ValueTypeUINT8, ValueTypeINT32, ValueTypeINT ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
OpenMesh::IO::_PLYWriter_::_PLYWriter_	IO/writer/PLYWriter.cc	/^_PLYWriter_::_PLYWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:()
OpenMesh::IO::_PLYWriter_::_PLYWriter_	IO/writer/PLYWriter.hh	/^  _PLYWriter_();$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:()
OpenMesh::IO::_PLYWriter_::binary_size	IO/writer/PLYWriter.cc	/^binary_size(BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(BaseExporter& _be, Options _opt) const
OpenMesh::IO::_PLYWriter_::binary_size	IO/writer/PLYWriter.hh	/^  size_t binary_size(BaseExporter& _be, Options _opt) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:(BaseExporter& _be, Options _opt) const
OpenMesh::IO::_PLYWriter_::get_description	IO/writer/PLYWriter.hh	/^  std::string get_description() const { return "PLY polygon file format"; }$/;"	f	class:OpenMesh::IO::_PLYWriter_	access:public	signature:() const
OpenMesh::IO::_PLYWriter_::get_extensions	IO/writer/PLYWriter.hh	/^  std::string get_extensions() const  { return "ply"; }$/;"	f	class:OpenMesh::IO::_PLYWriter_	access:public	signature:() const
OpenMesh::IO::_PLYWriter_::options_	IO/writer/PLYWriter.hh	/^  mutable Options options_;$/;"	m	class:OpenMesh::IO::_PLYWriter_	access:private
OpenMesh::IO::_PLYWriter_::write	IO/writer/PLYWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_PLYWriter_::write	IO/writer/PLYWriter.cc	/^write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_PLYWriter_::write	IO/writer/PLYWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_PLYWriter_::write	IO/writer/PLYWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_PLYWriter_::writeValue	IO/writer/PLYWriter.cc	/^void _PLYWriter_::writeValue(ValueType _type, std::ostream& _out, float value) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(ValueType _type, std::ostream& _out, float value) const
OpenMesh::IO::_PLYWriter_::writeValue	IO/writer/PLYWriter.cc	/^void _PLYWriter_::writeValue(ValueType _type, std::ostream& _out, int value) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(ValueType _type, std::ostream& _out, int value) const
OpenMesh::IO::_PLYWriter_::writeValue	IO/writer/PLYWriter.cc	/^void _PLYWriter_::writeValue(ValueType _type, std::ostream& _out, unsigned int value) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(ValueType _type, std::ostream& _out, unsigned int value) const
OpenMesh::IO::_PLYWriter_::writeValue	IO/writer/PLYWriter.hh	/^  void writeValue(ValueType _type, std::ostream& _out, float value) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(ValueType _type, std::ostream& _out, float value) const
OpenMesh::IO::_PLYWriter_::writeValue	IO/writer/PLYWriter.hh	/^  void writeValue(ValueType _type, std::ostream& _out, int value) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(ValueType _type, std::ostream& _out, int value) const
OpenMesh::IO::_PLYWriter_::writeValue	IO/writer/PLYWriter.hh	/^  void writeValue(ValueType _type, std::ostream& _out, unsigned int value) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(ValueType _type, std::ostream& _out, unsigned int value) const
OpenMesh::IO::_PLYWriter_::write_ascii	IO/writer/PLYWriter.cc	/^write_ascii(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
OpenMesh::IO::_PLYWriter_::write_ascii	IO/writer/PLYWriter.hh	/^  bool write_ascii(std::ostream& _out, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(std::ostream& _out, BaseExporter&, Options) const
OpenMesh::IO::_PLYWriter_::write_binary	IO/writer/PLYWriter.cc	/^write_binary(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
OpenMesh::IO::_PLYWriter_::write_binary	IO/writer/PLYWriter.hh	/^  bool write_binary(std::ostream& _out, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(std::ostream& _out, BaseExporter&, Options) const
OpenMesh::IO::_PLYWriter_::write_header	IO/writer/PLYWriter.cc	/^void _PLYWriter_::write_header(std::ostream& _out, BaseExporter& _be, Options& _opt) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options& _opt) const
OpenMesh::IO::_PLYWriter_::write_header	IO/writer/PLYWriter.hh	/^  void write_header(std::ostream& _out, BaseExporter& _be, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(std::ostream& _out, BaseExporter& _be, Options& _opt) const
OpenMesh::IO::_PLYWriter_::~_PLYWriter_	IO/writer/PLYWriter.hh	/^  virtual ~_PLYWriter_() {};$/;"	f	class:OpenMesh::IO::_PLYWriter_	access:public	signature:()
OpenMesh::IO::_STLReader_	IO/reader/STLReader.hh	/^class OPENMESHDLLEXPORT _STLReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
OpenMesh::IO::_STLReader_::NONE	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	e	enum:OpenMesh::IO::_STLReader_::STL_Type
OpenMesh::IO::_STLReader_::STLA	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	e	enum:OpenMesh::IO::_STLReader_::STL_Type
OpenMesh::IO::_STLReader_::STLB	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	e	enum:OpenMesh::IO::_STLReader_::STL_Type
OpenMesh::IO::_STLReader_::STL_Type	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	g	class:OpenMesh::IO::_STLReader_	access:private
OpenMesh::IO::_STLReader_::_STLReader_	IO/reader/STLReader.cc	/^_STLReader_()$/;"	f	class:OpenMesh::IO::_STLReader_	signature:()
OpenMesh::IO::_STLReader_::_STLReader_	IO/reader/STLReader.hh	/^  _STLReader_();$/;"	p	class:OpenMesh::IO::_STLReader_	access:public	signature:()
OpenMesh::IO::_STLReader_::check_stl_type	IO/reader/STLReader.cc	/^check_stl_type(const std::string& _filename) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename) const
OpenMesh::IO::_STLReader_::check_stl_type	IO/reader/STLReader.hh	/^  STL_Type check_stl_type(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(const std::string& _filename) const
OpenMesh::IO::_STLReader_::eps_	IO/reader/STLReader.hh	/^  float eps_;$/;"	m	class:OpenMesh::IO::_STLReader_	access:private
OpenMesh::IO::_STLReader_::epsilon	IO/reader/STLReader.hh	/^  float epsilon() const { return eps_; }$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:() const
OpenMesh::IO::_STLReader_::get_description	IO/reader/STLReader.hh	/^  std::string get_description() const$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:() const
OpenMesh::IO::_STLReader_::get_extensions	IO/reader/STLReader.hh	/^  std::string get_extensions() const { return "stl stla stlb"; }$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:() const
OpenMesh::IO::_STLReader_::read	IO/reader/STLReader.cc	/^_STLReader_::read(std::istream& _is,$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_STLReader_::read	IO/reader/STLReader.cc	/^read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_STLReader_::read	IO/reader/STLReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_STLReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_STLReader_::read	IO/reader/STLReader.hh	/^  bool read(std::istream& _in,$/;"	p	class:OpenMesh::IO::_STLReader_	access:public	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
OpenMesh::IO::_STLReader_::read_stla	IO/reader/STLReader.cc	/^read_stla(const std::string& _filename, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::read_stla	IO/reader/STLReader.cc	/^read_stla(std::istream& _in, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(std::istream& _in, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::read_stla	IO/reader/STLReader.hh	/^  bool read_stla(const std::string& _filename, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(const std::string& _filename, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::read_stla	IO/reader/STLReader.hh	/^  bool read_stla(std::istream& _in, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::read_stlb	IO/reader/STLReader.cc	/^read_stlb(const std::string& _filename, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::read_stlb	IO/reader/STLReader.cc	/^read_stlb(std::istream& _in, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(std::istream& _in, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::read_stlb	IO/reader/STLReader.hh	/^  bool read_stlb(const std::string& _filename, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(const std::string& _filename, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::read_stlb	IO/reader/STLReader.hh	/^  bool read_stlb(std::istream& _in, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi) const
OpenMesh::IO::_STLReader_::set_epsilon	IO/reader/STLReader.hh	/^  void set_epsilon(float _eps) { eps_=_eps; }$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:(float _eps)
OpenMesh::IO::_STLReader_::~_STLReader_	IO/reader/STLReader.hh	/^  virtual ~_STLReader_() {};$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:()
OpenMesh::IO::_STLWriter_	IO/writer/STLWriter.hh	/^class OPENMESHDLLEXPORT _STLWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
OpenMesh::IO::_STLWriter_::_STLWriter_	IO/writer/STLWriter.cc	/^_STLWriter_::_STLWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:()
OpenMesh::IO::_STLWriter_::_STLWriter_	IO/writer/STLWriter.hh	/^  _STLWriter_();$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:()
OpenMesh::IO::_STLWriter_::binary_size	IO/writer/STLWriter.cc	/^binary_size(BaseExporter& _be, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(BaseExporter& _be, Options ) const
OpenMesh::IO::_STLWriter_::binary_size	IO/writer/STLWriter.hh	/^  size_t binary_size(BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:(BaseExporter&, Options) const
OpenMesh::IO::_STLWriter_::get_description	IO/writer/STLWriter.hh	/^  std::string get_description() const { return "Stereolithography Format"; }$/;"	f	class:OpenMesh::IO::_STLWriter_	access:public	signature:() const
OpenMesh::IO::_STLWriter_::get_extensions	IO/writer/STLWriter.hh	/^  std::string get_extensions()  const { return "stla stlb"; }$/;"	f	class:OpenMesh::IO::_STLWriter_	access:public	signature:() const
OpenMesh::IO::_STLWriter_::write	IO/writer/STLWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_STLWriter_::write	IO/writer/STLWriter.cc	/^write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const
OpenMesh::IO::_STLWriter_::write	IO/writer/STLWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_STLWriter_::write	IO/writer/STLWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_STLWriter_::write_stla	IO/writer/STLWriter.cc	/^write_stla(const std::string& _filename, BaseExporter& _be, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options ) const
OpenMesh::IO::_STLWriter_::write_stla	IO/writer/STLWriter.cc	/^write_stla(std::ostream& _out, BaseExporter& _be, Options \/* _opt *\/, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options , std::streamsize _precision) const
OpenMesh::IO::_STLWriter_::write_stla	IO/writer/STLWriter.hh	/^  bool write_stla(const std::string&, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(const std::string&, BaseExporter&, Options) const
OpenMesh::IO::_STLWriter_::write_stla	IO/writer/STLWriter.hh	/^  bool write_stla(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_STLWriter_::write_stlb	IO/writer/STLWriter.cc	/^write_stlb(const std::string& _filename, BaseExporter& _be, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options ) const
OpenMesh::IO::_STLWriter_::write_stlb	IO/writer/STLWriter.cc	/^write_stlb(std::ostream& _out, BaseExporter& _be, Options \/* _opt *\/, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options , std::streamsize _precision) const
OpenMesh::IO::_STLWriter_::write_stlb	IO/writer/STLWriter.hh	/^  bool write_stlb(const std::string&, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(const std::string&, BaseExporter&, Options) const
OpenMesh::IO::_STLWriter_::write_stlb	IO/writer/STLWriter.hh	/^  bool write_stlb(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
OpenMesh::IO::_STLWriter_::~_STLWriter_	IO/writer/STLWriter.hh	/^  virtual ~_STLWriter_() {};$/;"	f	class:OpenMesh::IO::_STLWriter_	access:public	signature:()
OpenMesh::IO::__IOManager_instance	IO/IOManager.cc	/^_IOManager_  *__IOManager_instance = 0;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__OBJReaderInstance	IO/reader/OBJReader.cc	/^_OBJReader_  __OBJReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__OBJWriterinstance	IO/writer/OBJWriter.cc	/^_OBJWriter_  __OBJWriterinstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__OFFReaderInstance	IO/reader/OFFReader.cc	/^_OFFReader_  __OFFReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__OFFWriterInstance	IO/writer/OFFWriter.cc	/^_OFFWriter_  __OFFWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__OMReaderInstance	IO/reader/OMReader.cc	/^_OMReader_  __OMReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__OMWriterInstance	IO/writer/OMWriter.cc	/^_OMWriter_  __OMWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__PLYReaderInstance	IO/reader/PLYReader.cc	/^_PLYReader_ __PLYReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__PLYWriterInstance	IO/writer/PLYWriter.cc	/^_PLYWriter_  __PLYWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__STLReaderInstance	IO/reader/STLReader.cc	/^_STLReader_  __STLReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__STLWriterInstance	IO/writer/STLWriter.cc	/^_STLWriter_  __STLWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
OpenMesh::IO::__anon5::c	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon5	file:	access:public
OpenMesh::IO::__anon5::i	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon5	file:	access:public
OpenMesh::IO::__anon6::c	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon6	file:	access:public
OpenMesh::IO::__anon6::i	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon6	file:	access:public
OpenMesh::IO::__anon7::c	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon7	file:	access:public
OpenMesh::IO::__anon7::i	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon7	file:	access:public
OpenMesh::IO::_bi	IO/reader/OBJReader.cc	/^          _bi.add_texture_information( (*material).second.map_Kd_index() , (*material).second.map_Kd() );$/;"	p	file:	signature:(*material).second.map_Kd_index() , (*material).second.map_Kd() 
OpenMesh::IO::_hdr	IO/OMFormat.hh	/^    OMFormat::uint16 val; val << _hdr;$/;"	l
OpenMesh::IO::_in	IO/BinaryHelper.cc	/^  _in.read((char*)dc.c, 8);$/;"	p	file:	signature:(char*)dc.c, 8
OpenMesh::IO::_in	IO/BinaryHelper.cc	/^  _in.read((char*)fc.c, 4);$/;"	p	file:	signature:(char*)fc.c, 4
OpenMesh::IO::_in	IO/BinaryHelper.cc	/^  _in.read((char*)ic.c, 4);$/;"	p	file:	signature:(char*)ic.c, 4
OpenMesh::IO::_in	IO/BinaryHelper.cc	/^  _in.read((char*)sc.c, 2);$/;"	p	file:	signature:(char*)sc.c, 2
OpenMesh::IO::_out	IO/BinaryHelper.cc	/^  _out.write((char*)dc.c, 8);$/;"	p	file:	signature:(char*)dc.c, 8
OpenMesh::IO::_out	IO/BinaryHelper.cc	/^  _out.write((char*)fc.c, 4);$/;"	p	file:	signature:(char*)fc.c, 4
OpenMesh::IO::_out	IO/BinaryHelper.cc	/^  _out.write((char*)ic.c, 4);$/;"	p	file:	signature:(char*)ic.c, 4
OpenMesh::IO::_out	IO/BinaryHelper.cc	/^  _out.write((char*)sc.c, 2);$/;"	p	file:	signature:(char*)sc.c, 2
OpenMesh::IO::_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N(uint8_t* _val);$/;"	p	namespace:OpenMesh::IO	signature:(uint8_t* _val)
OpenMesh::IO::_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<12>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
OpenMesh::IO::_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<16>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
OpenMesh::IO::_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<1>(uint8_t* \/*_val*\/) { }$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* )
OpenMesh::IO::_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<2>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
OpenMesh::IO::_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<4>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
OpenMesh::IO::_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<8>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
OpenMesh::IO::a	IO/writer/STLWriter.cc	/^      _out << "vertex " << a[0] << " " << a[1] << " " << a[2] << "\\n";$/;"	l
OpenMesh::IO::a	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
OpenMesh::IO::add_face	IO/reader/OMReader.cc	/^        _bi.add_face(vhandles);$/;"	p	file:	signature:(vhandles)
OpenMesh::IO::add_face	IO/reader/STLReader.cc	/^      _bi.add_face(vhandles);$/;"	p	file:	signature:(vhandles)
OpenMesh::IO::add_face_texcoords	IO/reader/OBJReader.cc	/^        _bi.add_face_texcoords(fh, vhandles[0], face_texcoords);$/;"	p	file:	signature:(fh, vhandles[0], face_texcoords)
OpenMesh::IO::add_vertex	IO/reader/OMReader.cc	/^        _bi.add_vertex(v3f);$/;"	p	file:	signature:(v3f)
OpenMesh::IO::all	IO/IOManager.cc	/^  std::string all = "";$/;"	l
OpenMesh::IO::all	IO/IOManager.cc	/^  std::string all;$/;"	l
OpenMesh::IO::b	IO/reader/OBJReader.cc	/^        stream >> r; stream >> g; stream >> b;$/;"	l
OpenMesh::IO::b	IO/reader/OBJReader.cc	/^      stream >> r; stream >> g; stream >> b;$/;"	l
OpenMesh::IO::b	IO/reader/OBJReader.cc	/^  int                       r, g, b;$/;"	l
OpenMesh::IO::b	IO/reader/OMReader.cc	/^      size_t b;$/;"	l
OpenMesh::IO::b	IO/reader/OMReader.cc	/^  size_t b = bytes_;$/;"	l
OpenMesh::IO::b	IO/writer/OMWriter.cc	/^    size_t b;$/;"	l
OpenMesh::IO::b	IO/writer/STLWriter.cc	/^      _out << "vertex " << b[0] << " " << b[1] << " " << b[2] << "\\n";$/;"	l
OpenMesh::IO::b	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
OpenMesh::IO::binary	IO/SR_binary.hh	/^template < typename T > struct binary$/;"	s	namespace:OpenMesh::IO
OpenMesh::IO::binary	IO/SR_binary_spec.hh	/^template <> struct binary< std::string > {$/;"	s	namespace:OpenMesh::IO
OpenMesh::IO::binary	IO/SR_binary_spec.hh	/^template <> struct binary<OpenMesh::Attributes::StatusInfo>$/;"	s	namespace:OpenMesh::IO
OpenMesh::IO::binary::b	IO/SR_binary_spec.hh	/^    size_t   b = binary<status_t>::restore(_os, v, _swap);$/;"	l
OpenMesh::IO::binary::bytes	IO/SR_binary_spec.hh	/^      size_t bytes = binary<length_t>::store( _os, len, _swap );$/;"	l
OpenMesh::IO::binary::bytes	IO/SR_binary_spec.hh	/^    size_t   bytes = binary<length_t>::restore( _is, len, _swap );$/;"	l
OpenMesh::IO::binary::const_cast	IO/SR_binary_spec.hh	/^    _is.read( const_cast<char*>(_val.data()), len );$/;"	p	signature:(_val.data())
OpenMesh::IO::binary::is_streamable	IO/SR_binary.hh	/^  static const bool is_streamable = false;$/;"	m	struct:OpenMesh::IO::binary	access:public
OpenMesh::IO::binary::is_streamable	IO/SR_binary_spec.hh	/^  static const bool is_streamable = true;$/;"	m	struct:OpenMesh::IO::binary	access:public
OpenMesh::IO::binary::len	IO/SR_binary_spec.hh	/^      length_t len = _v.size();$/;"	l
OpenMesh::IO::binary::len	IO/SR_binary_spec.hh	/^    _is.read( const_cast<char*>(_val.data()), len );$/;"	l
OpenMesh::IO::binary::len	IO/SR_binary_spec.hh	/^    length_t len;$/;"	l
OpenMesh::IO::binary::length_t	IO/SR_binary_spec.hh	/^  typedef uint16_t    length_t;$/;"	t	struct:OpenMesh::IO::binary	access:public
OpenMesh::IO::binary::n_bytes	IO/SR_binary_spec.hh	/^  static size_t n_bytes(size_t _n_elem)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(size_t _n_elem)
OpenMesh::IO::binary::resize	IO/SR_binary_spec.hh	/^    _val.resize(len);$/;"	p	signature:(len)
OpenMesh::IO::binary::restore	IO/SR_binary.hh	/^  size_t restore( std::istream& \/* _is *\/,$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:( std::istream& , value_type& , bool )
OpenMesh::IO::binary::restore	IO/SR_binary_spec.hh	/^  size_t restore( std::istream& _os, value_type& _v, bool _swap=false)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:( std::istream& _os, value_type& _v, bool _swap=false)
OpenMesh::IO::binary::restore	IO/SR_binary_spec.hh	/^  size_t restore(std::istream& _is, value_type& _val, bool _swap=false)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(std::istream& _is, value_type& _val, bool _swap=false)
OpenMesh::IO::binary::set_bits	IO/SR_binary_spec.hh	/^    _v.set_bits(v);$/;"	p	signature:(v)
OpenMesh::IO::binary::size_of	IO/SR_binary.hh	/^  static size_t size_of(const value_type&) { return UnknownSize; }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(const value_type&)
OpenMesh::IO::binary::size_of	IO/SR_binary.hh	/^  static size_t size_of(void) { return UnknownSize; }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(void)
OpenMesh::IO::binary::size_of	IO/SR_binary_spec.hh	/^  static size_t size_of() { return UnknownSize; }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:()
OpenMesh::IO::binary::size_of	IO/SR_binary_spec.hh	/^  static size_t size_of() { return sizeof(status_t); }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:()
OpenMesh::IO::binary::size_of	IO/SR_binary_spec.hh	/^  static size_t size_of(const value_type &_v)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(const value_type &_v)
OpenMesh::IO::binary::size_of	IO/SR_binary_spec.hh	/^  static size_t size_of(const value_type&) { return size_of(); }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(const value_type&)
OpenMesh::IO::binary::status_t	IO/SR_binary_spec.hh	/^  typedef value_type::value_type           status_t;$/;"	t	struct:OpenMesh::IO::binary	access:public
OpenMesh::IO::binary::store	IO/SR_binary.hh	/^  size_t store( std::ostream& \/* _os *\/,$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:( std::ostream& , const value_type& , bool )
OpenMesh::IO::binary::store	IO/SR_binary_spec.hh	/^  size_t store(std::ostream& _os, const value_type& _v, bool _swap=false)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(std::ostream& _os, const value_type& _v, bool _swap=false)
OpenMesh::IO::binary::v	IO/SR_binary_spec.hh	/^    status_t v;$/;"	l
OpenMesh::IO::binary::v	IO/SR_binary_spec.hh	/^    status_t v=_v.bits();$/;"	l
OpenMesh::IO::binary::value_type	IO/SR_binary.hh	/^  typedef T     value_type;$/;"	t	struct:OpenMesh::IO::binary	access:public
OpenMesh::IO::binary::value_type	IO/SR_binary_spec.hh	/^  typedef OpenMesh::Attributes::StatusInfo value_type;$/;"	t	struct:OpenMesh::IO::binary	access:public
OpenMesh::IO::binary::value_type	IO/SR_binary_spec.hh	/^  typedef std::string value_type;$/;"	t	struct:OpenMesh::IO::binary	access:public
OpenMesh::IO::binary::write	IO/SR_binary_spec.hh	/^      _os.write( _v.data(), len );$/;"	p	signature:( _v.data(), len )
OpenMesh::IO::binary_size	IO/MeshIO.hh	/^size_t binary_size(const Mesh&        _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(const Mesh& _mesh, const std::string& _ext, Options _opt = Options::Default)
OpenMesh::IO::binary_size	IO/reader/STLReader.cc	/^  size_t binary_size = 84 + nT*50;$/;"	l
OpenMesh::IO::block_size	IO/reader/OMReader.cc	/^  Chunk::esize_t block_size;$/;"	l
OpenMesh::IO::bp	IO/writer/OMWriter.cc	/^    const BaseProperty *bp = _be.kernel()._get_fprop("f:colors");$/;"	l
OpenMesh::IO::bp	IO/writer/OMWriter.cc	/^    const BaseProperty *bp = _be.kernel()._get_fprop("f:normals");$/;"	l
OpenMesh::IO::buf	IO/OMFormat.hh	/^      char buf[256];$/;"	l
OpenMesh::IO::bytes	IO/OMFormat.hh	/^    size_t bytes =  restore( _is, _vec[0], _swap );$/;"	l
OpenMesh::IO::bytes	IO/OMFormat.hh	/^    size_t bytes =  store( _os, _vec[0], _swap );$/;"	l
OpenMesh::IO::bytes	IO/OMFormat.hh	/^    size_t bytes = binary<uint16_t>::restore( _is, val, _swap );$/;"	l
OpenMesh::IO::bytes	IO/OMFormat.hh	/^    size_t bytes;$/;"	l
OpenMesh::IO::bytes	IO/OMFormatT.cc	/^    size_t bytes = 0;$/;"	l
OpenMesh::IO::bytes	IO/writer/OMWriter.cc	/^  size_t bytes  = sizeof( OMFormat::Header );$/;"	l
OpenMesh::IO::bytes	IO/writer/OMWriter.cc	/^  size_t bytes = 0;$/;"	l
OpenMesh::IO::c	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3i         c;$/;"	l
OpenMesh::IO::c	IO/reader/PLYReader.cc	/^                    _in >> c[0];$/;"	l
OpenMesh::IO::c	IO/reader/PLYReader.cc	/^                    _in >> c[1];$/;"	l
OpenMesh::IO::c	IO/reader/PLYReader.cc	/^                    _in >> c[2];$/;"	l
OpenMesh::IO::c	IO/reader/PLYReader.cc	/^                    _in >> c[3];$/;"	l
OpenMesh::IO::c	IO/reader/PLYReader.cc	/^    OpenMesh::Vec4i        c;  \/\/ Color$/;"	l
OpenMesh::IO::c	IO/reader/PLYReader.cc	/^    OpenMesh::Vec4i c;$/;"	l
OpenMesh::IO::c	IO/writer/OBJWriter.cc	/^  OpenMesh::Vec3f c;$/;"	l
OpenMesh::IO::c	IO/writer/OFFWriter.cc	/^            _out << " " << c;$/;"	l
OpenMesh::IO::c	IO/writer/OFFWriter.cc	/^          _out << " " << c;$/;"	l
OpenMesh::IO::c	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec3i c;$/;"	l
OpenMesh::IO::c	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4i c;$/;"	l
OpenMesh::IO::c	IO/writer/OMWriter.cc	/^      Vec3uc c;$/;"	l
OpenMesh::IO::c	IO/writer/OMWriter.cc	/^    Vec3uc c = _be.color(VertexHandle(0));$/;"	l
OpenMesh::IO::c	IO/writer/PLYWriter.cc	/^          _out << " " << c;$/;"	l
OpenMesh::IO::c	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec3ui c;$/;"	l
OpenMesh::IO::c	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4uc c;$/;"	l
OpenMesh::IO::c	IO/writer/STLWriter.cc	/^      _out << "vertex " << c[0] << " " << c[1] << " " << c[2] << "\\n";$/;"	l
OpenMesh::IO::c	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
OpenMesh::IO::c1	IO/reader/OFFReader.cc	/^      std::string c1 = _line.substr (0,found);$/;"	l
OpenMesh::IO::c3	IO/reader/OFFReader.cc	/^        case 3 : stream >> c3[0];  stream >> c3[1];  stream >> c3[2];$/;"	l
OpenMesh::IO::c3	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3i         c3;$/;"	l
OpenMesh::IO::c3f	IO/reader/OFFReader.cc	/^        case 5 : stream >> c3f[0];  stream >> c3f[1];  stream >> c3f[2];$/;"	l
OpenMesh::IO::c3f	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         c3f;$/;"	l
OpenMesh::IO::c4	IO/reader/OFFReader.cc	/^        case 4 : stream >> c4[0];  stream >> c4[1];  stream >> c4[2]; stream >> c4[3];$/;"	l
OpenMesh::IO::c4	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4i         c4;$/;"	l
OpenMesh::IO::c4f	IO/reader/OFFReader.cc	/^        case 6 : stream >> c4f[0];  stream >> c4f[1];  stream >> c4f[2]; stream >> c4f[3];$/;"	l
OpenMesh::IO::c4f	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4f         c4f;$/;"	l
OpenMesh::IO::cA	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4i         cA;$/;"	l
OpenMesh::IO::cA	IO/writer/OBJWriter.cc	/^  OpenMesh::Vec4f cA;$/;"	l
OpenMesh::IO::cA	IO/writer/OFFWriter.cc	/^            _out << " " << cA;$/;"	l
OpenMesh::IO::cA	IO/writer/OFFWriter.cc	/^          _out << " " << cA;$/;"	l
OpenMesh::IO::cA	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4i cA;$/;"	l
OpenMesh::IO::cA	IO/writer/PLYWriter.cc	/^          _out << " " << cA;$/;"	l
OpenMesh::IO::cA	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4ui cA;$/;"	l
OpenMesh::IO::cAf	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4f         cAf;$/;"	l
OpenMesh::IO::cAf	IO/writer/OFFWriter.cc	/^            _out << " " << cAf;$/;"	l
OpenMesh::IO::cAf	IO/writer/OFFWriter.cc	/^          _out << " " << cAf;$/;"	l
OpenMesh::IO::cAf	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4f cAf;$/;"	l
OpenMesh::IO::cAf	IO/writer/PLYWriter.cc	/^          _out << " " << cAf;$/;"	l
OpenMesh::IO::cAf	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4f cAf;$/;"	l
OpenMesh::IO::cf	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         cf;$/;"	l
OpenMesh::IO::cf	IO/writer/OFFWriter.cc	/^            _out << " " << cf;$/;"	l
OpenMesh::IO::cf	IO/writer/OFFWriter.cc	/^          _out << " " << cf;$/;"	l
OpenMesh::IO::cf	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec3f cf;$/;"	l
OpenMesh::IO::cf	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4f cf;$/;"	l
OpenMesh::IO::cf	IO/writer/PLYWriter.cc	/^          _out << " " << cf;$/;"	l
OpenMesh::IO::cf	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec3f cf;$/;"	l
OpenMesh::IO::cf	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4f cf;$/;"	l
OpenMesh::IO::chdr	IO/writer/OMWriter.cc	/^  OMFormat::Chunk::Header  chdr;$/;"	l
OpenMesh::IO::chunk_header	IO/writer/OMWriter.cc	/^  OMFormat::Chunk::Header chunk_header;$/;"	l
OpenMesh::IO::cleanup	IO/reader/OBJReader.cc	/^        mat.cleanup();$/;"	p	file:	signature:()
OpenMesh::IO::cleanup	IO/reader/OBJReader.cc	/^  mat.cleanup();$/;"	p	file:	signature:()
OpenMesh::IO::cleanup	IO/reader/OFFReader.cc	/^  options_.cleanup();$/;"	p	file:	signature:()
OpenMesh::IO::cleanup	IO/reader/PLYReader.cc	/^    options_.cleanup();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/MeshIO.hh	/^  if (_clear) _mesh.clear();$/;"	p	signature:()
OpenMesh::IO::clear	IO/reader/OBJReader.cc	/^      face_texcoords.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/OBJReader.cc	/^      vhandles.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/OBJReader.cc	/^  materials_.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/OFFReader.cc	/^      vhandles.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/OFFReader.cc	/^   _opt.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/OMReader.cc	/^        vhandles.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/PLYReader.cc	/^            vhandles.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/PLYReader.cc	/^    _opt.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/PLYReader.cc	/^    vertexPropertyMap_.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/STLReader.cc	/^      vhandles.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/reader/STLReader.cc	/^    vhandles.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/writer/OBJWriter.cc	/^  materialA_.clear();$/;"	p	file:	signature:()
OpenMesh::IO::clear	IO/writer/OBJWriter.cc	/^  material_.clear();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/OBJReader.cc	/^        matStream.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/OBJReader.cc	/^  in.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/OFFReader.cc	/^      ifs.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/OFFReader.cc	/^  ifile.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/OMReader.cc	/^  ifs.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/PLYReader.cc	/^            ifs.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/PLYReader.cc	/^    in.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/STLReader.cc	/^      in.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/reader/STLReader.cc	/^    in.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/writer/OBJWriter.cc	/^      matStream.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/writer/OBJWriter.cc	/^  out.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/writer/OFFWriter.cc	/^  out.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/writer/OMWriter.cc	/^  ofs.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/writer/PLYWriter.cc	/^  out.close();$/;"	p	file:	signature:()
OpenMesh::IO::close	IO/writer/STLWriter.cc	/^  out.close();$/;"	p	file:	signature:()
OpenMesh::IO::cmpExt	IO/reader/BaseReader.cc	/^  std::string cmpExt(_ext);$/;"	p	file:	signature:(_ext)
OpenMesh::IO::colorType	IO/reader/OFFReader.cc	/^            std::cerr << "Error in file format (colorType = " << colorType << ")\\n";$/;"	l
OpenMesh::IO::colorType	IO/reader/OFFReader.cc	/^      int colorType = getColorType(line, false );$/;"	l
OpenMesh::IO::colorType	IO/reader/OFFReader.cc	/^    int colorType = getColorType(line, options_.vertex_has_texcoord() );$/;"	l
OpenMesh::IO::colors	IO/reader/OBJReader.cc	/^  std::vector<Vec3uc>       colors;$/;"	l
OpenMesh::IO::comp	IO/reader/STLReader.cc	/^  CmpVec comp(eps_);$/;"	p	file:	signature:(eps_)
OpenMesh::IO::compile_time_error__no_fundamental_type	IO/SR_rbo.hh	/^inline void compile_time_error__no_fundamental_type()$/;"	f	namespace:OpenMesh::IO	signature:()
OpenMesh::IO::count	IO/reader/OFFReader.cc	/^    int count = 0;$/;"	l
OpenMesh::IO::custom_prop	IO/reader/OMReader.cc	/^  Chunk::PropertyName custom_prop;$/;"	l
OpenMesh::IO::custom_prop	IO/reader/OMReader.cc	/^  OMFormat::Chunk::PropertyName custom_prop;$/;"	l
OpenMesh::IO::data_bytes	IO/reader/OMReader.cc	/^  size_t data_bytes;$/;"	l
OpenMesh::IO::dc	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	l
OpenMesh::IO::dimensions	IO/reader/OMReader.cc	/^      assert( OMFormat::dimensions(chunk_header_) == 3);$/;"	p	file:	signature:(chunk_header_)
OpenMesh::IO::dot	IO/reader/OBJReader.cc	/^    std::string::size_type dot = _filename.find_last_of("\\\\\/");$/;"	l
OpenMesh::IO::dot	IO/reader/OBJReader.cc	/^    std::string::size_type dot = _filename.rfind("\/");$/;"	l
OpenMesh::IO::dot	IO/writer/OBJWriter.cc	/^    std::string::size_type dot = _filename.find_last_of("\\\\\/");$/;"	l
OpenMesh::IO::dot	IO/writer/OBJWriter.cc	/^    std::string::size_type dot = _filename.rfind("\/");$/;"	l
OpenMesh::IO::dummy	IO/reader/OFFReader.cc	/^  _in >> dummy;$/;"	l
OpenMesh::IO::dummy	IO/reader/OFFReader.cc	/^  unsigned int            nV, nF, dummy;$/;"	l
OpenMesh::IO::dummy	IO/reader/STLReader.cc	/^  char                       dummy[100];$/;"	l
OpenMesh::IO::dummy	IO/reader/STLReader.cc	/^  char dummy[100];$/;"	l
OpenMesh::IO::elementName	IO/reader/PLYReader.cc	/^            _is >> elementName;$/;"	l
OpenMesh::IO::elementName	IO/reader/PLYReader.cc	/^    std::string elementName = "";$/;"	l
OpenMesh::IO::element_size	IO/writer/OMWriter.cc	/^  OMFormat::Chunk::esize_t element_size   = _bp.element_size();$/;"	l
OpenMesh::IO::end	IO/reader/BaseReader.hh	/^  _string.erase(std::find_if(_string.rbegin(), _string.rend(), std::not1(std::ptr_fun<int, int>(std::isspace))).base(), _string.end());$/;"	p	signature:()
OpenMesh::IO::end	IO/reader/OBJReader.cc	/^  size_t end   = _string.find_last_not_of(" \\t\\r\\n");$/;"	l
OpenMesh::IO::end	IO/reader/STLReader.cc	/^  size_t end   = _string.find_last_not_of(" \\t\\r\\n");$/;"	l
OpenMesh::IO::endian_test	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	l
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORALPHA, valueType);$/;"	p	file:	signature:(COLORALPHA, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORBLUE, valueType);$/;"	p	file:	signature:(COLORBLUE, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORGREEN, valueType);$/;"	p	file:	signature:(COLORGREEN, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORRED, valueType);$/;"	p	file:	signature:(COLORRED, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(TEXX, valueType);$/;"	p	file:	signature:(TEXX, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(TEXY, valueType);$/;"	p	file:	signature:(TEXY, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(UNSUPPORTED, valueType);$/;"	p	file:	signature:(UNSUPPORTED, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(XCOORD, valueType);$/;"	p	file:	signature:(XCOORD, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(XNORM, valueType);$/;"	p	file:	signature:(XNORM, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(YCOORD, valueType);$/;"	p	file:	signature:(YCOORD, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(YNORM, valueType);$/;"	p	file:	signature:(YNORM, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(ZCOORD, valueType);$/;"	p	file:	signature:(ZCOORD, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(ZNORM, valueType);$/;"	p	file:	signature:(ZNORM, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                      std::pair<VertexProperty, ValueType> entry(COLORBLUE, valueType);$/;"	p	file:	signature:(COLORBLUE, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                      std::pair<VertexProperty, ValueType> entry(COLORGREEN, valueType);$/;"	p	file:	signature:(COLORGREEN, valueType)
OpenMesh::IO::entry	IO/reader/PLYReader.cc	/^                      std::pair<VertexProperty, ValueType> entry(COLORRED, valueType);$/;"	p	file:	signature:(COLORRED, valueType)
OpenMesh::IO::erase	IO/reader/BaseReader.hh	/^  _string.erase(_string.begin(), std::find_if(_string.begin(), _string.end(), std::not1(std::ptr_fun<int, int>(std::isspace))));$/;"	p	signature:(_string.begin(), std::find_if(_string.begin(), _string.end(), std::not1(std::ptr_fun<int, int>(std::isspace))))
OpenMesh::IO::evt	IO/reader/OMReader.cc	/^  std::vector<char> evt;$/;"	l
OpenMesh::IO::exporter	IO/MeshIO.hh	/^  ExporterT<Mesh> exporter(_mesh);$/;"	p	signature:(_mesh)
OpenMesh::IO::ext	IO/IOManager.cc	/^  string ext;$/;"	l
OpenMesh::IO::ext	IO/reader/BaseReader.cc	/^    std::string ext;$/;"	l
OpenMesh::IO::extension	IO/reader/BaseReader.cc	/^  std::string extension;$/;"	l
OpenMesh::IO::extension	IO/writer/BaseWriter.cc	/^  std::string extension;$/;"	l
OpenMesh::IO::f1	IO/reader/OBJReader.cc	/^      stream >> f1; stream >> f2; stream >> f3;$/;"	l
OpenMesh::IO::f1	IO/reader/OBJReader.cc	/^      stream >> f1;$/;"	l
OpenMesh::IO::f1	IO/reader/OBJReader.cc	/^  float       f1,f2,f3;$/;"	l
OpenMesh::IO::f2	IO/reader/OBJReader.cc	/^      stream >> f1; stream >> f2; stream >> f3;$/;"	l
OpenMesh::IO::f2	IO/reader/OBJReader.cc	/^  float       f1,f2,f3;$/;"	l
OpenMesh::IO::f3	IO/reader/OBJReader.cc	/^      stream >> f1; stream >> f2; stream >> f3;$/;"	l
OpenMesh::IO::f3	IO/reader/OBJReader.cc	/^  float       f1,f2,f3;$/;"	l
OpenMesh::IO::faceCount_	IO/reader/PLYReader.cc	/^                _is >> faceCount_;$/;"	l
OpenMesh::IO::faceLine	IO/reader/OBJReader.cc	/^      std::string faceLine;$/;"	l
OpenMesh::IO::faceVertices	IO/reader/OBJReader.cc	/^      BaseImporter::VHandles faceVertices;$/;"	l
OpenMesh::IO::face_texcoords	IO/reader/OBJReader.cc	/^  std::vector<Vec2f>        face_texcoords;$/;"	l
OpenMesh::IO::fc	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	l
OpenMesh::IO::fc	IO/reader/OBJReader.cc	/^          Vec3uc fc = color_cast<Vec3uc, Vec3f>(mat.Kd());$/;"	l
OpenMesh::IO::fh	IO/reader/OBJReader.cc	/^      FaceHandle fh;$/;"	l
OpenMesh::IO::fh	IO/reader/OFFReader.cc	/^    FaceHandle fh = _bi.add_face(vhandles);$/;"	l
OpenMesh::IO::fh	IO/reader/PLYReader.cc	/^        FaceHandle fh = _bi.add_face(vhandles);$/;"	l
OpenMesh::IO::fh	IO/reader/STLReader.cc	/^        FaceHandle fh = _bi.add_face(vhandles);$/;"	l
OpenMesh::IO::fh	IO/writer/STLWriter.cc	/^  FaceHandle fh;$/;"	l
OpenMesh::IO::fidx	IO/reader/OMReader.cc	/^  size_t fidx = 0;$/;"	l
OpenMesh::IO::fileOptions	IO/reader/OBJReader.cc	/^  Options fileOptions;$/;"	l
OpenMesh::IO::fileType	IO/reader/PLYReader.cc	/^    _is >> fileType;$/;"	l
OpenMesh::IO::fileType	IO/reader/PLYReader.cc	/^    std::string fileType;$/;"	l
OpenMesh::IO::file_type	IO/reader/STLReader.cc	/^  STL_Type file_type = NONE;$/;"	l
OpenMesh::IO::filename	IO/IOManager.cc	/^  std::string filename = "dummy." + _format;$/;"	l
OpenMesh::IO::filename	IO/IOManager.cc	/^  std::string filename = "dummy." + ext;$/;"	l
OpenMesh::IO::filters	IO/IOManager.cc	/^  std::string filters = "";$/;"	l
OpenMesh::IO::filters	IO/IOManager.cc	/^  std::string filters;$/;"	l
OpenMesh::IO::finish	IO/IOManager.cc	/^      _bi.finish();$/;"	p	file:	signature:()
OpenMesh::IO::float32_t	IO/SR_types.hh	/^typedef float          float32_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::float64_t	IO/SR_types.hh	/^typedef double         float64_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::found	IO/reader/OBJReader.cc	/^          size_t found=vertex.find("\/");$/;"	l
OpenMesh::IO::found	IO/reader/OFFReader.cc	/^    size_t found;$/;"	l
OpenMesh::IO::g	IO/reader/OBJReader.cc	/^        stream >> r; stream >> g; stream >> b;$/;"	l
OpenMesh::IO::g	IO/reader/OBJReader.cc	/^      stream >> r; stream >> g; stream >> b;$/;"	l
OpenMesh::IO::g	IO/reader/OBJReader.cc	/^  int                       r, g, b;$/;"	l
OpenMesh::IO::garbage	IO/reader/STLReader.cc	/^        std::string garbage;$/;"	l
OpenMesh::IO::garbage	IO/reader/STLReader.cc	/^        strstream >> garbage;$/;"	l
OpenMesh::IO::garbage	IO/reader/STLReader.cc	/^      std::string garbage;$/;"	l
OpenMesh::IO::garbage	IO/reader/STLReader.cc	/^      strstream >> garbage;$/;"	l
OpenMesh::IO::get_property_name	IO/reader/PLYReader.cc	/^std::string get_property_name(std::string _string1, std::string _string2) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string _string1, std::string _string2)
OpenMesh::IO::get_property_type	IO/reader/PLYReader.cc	/^_PLYReader_::ValueType get_property_type(std::string _string1, std::string _string2) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string _string1, std::string _string2)
OpenMesh::IO::getline	IO/reader/OFFReader.cc	/^  _is.getline(line, LINE_LEN);$/;"	p	file:	signature:(line, LINE_LEN)
OpenMesh::IO::handle	IO/reader/STLReader.cc	/^          VertexHandle handle = _bi.add_vertex(v);$/;"	l
OpenMesh::IO::handle	IO/reader/STLReader.cc	/^        VertexHandle handle = _bi.add_vertex(v);$/;"	l
OpenMesh::IO::hdr	IO/reader/OMReader.cc	/^  OMFormat::Header *hdr = (OMFormat::Header*) &evt[0];$/;"	l
OpenMesh::IO::header	IO/reader/OFFReader.cc	/^  std::string header;$/;"	l
OpenMesh::IO::header	IO/writer/OMWriter.cc	/^  OMFormat::Header header;$/;"	l
OpenMesh::IO::header	IO/writer/STLWriter.cc	/^  const char header[80] =$/;"	l
OpenMesh::IO::i	IO/reader/OBJReader.cc	/^    int i = 0;$/;"	l
OpenMesh::IO::i	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
OpenMesh::IO::i	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
OpenMesh::IO::i	IO/reader/STLReader.cc	/^  unsigned int               i, nT;$/;"	l
OpenMesh::IO::i	IO/reader/STLReader.cc	/^  unsigned int               i;$/;"	l
OpenMesh::IO::i	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
OpenMesh::IO::i	IO/writer/OFFWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::i	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::i	IO/writer/OMWriter.cc	/^  unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::i	IO/writer/PLYWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::i	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::i	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces()), nV;$/;"	l
OpenMesh::IO::i	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces());$/;"	l
OpenMesh::IO::ic	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	l
OpenMesh::IO::idx	IO/reader/OFFReader.cc	/^         _in >> idx;$/;"	l
OpenMesh::IO::idx	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
OpenMesh::IO::idx	IO/reader/PLYReader.cc	/^                _in >> idx;$/;"	l
OpenMesh::IO::idx	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
OpenMesh::IO::idx	IO/writer/OBJWriter.cc	/^          _out  << idx;$/;"	l
OpenMesh::IO::idx	IO/writer/OBJWriter.cc	/^          _out << idx;$/;"	l
OpenMesh::IO::idx	IO/writer/OBJWriter.cc	/^      _out << " " << idx;$/;"	l
OpenMesh::IO::idx	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
OpenMesh::IO::idx	IO/writer/OFFWriter.cc	/^	       _out << vhandles[j].idx() << " ";$/;"	p	file:	signature:()
OpenMesh::IO::idx	IO/writer/OFFWriter.cc	/^      _out << vhandles[0].idx()  << " ";$/;"	p	file:	signature:()
OpenMesh::IO::idx	IO/writer/OFFWriter.cc	/^      _out << vhandles[1].idx()  << " ";$/;"	p	file:	signature:()
OpenMesh::IO::idx	IO/writer/OFFWriter.cc	/^      _out << vhandles[2].idx();$/;"	p	file:	signature:()
OpenMesh::IO::idx	IO/writer/PLYWriter.cc	/^         _out << vhandles[j].idx() << " ";$/;"	p	file:	signature:()
OpenMesh::IO::idx	IO/writer/PLYWriter.cc	/^      _out << vhandles[0].idx()  << " ";$/;"	p	file:	signature:()
OpenMesh::IO::idx	IO/writer/PLYWriter.cc	/^      _out << vhandles[1].idx()  << " ";$/;"	p	file:	signature:()
OpenMesh::IO::idx	IO/writer/PLYWriter.cc	/^      _out << vhandles[2].idx();$/;"	p	file:	signature:()
OpenMesh::IO::ifile	IO/reader/OFFReader.cc	/^  std::ifstream ifile(_filename.c_str(), (options_.is_binary() ? std::ios::binary | std::ios::in$/;"	p	file:	signature:(_filename.c_str(), (options_.is_binary() ? std::ios::binary | std::ios::in : std::ios::in) )
OpenMesh::IO::ifile	IO/reader/OMReader.cc	/^    std::ifstream ifile(_filename.c_str());$/;"	p	file:	signature:(_filename.c_str())
OpenMesh::IO::ifs	IO/reader/OFFReader.cc	/^    std::ifstream ifs(_filename.c_str());$/;"	p	file:	signature:(_filename.c_str())
OpenMesh::IO::ifs	IO/reader/OMReader.cc	/^  std::ifstream ifs(_filename.c_str(), std::ios::binary);$/;"	p	file:	signature:(_filename.c_str(), std::ios::binary)
OpenMesh::IO::ifs	IO/reader/PLYReader.cc	/^        std::ifstream ifs(_filename.c_str());$/;"	p	file:	signature:(_filename.c_str())
OpenMesh::IO::ignore	IO/reader/OMReader.cc	/^      _is.ignore(size_of);$/;"	p	file:	signature:(size_of)
OpenMesh::IO::ignore	IO/reader/OMReader.cc	/^    _is.ignore(block_size);$/;"	p	file:	signature:(block_size)
OpenMesh::IO::importer	IO/MeshIO.hh	/^  ImporterT<Mesh> importer(_mesh);$/;"	p	signature:(_mesh)
OpenMesh::IO::in	IO/reader/OBJReader.cc	/^  std::fstream in( _filename.c_str(), std::ios_base::in );$/;"	p	file:	signature:( _filename.c_str(), std::ios_base::in )
OpenMesh::IO::in	IO/reader/PLYReader.cc	/^    std::fstream in(_filename.c_str(), (std::ios_base::binary | std::ios_base::in) );$/;"	p	file:	signature:(_filename.c_str(), (std::ios_base::binary | std::ios_base::in) )
OpenMesh::IO::in	IO/reader/STLReader.cc	/^  FILE*  in = fopen(_filename.c_str(), "rb");$/;"	l
OpenMesh::IO::in	IO/reader/STLReader.cc	/^  FILE* in = fopen(_filename.c_str(), "rb");$/;"	l
OpenMesh::IO::in	IO/reader/STLReader.cc	/^  std::fstream in( _filename.c_str(), std::ios_base::in );$/;"	p	file:	signature:( _filename.c_str(), std::ios_base::in )
OpenMesh::IO::indef	IO/reader/OBJReader.cc	/^  bool        indef = false;$/;"	l
OpenMesh::IO::int16_t	IO/SR_types.hh	/^typedef short          int16_t; typedef unsigned short     uint16_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::int32_t	IO/SR_types.hh	/^typedef int            int32_t; typedef unsigned int       uint32_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::int64_t	IO/SR_types.hh	/^typedef __int64        int64_t; typedef unsigned __int64   uint64_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::int64_t	IO/SR_types.hh	/^typedef long long      int64_t; typedef unsigned long long uint64_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::int8_t	IO/SR_types.hh	/^typedef char           int8_t;  typedef unsigned char      uint8_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::is_integer	IO/OMFormat.hh	/^    assert( OMFormat::is_integer( _val ) );$/;"	p	signature:(_val )
OpenMesh::IO::is_integer	IO/OMFormatT.cc	/^    assert( OMFormat::is_integer( _val ) );$/;"	p	file:	signature:(_val )
OpenMesh::IO::is_streamable	IO/StoreRestore.hh	/^bool is_streamable( const T& ) $/;"	f	namespace:OpenMesh::IO	signature:( const T& )
OpenMesh::IO::is_streamable	IO/StoreRestore.hh	/^bool is_streamable(void)$/;"	f	namespace:OpenMesh::IO	signature:(void)
OpenMesh::IO::is_valid	IO/OMFormat.hh	/^    assert( OMFormat::Chunk::PropertyName::is_valid( size ) );$/;"	p	signature:(size )
OpenMesh::IO::istringstream	IO/IOManager.cc	/^    std::istringstream iss((*it)->get_extensions());$/;"	p	file:	signature:(*it)->get_extensions()
OpenMesh::IO::it	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it     =  reader_modules_.begin();$/;"	l
OpenMesh::IO::it	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it     = reader_modules_.begin(),$/;"	l
OpenMesh::IO::it	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it     = reader_modules_.begin();$/;"	l
OpenMesh::IO::it	IO/IOManager.cc	/^  std::set<BaseWriter*>::const_iterator it     = writer_modules_.begin(),$/;"	l
OpenMesh::IO::it	IO/IOManager.cc	/^  std::set<BaseWriter*>::const_iterator it     = writer_modules_.begin();$/;"	l
OpenMesh::IO::it	IO/reader/OMReader.cc	/^  std::vector<char>::reverse_iterator it = evt.rbegin();$/;"	l
OpenMesh::IO::it_end	IO/IOManager.cc	/^                                        it_end = reader_modules_.end();$/;"	l
OpenMesh::IO::it_end	IO/IOManager.cc	/^                                        it_end = writer_modules_.end();$/;"	l
OpenMesh::IO::it_end	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it_end =  reader_modules_.end();$/;"	l
OpenMesh::IO::it_end	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it_end = reader_modules_.end();$/;"	l
OpenMesh::IO::it_end	IO/IOManager.cc	/^  std::set<BaseWriter*>::const_iterator it_end = writer_modules_.end();$/;"	l
OpenMesh::IO::j	IO/reader/OFFReader.cc	/^      _in >> j;$/;"	l
OpenMesh::IO::j	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
OpenMesh::IO::j	IO/reader/PLYReader.cc	/^            _in >> j;$/;"	l
OpenMesh::IO::j	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
OpenMesh::IO::j	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
OpenMesh::IO::j	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::j	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::k	IO/reader/OFFReader.cc	/^      _in >> k;$/;"	l
OpenMesh::IO::k	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
OpenMesh::IO::k	IO/reader/PLYReader.cc	/^            _in >> k;$/;"	l
OpenMesh::IO::k	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
OpenMesh::IO::key	IO/reader/OBJReader.cc	/^      stream >> key;$/;"	l
OpenMesh::IO::key	IO/reader/OBJReader.cc	/^  std::string key;$/;"	l
OpenMesh::IO::keyWrd	IO/reader/OBJReader.cc	/^    stream >> keyWrd;$/;"	l
OpenMesh::IO::keyWrd	IO/reader/OBJReader.cc	/^  std::string keyWrd;$/;"	l
OpenMesh::IO::keyword	IO/reader/PLYReader.cc	/^        _is >> keyword;$/;"	l
OpenMesh::IO::keyword	IO/reader/PLYReader.cc	/^    _is >> keyword;$/;"	l
OpenMesh::IO::keyword	IO/reader/PLYReader.cc	/^    std::string keyword;$/;"	l
OpenMesh::IO::l	IO/reader/OFFReader.cc	/^      _in >> l;$/;"	l
OpenMesh::IO::l	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
OpenMesh::IO::l	IO/reader/PLYReader.cc	/^            _in >> l;$/;"	l
OpenMesh::IO::l	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
OpenMesh::IO::lastMat	IO/writer/OBJWriter.cc	/^  int lastMat = -1;$/;"	l
OpenMesh::IO::left_trim	IO/reader/BaseReader.hh	/^static inline std::string &left_trim(std::string &_string) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string &_string)
OpenMesh::IO::line	IO/reader/OBJReader.cc	/^  std::string line;$/;"	l
OpenMesh::IO::line	IO/reader/OFFReader.cc	/^      std::string line;$/;"	l
OpenMesh::IO::line	IO/reader/OFFReader.cc	/^    std::string line;$/;"	l
OpenMesh::IO::line	IO/reader/OFFReader.cc	/^  char line[LINE_LEN], *p;$/;"	l
OpenMesh::IO::line	IO/reader/PLYReader.cc	/^    std::string line;$/;"	l
OpenMesh::IO::line	IO/reader/STLReader.cc	/^  std::string line;$/;"	l
OpenMesh::IO::lineData	IO/reader/OBJReader.cc	/^      std::stringstream lineData( faceLine );$/;"	p	file:	signature:( faceLine )
OpenMesh::IO::listEntryType	IO/reader/PLYReader.cc	/^                    _is >> listEntryType;$/;"	l
OpenMesh::IO::listEntryType	IO/reader/PLYReader.cc	/^    std::string listEntryType;$/;"	l
OpenMesh::IO::listIndexType	IO/reader/PLYReader.cc	/^                    _is >> listIndexType;$/;"	l
OpenMesh::IO::listIndexType	IO/reader/PLYReader.cc	/^    std::string listIndexType;$/;"	l
OpenMesh::IO::mat	IO/reader/OBJReader.cc	/^        Material& mat = materials_[matname];$/;"	l
OpenMesh::IO::mat	IO/reader/OBJReader.cc	/^  Material    mat;$/;"	l
OpenMesh::IO::matFile	IO/reader/OBJReader.cc	/^      std::string matFile;$/;"	l
OpenMesh::IO::matFile	IO/writer/OBJWriter.cc	/^    std::string matFile = path_ + objName_ + ".mat";$/;"	l
OpenMesh::IO::matStream	IO/reader/OBJReader.cc	/^      std::fstream matStream( matFile.c_str(), std::ios_base::in );$/;"	p	file:	signature:( matFile.c_str(), std::ios_base::in )
OpenMesh::IO::matStream	IO/writer/OBJWriter.cc	/^    std::fstream matStream(matFile.c_str(), std::ios_base::out );$/;"	p	file:	signature:(matFile.c_str(), std::ios_base::out )
OpenMesh::IO::material	IO/writer/OBJWriter.cc	/^      int material = -1;$/;"	l
OpenMesh::IO::matname	IO/reader/OBJReader.cc	/^      stream >> matname;$/;"	l
OpenMesh::IO::matname	IO/reader/OBJReader.cc	/^  std::string               matname;$/;"	l
OpenMesh::IO::n	IO/reader/OFFReader.cc	/^      _in >> n[0]; _in >> n[1]; _in >> n[2];$/;"	l
OpenMesh::IO::n	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         v, n;$/;"	l
OpenMesh::IO::n	IO/reader/PLYReader.cc	/^                _in >> n[0];$/;"	l
OpenMesh::IO::n	IO/reader/PLYReader.cc	/^                _in >> n[1];$/;"	l
OpenMesh::IO::n	IO/reader/PLYReader.cc	/^                _in >> n[2];$/;"	l
OpenMesh::IO::n	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f        v, n;  \/\/ Vertex$/;"	l
OpenMesh::IO::n	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f v, n;$/;"	l
OpenMesh::IO::n	IO/reader/STLReader.cc	/^      strstream >> n[0];$/;"	l
OpenMesh::IO::n	IO/reader/STLReader.cc	/^      strstream >> n[1];$/;"	l
OpenMesh::IO::n	IO/reader/STLReader.cc	/^      strstream >> n[2];$/;"	l
OpenMesh::IO::n	IO/reader/STLReader.cc	/^  OpenMesh::Vec3f            n;$/;"	l
OpenMesh::IO::n	IO/writer/OBJWriter.cc	/^  Vec3f v, n;$/;"	l
OpenMesh::IO::n	IO/writer/OFFWriter.cc	/^      _out << " " << n[0] << " " << n[1] << " " << n[2];$/;"	l
OpenMesh::IO::n	IO/writer/OFFWriter.cc	/^  Vec3f v, n;$/;"	l
OpenMesh::IO::n	IO/writer/OMWriter.cc	/^      Vec3f n = _be.normal(FaceHandle(0));$/;"	l
OpenMesh::IO::n	IO/writer/OMWriter.cc	/^    Vec3f n = _be.normal(VertexHandle(0));$/;"	l
OpenMesh::IO::n	IO/writer/PLYWriter.cc	/^      _out << " " << n[0] << " " << n[1] << " " << n[2];$/;"	l
OpenMesh::IO::n	IO/writer/PLYWriter.cc	/^  Vec3f v, n;$/;"	l
OpenMesh::IO::n	IO/writer/STLWriter.cc	/^      _out << "facet normal " << n[0] << " " << n[1] << " " << n[2] << "\\nouter loop\\n";$/;"	l
OpenMesh::IO::n	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
OpenMesh::IO::nF	IO/reader/OFFReader.cc	/^  _in >> nF;$/;"	l
OpenMesh::IO::nF	IO/reader/OFFReader.cc	/^  unsigned int            nV, nF, dummy;$/;"	l
OpenMesh::IO::nF	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
OpenMesh::IO::nF	IO/writer/OFFWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::nF	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::nF	IO/writer/OMWriter.cc	/^  unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::nF	IO/writer/PLYWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::nF	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::nF	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces()), nV;$/;"	p	file:	signature:(_be.n_faces())
OpenMesh::IO::nF	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces());$/;"	p	file:	signature:(_be.n_faces())
OpenMesh::IO::nT	IO/reader/STLReader.cc	/^  size_t nT = read_int(in, swapFlag);$/;"	l
OpenMesh::IO::nT	IO/reader/STLReader.cc	/^  unsigned int               i, nT;$/;"	l
OpenMesh::IO::nV	IO/reader/OFFReader.cc	/^    _in >> nV;$/;"	l
OpenMesh::IO::nV	IO/reader/OFFReader.cc	/^  _in >> nV;$/;"	l
OpenMesh::IO::nV	IO/reader/OFFReader.cc	/^  unsigned int            nV, nF, dummy;$/;"	l
OpenMesh::IO::nV	IO/reader/OMReader.cc	/^      size_t nV = 0;$/;"	l
OpenMesh::IO::nV	IO/reader/PLYReader.cc	/^        _in >> nV;$/;"	l
OpenMesh::IO::nV	IO/reader/PLYReader.cc	/^    unsigned int nV;$/;"	l
OpenMesh::IO::nV	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
OpenMesh::IO::nV	IO/writer/OFFWriter.cc	/^      _out << nV << " ";$/;"	l
OpenMesh::IO::nV	IO/writer/OFFWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::nV	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::nV	IO/writer/OMWriter.cc	/^  unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::nV	IO/writer/PLYWriter.cc	/^      _out << nV << " ";$/;"	l
OpenMesh::IO::nV	IO/writer/PLYWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
OpenMesh::IO::nV	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
OpenMesh::IO::nV	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces()), nV;$/;"	l
OpenMesh::IO::n_bytes	IO/reader/OMReader.cc	/^    size_t n_bytes = _bp->size_of(_n_elem);$/;"	l
OpenMesh::IO::n_faces	IO/reader/OBJReader.cc	/^      size_t n_faces = _bi.n_faces();$/;"	l
OpenMesh::IO::n_faces	IO/writer/OFFWriter.cc	/^  _out << _be.n_faces() << " ";$/;"	p	file:	signature:()
OpenMesh::IO::n_vertices	IO/writer/OBJWriter.cc	/^  _out << "# " << _be.n_vertices() << " vertices, ";$/;"	p	file:	signature:()
OpenMesh::IO::n_vertices	IO/writer/OFFWriter.cc	/^  _out << _be.n_vertices() << " ";$/;"	p	file:	signature:()
OpenMesh::IO::name	IO/reader/OMReader.cc	/^      omerr() << "Warning! Property " << _bp->name() << " not loaded: " << "Mismatching data sizes!n";$/;"	p	file:	signature:()
OpenMesh::IO::newfaces	IO/reader/OBJReader.cc	/^        std::vector<FaceHandle> newfaces;$/;"	l
OpenMesh::IO::normals	IO/reader/OBJReader.cc	/^  std::vector<Vec3f>        normals;$/;"	l
OpenMesh::IO::ofs	IO/writer/OMWriter.cc	/^  std::ofstream ofs(_filename.c_str(), std::ios::binary);$/;"	p	file:	signature:(_filename.c_str(), std::ios::binary)
OpenMesh::IO::ok	IO/IOManager.cc	/^      bool ok = (*it)->read(_filename, _bi, _opt);$/;"	l
OpenMesh::IO::ok	IO/IOManager.cc	/^      bool ok = (*it)->read(_is, _bi, _opt);$/;"	l
OpenMesh::IO::omlog	IO/writer/OMWriter.cc	/^    Enabler<mostream> enabler(omlog());$/;"	p	file:	signature:()
OpenMesh::IO::onlyVertices	IO/writer/OBJWriter.cc	/^  bool onlyVertices =    !_opt.check(Options::VertexTexCoord)$/;"	l
OpenMesh::IO::opt	IO/MeshIO.hh	/^  Options opt;$/;"	l
OpenMesh::IO::out	IO/writer/OBJWriter.cc	/^  std::fstream out(_filename.c_str(), std::ios_base::out );$/;"	p	file:	signature:(_filename.c_str(), std::ios_base::out )
OpenMesh::IO::out	IO/writer/PLYWriter.cc	/^  std::fstream out(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out$/;"	p	file:	signature:(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out : std::ios_base::out) )
OpenMesh::IO::out	IO/writer/STLWriter.cc	/^  FILE* out = fopen(_filename.c_str(), "w");$/;"	l
OpenMesh::IO::out	IO/writer/STLWriter.cc	/^  FILE* out = fopen(_filename.c_str(), "wb");$/;"	l
OpenMesh::IO::out	IO/writer/STLWriter.cc	/^  std::fstream out(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out$/;"	p	file:	signature:(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out : std::ios_base::out) )
OpenMesh::IO::p	IO/reader/OFFReader.cc	/^  char line[LINE_LEN], *p;$/;"	l
OpenMesh::IO::pn	IO/reader/OMReader.cc	/^      OMFormat::Chunk::PropertyName pn;$/;"	l
OpenMesh::IO::pos	IO/reader/BaseReader.cc	/^  std::string::size_type pos(_filename.rfind("."));$/;"	p	file:	signature:(_filename.rfind(Ó))
OpenMesh::IO::pos	IO/reader/BaseReader.cc	/^  std::string::size_type pos(_fname.rfind("."));$/;"	p	file:	signature:(_fname.rfind(Ó))
OpenMesh::IO::pos	IO/writer/BaseWriter.cc	/^  std::string::size_type pos(_filename.rfind("."));$/;"	p	file:	signature:(_filename.rfind(Ó))
OpenMesh::IO::precision	IO/writer/OBJWriter.cc	/^  _out.precision(_precision);$/;"	p	file:	signature:(_precision)
OpenMesh::IO::precision	IO/writer/OBJWriter.cc	/^  out.precision(_precision);$/;"	p	file:	signature:(_precision)
OpenMesh::IO::precision	IO/writer/OFFWriter.cc	/^    _os.precision(_precision);$/;"	p	file:	signature:(_precision)
OpenMesh::IO::precision	IO/writer/OFFWriter.cc	/^    out.precision(_precision);$/;"	p	file:	signature:(_precision)
OpenMesh::IO::precision	IO/writer/PLYWriter.cc	/^    _os.precision(_precision);$/;"	p	file:	signature:(_precision)
OpenMesh::IO::precision	IO/writer/PLYWriter.cc	/^    out.precision(_precision);$/;"	p	file:	signature:(_precision)
OpenMesh::IO::precision	IO/writer/STLWriter.cc	/^  _out.precision(_precision);$/;"	p	file:	signature:(_precision)
OpenMesh::IO::prepare	IO/IOManager.cc	/^      _bi.prepare();$/;"	p	file:	signature:()
OpenMesh::IO::prop	IO/writer/OMWriter.cc	/^  BaseKernel::const_prop_iterator prop;$/;"	l
OpenMesh::IO::propertyName	IO/reader/PLYReader.cc	/^                    _is >> propertyName;$/;"	l
OpenMesh::IO::propertyName	IO/reader/PLYReader.cc	/^    std::string propertyName;$/;"	l
OpenMesh::IO::push_back	IO/reader/OBJReader.cc	/^                    face_texcoords.push_back( texcoords[value-1] );$/;"	p	file:	signature:( texcoords[value-1] )
OpenMesh::IO::push_back	IO/reader/OBJReader.cc	/^            colors.push_back(OpenMesh::Vec3uc((unsigned char)r,(unsigned char)g,(unsigned char)b));$/;"	p	file:	signature:(unsigned char)r,(unsigned char)g,(unsigned char)b
OpenMesh::IO::push_back	IO/reader/OBJReader.cc	/^          colors.push_back(OpenMesh::Vec3uc((unsigned char)r,(unsigned char)g,(unsigned char)b));$/;"	p	file:	signature:(unsigned char)r,(unsigned char)g,(unsigned char)b
OpenMesh::IO::push_back	IO/reader/OBJReader.cc	/^        vertexHandles.push_back(_bi.add_vertex(OpenMesh::Vec3f(x,y,z)));$/;"	p	file:	signature:(_bi.add_vertex(OpenMesh::Vec3f(x,y,z)))
OpenMesh::IO::push_back	IO/reader/STLReader.cc	/^          vhandles.push_back(handle);$/;"	p	file:	signature:(handle)
OpenMesh::IO::push_back	IO/reader/STLReader.cc	/^        vhandles.push_back(handle);$/;"	p	file:	signature:(handle)
OpenMesh::IO::r	IO/reader/OBJReader.cc	/^        stream >> r; stream >> g; stream >> b;$/;"	l
OpenMesh::IO::r	IO/reader/OBJReader.cc	/^      stream >> r; stream >> g; stream >> b;$/;"	l
OpenMesh::IO::r	IO/reader/OBJReader.cc	/^  int                       r, g, b;$/;"	l
OpenMesh::IO::rc	IO/writer/OMWriter.cc	/^  bool rc = write(ofs, _be, _opt);$/;"	l
OpenMesh::IO::read	IO/OMFormat.hh	/^      _is.read( buf, size ); \/\/ size bytes$/;"	p	signature:( buf, size )
OpenMesh::IO::read	IO/reader/STLReader.cc	/^    _in.read(dummy, 12);$/;"	p	file:	signature:(dummy, 12)
OpenMesh::IO::read	IO/reader/STLReader.cc	/^    _in.read(dummy, 2);$/;"	p	file:	signature:(dummy, 2)
OpenMesh::IO::read	IO/reader/STLReader.cc	/^  _in.read(dummy, 80);$/;"	p	file:	signature:(dummy, 80)
OpenMesh::IO::read_double	IO/BinaryHelper.cc	/^double read_double(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
OpenMesh::IO::read_double	IO/BinaryHelper.cc	/^double read_double(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
OpenMesh::IO::read_double	IO/BinaryHelper.hh	/^double read_double(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
OpenMesh::IO::read_double	IO/BinaryHelper.hh	/^double read_double(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
OpenMesh::IO::read_float	IO/BinaryHelper.cc	/^float read_float(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
OpenMesh::IO::read_float	IO/BinaryHelper.cc	/^float read_float(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
OpenMesh::IO::read_float	IO/BinaryHelper.hh	/^float read_float(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
OpenMesh::IO::read_float	IO/BinaryHelper.hh	/^float read_float(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
OpenMesh::IO::read_int	IO/BinaryHelper.cc	/^int read_int(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
OpenMesh::IO::read_int	IO/BinaryHelper.cc	/^int read_int(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
OpenMesh::IO::read_int	IO/BinaryHelper.hh	/^int read_int(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
OpenMesh::IO::read_int	IO/BinaryHelper.hh	/^int read_int(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
OpenMesh::IO::read_mesh	IO/MeshIO.hh	/^read_mesh(Mesh&         _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(Mesh& _mesh, const std::string& _filename)
OpenMesh::IO::read_mesh	IO/MeshIO.hh	/^read_mesh(Mesh&         _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(Mesh& _mesh, const std::string& _filename, Options& _opt, bool _clear = true)
OpenMesh::IO::read_mesh	IO/MeshIO.hh	/^read_mesh(Mesh&         _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(Mesh& _mesh, std::istream& _is, const std::string& _ext, Options& _opt, bool _clear = true)
OpenMesh::IO::read_short	IO/BinaryHelper.cc	/^short int read_short(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
OpenMesh::IO::read_short	IO/BinaryHelper.cc	/^short int read_short(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
OpenMesh::IO::read_short	IO/BinaryHelper.hh	/^short int read_short(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
OpenMesh::IO::read_short	IO/BinaryHelper.hh	/^short int read_short(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
OpenMesh::IO::remainingChars	IO/reader/OFFReader.cc	/^  size_t remainingChars = _is.gcount();$/;"	l
OpenMesh::IO::reserve	IO/reader/OFFReader.cc	/^  _bi.reserve(nV, 3*nV, nF);$/;"	p	file:	signature:(nV, 3*nV, nF)
OpenMesh::IO::reserve	IO/reader/PLYReader.cc	/^    _bi.reserve(vertexCount_, 3* vertexCount_ , faceCount_);$/;"	p	file:	signature:(vertexCount_, 3* vertexCount_ , faceCount_)
OpenMesh::IO::resize	IO/OMFormat.hh	/^      _pn.resize(size);$/;"	p	signature:(size)
OpenMesh::IO::restore	IO/OMFormat.hh	/^  restore( std::istream& _is, OMFormat::Chunk::Header& _hdr, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, OMFormat::Chunk::Header& _hdr, bool _swap )
OpenMesh::IO::restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<1>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<1>, bool _swap )
OpenMesh::IO::restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<2>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<2>, bool _swap )
OpenMesh::IO::restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<3>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<3>, bool _swap )
OpenMesh::IO::restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<4>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<4>, bool _swap )
OpenMesh::IO::restore	IO/OMFormat.hh	/^  restore( std::istream& _is,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap)
OpenMesh::IO::restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is, OMFormat::Chunk::PropertyName& _pn,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, OMFormat::Chunk::PropertyName& _pn, bool _swap )
OpenMesh::IO::restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is, OMFormat::Header& _hdr, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, OMFormat::Header& _hdr, bool _swap )
OpenMesh::IO::restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is,$/;"	p	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
OpenMesh::IO::restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is,$/;"	p	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
OpenMesh::IO::restore	IO/OMFormatT.cc	/^  restore( std::istream& _is, $/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
OpenMesh::IO::restore	IO/OMFormatT.cc	/^  restore( std::istream& _is, $/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
OpenMesh::IO::restore	IO/StoreRestore.hh	/^size_t restore( std::istream& _is, T& _v, bool _swap=false)$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _v, bool _swap=false)
OpenMesh::IO::result	IO/reader/OBJReader.cc	/^  bool result = read(in, _bi, _opt);$/;"	l
OpenMesh::IO::result	IO/reader/OFFReader.cc	/^  bool result = read(ifile, _bi, _opt);$/;"	l
OpenMesh::IO::result	IO/reader/OMReader.cc	/^  bool result = read(ifs, _bi, _opt);$/;"	l
OpenMesh::IO::result	IO/reader/OMReader.cc	/^  bool result = read_binary(_is, _bi, _opt);$/;"	l
OpenMesh::IO::result	IO/reader/PLYReader.cc	/^    bool result = read(in, _bi, _opt);$/;"	l
OpenMesh::IO::result	IO/reader/STLReader.cc	/^  bool result = false;$/;"	l
OpenMesh::IO::result	IO/writer/OBJWriter.cc	/^  bool result = write(out, _be, _opt);$/;"	l
OpenMesh::IO::result	IO/writer/OFFWriter.cc	/^  bool result = (_opt.check(Options::Binary) ?$/;"	l
OpenMesh::IO::result	IO/writer/PLYWriter.cc	/^  bool result = (_opt.check(Options::Binary) ?$/;"	l
OpenMesh::IO::result	IO/writer/STLWriter.cc	/^  bool result = write(out, _be, _opt, _precision);$/;"	l
OpenMesh::IO::reverse_byte_order	IO/SR_rbo.hh	/^T reverse_byte_order(const T& a)$/;"	f	namespace:OpenMesh::IO	signature:(const T& a)
OpenMesh::IO::reverse_byte_order	IO/SR_rbo.hh	/^template <> inline bool&  reverse_byte_order(bool & _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(bool & _t)
OpenMesh::IO::reverse_byte_order	IO/SR_rbo.hh	/^template <> inline char&  reverse_byte_order(char & _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(char & _t)
OpenMesh::IO::reverse_byte_order	IO/SR_rbo.hh	/^template <> inline signed char&  reverse_byte_order(signed char & _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(signed char & _t)
OpenMesh::IO::reverse_byte_order	IO/SR_rbo.hh	/^template <> inline uchar& reverse_byte_order(uchar& _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(uchar& _t)
OpenMesh::IO::reverse_byte_order	IO/SR_rbo.hh	/^template <typename T> T& reverse_byte_order(  T& _t )$/;"	f	namespace:OpenMesh::IO	signature:( T& _t )
OpenMesh::IO::reverse_byte_order	IO/SR_rbo.hh	/^template <typename T> inline T* reverse_byte_order(T* t);$/;"	p	namespace:OpenMesh::IO	signature:(T* t)
OpenMesh::IO::rgb_t	IO/SR_types.hh	/^typedef uint8_t        rgb_t[3];$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::rgba_t	IO/SR_types.hh	/^typedef uint8_t        rgba_t[4];$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::right_trim	IO/reader/BaseReader.hh	/^static inline std::string &right_trim(std::string &_string) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string &_string)
OpenMesh::IO::s	IO/IOManager.cc	/^    std::string s = " ";$/;"	l
OpenMesh::IO::sc	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	l
OpenMesh::IO::sc	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	l
OpenMesh::IO::scalar_type	IO/OMFormat.hh	/^    typedef typename vector_traits<VecT>::value_type scalar_type;$/;"	t
OpenMesh::IO::set_Ka	IO/reader/OBJReader.cc	/^        mat.set_Ka(f1,f2,f3);$/;"	p	file:	signature:(f1,f2,f3)
OpenMesh::IO::set_Kd	IO/reader/OBJReader.cc	/^        mat.set_Kd(f1,f2,f3);$/;"	p	file:	signature:(f1,f2,f3)
OpenMesh::IO::set_Ks	IO/reader/OBJReader.cc	/^        mat.set_Ks(f1,f2,f3);$/;"	p	file:	signature:(f1,f2,f3)
OpenMesh::IO::set_Tr	IO/reader/OBJReader.cc	/^        mat.set_Tr(f1);$/;"	p	file:	signature:(f1)
OpenMesh::IO::set_color	IO/reader/OBJReader.cc	/^                _bi.set_color(vhandles.back(), colors[value-1]);$/;"	p	file:	signature:(vhandles.back(), colors[value-1])
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, Vec3uc( c3 ) );$/;"	p	file:	signature:( fh, Vec3uc( c3 ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, Vec4uc( c4 ) );$/;"	p	file:	signature:( fh, Vec4uc( c4 ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, c3f );$/;"	p	file:	signature:( fh, c3f )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, c4f );$/;"	p	file:	signature:( fh, c4f )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, Vec3uc( c3 ) );$/;"	p	file:	signature:( vh, Vec3uc( c3 ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, Vec4uc( c4 ) );$/;"	p	file:	signature:( vh, Vec4uc( c4 ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, c3f );$/;"	p	file:	signature:( vh, c3f )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, c4f );$/;"	p	file:	signature:( vh, c4f )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh , Vec4uc( cA ) );$/;"	p	file:	signature:( fh , Vec4uc( cA ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh , cAf );$/;"	p	file:	signature:( fh , cAf )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh, Vec3uc( c ) );$/;"	p	file:	signature:( fh, Vec3uc( c ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh, cf );$/;"	p	file:	signature:( fh, cf )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, Vec3uc( c ) );$/;"	p	file:	signature:( vh, Vec3uc( c ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, Vec4uc( cA ) );$/;"	p	file:	signature:( vh, Vec4uc( cA ) )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, cAf );$/;"	p	file:	signature:( vh, cAf )
OpenMesh::IO::set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, cf );$/;"	p	file:	signature:( vh, cf )
OpenMesh::IO::set_color	IO/reader/PLYReader.cc	/^          _bi.set_color(vh, Vec4uc(c));$/;"	p	file:	signature:(vh, Vec4uc(c))
OpenMesh::IO::set_map_Kd	IO/reader/OBJReader.cc	/^        mat.set_map_Kd( textureName, textureId++ );$/;"	p	file:	signature:( textureName, textureId++ )
OpenMesh::IO::set_normal	IO/reader/OBJReader.cc	/^                _bi.set_normal(vhandles.back(), normals[value-1]);$/;"	p	file:	signature:(vhandles.back(), normals[value-1])
OpenMesh::IO::set_normal	IO/reader/OFFReader.cc	/^        _bi.set_normal(vh, n);$/;"	p	file:	signature:(vh, n)
OpenMesh::IO::set_normal	IO/reader/PLYReader.cc	/^          _bi.set_normal(vh, n);$/;"	p	file:	signature:(vh, n)
OpenMesh::IO::set_texcoord	IO/reader/OBJReader.cc	/^                  _bi.set_texcoord(vhandles.back(), texcoords[value - 1]);$/;"	p	file:	signature:(vhandles.back(), texcoords[value - 1])
OpenMesh::IO::set_texcoord	IO/reader/OFFReader.cc	/^        _bi.set_texcoord(vh, t);$/;"	p	file:	signature:(vh, t)
OpenMesh::IO::set_texcoord	IO/reader/PLYReader.cc	/^          _bi.set_texcoord(vh, t);$/;"	p	file:	signature:(vh, t)
OpenMesh::IO::size	IO/OMFormat.hh	/^    size_t size;$/;"	l
OpenMesh::IO::size	IO/reader/OBJReader.cc	/^      omlog() << "  " << materials_.size() << " materials loaded.\\n";$/;"	p	file:	signature:()
OpenMesh::IO::size_of	IO/StoreRestore.hh	/^size_t size_of( const T& _v ) $/;"	f	namespace:OpenMesh::IO	signature:( const T& _v )
OpenMesh::IO::size_of	IO/StoreRestore.hh	/^size_t size_of(void) $/;"	f	namespace:OpenMesh::IO	signature:(void)
OpenMesh::IO::size_of	IO/reader/OMReader.cc	/^      size_t size_of = OMFormat::chunk_data_size(header_, chunk_header_);$/;"	l
OpenMesh::IO::size_of	IO/reader/OMReader.cc	/^      size_t size_of = header_.n_vertices_ * OMFormat::vector_size(chunk_header_);$/;"	l
OpenMesh::IO::start	IO/reader/OBJReader.cc	/^  size_t start = _string.find_first_not_of(" \\t\\r\\n");$/;"	l
OpenMesh::IO::start	IO/reader/STLReader.cc	/^  size_t start = _string.find_first_not_of(" \\t\\r\\n");$/;"	l
OpenMesh::IO::static_cast	IO/reader/OMReader.cc	/^    evt.push_back(static_cast<char>(_is.get()));$/;"	p	file:	signature:(_is.get())
OpenMesh::IO::std::endl	IO/SR_rbo.hh	/^  omerr() << "Not defined for type " << typeid(T).name() << std::endl;$/;"	m	class:OpenMesh::IO::std
OpenMesh::IO::std::endl	IO/reader/OBJReader.cc	/^                    omerr() << "Error setting Texture coordinates" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OBJReader.cc	/^                  omerr() << "Error setting Texture coordinates" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OBJReader.cc	/^              << "allowed!" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OBJReader.cc	/^          << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OBJReader.cc	/^      omlog() << "Load material file " << matFile << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OFFReader.cc	/^	  << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OFFReader.cc	/^       << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OMReader.cc	/^    omerr() << "[OMReader] : cannot not open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/OMReader.cc	/^    omerr() << "[OMReader] : cannot read from stream " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^                        omerr() << "Unsupported Entry type for face list: " << listEntryType << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^                        omerr() << "Unsupported Index type for face list: " << listIndexType << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^                        std::cerr << "Unsupported property : " << propertyName << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^                    omerr() << "List type not supported for vertices!" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^                    omerr() << "Properties not supported for faces " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^                omerr() << "PLY header unsupported element type: " << elementName << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^            omerr() << "Error while reading PLY file header" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^            omlog() << "PLY header comment : " << line << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^            omlog() << "Unsupported keyword : " << keyword << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^            std::cerr << "unsupported conversion type to int: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^            std::cerr << "unsupported conversion type to unsigned int: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^        omerr() << "Defect PLY header detected" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^        omerr() << "Unsupported PLY format: " << fileType << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^        omerr() << "[PLYReader] : Only vertex dimension 3 is supported." << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^        omerr() << "[PLYReader] : cannot not open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^        omerr() << "[PLYReader] : cannot not use stream" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^        std::cerr << "unsupported conversion type to double: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/PLYReader.cc	/^        std::cerr << "unsupported conversion type to float: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/reader/STLReader.cc	/^	  << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^	  << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^        _out << "usemtl mat" << material << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "Ka 0.5000 0.5000 0.5000" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "Kd " << materialA_[i][0] << materialA_[i][1] << materialA_[i][2] << std::endl;;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "Kd " << material_[i][0] << material_[i][1] << material_[i][2] << std::endl;;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "Tr " << materialA_[i][3] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "illum 1" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "newmtl " << "mat" << i << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "vn " << n[0] <<" "<< n[1] <<" "<< n[2] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      _out << "vt " << t[0] <<" "<< t[1] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^      omerr() << "[OBJWriter] : cannot write material file " << matFile << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^    _out << "mtllib " << objName_ << ".mat" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^    _out << "v " << v[0] <<" "<< v[1] <<" "<< v[2] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^    _out << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OBJWriter.cc	/^  _out << _be.n_faces() << " faces" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OFFWriter.cc	/^	  << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OMWriter.cc	/^	<< _bp.name() << "]" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OMWriter.cc	/^    omerr() << "[OMWriter] : cannot open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OMWriter.cc	/^    omlog() << "  b       = " << b << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OMWriter.cc	/^  omlog() << "  n_bytes = " << _bp.size_of() << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/OMWriter.cc	/^ std::clog << "#bytes written: " << bytes << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^        _out << "property float alpha" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^        _out << "property uchar alpha" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^      _out << "property float blue" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^      _out << "property float green" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^      _out << "property float red" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^      _out << "property uchar blue" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^      _out << "property uchar green" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^      _out << "property uchar red" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^      std::cerr << "unsupported conversion type to float: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    _out << "1.0" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    _out << "format ascii 1.0" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    _out << "property float nx" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    _out << "property float ny" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    _out << "property float nz" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    _out << "property float u" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    _out << "property float v" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    omerr() << "[PLYWriter] : Warning: Face colors are not supported and thus not exported! " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^    omerr() << "[PLYWriter] : Warning: Face normals are not supported and thus not exported! " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "element face " << _be.n_faces() << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "element vertex " << _be.n_vertices() << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "end_header" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "ply" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "property float x" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "property float y" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "property float z" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/PLYWriter.cc	/^  _out << "property list uchar int vertex_indices" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::endl	IO/writer/STLWriter.cc	/^    omerr() << "[STLWriter] : cannot open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::fixed	IO/writer/OFFWriter.cc	/^    _out << std::fixed;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::fixed	IO/writer/PLYWriter.cc	/^    _out << std::fixed;$/;"	m	class:OpenMesh::IO::std	file:
OpenMesh::IO::std::getline	IO/reader/OBJReader.cc	/^      std::getline(stream,faceLine);$/;"	p	class:OpenMesh::IO::std	file:	signature:(stream,faceLine)
OpenMesh::IO::std::getline	IO/reader/OBJReader.cc	/^      std::getline(stream,matFile);$/;"	p	class:OpenMesh::IO::std	file:	signature:(stream,matFile)
OpenMesh::IO::std::getline	IO/reader/OBJReader.cc	/^      std::getline(stream,textureName);$/;"	p	class:OpenMesh::IO::std	file:	signature:(stream,textureName)
OpenMesh::IO::std::getline	IO/reader/OBJReader.cc	/^    std::getline(_in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,line)
OpenMesh::IO::std::getline	IO/reader/OFFReader.cc	/^      std::getline(_in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,line)
OpenMesh::IO::std::getline	IO/reader/OFFReader.cc	/^    std::getline(_in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,line)
OpenMesh::IO::std::getline	IO/reader/OFFReader.cc	/^  std::getline(_in,header);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,header)
OpenMesh::IO::std::getline	IO/reader/PLYReader.cc	/^            std::getline(_is, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_is, line)
OpenMesh::IO::std::getline	IO/reader/PLYReader.cc	/^    std::getline(_is, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_is, line)
OpenMesh::IO::std::getline	IO/reader/STLReader.cc	/^        std::getline(_in, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in, line)
OpenMesh::IO::std::getline	IO/reader/STLReader.cc	/^        std::getline(in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(in,line)
OpenMesh::IO::std::getline	IO/reader/STLReader.cc	/^    std::getline(_in, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in, line)
OpenMesh::IO::std::getline	IO/reader/STLReader.cc	/^    std::getline(in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(in,line)
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[0], dc.c[7]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[0], dc.c[7])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[1], dc.c[6]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[1], dc.c[6])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[2], dc.c[5]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[2], dc.c[5])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[3], dc.c[4]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[3], dc.c[4])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(fc.c[0], fc.c[3]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(fc.c[0], fc.c[3])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(fc.c[1], fc.c[2]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(fc.c[1], fc.c[2])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(ic.c[0], ic.c[3]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(ic.c[0], ic.c[3])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^    std::swap(ic.c[1], ic.c[2]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(ic.c[1], ic.c[2])
OpenMesh::IO::std::swap	IO/BinaryHelper.cc	/^  if (_swap) std::swap(sc.c[0], sc.c[1]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(sc.c[0], sc.c[1])
OpenMesh::IO::std::transform	IO/reader/BaseReader.cc	/^    std::transform( ext.begin(), ext.end(), ext.begin(), tolower );$/;"	p	class:OpenMesh::IO::std	file:	signature:( ext.begin(), ext.end(), ext.begin(), tolower )
OpenMesh::IO::std::transform	IO/reader/BaseReader.cc	/^    std::transform( extension.begin(), extension.end(), $/;"	p	class:OpenMesh::IO::std	file:	signature:( extension.begin(), extension.end(), extension.begin(), tolower )
OpenMesh::IO::std::transform	IO/reader/BaseReader.cc	/^  std::transform( _ext.begin(), _ext.end(),  cmpExt.begin(), tolower );$/;"	p	class:OpenMesh::IO::std	file:	signature:( _ext.begin(), _ext.end(), cmpExt.begin(), tolower )
OpenMesh::IO::std::transform	IO/writer/BaseWriter.cc	/^    std::transform( extension.begin(), extension.end(), $/;"	p	class:OpenMesh::IO::std	file:	signature:( extension.begin(), extension.end(), extension.begin(), tolower )
OpenMesh::IO::store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const OMFormat::Chunk::PropertyName& _pn,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const OMFormat::Chunk::PropertyName& _pn, bool _swap )
OpenMesh::IO::store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const OMFormat::Header& _hdr, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const OMFormat::Header& _hdr, bool _swap)
OpenMesh::IO::store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<1>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<1>, bool _swap )
OpenMesh::IO::store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<2>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<2>, bool _swap )
OpenMesh::IO::store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<3>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<3>, bool _swap )
OpenMesh::IO::store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<4>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<4>, bool _swap )
OpenMesh::IO::store	IO/OMFormat.hh	/^  store( std::ostream& _os, const OMFormat::Chunk::Header& _hdr, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const OMFormat::Chunk::Header& _hdr, bool _swap)
OpenMesh::IO::store	IO/OMFormat.hh	/^  store( std::ostream& _os,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap)
OpenMesh::IO::store	IO/OMFormat.hh	/^  store( std::ostream& _os,$/;"	p	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
OpenMesh::IO::store	IO/OMFormat.hh	/^  store( std::ostream& _os,$/;"	p	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
OpenMesh::IO::store	IO/OMFormatT.cc	/^  store( std::ostream& _os, $/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
OpenMesh::IO::store	IO/OMFormatT.cc	/^  store( std::ostream& _os, $/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
OpenMesh::IO::store	IO/StoreRestore.hh	/^size_t store( std::ostream& _os, const T& _v, bool _swap=false)$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _v, bool _swap=false)
OpenMesh::IO::stream	IO/reader/OBJReader.cc	/^    std::stringstream stream(line);$/;"	p	file:	signature:(line)
OpenMesh::IO::stream	IO/reader/OFFReader.cc	/^      std::stringstream stream( line );$/;"	p	file:	signature:( line )
OpenMesh::IO::stream	IO/reader/OFFReader.cc	/^    std::stringstream stream( line );$/;"	p	file:	signature:( line )
OpenMesh::IO::streamPos	IO/reader/PLYReader.cc	/^    size_t streamPos = _is.tellg();$/;"	l
OpenMesh::IO::strstream	IO/reader/STLReader.cc	/^        std::stringstream strstream(line);$/;"	p	file:	signature:(line)
OpenMesh::IO::strstream	IO/reader/STLReader.cc	/^      std::stringstream strstream(line);$/;"	p	file:	signature:(line)
OpenMesh::IO::swap	IO/reader/OFFReader.cc	/^   bool swap = _opt.check( Options::Swap );$/;"	l
OpenMesh::IO::swap	IO/reader/OMReader.cc	/^  bool swap = _opt.check(Options::Swap) || (Endian::local() == Endian::MSB);$/;"	l
OpenMesh::IO::swap	IO/reader/PLYReader.cc	/^    bool swap = _opt.check(Options::Swap);$/;"	l
OpenMesh::IO::swap	IO/writer/OMWriter.cc	/^  bool swap = _opt.check(Options::Swap) || (Endian::local() == Endian::MSB);$/;"	l
OpenMesh::IO::swapFlag	IO/reader/STLReader.cc	/^  bool                       swapFlag;$/;"	l
OpenMesh::IO::swapFlag	IO/reader/STLReader.cc	/^  bool swapFlag = (endian_test.c[3] == 1);$/;"	l
OpenMesh::IO::t	IO/reader/OFFReader.cc	/^      stream >> t[0]; stream >> t[1];$/;"	l
OpenMesh::IO::t	IO/reader/OFFReader.cc	/^  OpenMesh::Vec2f         t;$/;"	l
OpenMesh::IO::t	IO/reader/PLYReader.cc	/^                _in >> t[0];$/;"	l
OpenMesh::IO::t	IO/reader/PLYReader.cc	/^                _in >> t[1];$/;"	l
OpenMesh::IO::t	IO/reader/PLYReader.cc	/^    OpenMesh::Vec2f        t;  \/\/ TexCoords$/;"	l
OpenMesh::IO::t	IO/reader/PLYReader.cc	/^    OpenMesh::Vec2f t;$/;"	l
OpenMesh::IO::t	IO/writer/OBJWriter.cc	/^  Vec2f t;$/;"	l
OpenMesh::IO::t	IO/writer/OFFWriter.cc	/^      _out << " " << t[0] << " " << t[1];$/;"	l
OpenMesh::IO::t	IO/writer/OFFWriter.cc	/^  Vec2f t;$/;"	l
OpenMesh::IO::t	IO/writer/OMWriter.cc	/^  Vec2f t;$/;"	l
OpenMesh::IO::t	IO/writer/PLYWriter.cc	/^    	_out << " " << t[0] << " " << t[1];$/;"	l
OpenMesh::IO::t	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec2f t;$/;"	l
OpenMesh::IO::t	IO/writer/PLYWriter.cc	/^  Vec2f t;$/;"	l
OpenMesh::IO::t_signed	IO/OMFormat.hh	/^  typedef GenProg::True  t_signed;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::t_unsigned	IO/OMFormat.hh	/^  typedef GenProg::False t_unsigned;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::texcoords	IO/reader/OBJReader.cc	/^  std::vector<Vec2f>        texcoords;$/;"	l
OpenMesh::IO::textureId	IO/reader/OBJReader.cc	/^  int         textureId = 1;$/;"	l
OpenMesh::IO::textureName	IO/reader/OBJReader.cc	/^  std::string textureName;$/;"	l
OpenMesh::IO::tmp	IO/IOManager.cc	/^    std::string tmp = " ";$/;"	l
OpenMesh::IO::tmp	IO/reader/OBJReader.cc	/^            std::stringstream tmp( vertex );$/;"	p	file:	signature:( vertex )
OpenMesh::IO::tmp	IO/reader/OBJReader.cc	/^            std::stringstream tmp( vertex.substr(0,found) );$/;"	p	file:	signature:( vertex.substr(0,found) )
OpenMesh::IO::tmp	IO/reader/OFFReader.cc	/^  float32_t tmp;$/;"	l
OpenMesh::IO::tmp	IO/reader/OFFReader.cc	/^  uint32_t tmp;$/;"	l
OpenMesh::IO::tmp	IO/reader/PLYReader.cc	/^                    _in >> tmp;$/;"	l
OpenMesh::IO::tmp	IO/reader/PLYReader.cc	/^            float64_t tmp;$/;"	l
OpenMesh::IO::tmp	IO/reader/PLYReader.cc	/^        float32_t tmp;$/;"	l
OpenMesh::IO::tmp	IO/reader/PLYReader.cc	/^    float                  tmp;$/;"	l
OpenMesh::IO::tmp	IO/reader/PLYReader.cc	/^    float tmp;$/;"	l
OpenMesh::IO::tmp	IO/writer/OFFWriter.cc	/^  float32_t tmp = value;$/;"	l
OpenMesh::IO::tmp	IO/writer/OFFWriter.cc	/^  uint32_t tmp = value;$/;"	l
OpenMesh::IO::tmp	IO/writer/PLYWriter.cc	/^  float32_t tmp;$/;"	l
OpenMesh::IO::tmp1	IO/reader/PLYReader.cc	/^            _is >> tmp1;$/;"	l
OpenMesh::IO::tmp1	IO/reader/PLYReader.cc	/^            std::string tmp1;$/;"	l
OpenMesh::IO::tmp2	IO/reader/PLYReader.cc	/^                _is >> tmp2;$/;"	l
OpenMesh::IO::tmp2	IO/reader/PLYReader.cc	/^            std::string tmp2;$/;"	l
OpenMesh::IO::tmp32	IO/writer/PLYWriter.cc	/^  uint32_t tmp32;$/;"	l
OpenMesh::IO::tmp8	IO/writer/PLYWriter.cc	/^  uint8_t tmp8;$/;"	l
OpenMesh::IO::tmp_char	IO/reader/PLYReader.cc	/^    int8_t tmp_char;$/;"	l
OpenMesh::IO::tmp_int16_t	IO/reader/PLYReader.cc	/^    int16_t tmp_int16_t;$/;"	l
OpenMesh::IO::tmp_int32_t	IO/reader/PLYReader.cc	/^    int32_t tmp_int32_t;$/;"	l
OpenMesh::IO::tmp_uchar	IO/reader/PLYReader.cc	/^    uint8_t tmp_uchar;$/;"	l
OpenMesh::IO::tmp_uint16_t	IO/reader/PLYReader.cc	/^    uint16_t tmp_uint16_t;$/;"	l
OpenMesh::IO::tmp_uint32_t	IO/reader/PLYReader.cc	/^    uint32_t tmp_uint32_t;$/;"	l
OpenMesh::IO::tolower	IO/reader/BaseReader.cc	/^static inline char tolower(char c) $/;"	f	namespace:OpenMesh::IO	signature:(char c)
OpenMesh::IO::tolower	IO/writer/BaseWriter.cc	/^static inline char tolower(char c)$/;"	f	namespace:OpenMesh::IO	signature:(char c)
OpenMesh::IO::trash	IO/reader/OFFReader.cc	/^        case 1 : stream >> trash; break; \/\/one int (isn't handled atm)$/;"	l
OpenMesh::IO::trash	IO/reader/OFFReader.cc	/^        case 2 : stream >> trash; stream >> trash; break; \/\/corrupt format (ignore)$/;"	l
OpenMesh::IO::trash	IO/reader/OFFReader.cc	/^      std::string trash;$/;"	l
OpenMesh::IO::trash	IO/reader/PLYReader.cc	/^                _in >> trash;$/;"	l
OpenMesh::IO::trash	IO/reader/PLYReader.cc	/^    std::string trash;$/;"	l
OpenMesh::IO::trim	IO/reader/BaseReader.hh	/^static inline std::string &trim(std::string &_string) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string &_string)
OpenMesh::IO::trimStdString	IO/reader/STLReader.cc	/^void trimStdString( std::string& _string) {$/;"	f	namespace:OpenMesh::IO	signature:( std::string& _string)
OpenMesh::IO::trimString	IO/reader/OBJReader.cc	/^void trimString( std::string& _string) {$/;"	f	namespace:OpenMesh::IO	signature:( std::string& _string)
OpenMesh::IO::u	IO/reader/OBJReader.cc	/^      stream >> u; stream >> v;$/;"	l
OpenMesh::IO::u	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
OpenMesh::IO::u1	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	u	file:
OpenMesh::IO::u1	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	u	file:
OpenMesh::IO::u1::c	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
OpenMesh::IO::u1::c	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
OpenMesh::IO::u1::s	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
OpenMesh::IO::u1::s	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
OpenMesh::IO::u2	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	u	file:
OpenMesh::IO::u2::c	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	m	union:OpenMesh::IO::u2	file:	access:public
OpenMesh::IO::u2::i	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	m	union:OpenMesh::IO::u2	file:	access:public
OpenMesh::IO::u3	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	u	file:
OpenMesh::IO::u3::c	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	m	union:OpenMesh::IO::u3	file:	access:public
OpenMesh::IO::u3::f	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	m	union:OpenMesh::IO::u3	file:	access:public
OpenMesh::IO::u4	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	u	file:
OpenMesh::IO::u4::c	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	m	union:OpenMesh::IO::u4	file:	access:public
OpenMesh::IO::u4::d	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	m	union:OpenMesh::IO::u4	file:	access:public
OpenMesh::IO::uchar	IO/SR_types.hh	/^typedef unsigned char    uchar;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::uint16_t	IO/SR_types.hh	/^typedef short          int16_t; typedef unsigned short     uint16_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::uint32_t	IO/SR_types.hh	/^typedef int            int32_t; typedef unsigned int       uint32_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::uint64_t	IO/SR_types.hh	/^typedef __int64        int64_t; typedef unsigned __int64   uint64_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::uint64_t	IO/SR_types.hh	/^typedef long long      int64_t; typedef unsigned long long uint64_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::uint8_t	IO/SR_types.hh	/^typedef char           int8_t;  typedef unsigned char      uint8_t;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::ulong	IO/SR_types.hh	/^typedef unsigned long    ulong;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::unset	IO/writer/PLYWriter.cc	/^    _opt.unset(Options::FaceColor);$/;"	p	file:	signature:(Options::FaceColor)
OpenMesh::IO::unset	IO/writer/PLYWriter.cc	/^    _opt.unset(Options::FaceNormal);$/;"	p	file:	signature:(Options::FaceNormal)
OpenMesh::IO::useMatrial	IO/writer/OBJWriter.cc	/^  bool useMatrial = false;$/;"	l
OpenMesh::IO::userOptions	IO/reader/OBJReader.cc	/^  Options userOptions = _opt;$/;"	l
OpenMesh::IO::ushort	IO/SR_types.hh	/^typedef unsigned short   ushort;$/;"	t	namespace:OpenMesh::IO
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int16 v = static_cast<OMFormat::int16>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int16 v;$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int32 v = static_cast<OMFormat::int32>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int32 v;$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int64 v = static_cast<OMFormat::int64>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int64 v;$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int8 v = static_cast<OMFormat::int8>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::int8 v;$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint16 v = static_cast<OMFormat::uint16>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint16 v;$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint32 v = static_cast<OMFormat::uint32>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint32 v;$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint64 v = static_cast<OMFormat::uint64>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint64 v;$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint8 v = static_cast<OMFormat::uint8>(_val);$/;"	l
OpenMesh::IO::v	IO/OMFormatT.cc	/^	OMFormat::uint8 v;$/;"	l
OpenMesh::IO::v	IO/reader/OBJReader.cc	/^      stream >> u; stream >> v;$/;"	l
OpenMesh::IO::v	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
OpenMesh::IO::v	IO/reader/OFFReader.cc	/^    _in >> v[0]; _in >> v[1]; _in >> v[2];$/;"	l
OpenMesh::IO::v	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         v, n;$/;"	l
OpenMesh::IO::v	IO/reader/PLYReader.cc	/^                _in >> v[0];$/;"	l
OpenMesh::IO::v	IO/reader/PLYReader.cc	/^                _in >> v[1];$/;"	l
OpenMesh::IO::v	IO/reader/PLYReader.cc	/^                _in >> v[2];$/;"	l
OpenMesh::IO::v	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f        v, n;  \/\/ Vertex$/;"	l
OpenMesh::IO::v	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f v, n;$/;"	l
OpenMesh::IO::v	IO/reader/STLReader.cc	/^        strstream >> v[0];$/;"	l
OpenMesh::IO::v	IO/reader/STLReader.cc	/^        strstream >> v[1];$/;"	l
OpenMesh::IO::v	IO/reader/STLReader.cc	/^        strstream >> v[2];$/;"	l
OpenMesh::IO::v	IO/reader/STLReader.cc	/^  OpenMesh::Vec3f            v;$/;"	l
OpenMesh::IO::v	IO/writer/OBJWriter.cc	/^  Vec3f v, n;$/;"	l
OpenMesh::IO::v	IO/writer/OFFWriter.cc	/^    _out << v[0] << " " << v[1] << " " << v[2];$/;"	l
OpenMesh::IO::v	IO/writer/OFFWriter.cc	/^  Vec3f v, n;$/;"	l
OpenMesh::IO::v	IO/writer/OMWriter.cc	/^  Vec3f v;$/;"	l
OpenMesh::IO::v	IO/writer/PLYWriter.cc	/^    _out << v[0] << " " << v[1] << " " << v[2];$/;"	l
OpenMesh::IO::v	IO/writer/PLYWriter.cc	/^  Vec3f v, n;$/;"	l
OpenMesh::IO::v2f	IO/reader/OMReader.cc	/^          _bi.set_texcoord(VertexHandle(vidx), v2f);$/;"	l
OpenMesh::IO::v2f	IO/reader/OMReader.cc	/^  OpenMesh::Vec2f v2f;$/;"	l
OpenMesh::IO::v3f	IO/reader/OMReader.cc	/^          _bi.set_normal(FaceHandle(fidx), v3f);$/;"	l
OpenMesh::IO::v3f	IO/reader/OMReader.cc	/^          _bi.set_normal(VertexHandle(vidx), v3f);$/;"	l
OpenMesh::IO::v3f	IO/reader/OMReader.cc	/^  OpenMesh::Vec3f v3f;  \/\/ normal$/;"	l
OpenMesh::IO::v3f	IO/reader/OMReader.cc	/^  OpenMesh::Vec3f v3f;$/;"	l
OpenMesh::IO::v3uc	IO/reader/OMReader.cc	/^          _bi.set_color(FaceHandle(fidx), v3uc);$/;"	l
OpenMesh::IO::v3uc	IO/reader/OMReader.cc	/^          _bi.set_color(VertexHandle(vidx), v3uc);$/;"	l
OpenMesh::IO::v3uc	IO/reader/OMReader.cc	/^  OpenMesh::Vec3uc v3uc; \/\/ rgb$/;"	l
OpenMesh::IO::vMap	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>            vMap(comp);$/;"	p	file:	signature:(comp)
OpenMesh::IO::vMap	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>  vMap;$/;"	l
OpenMesh::IO::vMapIt	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>::iterator  vMapIt;$/;"	l
OpenMesh::IO::vMapIt	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>::iterator vMapIt;$/;"	l
OpenMesh::IO::val	IO/OMFormat.hh	/^    OMFormat::uint16 val; val << _hdr;$/;"	l
OpenMesh::IO::val	IO/OMFormat.hh	/^    OMFormat::uint16 val;$/;"	l
OpenMesh::IO::val	IO/OMFormat.hh	/^    _hdr << val;$/;"	l
OpenMesh::IO::value	IO/reader/OBJReader.cc	/^            tmp >> value;$/;"	l
OpenMesh::IO::value	IO/reader/OBJReader.cc	/^      int value;$/;"	l
OpenMesh::IO::valueType	IO/reader/PLYReader.cc	/^                    ValueType valueType = get_property_type(tmp1, tmp2);$/;"	l
OpenMesh::IO::vector_restore	IO/OMFormat.hh	/^  vector_restore( std::istream& _is, VecT& _vec, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, bool _swap )
OpenMesh::IO::vector_store	IO/OMFormat.hh	/^  size_t vector_store( std::ostream& _os, const VecT& _vec, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, bool _swap )
OpenMesh::IO::version	IO/reader/PLYReader.cc	/^    _is >> version;$/;"	l
OpenMesh::IO::version	IO/reader/PLYReader.cc	/^    float version;$/;"	l
OpenMesh::IO::vertex	IO/reader/OBJReader.cc	/^        lineData >> vertex;$/;"	l
OpenMesh::IO::vertex	IO/reader/OBJReader.cc	/^        std::string vertex;$/;"	l
OpenMesh::IO::vertexCount_	IO/reader/PLYReader.cc	/^                _is >> vertexCount_;$/;"	l
OpenMesh::IO::vertexDimensionTooHigh	IO/reader/OFFReader.cc	/^  bool vertexDimensionTooHigh = false;$/;"	l
OpenMesh::IO::vertexHandles	IO/reader/OBJReader.cc	/^  std::vector<VertexHandle> vertexHandles;$/;"	l
OpenMesh::IO::vh	IO/reader/OFFReader.cc	/^  VertexHandle            vh;$/;"	l
OpenMesh::IO::vh	IO/reader/PLYReader.cc	/^    VertexHandle           vh;$/;"	l
OpenMesh::IO::vh	IO/reader/PLYReader.cc	/^    VertexHandle vh;$/;"	l
OpenMesh::IO::vh	IO/writer/OBJWriter.cc	/^  VertexHandle vh;$/;"	l
OpenMesh::IO::vh	IO/writer/OFFWriter.cc	/^  VertexHandle vh;$/;"	l
OpenMesh::IO::vh	IO/writer/PLYWriter.cc	/^  VertexHandle vh;$/;"	l
OpenMesh::IO::vhandles	IO/reader/OBJReader.cc	/^  BaseImporter::VHandles    vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/reader/OFFReader.cc	/^  BaseImporter::VHandles  vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/reader/OMReader.cc	/^      BaseImporter::VHandles vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/reader/PLYReader.cc	/^    BaseImporter::VHandles vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/reader/STLReader.cc	/^  BaseImporter::VHandles     vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/writer/OBJWriter.cc	/^    _be.get_vhandles(FaceHandle(i), vhandles);$/;"	l
OpenMesh::IO::vhandles	IO/writer/OBJWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/writer/OFFWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	l
OpenMesh::IO::vhandles	IO/writer/OFFWriter.cc	/^    std::vector<VertexHandle> vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/writer/OFFWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/writer/OMWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/writer/PLYWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	l
OpenMesh::IO::vhandles	IO/writer/PLYWriter.cc	/^    std::vector<VertexHandle> vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/writer/PLYWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
OpenMesh::IO::vhandles	IO/writer/STLWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
OpenMesh::IO::vidx	IO/reader/OMReader.cc	/^      size_t vidx = 0;$/;"	l
OpenMesh::IO::vidx	IO/reader/OMReader.cc	/^  size_t vidx = 0;$/;"	l
OpenMesh::IO::write	IO/OMFormat.hh	/^      _os.write( _pn.c_str(), _pn.size() ); \/\/ size bytes$/;"	p	signature:( _pn.c_str(), _pn.size() )
OpenMesh::IO::write	IO/writer/STLWriter.cc	/^  _out.write(header, 80);$/;"	p	file:	signature:(header, 80)
OpenMesh::IO::write_double	IO/BinaryHelper.cc	/^void write_double(double _d, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(double _d, FILE* _out, bool _swap)
OpenMesh::IO::write_double	IO/BinaryHelper.cc	/^void write_double(double _d, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(double _d, std::ostream& _out, bool _swap)
OpenMesh::IO::write_double	IO/BinaryHelper.hh	/^void write_double(double _d, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(double _d, FILE* _out, bool _swap=false)
OpenMesh::IO::write_double	IO/BinaryHelper.hh	/^void write_double(double _d, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(double _d, std::ostream& _out, bool _swap=false)
OpenMesh::IO::write_float	IO/BinaryHelper.cc	/^void write_float(float _f, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(float _f, FILE* _out, bool _swap)
OpenMesh::IO::write_float	IO/BinaryHelper.cc	/^void write_float(float _f, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(float _f, std::ostream& _out, bool _swap)
OpenMesh::IO::write_float	IO/BinaryHelper.hh	/^void write_float(float _f, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(float _f, FILE* _out, bool _swap=false)
OpenMesh::IO::write_float	IO/BinaryHelper.hh	/^void write_float(float _f, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(float _f, std::ostream& _out, bool _swap=false)
OpenMesh::IO::write_int	IO/BinaryHelper.cc	/^void write_int(int _i, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(int _i, FILE* _out, bool _swap)
OpenMesh::IO::write_int	IO/BinaryHelper.cc	/^void write_int(int _i, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(int _i, std::ostream& _out, bool _swap)
OpenMesh::IO::write_int	IO/BinaryHelper.hh	/^void write_int(int _i, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(int _i, FILE* _out, bool _swap=false)
OpenMesh::IO::write_int	IO/BinaryHelper.hh	/^void write_int(int _i, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(int _i, std::ostream& _out, bool _swap=false)
OpenMesh::IO::write_mesh	IO/MeshIO.hh	/^bool write_mesh(const Mesh&        _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(const Mesh& _mesh, const std::string& _filename, Options _opt = Options::Default, std::streamsize _precision = 6)
OpenMesh::IO::write_mesh	IO/MeshIO.hh	/^bool write_mesh(const Mesh&        _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(const Mesh& _mesh, std::ostream& _os, const std::string& _ext, Options _opt = Options::Default, std::streamsize _precision = 6)
OpenMesh::IO::write_short	IO/BinaryHelper.cc	/^void write_short(short int _i, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(short int _i, FILE* _out, bool _swap)
OpenMesh::IO::write_short	IO/BinaryHelper.cc	/^void write_short(short int _i, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(short int _i, std::ostream& _out, bool _swap)
OpenMesh::IO::write_short	IO/BinaryHelper.hh	/^void write_short(short int _i, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(short int _i, FILE* _out, bool _swap=false)
OpenMesh::IO::write_short	IO/BinaryHelper.hh	/^void write_short(short int _i, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(short int _i, std::ostream& _out, bool _swap=false)
OpenMesh::IO::x	IO/reader/OBJReader.cc	/^      stream >> x; stream >> y; stream >> z;$/;"	l
OpenMesh::IO::x	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
OpenMesh::IO::y	IO/reader/OBJReader.cc	/^      stream >> x; stream >> y; stream >> z;$/;"	l
OpenMesh::IO::y	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
OpenMesh::IO::z	IO/reader/OBJReader.cc	/^      stream >> x; stream >> y; stream >> z;$/;"	l
OpenMesh::IO::z	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
OpenMesh::Iterators	Mesh/CirculatorsT.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
OpenMesh::Iterators	Mesh/IteratorsT.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
OpenMesh::Iterators	Mesh/gen/circulators_header.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
OpenMesh::Iterators	Mesh/gen/iterators_header.hh	/^namespace Iterators {$/;"	n	namespace:OpenMesh
OpenMesh::Iterators::ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^class ConstFaceEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstFaceEdgeIterT::ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceEdgeIterT::ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(const ConstFaceEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT& _rhs)
OpenMesh::Iterators::ConstFaceEdgeIterT::ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(const FaceEdgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const FaceEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceEdgeIterT::ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstFaceEdgeIterT::ConstFaceEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::ConstFaceEdgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceEdgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceEdgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
OpenMesh::Iterators::ConstFaceEdgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
OpenMesh::Iterators::ConstFaceEdgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
OpenMesh::Iterators::ConstFaceEdgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT& _rhs) const
OpenMesh::Iterators::ConstFaceEdgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceEdgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceEdgeIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceEdgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceEdgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator=(const ConstFaceEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceEdgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator=(const FaceEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const FaceEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceEdgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT& _rhs) const
OpenMesh::Iterators::ConstFaceEdgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceEdgeIterT::operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceEdgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge&        reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
OpenMesh::Iterators::ConstFaceEdgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceEdgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^class ConstFaceFaceIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstFaceFaceIterT::ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceFaceIterT::ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(const ConstFaceFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT& _rhs)
OpenMesh::Iterators::ConstFaceFaceIterT::ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(const FaceFaceIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const FaceFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceFaceIterT::ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstFaceFaceIterT::ConstFaceFaceIterT	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::ConstFaceFaceIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceFaceIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceFaceIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
OpenMesh::Iterators::ConstFaceFaceIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
OpenMesh::Iterators::ConstFaceFaceIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
OpenMesh::Iterators::ConstFaceFaceIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT& _rhs) const
OpenMesh::Iterators::ConstFaceFaceIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceFaceIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceFaceIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceFaceIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceFaceIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator=(const ConstFaceFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceFaceIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator=(const FaceFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const FaceFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceFaceIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT& _rhs) const
OpenMesh::Iterators::ConstFaceFaceIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceFaceIterT::operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceFaceIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face&        reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
OpenMesh::Iterators::ConstFaceFaceIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceFaceIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^class ConstFaceHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstFaceHalfedgeIterT::ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceHalfedgeIterT::ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(const ConstFaceHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT& _rhs)
OpenMesh::Iterators::ConstFaceHalfedgeIterT::ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(const FaceHalfedgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceHalfedgeIterT::ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstFaceHalfedgeIterT::ConstFaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::ConstFaceHalfedgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstFaceHalfedgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstFaceHalfedgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstFaceHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT& _rhs) const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator=(const ConstFaceHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator=(const FaceHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT& _rhs) const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge*    pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge&    reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstFaceHalfedgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceHalfedgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^class ConstFaceVertexIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstFaceVertexIterT::ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceVertexIterT::ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(const ConstFaceVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT& _rhs)
OpenMesh::Iterators::ConstFaceVertexIterT::ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(const FaceVertexIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const FaceVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceVertexIterT::ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstFaceVertexIterT::ConstFaceVertexIterT	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::ConstFaceVertexIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceVertexIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceVertexIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
OpenMesh::Iterators::ConstFaceVertexIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
OpenMesh::Iterators::ConstFaceVertexIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
OpenMesh::Iterators::ConstFaceVertexIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT& _rhs) const
OpenMesh::Iterators::ConstFaceVertexIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceVertexIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceVertexIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:()
OpenMesh::Iterators::ConstFaceVertexIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceVertexIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator=(const ConstFaceVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceVertexIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator=(const FaceVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const FaceVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstFaceVertexIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT& _rhs) const
OpenMesh::Iterators::ConstFaceVertexIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceVertexIterT::operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstFaceVertexIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex*      pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex&      reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
OpenMesh::Iterators::ConstFaceVertexIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstFaceVertexIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^class ConstVertexEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstVertexEdgeIterT::ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexEdgeIterT::ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(const ConstVertexEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT& _rhs)
OpenMesh::Iterators::ConstVertexEdgeIterT::ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(const VertexEdgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const VertexEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexEdgeIterT::ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstVertexEdgeIterT::ConstVertexEdgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::ConstVertexEdgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexEdgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexEdgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
OpenMesh::Iterators::ConstVertexEdgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
OpenMesh::Iterators::ConstVertexEdgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
OpenMesh::Iterators::ConstVertexEdgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT& _rhs) const
OpenMesh::Iterators::ConstVertexEdgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexEdgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexEdgeIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexEdgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexEdgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator=(const ConstVertexEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexEdgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator=(const VertexEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const VertexEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexEdgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT& _rhs) const
OpenMesh::Iterators::ConstVertexEdgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexEdgeIterT::operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexEdgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge&        reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
OpenMesh::Iterators::ConstVertexEdgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexEdgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^class ConstVertexFaceIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstVertexFaceIterT::ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexFaceIterT::ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(const ConstVertexFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT& _rhs)
OpenMesh::Iterators::ConstVertexFaceIterT::ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(const VertexFaceIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const VertexFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexFaceIterT::ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstVertexFaceIterT::ConstVertexFaceIterT	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::ConstVertexFaceIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexFaceIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexFaceIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
OpenMesh::Iterators::ConstVertexFaceIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
OpenMesh::Iterators::ConstVertexFaceIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
OpenMesh::Iterators::ConstVertexFaceIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT& _rhs) const
OpenMesh::Iterators::ConstVertexFaceIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexFaceIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexFaceIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexFaceIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexFaceIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator=(const ConstVertexFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexFaceIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator=(const VertexFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const VertexFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexFaceIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT& _rhs) const
OpenMesh::Iterators::ConstVertexFaceIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexFaceIterT::operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexFaceIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face&        reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
OpenMesh::Iterators::ConstVertexFaceIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexFaceIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^class ConstVertexIHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(const ConstVertexIHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT& _rhs)
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(const VertexIHalfedgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::ConstVertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT& _rhs) const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator=(const ConstVertexIHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator=(const VertexIHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT& _rhs) const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge*    pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge&    reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexIHalfedgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^class ConstVertexOHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(const ConstVertexOHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT& _rhs)
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(const VertexOHalfedgeIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::ConstVertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT& _rhs) const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator=(const ConstVertexOHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator=(const VertexOHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT& _rhs) const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge*    pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge&    reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexOHalfedgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^class ConstVertexVertexIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::ConstVertexVertexIterT::ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT() : mesh_(0), lap_counter_(0) {}$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexVertexIterT::ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(const ConstVertexVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT& _rhs)
OpenMesh::Iterators::ConstVertexVertexIterT::ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(const VertexVertexIterT<Mesh>& _rhs) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const VertexVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexVertexIterT::ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::ConstVertexVertexIterT::ConstVertexVertexIterT	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::ConstVertexVertexIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexVertexIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexVertexIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
OpenMesh::Iterators::ConstVertexVertexIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
OpenMesh::Iterators::ConstVertexVertexIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
OpenMesh::Iterators::ConstVertexVertexIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT& _rhs) const
OpenMesh::Iterators::ConstVertexVertexIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexVertexIterT::operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexVertexIterT::operator --	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:()
OpenMesh::Iterators::ConstVertexVertexIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexVertexIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator=(const ConstVertexVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexVertexIterT::operator =	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator=(const VertexVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const VertexVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::ConstVertexVertexIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT& _rhs) const
OpenMesh::Iterators::ConstVertexVertexIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexVertexIterT::operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::ConstVertexVertexIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex*      pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex&      reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
OpenMesh::Iterators::ConstVertexVertexIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::ConstVertexVertexIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT	Mesh/CirculatorsT.hh	/^class FaceEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::FaceEdgeIterT::FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:()
OpenMesh::Iterators::FaceEdgeIterT::FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT(const FaceEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT& _rhs)
OpenMesh::Iterators::FaceEdgeIterT::FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::FaceEdgeIterT::FaceEdgeIterT	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::FaceEdgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceEdgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceEdgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
OpenMesh::Iterators::FaceEdgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
OpenMesh::Iterators::FaceEdgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
OpenMesh::Iterators::FaceEdgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT& _rhs) const
OpenMesh::Iterators::FaceEdgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceEdgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:()
OpenMesh::Iterators::FaceEdgeIterT::operator --	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:()
OpenMesh::Iterators::FaceEdgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceEdgeIterT::operator =	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT& operator=(const FaceEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::FaceEdgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT& _rhs) const
OpenMesh::Iterators::FaceEdgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceEdgeIterT::operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceEdgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
OpenMesh::Iterators::FaceEdgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceEdgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
OpenMesh::Iterators::FaceFaceIterT	Mesh/CirculatorsT.hh	/^class FaceFaceIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::FaceFaceIterT::FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:()
OpenMesh::Iterators::FaceFaceIterT::FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT(const FaceFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT& _rhs)
OpenMesh::Iterators::FaceFaceIterT::FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::FaceFaceIterT::FaceFaceIterT	Mesh/CirculatorsT.hh	/^  FaceFaceIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::FaceFaceIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::FaceFaceIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::FaceFaceIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
OpenMesh::Iterators::FaceFaceIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
OpenMesh::Iterators::FaceFaceIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
OpenMesh::Iterators::FaceFaceIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT& _rhs) const
OpenMesh::Iterators::FaceFaceIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::FaceFaceIterT::operator ++	Mesh/CirculatorsT.hh	/^  FaceFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:()
OpenMesh::Iterators::FaceFaceIterT::operator --	Mesh/CirculatorsT.hh	/^  FaceFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:()
OpenMesh::Iterators::FaceFaceIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::FaceFaceIterT::operator =	Mesh/CirculatorsT.hh	/^  FaceFaceIterT& operator=(const FaceFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::FaceFaceIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT& _rhs) const
OpenMesh::Iterators::FaceFaceIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::FaceFaceIterT::operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
OpenMesh::Iterators::FaceFaceIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
OpenMesh::Iterators::FaceFaceIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceFaceIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^class FaceHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::FaceHalfedgeIterT::FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::FaceHalfedgeIterT::FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT(const FaceHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT& _rhs)
OpenMesh::Iterators::FaceHalfedgeIterT::FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::FaceHalfedgeIterT::FaceHalfedgeIterT	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::FaceHalfedgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceHalfedgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceHalfedgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
OpenMesh::Iterators::FaceHalfedgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
OpenMesh::Iterators::FaceHalfedgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
OpenMesh::Iterators::FaceHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT& _rhs) const
OpenMesh::Iterators::FaceHalfedgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceHalfedgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::FaceHalfedgeIterT::operator --	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::FaceHalfedgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT& operator=(const FaceHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::FaceHalfedgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT& _rhs) const
OpenMesh::Iterators::FaceHalfedgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceHalfedgeIterT::operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::FaceHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
OpenMesh::Iterators::FaceHalfedgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceHalfedgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
OpenMesh::Iterators::FaceVertexIterT	Mesh/CirculatorsT.hh	/^class FaceVertexIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::FaceVertexIterT::FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:()
OpenMesh::Iterators::FaceVertexIterT::FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT(const FaceVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT& _rhs)
OpenMesh::Iterators::FaceVertexIterT::FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::FaceVertexIterT::FaceVertexIterT	Mesh/CirculatorsT.hh	/^  FaceVertexIterT(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::FaceHandle _start, bool _end = false)
OpenMesh::Iterators::FaceVertexIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::FaceVertexIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::FaceVertexIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
OpenMesh::Iterators::FaceVertexIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
OpenMesh::Iterators::FaceVertexIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
OpenMesh::Iterators::FaceVertexIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT& _rhs) const
OpenMesh::Iterators::FaceVertexIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::FaceVertexIterT::operator ++	Mesh/CirculatorsT.hh	/^  FaceVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:()
OpenMesh::Iterators::FaceVertexIterT::operator --	Mesh/CirculatorsT.hh	/^  FaceVertexIterT& operator--() {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:()
OpenMesh::Iterators::FaceVertexIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::FaceVertexIterT::operator =	Mesh/CirculatorsT.hh	/^  FaceVertexIterT& operator=(const FaceVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::FaceVertexIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT& _rhs) const
OpenMesh::Iterators::FaceVertexIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::FaceVertexIterT::operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
OpenMesh::Iterators::FaceVertexIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
OpenMesh::Iterators::FaceVertexIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::FaceVertexIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
OpenMesh::Iterators::GenericIteratorT	Mesh/IteratorsT.hh	/^class GenericIteratorT {$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::GenericIteratorT::GenericIteratorT	Mesh/IteratorsT.hh	/^        GenericIteratorT()$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
OpenMesh::Iterators::GenericIteratorT::GenericIteratorT	Mesh/IteratorsT.hh	/^        GenericIteratorT(mesh_ref _mesh, value_handle _hnd, bool _skip=false)$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:(mesh_ref _mesh, value_handle _hnd, bool _skip=false)
OpenMesh::Iterators::GenericIteratorT::__decrement	Mesh/IteratorsT.hh	/^                hnd_.__decrement();$/;"	p	signature:()
OpenMesh::Iterators::GenericIteratorT::__decrement	Mesh/IteratorsT.hh	/^            hnd_.__decrement();$/;"	p	signature:()
OpenMesh::Iterators::GenericIteratorT::__increment	Mesh/IteratorsT.hh	/^                hnd_.__increment();$/;"	p	signature:()
OpenMesh::Iterators::GenericIteratorT::__increment	Mesh/IteratorsT.hh	/^            hnd_.__increment();$/;"	p	signature:()
OpenMesh::Iterators::GenericIteratorT::difference_type	Mesh/IteratorsT.hh	/^        typedef std::ptrdiff_t                  difference_type;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::GenericIteratorT::disable_skipping	Mesh/IteratorsT.hh	/^        void disable_skipping() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
OpenMesh::Iterators::GenericIteratorT::enable_skipping	Mesh/IteratorsT.hh	/^        void enable_skipping() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
OpenMesh::Iterators::GenericIteratorT::handle	Mesh/IteratorsT.hh	/^        value_handle handle() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
OpenMesh::Iterators::GenericIteratorT::hnd_	Mesh/IteratorsT.hh	/^        value_handle hnd_;$/;"	m	class:OpenMesh::Iterators::GenericIteratorT	access:protected
OpenMesh::Iterators::GenericIteratorT::iterator_category	Mesh/IteratorsT.hh	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::GenericIteratorT::mesh_	Mesh/IteratorsT.hh	/^        mesh_ptr mesh_;$/;"	m	class:OpenMesh::Iterators::GenericIteratorT	access:protected
OpenMesh::Iterators::GenericIteratorT::mesh_ptr	Mesh/IteratorsT.hh	/^        typedef const Mesh*                     mesh_ptr;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::GenericIteratorT::mesh_ref	Mesh/IteratorsT.hh	/^        typedef const Mesh&                     mesh_ref;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::GenericIteratorT::operator !=	Mesh/IteratorsT.hh	/^        bool operator!=(const GenericIteratorT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:(const GenericIteratorT& _rhs) const
OpenMesh::Iterators::GenericIteratorT::operator *	Mesh/IteratorsT.hh	/^        reference operator*() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
OpenMesh::Iterators::GenericIteratorT::operator ++	Mesh/IteratorsT.hh	/^        GenericIteratorT& operator++() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
OpenMesh::Iterators::GenericIteratorT::operator --	Mesh/IteratorsT.hh	/^        GenericIteratorT& operator--() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
OpenMesh::Iterators::GenericIteratorT::operator ->	Mesh/IteratorsT.hh	/^        pointer operator->() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
OpenMesh::Iterators::GenericIteratorT::operator ==	Mesh/IteratorsT.hh	/^        bool operator==(const GenericIteratorT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:(const GenericIteratorT& _rhs) const
OpenMesh::Iterators::GenericIteratorT::operator value_handle	Mesh/IteratorsT.hh	/^        operator value_handle() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
OpenMesh::Iterators::GenericIteratorT::pointer	Mesh/IteratorsT.hh	/^        typedef const value_type*               pointer;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::GenericIteratorT::reference	Mesh/IteratorsT.hh	/^        typedef const value_type&               reference;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::GenericIteratorT::set_deleted	Mesh/IteratorsT.hh	/^                status.set_deleted(true);$/;"	p	signature:(true)
OpenMesh::Iterators::GenericIteratorT::set_hidden	Mesh/IteratorsT.hh	/^                status.set_hidden(true);$/;"	p	signature:(true)
OpenMesh::Iterators::GenericIteratorT::skip_bits_	Mesh/IteratorsT.hh	/^        unsigned int skip_bits_;$/;"	m	class:OpenMesh::Iterators::GenericIteratorT	access:protected
OpenMesh::Iterators::GenericIteratorT::skip_bwd	Mesh/IteratorsT.hh	/^        void skip_bwd() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:private	signature:()
OpenMesh::Iterators::GenericIteratorT::skip_fwd	Mesh/IteratorsT.hh	/^        void skip_fwd() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:private	signature:()
OpenMesh::Iterators::GenericIteratorT::status	Mesh/IteratorsT.hh	/^                Attributes::StatusInfo status;$/;"	l
OpenMesh::Iterators::GenericIteratorT::value_handle	Mesh/IteratorsT.hh	/^        typedef ValueHandle                     value_handle;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::GenericIteratorT::value_type	Mesh/IteratorsT.hh	/^        typedef value_handle                    value_type;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
OpenMesh::Iterators::VertexEdgeIterT	Mesh/CirculatorsT.hh	/^class VertexEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::VertexEdgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexEdgeIterT::VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT(const VertexEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT& _rhs)
OpenMesh::Iterators::VertexEdgeIterT::VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::VertexEdgeIterT::VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::VertexEdgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexEdgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexEdgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
OpenMesh::Iterators::VertexEdgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
OpenMesh::Iterators::VertexEdgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
OpenMesh::Iterators::VertexEdgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT& _rhs) const
OpenMesh::Iterators::VertexEdgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexEdgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexEdgeIterT::operator --	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexEdgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexEdgeIterT::operator =	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT& operator=(const VertexEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::VertexEdgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT& _rhs) const
OpenMesh::Iterators::VertexEdgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexEdgeIterT::operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexEdgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
OpenMesh::Iterators::VertexEdgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexEdgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
OpenMesh::Iterators::VertexFaceIterT	Mesh/CirculatorsT.hh	/^class VertexFaceIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::VertexFaceIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:()
OpenMesh::Iterators::VertexFaceIterT::VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT(const VertexFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT& _rhs)
OpenMesh::Iterators::VertexFaceIterT::VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::VertexFaceIterT::VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::VertexFaceIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::VertexFaceIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::VertexFaceIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
OpenMesh::Iterators::VertexFaceIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
OpenMesh::Iterators::VertexFaceIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
OpenMesh::Iterators::VertexFaceIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT& _rhs) const
OpenMesh::Iterators::VertexFaceIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::VertexFaceIterT::operator ++	Mesh/CirculatorsT.hh	/^  VertexFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:()
OpenMesh::Iterators::VertexFaceIterT::operator --	Mesh/CirculatorsT.hh	/^  VertexFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:()
OpenMesh::Iterators::VertexFaceIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::VertexFaceIterT::operator =	Mesh/CirculatorsT.hh	/^  VertexFaceIterT& operator=(const VertexFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT<Mesh>& _rhs)
OpenMesh::Iterators::VertexFaceIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT& _rhs) const
OpenMesh::Iterators::VertexFaceIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::VertexFaceIterT::operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
OpenMesh::Iterators::VertexFaceIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
OpenMesh::Iterators::VertexFaceIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexFaceIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^class VertexIHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::VertexIHalfedgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexIHalfedgeIterT::VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT(const VertexIHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT& _rhs)
OpenMesh::Iterators::VertexIHalfedgeIterT::VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::VertexIHalfedgeIterT::VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::VertexIHalfedgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexIHalfedgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexIHalfedgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexIHalfedgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexIHalfedgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexIHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT& _rhs) const
OpenMesh::Iterators::VertexIHalfedgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexIHalfedgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexIHalfedgeIterT::operator --	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexIHalfedgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexIHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT& operator=(const VertexIHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::VertexIHalfedgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT& _rhs) const
OpenMesh::Iterators::VertexIHalfedgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexIHalfedgeIterT::operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexIHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexIHalfedgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexIHalfedgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^class VertexOHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::VertexOHalfedgeIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexOHalfedgeIterT::VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT(const VertexOHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT& _rhs)
OpenMesh::Iterators::VertexOHalfedgeIterT::VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::VertexOHalfedgeIterT::VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::VertexOHalfedgeIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexOHalfedgeIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexOHalfedgeIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexOHalfedgeIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexOHalfedgeIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexOHalfedgeIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT& _rhs) const
OpenMesh::Iterators::VertexOHalfedgeIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexOHalfedgeIterT::operator ++	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexOHalfedgeIterT::operator --	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:()
OpenMesh::Iterators::VertexOHalfedgeIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexOHalfedgeIterT::operator =	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT& operator=(const VertexOHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT<Mesh>& _rhs)
OpenMesh::Iterators::VertexOHalfedgeIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT& _rhs) const
OpenMesh::Iterators::VertexOHalfedgeIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexOHalfedgeIterT::operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
OpenMesh::Iterators::VertexOHalfedgeIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
OpenMesh::Iterators::VertexOHalfedgeIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexOHalfedgeIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
OpenMesh::Iterators::VertexVertexIterT	Mesh/CirculatorsT.hh	/^class VertexVertexIterT$/;"	c	namespace:OpenMesh::Iterators
OpenMesh::Iterators::VertexVertexIterT::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT() : mesh_(0), lap_counter_(0) {}$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:()
OpenMesh::Iterators::VertexVertexIterT::VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT(const VertexVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT& _rhs)
OpenMesh::Iterators::VertexVertexIterT::VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
OpenMesh::Iterators::VertexVertexIterT::VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
OpenMesh::Iterators::VertexVertexIterT::current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::VertexVertexIterT::difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::VertexVertexIterT::heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
OpenMesh::Iterators::VertexVertexIterT::iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
OpenMesh::Iterators::VertexVertexIterT::mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
OpenMesh::Iterators::VertexVertexIterT::mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT& _rhs) const
OpenMesh::Iterators::VertexVertexIterT::operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::VertexVertexIterT::operator ++	Mesh/CirculatorsT.hh	/^  VertexVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:()
OpenMesh::Iterators::VertexVertexIterT::operator --	Mesh/CirculatorsT.hh	/^  VertexVertexIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:()
OpenMesh::Iterators::VertexVertexIterT::operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::VertexVertexIterT::operator =	Mesh/CirculatorsT.hh	/^  VertexVertexIterT& operator=(const VertexVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT<Mesh>& _rhs)
OpenMesh::Iterators::VertexVertexIterT::operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT& _rhs) const
OpenMesh::Iterators::VertexVertexIterT::operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::VertexVertexIterT::operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
OpenMesh::Iterators::VertexVertexIterT::pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
OpenMesh::Iterators::VertexVertexIterT::value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::Iterators::VertexVertexIterT::value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
OpenMesh::LoopSchemeMaskT	Geometry/LoopSchemeMaskT.hh	/^class LoopSchemeMaskT$/;"	c	namespace:OpenMesh
OpenMesh::LoopSchemeMaskT::LoopSchemeMaskT	Geometry/LoopSchemeMaskT.hh	/^  LoopSchemeMaskT()$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:public	signature:()
OpenMesh::LoopSchemeMaskT::Scalar	Geometry/LoopSchemeMaskT.hh	/^  typedef T_                                Scalar;$/;"	t	class:OpenMesh::LoopSchemeMaskT	access:public
OpenMesh::LoopSchemeMaskT::cache_size	Geometry/LoopSchemeMaskT.hh	/^  enum { cache_size = cache_size_ };$/;"	e	enum:OpenMesh::LoopSchemeMaskT::__anon4
OpenMesh::LoopSchemeMaskT::cache_weights	Geometry/LoopSchemeMaskT.hh	/^  void                                      cache_weights()$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:()
OpenMesh::LoopSchemeMaskT::compute_limit_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_limit_weight(uint _valence)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence)
OpenMesh::LoopSchemeMaskT::compute_proj_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_proj_weight(uint _valence)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence)
OpenMesh::LoopSchemeMaskT::compute_step_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_step_weight(uint _valence)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence)
OpenMesh::LoopSchemeMaskT::compute_tang0_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_tang0_weight(uint _valence, uint _ver_id)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence, uint _ver_id)
OpenMesh::LoopSchemeMaskT::compute_tang1_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_tang1_weight(uint _valence, uint _ver_id)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence, uint _ver_id)
OpenMesh::LoopSchemeMaskT::denom	Geometry/LoopSchemeMaskT.hh	/^    double denom = (3.0 + 2.0*cos(2.0*M_PI\/(double)_valence));$/;"	l
OpenMesh::LoopSchemeMaskT::limit_weights_	Geometry/LoopSchemeMaskT.hh	/^  Scalar                                    limit_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
OpenMesh::LoopSchemeMaskT::proj_weight	Geometry/LoopSchemeMaskT.hh	/^    double proj_weight = compute_proj_weight(_valence);$/;"	l
OpenMesh::LoopSchemeMaskT::proj_weight	Geometry/LoopSchemeMaskT.hh	/^  inline Scalar                             proj_weight(uint _valence) const$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:public	signature:(uint _valence) const
OpenMesh::LoopSchemeMaskT::proj_weights_	Geometry/LoopSchemeMaskT.hh	/^  Scalar                                    proj_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
OpenMesh::LoopSchemeMaskT::resize	Geometry/LoopSchemeMaskT.hh	/^      tang0_weights_[k].resize(k);$/;"	p	signature:(k)
OpenMesh::LoopSchemeMaskT::resize	Geometry/LoopSchemeMaskT.hh	/^      tang1_weights_[k].resize(k);$/;"	p	signature:(k)
OpenMesh::LoopSchemeMaskT::step_weights_	Geometry/LoopSchemeMaskT.hh	/^  Scalar                                    step_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
OpenMesh::LoopSchemeMaskT::tang0_weights_	Geometry/LoopSchemeMaskT.hh	/^  std::vector<Scalar>                       tang0_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
OpenMesh::LoopSchemeMaskT::tang1_weights_	Geometry/LoopSchemeMaskT.hh	/^  std::vector<Scalar>                       tang1_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
OpenMesh::LoopSchemeMaskT::weight	Geometry/LoopSchemeMaskT.hh	/^    double weight = (3.0\/8.0)\/(1.0 - proj_weight + (3.0\/8.0));$/;"	l
OpenMesh::LoopSchemeMaskT::weight	Geometry/LoopSchemeMaskT.hh	/^    double weight = (64.0*_valence)\/(40.0 - denom*denom) - _valence;$/;"	l
OpenMesh::LoopSchemeMaskT::weight	Geometry/LoopSchemeMaskT.hh	/^    double weight = proj_weight - (3.0\/8.0);$/;"	l
OpenMesh::MPropHandleT	Utils/Property.hh	/^struct MPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
OpenMesh::MPropHandleT::MPropHandleT	Utils/Property.hh	/^  explicit MPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::MPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
OpenMesh::MPropHandleT::MPropHandleT	Utils/Property.hh	/^  explicit MPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::MPropHandleT	access:public	signature:(int _idx=-1)
OpenMesh::MPropHandleT::Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::MPropHandleT	access:public
OpenMesh::MPropHandleT::value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::MPropHandleT	access:public
OpenMesh::MergeTraits	Mesh/Traits.hh	/^template <class _Traits1, class _Traits2> struct MergeTraits$/;"	s	namespace:OpenMesh
OpenMesh::MergeTraits::Result	Mesh/Traits.hh	/^  struct Result$/;"	s	struct:OpenMesh::MergeTraits	access:public
OpenMesh::MergeTraits::Result::Color	Mesh/Traits.hh	/^    typedef typename T1::Color    Color;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
OpenMesh::MergeTraits::Result::EdgeT	Mesh/Traits.hh	/^    template <class Base, class Refs> class EdgeT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,EdgeT	access:public
OpenMesh::MergeTraits::Result::FaceT	Mesh/Traits.hh	/^    template <class Base, class Refs> class FaceT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,FaceT	access:public
OpenMesh::MergeTraits::Result::HalfedgeT	Mesh/Traits.hh	/^    template <class Base, class Refs> class HalfedgeT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,HalfedgeT	access:public
OpenMesh::MergeTraits::Result::Normal	Mesh/Traits.hh	/^    typedef typename T1::Normal   Normal;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
OpenMesh::MergeTraits::Result::Point	Mesh/Traits.hh	/^    typedef typename T1::Point    Point;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
OpenMesh::MergeTraits::Result::T1	Mesh/Traits.hh	/^    typedef _Traits1  T1;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
OpenMesh::MergeTraits::Result::T2	Mesh/Traits.hh	/^    typedef _Traits2  T2;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
OpenMesh::MergeTraits::Result::TexCoord	Mesh/Traits.hh	/^    typedef typename T1::TexCoord TexCoord;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
OpenMesh::MergeTraits::Result::VertexT	Mesh/Traits.hh	/^    template <class Base, class Refs> class VertexT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,VertexT	access:public
OpenMesh::NormalConeT	Geometry/NormalConeT.hh	/^class NormalConeT$/;"	c	namespace:OpenMesh
OpenMesh::NormalConeT::NormalConeT	Geometry/NormalConeT.cc	/^NormalConeT(const Vec3& _center_normal, Scalar _angle)$/;"	f	class:OpenMesh::NormalConeT	signature:(const Vec3& _center_normal, Scalar _angle)
OpenMesh::NormalConeT::NormalConeT	Geometry/NormalConeT.hh	/^  NormalConeT() {}$/;"	f	class:OpenMesh::NormalConeT	access:public	signature:()
OpenMesh::NormalConeT::NormalConeT	Geometry/NormalConeT.hh	/^  NormalConeT(const Vec3& _center_normal, Scalar _angle=0.0);$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const Vec3& _center_normal, Scalar _angle=0.0)
OpenMesh::NormalConeT::Vec3	Geometry/NormalConeT.hh	/^  typedef VectorT<Scalar, 3>  Vec3;$/;"	t	class:OpenMesh::NormalConeT	access:public
OpenMesh::NormalConeT::angle	Geometry/NormalConeT.hh	/^  inline Scalar angle() const { return angle_; }$/;"	f	class:OpenMesh::NormalConeT	access:public	signature:() const
OpenMesh::NormalConeT::angle_	Geometry/NormalConeT.hh	/^  Scalar  angle_;$/;"	m	class:OpenMesh::NormalConeT	access:private
OpenMesh::NormalConeT::center_normal	Geometry/NormalConeT.hh	/^  const Vec3& center_normal() const { return center_normal_; }$/;"	f	class:OpenMesh::NormalConeT	access:public	signature:() const
OpenMesh::NormalConeT::center_normal_	Geometry/NormalConeT.hh	/^  Vec3    center_normal_;$/;"	m	class:OpenMesh::NormalConeT	access:private
OpenMesh::NormalConeT::max_angle	Geometry/NormalConeT.cc	/^max_angle(const NormalConeT& _cone) const$/;"	f	class:OpenMesh::NormalConeT	signature:(const NormalConeT& _cone) const
OpenMesh::NormalConeT::max_angle	Geometry/NormalConeT.cc	/^max_angle(const Vec3& _norm) const$/;"	f	class:OpenMesh::NormalConeT	signature:(const Vec3& _norm) const
OpenMesh::NormalConeT::max_angle	Geometry/NormalConeT.hh	/^  Scalar max_angle(const NormalConeT&) const;$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const NormalConeT&) const
OpenMesh::NormalConeT::max_angle	Geometry/NormalConeT.hh	/^  Scalar max_angle(const Vec3&) const;$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const Vec3&) const
OpenMesh::NormalConeT::merge	Geometry/NormalConeT.cc	/^merge(const NormalConeT& _cone)$/;"	f	class:OpenMesh::NormalConeT	signature:(const NormalConeT& _cone)
OpenMesh::NormalConeT::merge	Geometry/NormalConeT.hh	/^  void merge(const NormalConeT&);$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const NormalConeT&)
OpenMesh::POLYMESH_CAST	Mesh/Casts.hh	/^inline PolyMesh_ArrayKernelT<Traits>& POLYMESH_CAST(TriMesh_ArrayKernelT<Traits>& _tri_mesh)$/;"	f	namespace:OpenMesh	signature:(TriMesh_ArrayKernelT<Traits>& _tri_mesh)
OpenMesh::POLYMESH_CAST	Mesh/Casts.hh	/^inline const PolyMesh_ArrayKernelT<Traits>& POLYMESH_CAST(const TriMesh_ArrayKernelT<Traits>& _tri_mesh)$/;"	f	namespace:OpenMesh	signature:(const TriMesh_ArrayKernelT<Traits>& _tri_mesh)
OpenMesh::PolyConnectivity	Mesh/PolyConnectivity.hh	/^class OPENMESHDLLEXPORT PolyConnectivity : public ArrayKernel$/;"	c	namespace:OpenMesh	inherits:ArrayKernel
OpenMesh::PolyConnectivity::AddFaceEdgeInfo	Mesh/PolyConnectivity.hh	/^       struct AddFaceEdgeInfo$/;"	s	class:OpenMesh::PolyConnectivity	access:private
OpenMesh::PolyConnectivity::AddFaceEdgeInfo::halfedge_handle	Mesh/PolyConnectivity.hh	/^               HalfedgeHandle halfedge_handle;$/;"	m	struct:OpenMesh::PolyConnectivity::AddFaceEdgeInfo	access:public
OpenMesh::PolyConnectivity::AddFaceEdgeInfo::is_new	Mesh/PolyConnectivity.hh	/^               bool is_new;$/;"	m	struct:OpenMesh::PolyConnectivity::AddFaceEdgeInfo	access:public
OpenMesh::PolyConnectivity::AddFaceEdgeInfo::needs_adjust	Mesh/PolyConnectivity.hh	/^               bool needs_adjust;$/;"	m	struct:OpenMesh::PolyConnectivity::AddFaceEdgeInfo	access:public
OpenMesh::PolyConnectivity::ArrayKernel::assign_connectivity	Mesh/PolyConnectivity.hh	/^  { ArrayKernel::assign_connectivity(_other); }$/;"	p	class:OpenMesh::PolyConnectivity::ArrayKernel	signature:(_other)
OpenMesh::PolyConnectivity::CEIter	Mesh/PolyConnectivity.hh	/^  typedef ConstEdgeIter      CEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CFEIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceEdgeIter          CFEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CFFIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceFaceIter          CFFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CFHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceHalfedgeIter      CFHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CFIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceIter      CFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CFVIter	Mesh/PolyConnectivity.hh	/^  typedef ConstFaceVertexIter        CFVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstHalfedgeIter  CHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CVEIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexEdgeIter        CVEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CVFIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexFaceIter        CVFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CVIHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexIHalfedgeIter   CVIHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CVIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexIter    CVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CVOHIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexOHalfedgeIter   CVOHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::CVVIter	Mesh/PolyConnectivity.hh	/^  typedef ConstVertexVertexIter      CVVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef EdgeIter ConstEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstEdgeRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstEdgeIter, &PolyConnectivity::edges_begin, &PolyConnectivity::edges_end> ConstEdgeRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstFaceEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceEdgeIterT<This>         ConstFaceEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstFaceFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceFaceIterT<This>         ConstFaceFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstFaceHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceHalfedgeIterT<This>     ConstFaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstFaceIter	Mesh/PolyConnectivity.hh	/^  typedef FaceIter ConstFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstFaceRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstFaceIter, &PolyConnectivity::faces_begin, &PolyConnectivity::faces_end> ConstFaceRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstFaceVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstFaceVertexIterT<This>       ConstFaceVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef HalfedgeIter ConstHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstHalfedgeRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstHalfedgeIter, &PolyConnectivity::halfedges_begin, &PolyConnectivity::halfedges_end> ConstHalfedgeRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstVertexEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexEdgeIterT<This>       ConstVertexEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstVertexFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexFaceIterT<This>       ConstVertexFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstVertexIHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexIHalfedgeIterT<This>  ConstVertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstVertexIter	Mesh/PolyConnectivity.hh	/^  typedef VertexIter ConstVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstVertexOHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexOHalfedgeIterT<This>  ConstVertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstVertexRange	Mesh/PolyConnectivity.hh	/^  typedef EntityRange<const PolyConnectivity, PolyConnectivity::ConstVertexIter, &PolyConnectivity::vertices_begin, &PolyConnectivity::vertices_end> ConstVertexRange;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::ConstVertexVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::ConstVertexVertexIterT<This>     ConstVertexVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::EHandle	Mesh/PolyConnectivity.hh	/^  typedef EdgeHandle      EHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::EIter	Mesh/PolyConnectivity.hh	/^  typedef EdgeIter      EIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::EdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::EdgeHandle, ArrayKernel, &This::has_edge_status, &This::n_edges> EdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::EntityRange	Mesh/PolyConnectivity.hh	/^  class EntityRange {$/;"	c	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::EntityRange::EntityRange	Mesh/PolyConnectivity.hh	/^          EntityRange(CONTAINER_TYPE &container) : container_(container) {}$/;"	f	class:OpenMesh::PolyConnectivity::EntityRange	access:public	signature:(CONTAINER_TYPE &container)
OpenMesh::PolyConnectivity::EntityRange::begin	Mesh/PolyConnectivity.hh	/^          ITER_TYPE begin() { return (container_.*begin_fn)(); }$/;"	f	class:OpenMesh::PolyConnectivity::EntityRange	access:public	signature:()
OpenMesh::PolyConnectivity::EntityRange::container_	Mesh/PolyConnectivity.hh	/^          CONTAINER_TYPE &container_;$/;"	m	class:OpenMesh::PolyConnectivity::EntityRange	access:private
OpenMesh::PolyConnectivity::EntityRange::end	Mesh/PolyConnectivity.hh	/^          ITER_TYPE end() { return (container_.*end_fn)(); }$/;"	f	class:OpenMesh::PolyConnectivity::EntityRange	access:public	signature:()
OpenMesh::PolyConnectivity::FEIter	Mesh/PolyConnectivity.hh	/^  typedef FaceEdgeIter          FEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FFIter	Mesh/PolyConnectivity.hh	/^  typedef FaceFaceIter          FFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FHIter	Mesh/PolyConnectivity.hh	/^  typedef FaceHalfedgeIter      FHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FHandle	Mesh/PolyConnectivity.hh	/^  typedef FaceHandle      FHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FIter	Mesh/PolyConnectivity.hh	/^  typedef FaceIter      FIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FVIter	Mesh/PolyConnectivity.hh	/^  typedef FaceVertexIter        FVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FaceEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceEdgeIterT<This>              FaceEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FaceFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceFaceIterT<This>              FaceFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FaceHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceHalfedgeIterT<This>          FaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::FaceHandle, ArrayKernel, &This::has_face_status, &This::n_faces> FaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::FaceVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::FaceVertexIterT<This>            FaceVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::HHandle	Mesh/PolyConnectivity.hh	/^  typedef HalfedgeHandle  HHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::HIter	Mesh/PolyConnectivity.hh	/^  typedef HalfedgeIter  HIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::HalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::HalfedgeHandle, ArrayKernel, &This::has_halfedge_status, &This::n_halfedges> HalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::InvalidEdgeHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::EdgeHandle      PolyConnectivity::InvalidEdgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
OpenMesh::PolyConnectivity::InvalidEdgeHandle	Mesh/PolyConnectivity.hh	/^  static const EdgeHandle                             InvalidEdgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::InvalidFaceHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::FaceHandle      PolyConnectivity::InvalidFaceHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
OpenMesh::PolyConnectivity::InvalidFaceHandle	Mesh/PolyConnectivity.hh	/^  static const FaceHandle                             InvalidFaceHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::InvalidHalfedgeHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::HalfedgeHandle  PolyConnectivity::InvalidHalfedgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
OpenMesh::PolyConnectivity::InvalidHalfedgeHandle	Mesh/PolyConnectivity.hh	/^  static const HalfedgeHandle                         InvalidHalfedgeHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::InvalidVertexHandle	Mesh/PolyConnectivity.cc	/^const PolyConnectivity::VertexHandle    PolyConnectivity::InvalidVertexHandle;$/;"	m	class:OpenMesh::PolyConnectivity	file:
OpenMesh::PolyConnectivity::InvalidVertexHandle	Mesh/PolyConnectivity.hh	/^  static const VertexHandle                           InvalidVertexHandle;$/;"	m	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::PolyConnectivity	Mesh/PolyConnectivity.hh	/^  PolyConnectivity()  {}$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::This	Mesh/PolyConnectivity.hh	/^  typedef PolyConnectivity                            This;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VEIter	Mesh/PolyConnectivity.hh	/^  typedef VertexEdgeIter        VEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VFIter	Mesh/PolyConnectivity.hh	/^  typedef VertexFaceIter        VFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VHandle	Mesh/PolyConnectivity.hh	/^  typedef VertexHandle    VHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VIHIter	Mesh/PolyConnectivity.hh	/^  typedef VertexIHalfedgeIter   VIHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VIter	Mesh/PolyConnectivity.hh	/^  typedef VertexIter    VIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VOHIter	Mesh/PolyConnectivity.hh	/^  typedef VertexOHalfedgeIter   VOHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VVIter	Mesh/PolyConnectivity.hh	/^  typedef VertexVertexIter      VVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VertexEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexEdgeIterT<This>            VertexEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VertexFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexFaceIterT<This>            VertexFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VertexIHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexIHalfedgeIterT<This>       VertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::VertexHandle, ArrayKernel, &This::has_vertex_status, &This::n_vertices> VertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VertexOHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexOHalfedgeIterT<This>       VertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::VertexVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexVertexIterT<This>          VertexVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.cc	/^FaceHandle PolyConnectivity::add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.cc	/^FaceHandle PolyConnectivity::add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3)
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.cc	/^FaceHandle PolyConnectivity::add_face(const std::vector<VertexHandle>& _vhandles)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(const std::vector<VertexHandle>& _vhandles)
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.cc	/^PolyConnectivity::add_face(const VertexHandle* _vertex_handles, size_t _vhs_size)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(const VertexHandle* _vertex_handles, size_t _vhs_size)
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3)
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(const VertexHandle* _vhandles, size_t _vhs_size);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(const VertexHandle* _vhandles, size_t _vhs_size)
OpenMesh::PolyConnectivity::add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(const std::vector<VertexHandle>& _vhandles);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(const std::vector<VertexHandle>& _vhandles)
OpenMesh::PolyConnectivity::add_vertex	Mesh/PolyConnectivity.hh	/^  inline VertexHandle add_vertex()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::adjust_outgoing_halfedge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::adjust_outgoing_halfedge(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::adjust_outgoing_halfedge	Mesh/PolyConnectivity.hh	/^  void adjust_outgoing_halfedge(VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::assign_connectivity	Mesh/PolyConnectivity.hh	/^  inline void assign_connectivity(const PolyConnectivity& _other)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(const PolyConnectivity& _other)
OpenMesh::PolyConnectivity::cfe_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceEdgeIter cfe_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfe_end	Mesh/PolyConnectivity.hh	/^  ConstFaceEdgeIter cfe_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfe_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceEdgeIter cfe_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cff_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceFaceIter cff_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cff_end	Mesh/PolyConnectivity.hh	/^  ConstFaceFaceIter cff_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cff_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceFaceIter cff_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfh_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceHalfedgeIter cfh_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfh_end	Mesh/PolyConnectivity.hh	/^  ConstFaceHalfedgeIter cfh_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfh_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceHalfedgeIter cfh_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfv_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceVertexIter cfv_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfv_end	Mesh/PolyConnectivity.hh	/^  ConstFaceVertexIter cfv_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::cfv_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceVertexIter cfv_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::collapse	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::collapse(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _hh)
OpenMesh::PolyConnectivity::collapse	Mesh/PolyConnectivity.hh	/^  void collapse(HalfedgeHandle _heh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _heh)
OpenMesh::PolyConnectivity::collapse_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::collapse_edge(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _hh)
OpenMesh::PolyConnectivity::collapse_edge	Mesh/PolyConnectivity.hh	/^  void collapse_edge(HalfedgeHandle _hh);$/;"	p	class:OpenMesh::PolyConnectivity	access:protected	signature:(HalfedgeHandle _hh)
OpenMesh::PolyConnectivity::collapse_loop	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::collapse_loop(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _hh)
OpenMesh::PolyConnectivity::collapse_loop	Mesh/PolyConnectivity.hh	/^  void collapse_loop(HalfedgeHandle _hh);$/;"	p	class:OpenMesh::PolyConnectivity	access:protected	signature:(HalfedgeHandle _hh)
OpenMesh::PolyConnectivity::cve_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexEdgeIter cve_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cve_end	Mesh/PolyConnectivity.hh	/^  ConstVertexEdgeIter cve_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cve_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexEdgeIter cve_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvf_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexFaceIter cvf_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvf_end	Mesh/PolyConnectivity.hh	/^  ConstVertexFaceIter cvf_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvf_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexFaceIter cvf_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvih_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexIHalfedgeIter cvih_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvih_end	Mesh/PolyConnectivity.hh	/^  ConstVertexIHalfedgeIter cvih_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvih_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexIHalfedgeIter cvih_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvoh_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexOHalfedgeIter cvoh_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvoh_end	Mesh/PolyConnectivity.hh	/^  ConstVertexOHalfedgeIter cvoh_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvoh_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexOHalfedgeIter cvoh_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvv_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexVertexIter cvv_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvv_end	Mesh/PolyConnectivity.hh	/^  ConstVertexVertexIter cvv_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::cvv_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexVertexIter cvv_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::delete_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::delete_edge(EdgeHandle _eh, bool _delete_isolated_vertices)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh, bool _delete_isolated_vertices)
OpenMesh::PolyConnectivity::delete_edge	Mesh/PolyConnectivity.hh	/^  void delete_edge(EdgeHandle _eh, bool _delete_isolated_vertices=true);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh, bool _delete_isolated_vertices=true)
OpenMesh::PolyConnectivity::delete_face	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::delete_face(FaceHandle _fh, bool _delete_isolated_vertices)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh, bool _delete_isolated_vertices)
OpenMesh::PolyConnectivity::delete_face	Mesh/PolyConnectivity.hh	/^  void delete_face(FaceHandle _fh, bool _delete_isolated_vertices=true);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, bool _delete_isolated_vertices=true)
OpenMesh::PolyConnectivity::delete_vertex	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::delete_vertex(VertexHandle _vh, bool _delete_isolated_vertices)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh, bool _delete_isolated_vertices)
OpenMesh::PolyConnectivity::delete_vertex	Mesh/PolyConnectivity.hh	/^  void delete_vertex(VertexHandle _vh, bool _delete_isolated_vertices = true);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh, bool _delete_isolated_vertices = true)
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  Edge&            deref(EdgeHandle _h)           { return edge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _h)
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  Face&            deref(FaceHandle _h)           { return face(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _h)
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  Halfedge&        deref(HalfedgeHandle _h)       { return halfedge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _h)
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  Vertex&          deref(VertexHandle _h)         { return vertex(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _h)
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  const Edge&      deref(EdgeHandle _h)     const { return edge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _h) const
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  const Face&      deref(FaceHandle _h)     const { return face(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _h) const
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  const Halfedge&  deref(HalfedgeHandle _h) const { return halfedge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _h) const
OpenMesh::PolyConnectivity::deref	Mesh/PolyConnectivity.hh	/^  const Vertex&    deref(VertexHandle _h)   const { return vertex(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _h) const
OpenMesh::PolyConnectivity::edgeData_	Mesh/PolyConnectivity.hh	/^       std::vector<AddFaceEdgeInfo> edgeData_; \/\/$/;"	m	class:OpenMesh::PolyConnectivity	access:private
OpenMesh::PolyConnectivity::edges	Mesh/PolyConnectivity.hh	/^  ConstEdgeRange edges() const { return ConstEdgeRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::edges_begin	Mesh/PolyConnectivity.hh	/^  ConstEdgeIter edges_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::edges_begin	Mesh/PolyConnectivity.hh	/^  EdgeIter edges_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::edges_end	Mesh/PolyConnectivity.hh	/^  ConstEdgeIter edges_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::edges_end	Mesh/PolyConnectivity.hh	/^  EdgeIter edges_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::edges_sbegin	Mesh/PolyConnectivity.hh	/^  ConstEdgeIter edges_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::edges_sbegin	Mesh/PolyConnectivity.hh	/^  EdgeIter edges_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::faces	Mesh/PolyConnectivity.hh	/^  ConstFaceRange faces() const { return ConstFaceRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::faces_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceIter faces_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::faces_begin	Mesh/PolyConnectivity.hh	/^  FaceIter faces_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::faces_end	Mesh/PolyConnectivity.hh	/^  ConstFaceIter faces_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::faces_end	Mesh/PolyConnectivity.hh	/^  FaceIter faces_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::faces_sbegin	Mesh/PolyConnectivity.hh	/^  ConstFaceIter faces_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::faces_sbegin	Mesh/PolyConnectivity.hh	/^  FaceIter faces_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::fe_begin	Mesh/PolyConnectivity.hh	/^  FaceEdgeIter fe_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::fe_end	Mesh/PolyConnectivity.hh	/^  FaceEdgeIter fe_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::fe_iter	Mesh/PolyConnectivity.hh	/^  FaceEdgeIter fe_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::ff_begin	Mesh/PolyConnectivity.hh	/^  FaceFaceIter ff_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::ff_end	Mesh/PolyConnectivity.hh	/^  FaceFaceIter ff_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::ff_iter	Mesh/PolyConnectivity.hh	/^  FaceFaceIter ff_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::fh_begin	Mesh/PolyConnectivity.hh	/^  FaceHalfedgeIter fh_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::fh_end	Mesh/PolyConnectivity.hh	/^  FaceHalfedgeIter fh_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::fh_iter	Mesh/PolyConnectivity.hh	/^  FaceHalfedgeIter fh_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::find_halfedge	Mesh/PolyConnectivity.cc	/^PolyConnectivity::find_halfedge(VertexHandle _start_vh, VertexHandle _end_vh ) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _start_vh, VertexHandle _end_vh ) const
OpenMesh::PolyConnectivity::find_halfedge	Mesh/PolyConnectivity.hh	/^  HalfedgeHandle find_halfedge(VertexHandle _start_vh, VertexHandle _end_vh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _start_vh, VertexHandle _end_vh) const
OpenMesh::PolyConnectivity::fv_begin	Mesh/PolyConnectivity.hh	/^  FaceVertexIter fv_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::fv_end	Mesh/PolyConnectivity.hh	/^  FaceVertexIter fv_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::fv_iter	Mesh/PolyConnectivity.hh	/^  FaceVertexIter fv_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::halfedge_handle	Mesh/PolyConnectivity.hh	/^    HalfedgeHandle heh(halfedge_handle(_vh));$/;"	p	signature:(_vh)
OpenMesh::PolyConnectivity::halfedges	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeRange halfedges() const { return ConstHalfedgeRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::halfedges_begin	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeIter halfedges_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::halfedges_begin	Mesh/PolyConnectivity.hh	/^  HalfedgeIter halfedges_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::halfedges_end	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeIter halfedges_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::halfedges_end	Mesh/PolyConnectivity.hh	/^  HalfedgeIter halfedges_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::halfedges_sbegin	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeIter halfedges_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::halfedges_sbegin	Mesh/PolyConnectivity.hh	/^  HalfedgeIter halfedges_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::insert_edge	Mesh/PolyConnectivity.cc	/^PolyConnectivity::insert_edge(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh)
OpenMesh::PolyConnectivity::insert_edge	Mesh/PolyConnectivity.hh	/^  HalfedgeHandle insert_edge(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh)
OpenMesh::PolyConnectivity::is_boundary	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_boundary(FaceHandle _fh, bool _check_vertex) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh, bool _check_vertex) const
OpenMesh::PolyConnectivity::is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh) const
OpenMesh::PolyConnectivity::is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(FaceHandle _fh, bool _check_vertex=false) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, bool _check_vertex=false) const
OpenMesh::PolyConnectivity::is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::PolyConnectivity::is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::is_collapse_ok	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_collapse_ok(HalfedgeHandle v0v1)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle v0v1)
OpenMesh::PolyConnectivity::is_collapse_ok	Mesh/PolyConnectivity.hh	/^  bool is_collapse_ok(HalfedgeHandle _he);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _he)
OpenMesh::PolyConnectivity::is_manifold	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_manifold(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::is_manifold	Mesh/PolyConnectivity.hh	/^  bool is_manifold(VertexHandle _vh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::is_simple_link	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_simple_link(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh) const
OpenMesh::PolyConnectivity::is_simple_link	Mesh/PolyConnectivity.hh	/^  bool is_simple_link(EdgeHandle _eh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh) const
OpenMesh::PolyConnectivity::is_simply_connected	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_simply_connected(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::is_simply_connected	Mesh/PolyConnectivity.hh	/^  bool is_simply_connected(FaceHandle _fh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::is_triangles	Mesh/PolyConnectivity.hh	/^  inline static bool is_triangles()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::next_cache_	Mesh/PolyConnectivity.hh	/^       std::vector<std::pair<HalfedgeHandle, HalfedgeHandle> > next_cache_; \/\/ cache for set_next_halfedge and vertex' set_halfedge$/;"	m	class:OpenMesh::PolyConnectivity	access:private
OpenMesh::PolyConnectivity::next_cache_count_	Mesh/PolyConnectivity.hh	/^       uint next_cache_count_;$/;"	m	class:OpenMesh::PolyConnectivity	access:private
OpenMesh::PolyConnectivity::opposite_face_handle	Mesh/PolyConnectivity.hh	/^  inline FaceHandle opposite_face_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::PolyConnectivity::reinsert_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::reinsert_edge(EdgeHandle _eh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh)
OpenMesh::PolyConnectivity::reinsert_edge	Mesh/PolyConnectivity.hh	/^  void reinsert_edge(EdgeHandle _eh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh)
OpenMesh::PolyConnectivity::remove_edge	Mesh/PolyConnectivity.cc	/^PolyConnectivity::remove_edge(EdgeHandle _eh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh)
OpenMesh::PolyConnectivity::remove_edge	Mesh/PolyConnectivity.hh	/^  FaceHandle remove_edge(EdgeHandle _eh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh)
OpenMesh::PolyConnectivity::split	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split(FaceHandle fh, VertexHandle vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle fh, VertexHandle vh)
OpenMesh::PolyConnectivity::split	Mesh/PolyConnectivity.hh	/^  void split(FaceHandle _fh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
OpenMesh::PolyConnectivity::split_copy	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split_copy(FaceHandle fh, VertexHandle vh) {$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle fh, VertexHandle vh)
OpenMesh::PolyConnectivity::split_copy	Mesh/PolyConnectivity.hh	/^  void split_copy(FaceHandle _fh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
OpenMesh::PolyConnectivity::split_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split_edge(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::PolyConnectivity::split_edge	Mesh/PolyConnectivity.hh	/^  void split_edge(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::PolyConnectivity::split_edge_copy	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split_edge_copy(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::PolyConnectivity::split_edge_copy	Mesh/PolyConnectivity.hh	/^  void split_edge_copy(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::PolyConnectivity::triangulate	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::triangulate()$/;"	f	class:OpenMesh::PolyConnectivity	signature:()
OpenMesh::PolyConnectivity::triangulate	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::triangulate(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::triangulate	Mesh/PolyConnectivity.hh	/^  void triangulate();$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::triangulate	Mesh/PolyConnectivity.hh	/^  void triangulate(FaceHandle _fh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyConnectivity::valence	Mesh/PolyConnectivity.cc	/^uint PolyConnectivity::valence(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::valence	Mesh/PolyConnectivity.cc	/^uint PolyConnectivity::valence(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::valence	Mesh/PolyConnectivity.hh	/^  uint valence(FaceHandle _fh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyConnectivity::valence	Mesh/PolyConnectivity.hh	/^  uint valence(VertexHandle _vh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyConnectivity::ve_begin	Mesh/PolyConnectivity.hh	/^  VertexEdgeIter ve_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::ve_end	Mesh/PolyConnectivity.hh	/^  VertexEdgeIter ve_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::ve_iter	Mesh/PolyConnectivity.hh	/^  VertexEdgeIter ve_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vertices	Mesh/PolyConnectivity.hh	/^  ConstVertexRange vertices() const { return ConstVertexRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::vertices_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexIter vertices_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::vertices_begin	Mesh/PolyConnectivity.hh	/^  VertexIter vertices_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::vertices_end	Mesh/PolyConnectivity.hh	/^  ConstVertexIter vertices_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::vertices_end	Mesh/PolyConnectivity.hh	/^  VertexIter vertices_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::vertices_sbegin	Mesh/PolyConnectivity.hh	/^  ConstVertexIter vertices_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
OpenMesh::PolyConnectivity::vertices_sbegin	Mesh/PolyConnectivity.hh	/^  VertexIter vertices_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyConnectivity::vf_begin	Mesh/PolyConnectivity.hh	/^  VertexFaceIter vf_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vf_end	Mesh/PolyConnectivity.hh	/^  VertexFaceIter vf_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vf_iter	Mesh/PolyConnectivity.hh	/^  VertexFaceIter vf_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vih_begin	Mesh/PolyConnectivity.hh	/^  VertexIHalfedgeIter vih_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vih_end	Mesh/PolyConnectivity.hh	/^  VertexIHalfedgeIter vih_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vih_iter	Mesh/PolyConnectivity.hh	/^  VertexIHalfedgeIter vih_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::voh_begin	Mesh/PolyConnectivity.hh	/^  VertexOHalfedgeIter voh_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::voh_end	Mesh/PolyConnectivity.hh	/^  VertexOHalfedgeIter voh_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::voh_iter	Mesh/PolyConnectivity.hh	/^  VertexOHalfedgeIter voh_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vv_begin	Mesh/PolyConnectivity.hh	/^  VertexVertexIter vv_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vv_end	Mesh/PolyConnectivity.hh	/^  VertexVertexIter vv_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::vv_iter	Mesh/PolyConnectivity.hh	/^  VertexVertexIter vv_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyConnectivity::~PolyConnectivity	Mesh/PolyConnectivity.hh	/^  virtual ~PolyConnectivity() {}$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
OpenMesh::PolyMeshT	Mesh/PolyMeshT.hh	/^class PolyMeshT : public Kernel$/;"	c	namespace:OpenMesh	inherits:Kernel
OpenMesh::PolyMeshT::Color	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Color     Color;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstEdgeIter              ConstEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstFaceEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceEdgeIter         ConstFaceEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstFaceFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceFaceIter         ConstFaceFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstFaceHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceHalfedgeIter     ConstFaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceIter              ConstFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstFaceVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstFaceVertexIter       ConstFaceVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstHalfedgeIter          ConstHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstVertexEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexEdgeIter       ConstVertexEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstVertexFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexFaceIter       ConstVertexFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstVertexIHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexIHalfedgeIter  ConstVertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexIter            ConstVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstVertexOHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexOHalfedgeIter  ConstVertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::ConstVertexVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::ConstVertexVertexIter     ConstVertexVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::Edge	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Edge      Edge;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::EdgeHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::EdgeHandle         EdgeHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::EdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::EdgeIter                   EdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::Face	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Face      Face;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::FaceEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceEdgeIter              FaceEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::FaceFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceFaceIter              FaceFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::FaceHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceHalfedgeIter          FaceHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::FaceHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceHandle         FaceHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::FaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceIter                   FaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::FaceVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::FaceVertexIter            FaceVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::Halfedge	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Halfedge  Halfedge;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::HalfedgeHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::HalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::HalfedgeIter               HalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::IsPolyMesh	Mesh/PolyMeshT.hh	/^  enum { IsPolyMesh = 1 };$/;"	e	enum:OpenMesh::PolyMeshT::__anon10
OpenMesh::PolyMeshT::IsTriMesh	Mesh/PolyMeshT.hh	/^  enum { IsTriMesh  = 0 };$/;"	e	enum:OpenMesh::PolyMeshT::__anon11
OpenMesh::PolyMeshT::Kernel::split	Mesh/PolyMeshT.hh	/^  { Kernel::split(_fh, _vh); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_fh, _vh)
OpenMesh::PolyMeshT::Kernel::split	Mesh/PolyMeshT.hh	/^  { Kernel::split(_fh, add_vertex(_p)); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_fh, add_vertex(_p))
OpenMesh::PolyMeshT::Kernel::split_edge	Mesh/PolyMeshT.hh	/^  { Kernel::split_edge(_eh, _vh); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_eh, _vh)
OpenMesh::PolyMeshT::Kernel::split_edge	Mesh/PolyMeshT.hh	/^  { Kernel::split_edge(_eh, add_vertex(_p)); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_eh, add_vertex(_p))
OpenMesh::PolyMeshT::Normal	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Normal    Normal;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::Point	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Point     Point;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::PolyMeshT	Mesh/PolyMeshT.hh	/^  PolyMeshT() {}$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMeshT::Scalar	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Scalar    Scalar;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::TexCoord1D	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::TexCoord1D  TexCoord1D;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::TexCoord2D	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::TexCoord2D  TexCoord2D;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::TexCoord3D	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::TexCoord3D  TexCoord3D;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::This	Mesh/PolyMeshT.hh	/^  typedef PolyMeshT<Kernel>                   This;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::Vertex	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Vertex    Vertex;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::VertexEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexEdgeIter            VertexEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::VertexFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexFaceIter            VertexFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::VertexHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexHandle       VertexHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::VertexIHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexIHalfedgeIter       VertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::VertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexIter                 VertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::VertexOHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexOHalfedgeIter       VertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::VertexVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexVertexIter          VertexVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
OpenMesh::PolyMeshT::add_vertex	Mesh/PolyMeshT.hh	/^  inline VertexHandle add_vertex(const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(const Point& _p)
OpenMesh::PolyMeshT::calc_dihedral_angle	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::PolyMeshT::calc_dihedral_angle	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::PolyMeshT::calc_dihedral_angle_fast	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle_fast(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::PolyMeshT::calc_dihedral_angle_fast	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle_fast(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::PolyMeshT::calc_edge_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_length(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::PolyMeshT::calc_edge_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_length(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::PolyMeshT::calc_edge_sqr_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_sqr_length(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
OpenMesh::PolyMeshT::calc_edge_sqr_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_sqr_length(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::PolyMeshT::calc_edge_vector	Mesh/PolyMeshT.hh	/^  void calc_edge_vector(EdgeHandle _eh, Normal& _edge_vec) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh, Normal& _edge_vec) const
OpenMesh::PolyMeshT::calc_edge_vector	Mesh/PolyMeshT.hh	/^  void calc_edge_vector(HalfedgeHandle _heh, Normal& _edge_vec) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, Normal& _edge_vec) const
OpenMesh::PolyMeshT::calc_face_centroid	Mesh/PolyMeshT.cc	/^calc_face_centroid(FaceHandle _fh, Point& _pt) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(FaceHandle _fh, Point& _pt) const
OpenMesh::PolyMeshT::calc_face_centroid	Mesh/PolyMeshT.hh	/^  void calc_face_centroid(FaceHandle _fh, Point& _pt) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh, Point& _pt) const
OpenMesh::PolyMeshT::calc_face_normal	Mesh/PolyMeshT.cc	/^calc_face_normal(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(FaceHandle _fh) const
OpenMesh::PolyMeshT::calc_face_normal	Mesh/PolyMeshT.cc	/^calc_face_normal(const Point& _p0,$/;"	f	class:OpenMesh::PolyMeshT	signature:(const Point& _p0, const Point& _p1, const Point& _p2) const
OpenMesh::PolyMeshT::calc_face_normal	Mesh/PolyMeshT.hh	/^      Normal f_n(calc_face_normal(fh));\/\/this normal is (for convex fh) OK$/;"	p	signature:(fh)
OpenMesh::PolyMeshT::calc_face_normal	Mesh/PolyMeshT.hh	/^  Normal calc_face_normal(const Point& _p0, const Point& _p1,$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(const Point& _p0, const Point& _p1, const Point& _p2) const
OpenMesh::PolyMeshT::calc_face_normal	Mesh/PolyMeshT.hh	/^  virtual Normal calc_face_normal(FaceHandle _fh) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh) const
OpenMesh::PolyMeshT::calc_halfedge_normal	Mesh/PolyMeshT.cc	/^calc_halfedge_normal(HalfedgeHandle _heh, const double _feature_angle) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(HalfedgeHandle _heh, const double _feature_angle) const
OpenMesh::PolyMeshT::calc_halfedge_normal	Mesh/PolyMeshT.hh	/^  virtual Normal calc_halfedge_normal(HalfedgeHandle _heh, const double _feature_angle = 0.8) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, const double _feature_angle = 0.8) const
OpenMesh::PolyMeshT::calc_sector_angle	Mesh/PolyMeshT.hh	/^  Scalar calc_sector_angle(HalfedgeHandle _in_heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh) const
OpenMesh::PolyMeshT::calc_sector_area	Mesh/PolyMeshT.hh	/^  Scalar calc_sector_area(HalfedgeHandle _in_heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh) const
OpenMesh::PolyMeshT::calc_sector_normal	Mesh/PolyMeshT.hh	/^  void calc_sector_normal(HalfedgeHandle _in_heh, Normal& _sector_normal) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh, Normal& _sector_normal) const
OpenMesh::PolyMeshT::calc_sector_vectors	Mesh/PolyMeshT.hh	/^  void calc_sector_vectors(HalfedgeHandle _in_heh, Normal& _vec0, Normal& _vec1) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh, Normal& _vec0, Normal& _vec1) const
OpenMesh::PolyMeshT::calc_vertex_normal	Mesh/PolyMeshT.cc	/^calc_vertex_normal(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh) const
OpenMesh::PolyMeshT::calc_vertex_normal	Mesh/PolyMeshT.hh	/^  Normal calc_vertex_normal(VertexHandle _vh) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh) const
OpenMesh::PolyMeshT::calc_vertex_normal_correct	Mesh/PolyMeshT.cc	/^calc_vertex_normal_correct(VertexHandle _vh, Normal& _n) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh, Normal& _n) const
OpenMesh::PolyMeshT::calc_vertex_normal_correct	Mesh/PolyMeshT.hh	/^  void calc_vertex_normal_correct(VertexHandle _vh, Normal& _n) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh, Normal& _n) const
OpenMesh::PolyMeshT::calc_vertex_normal_fast	Mesh/PolyMeshT.cc	/^calc_vertex_normal_fast(VertexHandle _vh, Normal& _n) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh, Normal& _n) const
OpenMesh::PolyMeshT::calc_vertex_normal_fast	Mesh/PolyMeshT.hh	/^  void calc_vertex_normal_fast(VertexHandle _vh, Normal& _n) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh, Normal& _n) const
OpenMesh::PolyMeshT::calc_vertex_normal_loop	Mesh/PolyMeshT.cc	/^calc_vertex_normal_loop(VertexHandle _vh, Normal& _n) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh, Normal& _n) const
OpenMesh::PolyMeshT::calc_vertex_normal_loop	Mesh/PolyMeshT.hh	/^  void calc_vertex_normal_loop(VertexHandle _vh, Normal& _n) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh, Normal& _n) const
OpenMesh::PolyMeshT::cos_a	Mesh/PolyMeshT.hh	/^    Scalar cos_a = dot(v0 , v1) \/ denom;$/;"	l
OpenMesh::PolyMeshT::da_cos	Mesh/PolyMeshT.hh	/^    Scalar da_cos = dot(n0, n1);$/;"	l
OpenMesh::PolyMeshT::da_cos	Mesh/PolyMeshT.hh	/^    Scalar da_cos = dot(n0, n1)\/denom;$/;"	l
OpenMesh::PolyMeshT::da_sin_sign	Mesh/PolyMeshT.hh	/^    Scalar da_sin_sign = dot(cross(n0, n1), he);$/;"	l
OpenMesh::PolyMeshT::denom	Mesh/PolyMeshT.hh	/^    Scalar denom = n0.norm()*n1.norm();$/;"	l
OpenMesh::PolyMeshT::denom	Mesh/PolyMeshT.hh	/^    Scalar denom = v0.norm()*v1.norm();$/;"	l
OpenMesh::PolyMeshT::edge_vec	Mesh/PolyMeshT.hh	/^    Normal edge_vec;$/;"	l
OpenMesh::PolyMeshT::fh	Mesh/PolyMeshT.hh	/^      FaceHandle fh(this->face_handle(this->opposite_halfedge_handle(_in_heh)));$/;"	p	signature:(this->face_handle(this->opposite_halfedge_handle(_in_heh)))
OpenMesh::PolyMeshT::find_feature_edges	Mesh/PolyMeshT.cc	/^uint PolyMeshT<Kernel>::find_feature_edges(Scalar _angle_tresh)$/;"	f	class:OpenMesh::PolyMeshT	signature:(Scalar _angle_tresh)
OpenMesh::PolyMeshT::find_feature_edges	Mesh/PolyMeshT.hh	/^  unsigned int find_feature_edges(Scalar _angle_tresh = OpenMesh::deg_to_rad(44.0));$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(Scalar _angle_tresh = OpenMesh::deg_to_rad(44.0))
OpenMesh::PolyMeshT::has_face_normals	Mesh/PolyMeshT.hh	/^    assert(Kernel::has_face_normals());$/;"	p	signature:()
OpenMesh::PolyMeshT::he	Mesh/PolyMeshT.hh	/^    Normal he;$/;"	l
OpenMesh::PolyMeshT::he	Mesh/PolyMeshT.hh	/^    Normal n0, n1, he;$/;"	l
OpenMesh::PolyMeshT::is_estimated_feature_edge	Mesh/PolyMeshT.cc	/^is_estimated_feature_edge(HalfedgeHandle _heh, const double _feature_angle) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(HalfedgeHandle _heh, const double _feature_angle) const
OpenMesh::PolyMeshT::is_estimated_feature_edge	Mesh/PolyMeshT.hh	/^  bool is_estimated_feature_edge(HalfedgeHandle _heh, const double _feature_angle) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, const double _feature_angle) const
OpenMesh::PolyMeshT::is_polymesh	Mesh/PolyMeshT.hh	/^  static bool is_polymesh() { return true;  }$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMeshT::is_trimesh	Mesh/PolyMeshT.hh	/^  static bool is_trimesh()  { return false; }$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMeshT::n0	Mesh/PolyMeshT.hh	/^    Normal n0, n1, he;$/;"	l
OpenMesh::PolyMeshT::n0	Mesh/PolyMeshT.hh	/^    const Normal& n0 = this->normal(this->face_handle(_heh));$/;"	l
OpenMesh::PolyMeshT::n1	Mesh/PolyMeshT.hh	/^    Normal n0, n1, he;$/;"	l
OpenMesh::PolyMeshT::n1	Mesh/PolyMeshT.hh	/^    const Normal& n1 = this->normal(this->face_handle(this->opposite_halfedge_handle(_heh)));$/;"	l
OpenMesh::PolyMeshT::new_vertex	Mesh/PolyMeshT.hh	/^    VertexHandle vh(Kernel::new_vertex());$/;"	p	signature:()
OpenMesh::PolyMeshT::new_vertex	Mesh/PolyMeshT.hh	/^  inline VertexHandle new_vertex()$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMeshT::new_vertex	Mesh/PolyMeshT.hh	/^  inline VertexHandle new_vertex(const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(const Point& _p)
OpenMesh::PolyMeshT::sector_normal	Mesh/PolyMeshT.hh	/^    Normal sector_normal;$/;"	l
OpenMesh::PolyMeshT::sign_a	Mesh/PolyMeshT.hh	/^      Scalar sign_a = dot(cross(v0, v1), f_n);$/;"	l
OpenMesh::PolyMeshT::split	Mesh/PolyMeshT.hh	/^  inline void split(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::PolyMeshT::split	Mesh/PolyMeshT.hh	/^  inline void split(EdgeHandle _eh, const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh, const Point& _p)
OpenMesh::PolyMeshT::split	Mesh/PolyMeshT.hh	/^  inline void split(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
OpenMesh::PolyMeshT::split	Mesh/PolyMeshT.hh	/^  inline void split(FaceHandle _fh, const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh, const Point& _p)
OpenMesh::PolyMeshT::update_face_normals	Mesh/PolyMeshT.cc	/^update_face_normals()$/;"	f	class:OpenMesh::PolyMeshT	signature:()
OpenMesh::PolyMeshT::update_face_normals	Mesh/PolyMeshT.hh	/^  void update_face_normals();$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMeshT::update_halfedge_normals	Mesh/PolyMeshT.cc	/^update_halfedge_normals(const double _feature_angle)$/;"	f	class:OpenMesh::PolyMeshT	signature:(const double _feature_angle)
OpenMesh::PolyMeshT::update_halfedge_normals	Mesh/PolyMeshT.hh	/^  void update_halfedge_normals(const double _feature_angle = 0.8);$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(const double _feature_angle = 0.8)
OpenMesh::PolyMeshT::update_normal	Mesh/PolyMeshT.hh	/^  void update_normal(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh)
OpenMesh::PolyMeshT::update_normal	Mesh/PolyMeshT.hh	/^  void update_normal(HalfedgeHandle _heh, const double _feature_angle = 0.8)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, const double _feature_angle = 0.8)
OpenMesh::PolyMeshT::update_normal	Mesh/PolyMeshT.hh	/^  void update_normal(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh)
OpenMesh::PolyMeshT::update_normals	Mesh/PolyMeshT.cc	/^update_normals()$/;"	f	class:OpenMesh::PolyMeshT	signature:()
OpenMesh::PolyMeshT::update_normals	Mesh/PolyMeshT.hh	/^  void update_normals();$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMeshT::update_vertex_normals	Mesh/PolyMeshT.cc	/^update_vertex_normals()$/;"	f	class:OpenMesh::PolyMeshT	signature:()
OpenMesh::PolyMeshT::update_vertex_normals	Mesh/PolyMeshT.hh	/^  void update_vertex_normals();$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMeshT::v0	Mesh/PolyMeshT.hh	/^    Normal v0, v1;$/;"	l
OpenMesh::PolyMeshT::v1	Mesh/PolyMeshT.hh	/^    Normal v0, v1;$/;"	l
OpenMesh::PolyMeshT::vec0	Mesh/PolyMeshT.hh	/^    Normal vec0, vec1;$/;"	l
OpenMesh::PolyMeshT::vec1	Mesh/PolyMeshT.hh	/^    Normal vec0, vec1;$/;"	l
OpenMesh::PolyMeshT::~PolyMeshT	Mesh/PolyMeshT.hh	/^  virtual ~PolyMeshT() {}$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
OpenMesh::PolyMesh_ArrayKernelT	Mesh/PolyMesh_ArrayKernelT.hh	/^class PolyMesh_ArrayKernelT$/;"	c	namespace:OpenMesh	inherits:PolyMesh_ArrayKernel_GeneratorT::Mesh
OpenMesh::PolyMesh_ArrayKernel_GeneratorT	Mesh/PolyMesh_ArrayKernelT.hh	/^struct PolyMesh_ArrayKernel_GeneratorT$/;"	s	namespace:OpenMesh
OpenMesh::PolyMesh_ArrayKernel_GeneratorT::AttribKernel	Mesh/PolyMesh_ArrayKernelT.hh	/^  typedef AttribKernelT<MeshItems, PolyConnectivity>  AttribKernel;$/;"	t	struct:OpenMesh::PolyMesh_ArrayKernel_GeneratorT	access:public
OpenMesh::PolyMesh_ArrayKernel_GeneratorT::Mesh	Mesh/PolyMesh_ArrayKernelT.hh	/^  typedef PolyMeshT<AttribKernel>                     Mesh;$/;"	t	struct:OpenMesh::PolyMesh_ArrayKernel_GeneratorT	access:public
OpenMesh::PolyMesh_ArrayKernel_GeneratorT::MeshItems	Mesh/PolyMesh_ArrayKernelT.hh	/^  typedef FinalMeshItemsT<Traits, false>              MeshItems;$/;"	t	struct:OpenMesh::PolyMesh_ArrayKernel_GeneratorT	access:public
OpenMesh::PropertyContainer	Utils/PropertyContainer.hh	/^class PropertyContainer$/;"	c	namespace:OpenMesh
OpenMesh::PropertyContainer::Properties	Utils/PropertyContainer.hh	/^  typedef std::vector<BaseProperty*> Properties;$/;"	t	class:OpenMesh::PropertyContainer	access:public
OpenMesh::PropertyContainer::PropertyContainer	Utils/PropertyContainer.hh	/^  PropertyContainer() {}$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:()
OpenMesh::PropertyContainer::PropertyContainer	Utils/PropertyContainer.hh	/^  PropertyContainer(const PropertyContainer& _rhs) { operator=(_rhs); }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const PropertyContainer& _rhs)
OpenMesh::PropertyContainer::_add	Utils/PropertyContainer.hh	/^  size_t _add( BaseProperty* _bp )$/;"	f	class:OpenMesh::PropertyContainer	access:protected	signature:( BaseProperty* _bp )
OpenMesh::PropertyContainer::_property	Utils/PropertyContainer.hh	/^  BaseProperty& _property( size_t _idx )$/;"	f	class:OpenMesh::PropertyContainer	access:protected	signature:( size_t _idx )
OpenMesh::PropertyContainer::add	Utils/PropertyContainer.hh	/^  BasePropHandleT<T> add(const T&, const std::string& _name="<unknown>")$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const T&, const std::string& _name=Ó)
OpenMesh::PropertyContainer::clear	Utils/PropertyContainer.hh	/^  void clear()$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:()
OpenMesh::PropertyContainer::handle	Utils/PropertyContainer.hh	/^  BasePropHandleT<T> handle(const T&, const std::string& _name) const$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const T&, const std::string& _name) const
OpenMesh::PropertyContainer::idx	Utils/PropertyContainer.hh	/^    int idx=0;$/;"	l
OpenMesh::PropertyContainer::idx	Utils/PropertyContainer.hh	/^    size_t idx=0;$/;"	l
OpenMesh::PropertyContainer::n_	Utils/PropertyContainer.hh	/^    size_t n_;$/;"	m	class:OpenMesh::PropertyContainer	access:protected
OpenMesh::PropertyContainer::operator =	Utils/PropertyContainer.hh	/^  PropertyContainer& operator=(const PropertyContainer& _rhs)$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const PropertyContainer& _rhs)
OpenMesh::PropertyContainer::p_end	Utils/PropertyContainer.hh	/^    Properties::iterator p_it=properties_.begin(), p_end=properties_.end();$/;"	l
OpenMesh::PropertyContainer::p_it	Utils/PropertyContainer.hh	/^    Properties::const_iterator p_it = properties_.begin();$/;"	l
OpenMesh::PropertyContainer::p_it	Utils/PropertyContainer.hh	/^    Properties::iterator p_it=properties_.begin(), p_end=properties_.end();$/;"	l
OpenMesh::PropertyContainer::properties	Utils/PropertyContainer.hh	/^  const Properties& properties() const { return properties_; }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:() const
OpenMesh::PropertyContainer::property	Utils/PropertyContainer.hh	/^  BaseProperty* property( const std::string& _name ) const$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:( const std::string& _name ) const
OpenMesh::PropertyContainer::property	Utils/PropertyContainer.hh	/^  template <class T> PropertyT<T>& property(BasePropHandleT<T> _h)$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(BasePropHandleT<T> _h)
OpenMesh::PropertyContainer::property	Utils/PropertyContainer.hh	/^  template <class T> const PropertyT<T>& property(BasePropHandleT<T> _h) const$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(BasePropHandleT<T> _h) const
OpenMesh::PropertyContainer::push_back	Utils/PropertyContainer.hh	/^    if (p_it==p_end) properties_.push_back(NULL);$/;"	p	signature:(NULL)
OpenMesh::PropertyContainer::remove	Utils/PropertyContainer.hh	/^  template <class T> void remove(BasePropHandleT<T> _h)$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(BasePropHandleT<T> _h)
OpenMesh::PropertyContainer::reserve	Utils/PropertyContainer.hh	/^  void reserve(size_t _n) const {$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(size_t _n) const
OpenMesh::PropertyContainer::resize	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->resize(n_); }$/;"	p	signature:(n_)
OpenMesh::PropertyContainer::resize	Utils/PropertyContainer.hh	/^  void resize(size_t _n) const {$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(size_t _n) const
OpenMesh::PropertyContainer::size	Utils/PropertyContainer.hh	/^  size_t size() const { return properties_.size(); }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:() const
OpenMesh::PropertyContainer::std::for_each	Utils/PropertyContainer.hh	/^	std::for_each(properties_.begin(), properties_.end(), ClearAll());$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), ClearAll())
OpenMesh::PropertyContainer::std::for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Delete());$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Delete())
OpenMesh::PropertyContainer::std::for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Reserve(_n));$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Reserve(_n))
OpenMesh::PropertyContainer::std::for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Resize(_n));$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Resize(_n))
OpenMesh::PropertyContainer::std::for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Swap(_i0, _i1));$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Swap(_i0, _i1))
OpenMesh::PropertyContainer::std::for_each	Utils/PropertyContainer.hh	/^  virtual ~PropertyContainer() { std::for_each(properties_.begin(), properties_.end(), Delete()); }$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Delete())
OpenMesh::PropertyContainer::swap	Utils/PropertyContainer.hh	/^  void swap(size_t _i0, size_t _i1) const {$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(size_t _i0, size_t _i1) const
OpenMesh::PropertyContainer::~PropertyContainer	Utils/PropertyContainer.hh	/^  virtual ~PropertyContainer() { std::for_each(properties_.begin(), properties_.end(), Delete()); }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:()
OpenMesh::PropertyManager	Utils/PropertyManager.hh	/^class PropertyManager {$/;"	c	namespace:OpenMesh
OpenMesh::PropertyManager::PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(MeshT &mesh, const char *propname, bool existing = false) : mesh_(&mesh), retain_(existing) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname, bool existing = false)
OpenMesh::PropertyManager::PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(PropertyManager &&rhs) : mesh_(rhs.mesh_), prop_(rhs.prop_), retain_(rhs.retain_) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(PropertyManager &&rhs)
OpenMesh::PropertyManager::PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(Proxy p) : mesh_(p.mesh_), prop_(p.prop_), retain_(p.retain_) {}$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(Proxy p)
OpenMesh::PropertyManager::PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(const PropertyManager&);$/;"	p	class:OpenMesh::PropertyManager	access:private	signature:(const PropertyManager&)
OpenMesh::PropertyManager::Proxy	Utils/PropertyManager.hh	/^        class Proxy {$/;"	c	class:OpenMesh::PropertyManager	access:public
OpenMesh::PropertyManager::Proxy::Proxy	Utils/PropertyManager.hh	/^                Proxy(MeshT *mesh_, PROPTYPE prop_, bool retain_) :$/;"	f	class:OpenMesh::PropertyManager::Proxy	access:private	signature:(MeshT *mesh_, PROPTYPE prop_, bool retain_)
OpenMesh::PropertyManager::Proxy::mesh_	Utils/PropertyManager.hh	/^                MeshT *mesh_;$/;"	m	class:OpenMesh::PropertyManager::Proxy	access:private
OpenMesh::PropertyManager::Proxy::prop_	Utils/PropertyManager.hh	/^                PROPTYPE prop_;$/;"	m	class:OpenMesh::PropertyManager::Proxy	access:private
OpenMesh::PropertyManager::Proxy::retain_	Utils/PropertyManager.hh	/^                bool retain_;$/;"	m	class:OpenMesh::PropertyManager::Proxy	access:private
OpenMesh::PropertyManager::add_property	Utils/PropertyManager.hh	/^                mesh_->add_property(prop_, propname);$/;"	p	signature:(prop_, propname)
OpenMesh::PropertyManager::createIfNotExists	Utils/PropertyManager.hh	/^        static PropertyManager createIfNotExists(MeshT &mesh, const char *propname) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname)
OpenMesh::PropertyManager::createIfNotExists	Utils/PropertyManager.hh	/^        static Proxy createIfNotExists(MeshT &mesh, const char *propname) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname)
OpenMesh::PropertyManager::deleteProperty	Utils/PropertyManager.hh	/^        void deleteProperty() {$/;"	f	class:OpenMesh::PropertyManager	access:private	signature:()
OpenMesh::PropertyManager::dummy	Utils/PropertyManager.hh	/^            PROPTYPE dummy;$/;"	l
OpenMesh::PropertyManager::dummy_prop	Utils/PropertyManager.hh	/^            PROPTYPE dummy_prop;$/;"	l
OpenMesh::PropertyManager::mesh_	Utils/PropertyManager.hh	/^        MeshT *mesh_;$/;"	m	class:OpenMesh::PropertyManager	access:private
OpenMesh::PropertyManager::operator *	Utils/PropertyManager.hh	/^        inline PROPTYPE &operator* () {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:()
OpenMesh::PropertyManager::operator *	Utils/PropertyManager.hh	/^        inline const PROPTYPE &operator* () const {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:() const
OpenMesh::PropertyManager::operator =	Utils/PropertyManager.hh	/^        PropertyManager &operator=(PropertyManager &&rhs) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(PropertyManager &&rhs)
OpenMesh::PropertyManager::operator =	Utils/PropertyManager.hh	/^        PropertyManager &operator=(Proxy p) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(Proxy p)
OpenMesh::PropertyManager::operator =	Utils/PropertyManager.hh	/^        const PropertyManager& operator=(const PropertyManager&);$/;"	p	class:OpenMesh::PropertyManager	access:private	signature:(const PropertyManager&)
OpenMesh::PropertyManager::operator Proxy	Utils/PropertyManager.hh	/^        operator Proxy() {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:()
OpenMesh::PropertyManager::operator []	Utils/PropertyManager.hh	/^        inline typename PROPTYPE::const_reference operator[] (const HandleType &handle) const {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(const HandleType &handle) const
OpenMesh::PropertyManager::operator []	Utils/PropertyManager.hh	/^        inline typename PROPTYPE::reference operator[] (const HandleType &handle) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(const HandleType &handle)
OpenMesh::PropertyManager::oss	Utils/PropertyManager.hh	/^                    std::ostringstream oss;$/;"	l
OpenMesh::PropertyManager::p	Utils/PropertyManager.hh	/^            Proxy p(mesh_, prop_, retain_);$/;"	p	signature:(mesh_, prop_, retain_)
OpenMesh::PropertyManager::pm	Utils/PropertyManager.hh	/^            PropertyManager pm(mesh, propname, mesh.get_property_handle(dummy_prop, propname));$/;"	p	signature:(mesh, propname, mesh.get_property_handle(dummy_prop, propname))
OpenMesh::PropertyManager::prop_	Utils/PropertyManager.hh	/^        PROPTYPE prop_;$/;"	m	class:OpenMesh::PropertyManager	access:private
OpenMesh::PropertyManager::propertyExists	Utils/PropertyManager.hh	/^        static bool propertyExists(MeshT &mesh, const char *propname) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname)
OpenMesh::PropertyManager::propname	Utils/PropertyManager.hh	/^                    oss << "Requested property handle \\"" << propname << "\\" does not exist.";$/;"	l
OpenMesh::PropertyManager::remove_property	Utils/PropertyManager.hh	/^                mesh_->remove_property(prop_);$/;"	p	signature:(prop_)
OpenMesh::PropertyManager::retain	Utils/PropertyManager.hh	/^            pm.retain();$/;"	p	signature:()
OpenMesh::PropertyManager::retain	Utils/PropertyManager.hh	/^        inline void retain(bool doRetain = true) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(bool doRetain = true)
OpenMesh::PropertyManager::retain_	Utils/PropertyManager.hh	/^        bool retain_;$/;"	m	class:OpenMesh::PropertyManager	access:private
OpenMesh::PropertyManager::std::runtime_error	Utils/PropertyManager.hh	/^                    throw std::runtime_error(oss.str());$/;"	p	class:OpenMesh::PropertyManager::std	signature:(oss.str())
OpenMesh::PropertyManager::std::swap	Utils/PropertyManager.hh	/^            std::swap(mesh_, rhs.mesh_);$/;"	p	class:OpenMesh::PropertyManager::std	signature:(mesh_, rhs.mesh_)
OpenMesh::PropertyManager::std::swap	Utils/PropertyManager.hh	/^            std::swap(prop_, rhs.prop_);$/;"	p	class:OpenMesh::PropertyManager::std	signature:(prop_, rhs.prop_)
OpenMesh::PropertyManager::std::swap	Utils/PropertyManager.hh	/^            std::swap(retain_, rhs.retain_);$/;"	p	class:OpenMesh::PropertyManager::std	signature:(retain_, rhs.retain_)
OpenMesh::PropertyManager::swap	Utils/PropertyManager.hh	/^        void swap(PropertyManager &rhs) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(PropertyManager &rhs)
OpenMesh::PropertyManager::~PropertyManager	Utils/PropertyManager.hh	/^        ~PropertyManager() {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:()
OpenMesh::PropertyT	Utils/Property.hh	/^class PropertyT : public BaseProperty$/;"	c	namespace:OpenMesh	inherits:BaseProperty
OpenMesh::PropertyT	Utils/Property.hh	/^class PropertyT<bool> : public BaseProperty$/;"	c	namespace:OpenMesh	inherits:BaseProperty
OpenMesh::PropertyT	Utils/Property.hh	/^class PropertyT<std::string> : public BaseProperty$/;"	c	namespace:OpenMesh	inherits:BaseProperty
OpenMesh::PropertyT::N	Utils/Property.hh	/^    size_t N = data_.size() \/ 8;$/;"	l
OpenMesh::PropertyT::PropertyT	Utils/Property.hh	/^  PropertyT(const PropertyT & _rhs)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(const PropertyT & _rhs)
OpenMesh::PropertyT::PropertyT	Utils/Property.hh	/^  PropertyT(const std::string& _name = "<unknown>")$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(const std::string& _name = Ó)
OpenMesh::PropertyT::R	Utils/Property.hh	/^    size_t R = data_.size() % 8;$/;"	l
OpenMesh::PropertyT::T	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(T()); }$/;"	p	signature:()
OpenMesh::PropertyT::Value	Utils/Property.hh	/^  typedef T                                       Value;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::Value	Utils/Property.hh	/^  typedef std::string                             Value;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::bidx	Utils/Property.hh	/^    size_t        bidx; \/\/$/;"	l
OpenMesh::PropertyT::bidx	Utils/Property.hh	/^    size_t        bidx;$/;"	l
OpenMesh::PropertyT::bits	Utils/Property.hh	/^      _istr >> bits;$/;"	l
OpenMesh::PropertyT::bits	Utils/Property.hh	/^      _ostr << bits;$/;"	l
OpenMesh::PropertyT::bits	Utils/Property.hh	/^    unsigned char bits; \/\/ bitset$/;"	l
OpenMesh::PropertyT::bool	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(bool()); }$/;"	p	signature:()
OpenMesh::PropertyT::bytes	Utils/Property.hh	/^    size_t bytes = 0;$/;"	l
OpenMesh::PropertyT::clear	Utils/Property.hh	/^  virtual void clear()  { data_.clear(); vector_type().swap(data_);    }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
OpenMesh::PropertyT::clear	Utils/Property.hh	/^  virtual void clear()  { data_.clear(); vector_type().swap(data_);    }$/;"	p	signature:()
OpenMesh::PropertyT::clone	Utils/Property.hh	/^  PropertyT<T>* clone() const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::clone	Utils/Property.hh	/^  PropertyT<bool>* clone() const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::clone	Utils/Property.hh	/^  PropertyT<value_type>* clone() const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::const_reference	Utils/Property.hh	/^  typedef typename vector_type::const_reference   const_reference;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::const_reference	Utils/Property.hh	/^  typedef vector_type::const_reference            const_reference;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::copy	Utils/Property.hh	/^  virtual void copy(size_t _i0, size_t _i1)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _i0, size_t _i1)
OpenMesh::PropertyT::data	Utils/Property.hh	/^  const T* data() const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::data	Utils/Property.hh	/^  const value_type* data() const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::data_	Utils/Property.hh	/^  vector_type data_;$/;"	m	class:OpenMesh::PropertyT	access:private
OpenMesh::PropertyT::data_vector	Utils/Property.hh	/^  vector_type& data_vector() {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
OpenMesh::PropertyT::element_size	Utils/Property.hh	/^  virtual size_t       element_size() const { return IO::size_of<T>(); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::element_size	Utils/Property.hh	/^  virtual size_t       element_size() const { return UnknownSize;    }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::idx	Utils/Property.hh	/^    size_t        idx;  \/\/ element index$/;"	l
OpenMesh::PropertyT::n_elements	Utils/Property.hh	/^  virtual size_t       n_elements()   const { return data_.size();  }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::n_elements	Utils/Property.hh	/^  virtual size_t       n_elements()   const { return data_.size(); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::operator []	Utils/Property.hh	/^  const_reference operator[](int _idx) const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx) const
OpenMesh::PropertyT::operator []	Utils/Property.hh	/^  const_reference operator[](int _idx) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx) const
OpenMesh::PropertyT::operator []	Utils/Property.hh	/^  reference operator[](int _idx) {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx)
OpenMesh::PropertyT::operator []	Utils/Property.hh	/^  reference operator[](int _idx)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx)
OpenMesh::PropertyT::p	Utils/Property.hh	/^    PropertyT<T>* p = new PropertyT<T>( *this );$/;"	l
OpenMesh::PropertyT::p	Utils/Property.hh	/^    PropertyT<bool>* p = new PropertyT<bool>( *this );$/;"	l
OpenMesh::PropertyT::p	Utils/Property.hh	/^    PropertyT<value_type>* p = new PropertyT<value_type>( *this );$/;"	l
OpenMesh::PropertyT::plus	Utils/Property.hh	/^  struct plus {$/;"	s	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::plus::operator ()	Utils/Property.hh	/^    size_t operator () ( size_t _b, const T& _v )$/;"	f	struct:OpenMesh::PropertyT::plus	access:public	signature:( size_t _b, const T& _v )
OpenMesh::PropertyT::push_back	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(T()); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
OpenMesh::PropertyT::push_back	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(bool()); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
OpenMesh::PropertyT::push_back	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(std::string()); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
OpenMesh::PropertyT::reference	Utils/Property.hh	/^  typedef typename vector_type::reference         reference;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::reference	Utils/Property.hh	/^  typedef vector_type::reference                  reference;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::reserve	Utils/Property.hh	/^  virtual void reserve(size_t _n) { data_.reserve(_n);    }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n)
OpenMesh::PropertyT::reserve	Utils/Property.hh	/^  virtual void reserve(size_t _n) { data_.reserve(_n);    }$/;"	p	signature:(_n)
OpenMesh::PropertyT::resize	Utils/Property.hh	/^  virtual void resize(size_t _n)  { data_.resize(_n);     }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n)
OpenMesh::PropertyT::resize	Utils/Property.hh	/^  virtual void resize(size_t _n)  { data_.resize(_n);     }$/;"	p	signature:(_n)
OpenMesh::PropertyT::restore	Utils/Property.hh	/^  size_t restore( std::istream& _istr, bool \/* _swap *\/ )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::istream& _istr, bool )
OpenMesh::PropertyT::restore	Utils/Property.hh	/^  size_t restore( std::istream& _istr, bool _swap )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::istream& _istr, bool _swap )
OpenMesh::PropertyT::restore	Utils/Property.hh	/^  virtual size_t restore( std::istream& _istr, bool _swap )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::istream& _istr, bool _swap )
OpenMesh::PropertyT::set_persistent	Utils/Property.hh	/^  virtual void set_persistent( bool _yn )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( bool _yn )
OpenMesh::PropertyT::size	Utils/Property.hh	/^    assert( size_t(_idx) < data_.size() );$/;"	p	signature:()
OpenMesh::PropertyT::size	Utils/Property.hh	/^    assert( size_t(_idx) < data_.size());$/;"	p	signature:()
OpenMesh::PropertyT::size_of	Utils/Property.hh	/^  virtual size_t       size_of() const      { return size_of( n_elements() ); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::size_of	Utils/Property.hh	/^  virtual size_t       size_of() const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
OpenMesh::PropertyT::size_of	Utils/Property.hh	/^  virtual size_t       size_of(size_t \/* _n_elem *\/) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t ) const
OpenMesh::PropertyT::size_of	Utils/Property.hh	/^  virtual size_t       size_of(size_t _n_elem) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n_elem) const
OpenMesh::PropertyT::size_of	Utils/Property.hh	/^  virtual size_t size_of(size_t _n_elem) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n_elem) const
OpenMesh::PropertyT::size_of	Utils/Property.hh	/^  virtual size_t size_of(void) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(void) const
OpenMesh::PropertyT::std::endl	Utils/Property.hh	/^    std::cout << std::endl;$/;"	m	class:OpenMesh::PropertyT::std
OpenMesh::PropertyT::std::swap	Utils/Property.hh	/^    std::swap(data_[_i0], data_[_i1]);$/;"	p	class:OpenMesh::PropertyT::std	signature:(data_[_i0], data_[_i1])
OpenMesh::PropertyT::std::swap	Utils/Property.hh	/^  { std::swap(data_[_i0], data_[_i1]); }$/;"	p	class:OpenMesh::PropertyT::std	signature:(data_[_i0], data_[_i1])
OpenMesh::PropertyT::store	Utils/Property.hh	/^  size_t store( std::ostream& _ostr, bool \/* _swap *\/ ) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::ostream& _ostr, bool ) const
OpenMesh::PropertyT::store	Utils/Property.hh	/^  size_t store( std::ostream& _ostr, bool _swap ) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::ostream& _ostr, bool _swap ) const
OpenMesh::PropertyT::store	Utils/Property.hh	/^  virtual size_t store( std::ostream& _ostr, bool _swap ) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::ostream& _ostr, bool _swap ) const
OpenMesh::PropertyT::string	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(std::string()); }$/;"	p	signature:()
OpenMesh::PropertyT::swap	Utils/Property.hh	/^  virtual void swap(size_t _i0, size_t _i1) {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _i0, size_t _i1)
OpenMesh::PropertyT::swap	Utils/Property.hh	/^  virtual void swap(size_t _i0, size_t _i1)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _i0, size_t _i1)
OpenMesh::PropertyT::t	Utils/Property.hh	/^  { bool t(data_[_i0]); data_[_i0]=data_[_i1]; data_[_i1]=t; }$/;"	p	signature:(data_[_i0])
OpenMesh::PropertyT::value_type	Utils/Property.hh	/^  typedef T                                       value_type;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::value_type	Utils/Property.hh	/^  typedef bool                                    value_type;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::value_type	Utils/Property.hh	/^  typedef std::string                             value_type;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::vector_type	Utils/Property.hh	/^  typedef std::vector<T>                          vector_type;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::vector_type	Utils/Property.hh	/^  typedef std::vector<bool>                       vector_type;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::PropertyT::vector_type	Utils/Property.hh	/^  typedef std::vector<std::string>                vector_type;$/;"	t	class:OpenMesh::PropertyT	access:public
OpenMesh::RandomNumberGenerator	Utils/RandomNumberGenerator.hh	/^class OPENMESHDLLEXPORT RandomNumberGenerator$/;"	c	namespace:OpenMesh
OpenMesh::RandomNumberGenerator::RandomNumberGenerator	Utils/RandomNumberGenerator.cc	/^RandomNumberGenerator::RandomNumberGenerator(const double _resolution) :$/;"	f	class:OpenMesh::RandomNumberGenerator	signature:(const double _resolution)
OpenMesh::RandomNumberGenerator::RandomNumberGenerator	Utils/RandomNumberGenerator.hh	/^  RandomNumberGenerator(const double _resolution);$/;"	p	class:OpenMesh::RandomNumberGenerator	access:public	signature:(const double _resolution)
OpenMesh::RandomNumberGenerator::getRand	Utils/RandomNumberGenerator.cc	/^double RandomNumberGenerator::getRand() const {$/;"	f	class:OpenMesh::RandomNumberGenerator	signature:() const
OpenMesh::RandomNumberGenerator::getRand	Utils/RandomNumberGenerator.hh	/^  double getRand() const;$/;"	p	class:OpenMesh::RandomNumberGenerator	access:public	signature:() const
OpenMesh::RandomNumberGenerator::iterations_	Utils/RandomNumberGenerator.hh	/^  unsigned int iterations_;$/;"	m	class:OpenMesh::RandomNumberGenerator	access:private
OpenMesh::RandomNumberGenerator::maxNum_	Utils/RandomNumberGenerator.hh	/^  double maxNum_;$/;"	m	class:OpenMesh::RandomNumberGenerator	access:private
OpenMesh::RandomNumberGenerator::resolution	Utils/RandomNumberGenerator.cc	/^double RandomNumberGenerator::resolution() const {$/;"	f	class:OpenMesh::RandomNumberGenerator	signature:() const
OpenMesh::RandomNumberGenerator::resolution	Utils/RandomNumberGenerator.hh	/^  double resolution() const;$/;"	p	class:OpenMesh::RandomNumberGenerator	access:public	signature:() const
OpenMesh::RandomNumberGenerator::resolution_	Utils/RandomNumberGenerator.hh	/^  const double resolution_;$/;"	m	class:OpenMesh::RandomNumberGenerator	access:private
OpenMesh::SingletonT	Utils/SingletonT.hh	/^class SingletonT$/;"	c	namespace:OpenMesh
OpenMesh::SingletonT::Create	Utils/SingletonT.hh	/^  static void Create()$/;"	f	class:OpenMesh::SingletonT	access:private	signature:()
OpenMesh::SingletonT::Instance	Utils/SingletonT.hh	/^  static T& Instance()$/;"	f	class:OpenMesh::SingletonT	access:public	signature:()
OpenMesh::SingletonT::OnDeadReference	Utils/SingletonT.hh	/^  static void OnDeadReference()$/;"	f	class:OpenMesh::SingletonT	access:private	signature:()
OpenMesh::SingletonT::SingletonT	Utils/SingletonT.hh	/^  SingletonT();$/;"	p	class:OpenMesh::SingletonT	access:private	signature:()
OpenMesh::SingletonT::SingletonT	Utils/SingletonT.hh	/^  SingletonT(const SingletonT&);$/;"	p	class:OpenMesh::SingletonT	access:private	signature:(const SingletonT&)
OpenMesh::SingletonT::destroyed__	Utils/SingletonT.cc	/^bool SingletonT<T>::destroyed__ = false;$/;"	m	class:OpenMesh::SingletonT	file:
OpenMesh::SingletonT::destroyed__	Utils/SingletonT.hh	/^  static bool   destroyed__;$/;"	m	class:OpenMesh::SingletonT	access:private
OpenMesh::SingletonT::operator =	Utils/SingletonT.hh	/^  SingletonT& operator=(const SingletonT&);$/;"	p	class:OpenMesh::SingletonT	access:private	signature:(const SingletonT&)
OpenMesh::SingletonT::pInstance__	Utils/SingletonT.cc	/^T* SingletonT<T>::pInstance__ = 0;$/;"	m	class:OpenMesh::SingletonT	file:
OpenMesh::SingletonT::pInstance__	Utils/SingletonT.hh	/^  static T*     pInstance__;$/;"	m	class:OpenMesh::SingletonT	access:private
OpenMesh::SingletonT::theInstance	Utils/SingletonT.hh	/^    static T theInstance;$/;"	l
OpenMesh::SingletonT::~SingletonT	Utils/SingletonT.hh	/^  virtual ~SingletonT()$/;"	f	class:OpenMesh::SingletonT	access:private	signature:()
OpenMesh::Swap	Utils/PropertyContainer.hh	/^  struct Swap$/;"	s	namespace:OpenMesh
OpenMesh::Swap::Swap	Utils/PropertyContainer.hh	/^    Swap(size_t _i0, size_t _i1) : i0_(_i0), i1_(_i1) {}$/;"	f	struct:OpenMesh::Swap	access:public	signature:(size_t _i0, size_t _i1)
OpenMesh::Swap::i0_	Utils/PropertyContainer.hh	/^    size_t i0_, i1_;$/;"	m	struct:OpenMesh::Swap	access:public
OpenMesh::Swap::i1_	Utils/PropertyContainer.hh	/^    size_t i0_, i1_;$/;"	m	struct:OpenMesh::Swap	access:public
OpenMesh::Swap::operator ()	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->swap(i0_, i1_); }$/;"	f	struct:OpenMesh::Swap	access:public	signature:(BaseProperty* _p) const
OpenMesh::Swap::swap	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->swap(i0_, i1_); }$/;"	p	signature:(i0_, i1_)
OpenMesh::TRIMESH_CAST	Mesh/Casts.hh	/^inline TriMesh_ArrayKernelT<Traits>& TRIMESH_CAST(PolyMesh_ArrayKernelT<Traits>& _poly_mesh)$/;"	f	namespace:OpenMesh	signature:(PolyMesh_ArrayKernelT<Traits>& _poly_mesh)
OpenMesh::TRIMESH_CAST	Mesh/Casts.hh	/^inline const TriMesh_ArrayKernelT<Traits>& TRIMESH_CAST(const PolyMesh_ArrayKernelT<Traits>& _poly_mesh)$/;"	f	namespace:OpenMesh	signature:(const PolyMesh_ArrayKernelT<Traits>& _poly_mesh)
OpenMesh::TriConnectivity	Mesh/TriConnectivity.hh	/^class OPENMESHDLLEXPORT TriConnectivity : public PolyConnectivity$/;"	c	namespace:OpenMesh	inherits:PolyConnectivity
OpenMesh::TriConnectivity::PolyConnectivity::assign_connectivity	Mesh/TriConnectivity.hh	/^    PolyConnectivity::assign_connectivity(_other); $/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_other)
OpenMesh::TriConnectivity::PolyConnectivity::assign_connectivity	Mesh/TriConnectivity.hh	/^  { PolyConnectivity::assign_connectivity(_other); }$/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_other)
OpenMesh::TriConnectivity::PolyConnectivity::split	Mesh/TriConnectivity.hh	/^  { PolyConnectivity::split(_fh, _vh); }$/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_fh, _vh)
OpenMesh::TriConnectivity::PolyConnectivity::split_copy	Mesh/TriConnectivity.hh	/^  { PolyConnectivity::split_copy(_fh, _vh); }$/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_fh, _vh)
OpenMesh::TriConnectivity::TriConnectivity	Mesh/TriConnectivity.hh	/^  TriConnectivity() {}$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:()
OpenMesh::TriConnectivity::add_face	Mesh/TriConnectivity.cc	/^FaceHandle TriConnectivity::add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)$/;"	f	class:OpenMesh::TriConnectivity	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
OpenMesh::TriConnectivity::add_face	Mesh/TriConnectivity.cc	/^FaceHandle TriConnectivity::add_face(const std::vector<VertexHandle>& _vhandles)$/;"	f	class:OpenMesh::TriConnectivity	signature:(const std::vector<VertexHandle>& _vhandles)
OpenMesh::TriConnectivity::add_face	Mesh/TriConnectivity.cc	/^TriConnectivity::add_face(const VertexHandle* _vertex_handles, size_t _vhs_size)$/;"	f	class:OpenMesh::TriConnectivity	signature:(const VertexHandle* _vertex_handles, size_t _vhs_size)
OpenMesh::TriConnectivity::add_face	Mesh/TriConnectivity.hh	/^  FaceHandle add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
OpenMesh::TriConnectivity::add_face	Mesh/TriConnectivity.hh	/^  FaceHandle add_face(const VertexHandle* _vhandles, size_t _vhs_size);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(const VertexHandle* _vhandles, size_t _vhs_size)
OpenMesh::TriConnectivity::add_face	Mesh/TriConnectivity.hh	/^  FaceHandle add_face(const std::vector<VertexHandle>& _vhandles);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(const std::vector<VertexHandle>& _vhandles)
OpenMesh::TriConnectivity::assign_connectivity	Mesh/TriConnectivity.hh	/^  inline void assign_connectivity(const PolyConnectivity& _other)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(const PolyConnectivity& _other)
OpenMesh::TriConnectivity::assign_connectivity	Mesh/TriConnectivity.hh	/^  inline void assign_connectivity(const TriConnectivity& _other)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(const TriConnectivity& _other)
OpenMesh::TriConnectivity::flip	Mesh/TriConnectivity.cc	/^void TriConnectivity::flip(EdgeHandle _eh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh)
OpenMesh::TriConnectivity::flip	Mesh/TriConnectivity.hh	/^  void flip(EdgeHandle _eh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh)
OpenMesh::TriConnectivity::insert_edge	Mesh/TriConnectivity.cc	/^TriConnectivity::insert_edge(VertexHandle _vh, HalfedgeHandle _h0, HalfedgeHandle _h1)$/;"	f	class:OpenMesh::TriConnectivity	signature:(VertexHandle _vh, HalfedgeHandle _h0, HalfedgeHandle _h1)
OpenMesh::TriConnectivity::insert_edge	Mesh/TriConnectivity.hh	/^  HalfedgeHandle insert_edge(VertexHandle _vh,$/;"	p	class:OpenMesh::TriConnectivity	access:private	signature:(VertexHandle _vh, HalfedgeHandle _h0, HalfedgeHandle _h1)
OpenMesh::TriConnectivity::insert_loop	Mesh/TriConnectivity.cc	/^TriConnectivity::insert_loop(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(HalfedgeHandle _hh)
OpenMesh::TriConnectivity::insert_loop	Mesh/TriConnectivity.hh	/^  HalfedgeHandle insert_loop(HalfedgeHandle _hh);$/;"	p	class:OpenMesh::TriConnectivity	access:private	signature:(HalfedgeHandle _hh)
OpenMesh::TriConnectivity::is_collapse_ok	Mesh/TriConnectivity.cc	/^bool TriConnectivity::is_collapse_ok(HalfedgeHandle v0v1)$/;"	f	class:OpenMesh::TriConnectivity	signature:(HalfedgeHandle v0v1)
OpenMesh::TriConnectivity::is_collapse_ok	Mesh/TriConnectivity.hh	/^  bool is_collapse_ok(HalfedgeHandle _heh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(HalfedgeHandle _heh)
OpenMesh::TriConnectivity::is_flip_ok	Mesh/TriConnectivity.cc	/^bool TriConnectivity::is_flip_ok(EdgeHandle _eh) const$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh) const
OpenMesh::TriConnectivity::is_flip_ok	Mesh/TriConnectivity.hh	/^  bool is_flip_ok(EdgeHandle _eh) const;$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh) const
OpenMesh::TriConnectivity::is_triangles	Mesh/TriConnectivity.hh	/^  inline static bool is_triangles()$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:()
OpenMesh::TriConnectivity::opposite_he_opposite_vh	Mesh/TriConnectivity.hh	/^  VertexHandle opposite_he_opposite_vh(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::TriConnectivity::opposite_vh	Mesh/TriConnectivity.hh	/^  inline VertexHandle opposite_vh(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(HalfedgeHandle _heh) const
OpenMesh::TriConnectivity::split	Mesh/TriConnectivity.cc	/^void TriConnectivity::split(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::TriConnectivity::split	Mesh/TriConnectivity.hh	/^  inline void split(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
OpenMesh::TriConnectivity::split	Mesh/TriConnectivity.hh	/^  void split(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::TriConnectivity::split_copy	Mesh/TriConnectivity.cc	/^void TriConnectivity::split_copy(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::TriConnectivity::split_copy	Mesh/TriConnectivity.hh	/^  inline void split_copy(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
OpenMesh::TriConnectivity::split_copy	Mesh/TriConnectivity.hh	/^  void split_copy(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::TriConnectivity::vertex_split	Mesh/TriConnectivity.cc	/^TriConnectivity::vertex_split(VertexHandle v0, VertexHandle v1,$/;"	f	class:OpenMesh::TriConnectivity	signature:(VertexHandle v0, VertexHandle v1, VertexHandle vl, VertexHandle vr)
OpenMesh::TriConnectivity::vertex_split	Mesh/TriConnectivity.hh	/^  HalfedgeHandle vertex_split(VertexHandle v0, VertexHandle v1,$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(VertexHandle v0, VertexHandle v1, VertexHandle vl, VertexHandle vr)
OpenMesh::TriConnectivity::~TriConnectivity	Mesh/TriConnectivity.hh	/^  virtual ~TriConnectivity() {}$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:()
OpenMesh::TriMeshT	Mesh/TriMeshT.hh	/^class TriMeshT : public PolyMeshT<Kernel>$/;"	c	namespace:OpenMesh	inherits:PolyMeshT
OpenMesh::TriMeshT::Color	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Color              Color;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstEdgeIter      ConstEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstFaceEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceEdgeIter        ConstFaceEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstFaceFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceFaceIter        ConstFaceFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstFaceHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceHalfedgeIter    ConstFaceHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceIter      ConstFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstFaceVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstFaceVertexIter      ConstFaceVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstVertexEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexEdgeIter      ConstVertexEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstVertexFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexFaceIter      ConstVertexFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstVertexIHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexIHalfedgeIter ConstVertexIHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexIter    ConstVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstVertexOHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexOHalfedgeIter ConstVertexOHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::ConstVertexVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::ConstVertexVertexIter    ConstVertexVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::Edge	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Edge               Edge;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::EdgeHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::EdgeHandle         EdgeHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::EdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::EdgeIter           EdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::Face	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Face               Face;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::FaceEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceEdgeIter             FaceEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::FaceFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceFaceIter             FaceFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::FaceHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceHalfedgeIter         FaceHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::FaceHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceHandle         FaceHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::FaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceIter           FaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::FaceVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::FaceVertexIter           FaceVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::Halfedge	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Halfedge           Halfedge;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::HalfedgeHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::HalfedgeHandle     HalfedgeHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::IsPolyMesh	Mesh/TriMeshT.hh	/^  enum { IsPolyMesh = 0 };$/;"	e	enum:OpenMesh::TriMeshT::__anon8
OpenMesh::TriMeshT::IsTriMesh	Mesh/TriMeshT.hh	/^  enum { IsTriMesh  = 1 };$/;"	e	enum:OpenMesh::TriMeshT::__anon9
OpenMesh::TriMeshT::Kernel::split	Mesh/TriMeshT.hh	/^    Kernel::split(_eh, _vh);$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, _vh)
OpenMesh::TriMeshT::Kernel::split	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split(_eh, vh); return vh;$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, vh)
OpenMesh::TriMeshT::Kernel::split_copy	Mesh/TriMeshT.hh	/^    Kernel::split_copy(_eh, _vh);$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, _vh)
OpenMesh::TriMeshT::Kernel::split_copy	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split_copy(_eh, vh); return vh;$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, vh)
OpenMesh::TriMeshT::Normal	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Normal             Normal;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::Point	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Point              Point;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::PolyMesh	Mesh/TriMeshT.hh	/^  typedef PolyMeshT<Kernel>                     PolyMesh;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::PolyMesh::split	Mesh/TriMeshT.hh	/^  { PolyMesh::split(_fh, _vh); }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, _vh)
OpenMesh::TriMeshT::PolyMesh::split	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p); PolyMesh::split(_fh, vh); return vh; }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, vh)
OpenMesh::TriMeshT::PolyMesh::split_copy	Mesh/TriMeshT.hh	/^  { PolyMesh::split_copy(_fh, _vh); }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, _vh)
OpenMesh::TriMeshT::PolyMesh::split_copy	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p);  PolyMesh::split_copy(_fh, vh); return vh; }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, vh)
OpenMesh::TriMeshT::Scalar	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Scalar             Scalar;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::TexCoord1D	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::TexCoord1D         TexCoord1D;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::TexCoord2D	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::TexCoord2D         TexCoord2D;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::TexCoord3D	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::TexCoord3D         TexCoord3D;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::This	Mesh/TriMeshT.hh	/^  typedef TriMeshT<Kernel>                      This;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::TriMeshT	Mesh/TriMeshT.hh	/^  TriMeshT() : PolyMesh() {}$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
OpenMesh::TriMeshT::Vertex	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Vertex             Vertex;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::VertexEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexEdgeIter           VertexEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::VertexFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexFaceIter           VertexFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::VertexHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexHandle       VertexHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::VertexIHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexIHalfedgeIter      VertexIHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::VertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexIter         VertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::VertexOHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexOHalfedgeIter      VertexOHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::VertexVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexVertexIter         VertexVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
OpenMesh::TriMeshT::calc_face_normal	Mesh/TriMeshT.cc	/^calc_face_normal(FaceHandle _fh) const$/;"	f	class:OpenMesh::TriMeshT	signature:(FaceHandle _fh) const
OpenMesh::TriMeshT::calc_face_normal	Mesh/TriMeshT.hh	/^  Normal calc_face_normal(FaceHandle _fh) const;$/;"	p	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh) const
OpenMesh::TriMeshT::is_polymesh	Mesh/TriMeshT.hh	/^  static bool is_polymesh() { return false; }$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
OpenMesh::TriMeshT::is_trimesh	Mesh/TriMeshT.hh	/^  static bool is_trimesh()  { return  true; }$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
OpenMesh::TriMeshT::split	Mesh/TriMeshT.hh	/^  inline VertexHandle split(EdgeHandle _eh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, const Point& _p)
OpenMesh::TriMeshT::split	Mesh/TriMeshT.hh	/^  inline VertexHandle split(FaceHandle _fh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, const Point& _p)
OpenMesh::TriMeshT::split	Mesh/TriMeshT.hh	/^  inline void split(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::TriMeshT::split	Mesh/TriMeshT.hh	/^  inline void split(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
OpenMesh::TriMeshT::split_copy	Mesh/TriMeshT.hh	/^  inline VertexHandle split_copy(EdgeHandle _eh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, const Point& _p)
OpenMesh::TriMeshT::split_copy	Mesh/TriMeshT.hh	/^  inline VertexHandle split_copy(FaceHandle _fh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, const Point& _p)
OpenMesh::TriMeshT::split_copy	Mesh/TriMeshT.hh	/^  inline void split_copy(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
OpenMesh::TriMeshT::split_copy	Mesh/TriMeshT.hh	/^  inline void split_copy(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
OpenMesh::TriMeshT::vertex_split	Mesh/TriMeshT.hh	/^  inline HalfedgeHandle vertex_split(Point _v0_point,  VertexHandle _v1,$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(Point _v0_point, VertexHandle _v1, VertexHandle _vl, VertexHandle _vr)
OpenMesh::TriMeshT::vertex_split	Mesh/TriMeshT.hh	/^  inline HalfedgeHandle vertex_split(VertexHandle _v0, VertexHandle _v1,$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(VertexHandle _v0, VertexHandle _v1, VertexHandle _vl, VertexHandle _vr)
OpenMesh::TriMeshT::vh	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split(_eh, vh); return vh;$/;"	l
OpenMesh::TriMeshT::vh	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split_copy(_eh, vh); return vh;$/;"	l
OpenMesh::TriMeshT::vh	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p);  PolyMesh::split_copy(_fh, vh); return vh; }$/;"	l
OpenMesh::TriMeshT::vh	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p); PolyMesh::split(_fh, vh); return vh; }$/;"	l
OpenMesh::TriMeshT::~TriMeshT	Mesh/TriMeshT.hh	/^  virtual ~TriMeshT() {}$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
OpenMesh::TriMesh_ArrayKernelT	Mesh/TriMesh_ArrayKernelT.hh	/^class TriMesh_ArrayKernelT$/;"	c	namespace:OpenMesh	inherits:TriMesh_ArrayKernel_GeneratorT::Mesh
OpenMesh::TriMesh_ArrayKernel_GeneratorT	Mesh/TriMesh_ArrayKernelT.hh	/^struct TriMesh_ArrayKernel_GeneratorT$/;"	s	namespace:OpenMesh
OpenMesh::TriMesh_ArrayKernel_GeneratorT::AttribKernel	Mesh/TriMesh_ArrayKernelT.hh	/^  typedef AttribKernelT<MeshItems, TriConnectivity>   AttribKernel;$/;"	t	struct:OpenMesh::TriMesh_ArrayKernel_GeneratorT	access:public
OpenMesh::TriMesh_ArrayKernel_GeneratorT::Mesh	Mesh/TriMesh_ArrayKernelT.hh	/^  typedef TriMeshT<AttribKernel>                      Mesh;$/;"	t	struct:OpenMesh::TriMesh_ArrayKernel_GeneratorT	access:public
OpenMesh::TriMesh_ArrayKernel_GeneratorT::MeshItems	Mesh/TriMesh_ArrayKernelT.hh	/^  typedef FinalMeshItemsT<Traits, true>               MeshItems;$/;"	t	struct:OpenMesh::TriMesh_ArrayKernel_GeneratorT	access:public
OpenMesh::Utils	Utils/Noncopyable.hh	/^namespace Utils {$/;"	n	namespace:OpenMesh
OpenMesh::Utils::Noncopyable	Utils/Noncopyable.hh	/^class Noncopyable$/;"	c	namespace:OpenMesh::Utils
OpenMesh::Utils::Noncopyable::Noncopyable	Utils/Noncopyable.hh	/^  Noncopyable( const Noncopyable& );$/;"	p	class:OpenMesh::Utils::Noncopyable	access:private	signature:( const Noncopyable& )
OpenMesh::Utils::Noncopyable::Noncopyable	Utils/Noncopyable.hh	/^  Noncopyable() { }$/;"	f	class:OpenMesh::Utils::Noncopyable	access:public	signature:()
OpenMesh::Utils::Noncopyable::operator =	Utils/Noncopyable.hh	/^  const Noncopyable& operator=( const Noncopyable& );$/;"	p	class:OpenMesh::Utils::Noncopyable	access:private	signature:( const Noncopyable& )
OpenMesh::VDPM	Geometry/Plane3d.hh	/^namespace VDPM {$/;"	n	namespace:OpenMesh
OpenMesh::VDPM::Plane3d	Geometry/Plane3d.hh	/^class OPENMESHDLLEXPORT Plane3d$/;"	c	namespace:OpenMesh::VDPM
OpenMesh::VDPM::Plane3d::Plane3d	Geometry/Plane3d.hh	/^  Plane3d()$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:()
OpenMesh::VDPM::Plane3d::Plane3d	Geometry/Plane3d.hh	/^  Plane3d(const vector_type &_dir, const vector_type &_pnt)$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:(const vector_type &_dir, const vector_type &_pnt)
OpenMesh::VDPM::Plane3d::d_	Geometry/Plane3d.hh	/^  value_type  d_;$/;"	m	class:OpenMesh::VDPM::Plane3d	access:public
OpenMesh::VDPM::Plane3d::n_	Geometry/Plane3d.hh	/^  vector_type n_;$/;"	m	class:OpenMesh::VDPM::Plane3d	access:public
OpenMesh::VDPM::Plane3d::normalize	Geometry/Plane3d.hh	/^    n_.normalize();$/;"	p	signature:()
OpenMesh::VDPM::Plane3d::signed_distance	Geometry/Plane3d.hh	/^  value_type signed_distance(const OpenMesh::Vec3f &_p)$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:(const OpenMesh::Vec3f &_p)
OpenMesh::VDPM::Plane3d::singed_distance	Geometry/Plane3d.hh	/^  value_type singed_distance(const OpenMesh::Vec3f &point)$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:(const OpenMesh::Vec3f &point)
OpenMesh::VDPM::Plane3d::value_type	Geometry/Plane3d.hh	/^  typedef vector_type::value_type value_type;$/;"	t	class:OpenMesh::VDPM::Plane3d	access:public
OpenMesh::VDPM::Plane3d::vector_type	Geometry/Plane3d.hh	/^  typedef OpenMesh::Vec3f         vector_type;$/;"	t	class:OpenMesh::VDPM::Plane3d	access:public
OpenMesh::VPropHandleT	Utils/Property.hh	/^struct VPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
OpenMesh::VPropHandleT::VPropHandleT	Utils/Property.hh	/^  explicit VPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::VPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
OpenMesh::VPropHandleT::VPropHandleT	Utils/Property.hh	/^  explicit VPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::VPropHandleT	access:public	signature:(int _idx=-1)
OpenMesh::VPropHandleT::Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::VPropHandleT	access:public
OpenMesh::VPropHandleT::value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::VPropHandleT	access:public
OpenMesh::Vec1c	Geometry/VectorT.hh	/^typedef VectorT<signed char,1> Vec1c;$/;"	t	namespace:OpenMesh
OpenMesh::Vec1d	Geometry/VectorT.hh	/^typedef VectorT<double,1> Vec1d;$/;"	t	namespace:OpenMesh
OpenMesh::Vec1f	Geometry/VectorT.hh	/^typedef VectorT<float,1> Vec1f;$/;"	t	namespace:OpenMesh
OpenMesh::Vec1i	Geometry/VectorT.hh	/^typedef VectorT<signed int,1> Vec1i;$/;"	t	namespace:OpenMesh
OpenMesh::Vec1s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,1> Vec1s;$/;"	t	namespace:OpenMesh
OpenMesh::Vec1uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,1> Vec1uc;$/;"	t	namespace:OpenMesh
OpenMesh::Vec1ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,1> Vec1ui;$/;"	t	namespace:OpenMesh
OpenMesh::Vec1us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,1> Vec1us;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2c	Geometry/VectorT.hh	/^typedef VectorT<signed char,2> Vec2c;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2d	Geometry/VectorT.hh	/^typedef VectorT<double,2> Vec2d;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2f	Geometry/VectorT.hh	/^typedef VectorT<float,2> Vec2f;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2i	Geometry/VectorT.hh	/^typedef VectorT<signed int,2> Vec2i;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,2> Vec2s;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,2> Vec2uc;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,2> Vec2ui;$/;"	t	namespace:OpenMesh
OpenMesh::Vec2us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,2> Vec2us;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3b	Geometry/VectorT.hh	/^typedef VectorT<bool,3> Vec3b;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3c	Geometry/VectorT.hh	/^typedef VectorT<signed char,3> Vec3c;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3d	Geometry/VectorT.hh	/^typedef VectorT<double,3> Vec3d;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3f	Geometry/VectorT.hh	/^typedef VectorT<float,3> Vec3f;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3i	Geometry/VectorT.hh	/^typedef VectorT<signed int,3> Vec3i;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,3> Vec3s;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,3> Vec3uc;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,3> Vec3ui;$/;"	t	namespace:OpenMesh
OpenMesh::Vec3us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,3> Vec3us;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4c	Geometry/VectorT.hh	/^typedef VectorT<signed char,4> Vec4c;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4d	Geometry/VectorT.hh	/^typedef VectorT<double,4> Vec4d;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4f	Geometry/VectorT.hh	/^typedef VectorT<float,4> Vec4f;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4i	Geometry/VectorT.hh	/^typedef VectorT<signed int,4> Vec4i;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,4> Vec4s;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,4> Vec4uc;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,4> Vec4ui;$/;"	t	namespace:OpenMesh
OpenMesh::Vec4us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,4> Vec4us;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6c	Geometry/VectorT.hh	/^typedef VectorT<signed char,6> Vec6c;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6d	Geometry/VectorT.hh	/^typedef VectorT<double,6> Vec6d;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6f	Geometry/VectorT.hh	/^typedef VectorT<float,6> Vec6f;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6i	Geometry/VectorT.hh	/^typedef VectorT<signed int,6> Vec6i;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,6> Vec6s;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,6> Vec6uc;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,6> Vec6ui;$/;"	t	namespace:OpenMesh
OpenMesh::Vec6us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,6> Vec6us;$/;"	t	namespace:OpenMesh
OpenMesh::VectorDataT	Geometry/VectorT.hh	/^template <> struct VectorDataT<float, 4>$/;"	s	namespace:OpenMesh
OpenMesh::VectorDataT	Geometry/VectorT.hh	/^template <typename Scalar,int N> struct VectorDataT$/;"	s	namespace:OpenMesh
OpenMesh::VectorDataT::__anon3::m128	Geometry/VectorT.hh	/^    __m128  m128;$/;"	m	union:OpenMesh::VectorDataT::__anon3	access:public
OpenMesh::VectorDataT::__anon3::values_	Geometry/VectorT.hh	/^    float   values_[4];$/;"	m	union:OpenMesh::VectorDataT::__anon3	access:public
OpenMesh::VectorDataT::values_	Geometry/VectorT.hh	/^  Scalar values_[N];$/;"	m	struct:OpenMesh::VectorDataT	access:public
OpenMesh::VectorT::operator %	Geometry/VectorT.hh	/^VectorT<double,3>::operator%(const VectorT<double,3>& _rhs) const$/;"	f	class:OpenMesh::VectorT	signature:(const VectorT<double,3>& _rhs) const
OpenMesh::VectorT::operator %	Geometry/VectorT.hh	/^VectorT<float,3>::operator%(const VectorT<float,3>& _rhs) const $/;"	f	class:OpenMesh::VectorT	signature:(const VectorT<float,3>& _rhs) const
OpenMesh::VertexHandle	Mesh/ArrayKernelT.cc	/^  for (i=0; i<nV; ++i) vh_map.push_back(VertexHandle(i));$/;"	p	file:	signature:(i)
OpenMesh::VertexHandle	Mesh/Handles.hh	/^struct VertexHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
OpenMesh::VertexHandle::VertexHandle	Mesh/Handles.hh	/^  explicit VertexHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::VertexHandle	access:public	signature:(int _idx=-1)
OpenMesh::a0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle a0 = halfedge_handle(_eh, 0);$/;"	l
OpenMesh::a1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle a1 = next_halfedge_handle(a0);$/;"	l
OpenMesh::a2	Mesh/TriConnectivity.cc	/^  HalfedgeHandle a2 = next_halfedge_handle(a1);$/;"	l
OpenMesh::ah	Mesh/TriConnectivity.cc	/^  VertexHandle ah = to_vertex_handle(next_halfedge_handle(hh));$/;"	l
OpenMesh::angle	Geometry/MathDefs.hh	/^T angle(T _cos_angle, T _sin_angle)$/;"	f	namespace:OpenMesh	signature:(T _cos_angle, T _sin_angle)
OpenMesh::axisAngle	Geometry/NormalConeT.cc	/^    Scalar axisAngle = 0.5*(minAngle + maxAngle);$/;"	l
OpenMesh::b0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle b0 = halfedge_handle(_eh, 1);$/;"	l
OpenMesh::b1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle b1 = next_halfedge_handle(b0);$/;"	l
OpenMesh::b2	Mesh/TriConnectivity.cc	/^  HalfedgeHandle b2 = next_halfedge_handle(b1);$/;"	l
OpenMesh::base_heh	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(next_heh), base_heh);$/;"	l
OpenMesh::basic_multiplex_target	System/mostream.hh	/^class basic_multiplex_target$/;"	c	namespace:OpenMesh
OpenMesh::basic_multiplex_target::operator <<	System/mostream.hh	/^  virtual void operator<<(const std::string& _s) = 0;$/;"	p	class:OpenMesh::basic_multiplex_target	access:public	signature:(const std::string& _s)
OpenMesh::basic_multiplex_target::~basic_multiplex_target	System/mostream.hh	/^  virtual ~basic_multiplex_target() {}$/;"	f	class:OpenMesh::basic_multiplex_target	access:public	signature:()
OpenMesh::bh	Mesh/TriConnectivity.cc	/^  VertexHandle bh = to_vertex_handle(next_halfedge_handle(oh));$/;"	l
OpenMesh::boundary0	Mesh/PolyConnectivity.cc	/^  bool boundary0 = is_boundary(h0);$/;"	l
OpenMesh::boundary1	Mesh/PolyConnectivity.cc	/^  bool boundary1 = is_boundary(h1);$/;"	l
OpenMesh::boundary_next	Mesh/PolyConnectivity.cc	/^                                 boundary_next, boundary_prev,$/;"	l
OpenMesh::boundary_prev	Mesh/PolyConnectivity.cc	/^                                 boundary_next, boundary_prev,$/;"	l
OpenMesh::centerAngle	Geometry/NormalConeT.cc	/^    Scalar centerAngle = acos(dotp);$/;"	l
OpenMesh::centerAngle	Geometry/NormalConeT.cc	/^  Scalar centerAngle = dotp >= 1.0 ? 0.0 : (dotp <= -1.0 ? M_PI : acos(dotp));$/;"	l
OpenMesh::clear	Mesh/ArrayKernel.cc	/^  edges_.clear();$/;"	p	file:	signature:()
OpenMesh::clear	Mesh/ArrayKernel.cc	/^  faces_.clear();$/;"	p	file:	signature:()
OpenMesh::clear	Mesh/ArrayKernel.cc	/^  vertices_.clear();$/;"	p	file:	signature:()
OpenMesh::clear	Mesh/BaseKernel.cc	/^  _string.clear();$/;"	p	file:	signature:()
OpenMesh::color_cast	Utils/color_cast.hh	/^color_cast(const src_t& _src )$/;"	f	namespace:OpenMesh	signature:(const src_t& _src )
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3f, Vec3uc>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3f, Vec4uc>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3i,Vec3f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3i,Vec4f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3uc,Vec3f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3uc,Vec4f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3ui,Vec3f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3ui,Vec4f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f, Vec3uc>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f, Vec4uc>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f,Vec3f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f,Vec4i>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4i,Vec4f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4uc,Vec3f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4uc,Vec3uc>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4uc,Vec4f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4ui,Vec4f>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster	Utils/color_cast.hh	/^struct color_caster<dst_t,dst_t>$/;"	s	namespace:OpenMesh
OpenMesh::color_caster::cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec3f& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec3f& _src)
OpenMesh::color_caster::cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec3uc& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec3uc& _src)
OpenMesh::color_caster::cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec4f& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec4f& _src)
OpenMesh::color_caster::cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec4i& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec4i& _src)
OpenMesh::color_caster::cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec4uc& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec4uc& _src)
OpenMesh::color_caster::cast	Utils/color_cast.hh	/^  inline static return_type cast(const dst_t& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const dst_t& _src)
OpenMesh::color_caster::cast	Utils/color_cast.hh	/^  inline static return_type cast(const src_t& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const src_t& _src)
OpenMesh::color_caster::dst	Utils/color_cast.hh	/^    dst_t dst;$/;"	l
OpenMesh::color_caster::f	Utils/color_cast.hh	/^    const float f = 1.0f \/ 255.0f;$/;"	l
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec3f return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec3i return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec3uc return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec3ui return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec4f return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec4i return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec4uc return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef Vec4ui return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef const dst_t&  return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::color_caster::return_type	Utils/color_cast.hh	/^  typedef dst_t  return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
OpenMesh::cross	Geometry/VectorT.hh	/^cross(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2) {$/;"	f	namespace:OpenMesh	signature:(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2)
OpenMesh::cvih_it	Mesh/PolyMeshT.cc	/^  ConstVertexIHalfedgeIter cvih_it = cvih_iter(_vh);$/;"	l
OpenMesh::dbl_eps__	Geometry/MathDefs.hh	/^const double dbl_eps__ = 1e-09;$/;"	m	namespace:OpenMesh
OpenMesh::deg_to_rad	Geometry/MathDefs.hh	/^inline T deg_to_rad(const T& _angle)$/;"	f	namespace:OpenMesh	signature:(const T& _angle)
OpenMesh::del_end	Mesh/PolyConnectivity.cc	/^                                      del_end(deleted_edges.end());$/;"	p	file:	signature:(deleted_edges.end())
OpenMesh::del_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle rem_fh = face_handle(heh0), del_fh = face_handle(heh1);$/;"	l
OpenMesh::del_it	Mesh/PolyConnectivity.cc	/^    std::vector<EdgeHandle>::iterator del_it(deleted_edges.begin()),$/;"	p	file:	signature:(deleted_edges.begin())
OpenMesh::deleted_edges	Mesh/PolyConnectivity.cc	/^  std::vector<EdgeHandle> deleted_edges;$/;"	l
OpenMesh::dot	Geometry/VectorT.hh	/^dot(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2) {$/;"	f	namespace:OpenMesh	signature:(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2)
OpenMesh::dotp	Geometry/NormalConeT.cc	/^  Scalar dotp = (center_normal_ | _cone.center_normal_);$/;"	l
OpenMesh::dotp	Geometry/NormalConeT.cc	/^  Scalar dotp = (center_normal_ | _norm);$/;"	l
OpenMesh::e0	Mesh/TriConnectivity.cc	/^    HalfedgeHandle e0 = new_edge(_vh, v1);$/;"	l
OpenMesh::e1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle e1 = new_edge(_vh, v2);$/;"	l
OpenMesh::e2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle e2 = new_edge(_vh, v3);$/;"	l
OpenMesh::edge_handle	Mesh/PolyConnectivity.cc	/^        deleted_edges.push_back(edge_handle(hh));$/;"	p	file:	signature:(hh)
OpenMesh::eh	Mesh/PolyMeshT.cc	/^  EdgeHandle eh = Kernel::edge_handle(_heh);$/;"	l
OpenMesh::eh0	Mesh/PolyConnectivity.cc	/^  EdgeHandle eh0 = edge_handle( next_halfedge_handle( halfedge_handle(_eh, 1) ) );$/;"	l
OpenMesh::empty_fh	Mesh/ArrayKernel.cc	/^  std::vector<FaceHandle*> empty_fh;$/;"	l
OpenMesh::empty_hh	Mesh/ArrayKernel.cc	/^  std::vector<HalfedgeHandle*> empty_hh;$/;"	l
OpenMesh::empty_vh	Mesh/ArrayKernel.cc	/^  std::vector<VertexHandle*> empty_vh;$/;"	l
OpenMesh::eps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& eps = eprops_.properties();$/;"	l
OpenMesh::eps__	Geometry/MathDefs.hh	/^inline double eps__(double)$/;"	f	namespace:OpenMesh	signature:(double)
OpenMesh::eps__	Geometry/MathDefs.hh	/^inline float eps__(float) $/;"	f	namespace:OpenMesh	signature:(float)
OpenMesh::f0	Mesh/TriConnectivity.cc	/^  FaceHandle      f0 = face_handle(h0);$/;"	l
OpenMesh::f0	Mesh/TriConnectivity.cc	/^  FaceHandle     f0 = face_handle(h0);$/;"	l
OpenMesh::f1	Mesh/TriConnectivity.cc	/^    FaceHandle f1 = new_face();$/;"	l
OpenMesh::f1	Mesh/TriConnectivity.cc	/^  FaceHandle      f1 = new_face();$/;"	l
OpenMesh::f2	Mesh/TriConnectivity.cc	/^    FaceHandle f2 = new_face();$/;"	l
OpenMesh::f3	Mesh/TriConnectivity.cc	/^  FaceHandle     f3 = face_handle(o0);$/;"	l
OpenMesh::fa	Mesh/TriConnectivity.cc	/^  FaceHandle     fa  = face_handle(a0);$/;"	l
OpenMesh::faceCount	Mesh/ArrayKernelT.cc	/^  const int faceCount     = faces_.size();$/;"	l
OpenMesh::face_handle	Mesh/PolyConnectivity.cc	/^    set_face_handle(opposite_halfedge_handle(new_e), face_handle(h1));$/;"	p	file:	signature:(h1)
OpenMesh::face_handle	Mesh/PolyConnectivity.cc	/^  FaceHandle fh0(face_handle(halfedge_handle(_eh, 0)));$/;"	p	file:	signature:(halfedge_handle(
OpenMesh::face_handle	Mesh/PolyConnectivity.cc	/^  FaceHandle fh1(face_handle(halfedge_handle(_eh, 1)));$/;"	p	file:	signature:(halfedge_handle(
OpenMesh::face_handle	Mesh/PolyMeshT.cc	/^          fhs.push_back(Kernel::face_handle(heh));$/;"	p	file:	signature:(heh)
OpenMesh::face_handle	Mesh/PolyMeshT.cc	/^      fhs.push_back(Kernel::face_handle(heh));$/;"	p	file:	signature:(heh)
OpenMesh::face_handle	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v0v1), v0v1);$/;"	p	file:	signature:(v0v1)
OpenMesh::face_handle	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v1v0), v1v0);$/;"	p	file:	signature:(v1v0)
OpenMesh::face_handles	Mesh/PolyConnectivity.cc	/^  std::vector<FaceHandle> face_handles;$/;"	l
OpenMesh::face_inverse_map	Mesh/ArrayKernelT.cc	/^  std::map <int, int> face_inverse_map;$/;"	l
OpenMesh::faces_end	Mesh/ArrayKernelT.cc	/^    KernelFaceIter  f_it(faces_begin()), f_end(faces_end());$/;"	p	file:	signature:()
OpenMesh::faces_end	Mesh/PolyConnectivity.cc	/^  FaceIter f_it(faces_begin()), f_end(faces_end());$/;"	p	file:	signature:()
OpenMesh::faces_end	Mesh/PolyMeshT.cc	/^  FaceIter f_it(Kernel::faces_begin()), f_end(Kernel::faces_end());$/;"	p	file:	signature:()
OpenMesh::fb	Mesh/TriConnectivity.cc	/^  FaceHandle     fb  = face_handle(b0);$/;"	l
OpenMesh::fh	Mesh/ArrayKernelT.cc	/^    FaceHandle      fh;$/;"	l
OpenMesh::fh	Mesh/PolyConnectivity.cc	/^  FaceHandle      fh = face_handle(h);$/;"	l
OpenMesh::fh	Mesh/PolyConnectivity.cc	/^  FaceHandle      fh = face_handle(h0);$/;"	l
OpenMesh::fh	Mesh/TriConnectivity.cc	/^    FaceHandle fh;$/;"	l
OpenMesh::fh0	Mesh/PolyConnectivity.cc	/^  FaceHandle fh0 = face_handle(heh0);\/\/fh0 or fh1 might be a invalid,$/;"	l
OpenMesh::fh1	Mesh/PolyConnectivity.cc	/^  FaceHandle fh1 = face_handle(heh1);\/\/i.e., representing the boundary$/;"	l
OpenMesh::fh1	Mesh/PolyMeshT.cc	/^  FaceHandle fh1 = Kernel::face_handle(Kernel::opposite_halfedge_handle(_heh));$/;"	l
OpenMesh::fh_end	Mesh/PolyConnectivity.cc	/^                                    fh_end(face_handles.end());$/;"	p	file:	signature:(face_handles.end())
OpenMesh::fh_it	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_FHandlePointer::iterator fh_it(fh_to_update.begin()), fh_it_end(fh_to_update.end());$/;"	p	file:	signature:(fh_to_update.begin())
OpenMesh::fh_it	Mesh/PolyConnectivity.cc	/^  std::vector<FaceHandle>::iterator fh_it(face_handles.begin()),$/;"	p	file:	signature:(face_handles.begin())
OpenMesh::fh_it_end	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_FHandlePointer::iterator fh_it(fh_to_update.begin()), fh_it_end(fh_to_update.end());$/;"	p	file:	signature:(fh_to_update.end())
OpenMesh::fh_map	Mesh/ArrayKernelT.cc	/^  std::vector<FaceHandle>      fh_map;$/;"	l
OpenMesh::fhs	Mesh/PolyMeshT.cc	/^    std::vector<FaceHandle> fhs; fhs.reserve(10);$/;"	l
OpenMesh::flt_eps__	Geometry/MathDefs.hh	/^const float flt_eps__ = (float)1e-05;$/;"	m	namespace:OpenMesh
OpenMesh::fn0	Mesh/PolyMeshT.cc	/^  Normal fn0 = Kernel::normal(fh0);$/;"	l
OpenMesh::fn1	Mesh/PolyMeshT.cc	/^  Normal fn1 = Kernel::normal(fh1);$/;"	l
OpenMesh::fnew	Mesh/PolyConnectivity.cc	/^    FaceHandle fnew = new_face();$/;"	l
OpenMesh::fo	Mesh/PolyConnectivity.cc	/^  FaceHandle      fo = face_handle(o);$/;"	l
OpenMesh::fo	Mesh/PolyConnectivity.cc	/^  FaceHandle      fo = face_handle(o0);$/;"	l
OpenMesh::fps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& fps = fprops_.properties();$/;"	l
OpenMesh::fv_it	Mesh/PolyMeshT.cc	/^  ConstFaceVertexIter fv_it(this->cfv_iter(_fh));$/;"	p	file:	signature:(this->cfv_iter(_fh))
OpenMesh::fv_it	Mesh/TriMeshT.cc	/^  ConstFaceVertexIter fv_it(this->cfv_iter(_fh));$/;"	p	file:	signature:(this->cfv_iter(_fh))
OpenMesh::h	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  h  = _hh;$/;"	l
OpenMesh::h0	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
OpenMesh::h0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  h0 = _hh;$/;"	l
OpenMesh::h0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h0 = _hh;$/;"	l
OpenMesh::h0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h0 = halfedge_handle(_eh, 0);$/;"	l
OpenMesh::h0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h0(_hh);$/;"	p	file:	signature:(_hh)
OpenMesh::h0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle h0 = halfedge_handle(_eh, 0);$/;"	l
OpenMesh::h1	Mesh/PolyConnectivity.cc	/^      HalfedgeHandle h1 = next_halfedge_handle(v0v1);$/;"	l
OpenMesh::h1	Mesh/PolyConnectivity.cc	/^      HalfedgeHandle h1 = next_halfedge_handle(v1v0);$/;"	l
OpenMesh::h1	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
OpenMesh::h1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  h1 = next_halfedge_handle(h0);$/;"	l
OpenMesh::h1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h1 = halfedge_handle(_eh, 1);$/;"	l
OpenMesh::h1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h1 = next_halfedge_handle(h0);$/;"	l
OpenMesh::h1	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(o0), h1);$/;"	l
OpenMesh::h1	Mesh/TriConnectivity.cc	/^    HalfedgeHandle h1 = next_halfedge_handle(h0);$/;"	l
OpenMesh::h1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h1 = new_edge(v1, v0);$/;"	l
OpenMesh::h1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h1, h2;$/;"	l
OpenMesh::h2	Mesh/PolyConnectivity.cc	/^      HalfedgeHandle h2 = next_halfedge_handle(h1);$/;"	l
OpenMesh::h2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle h2 = next_halfedge_handle(h1);$/;"	l
OpenMesh::h2	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h1, h2;$/;"	l
OpenMesh::halfedgeCount	Mesh/ArrayKernelT.cc	/^  const int halfedgeCount = edges_.size() * 2;$/;"	l
OpenMesh::halfedge_handle	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle base_heh(halfedge_handle(_fh));$/;"	p	file:	signature:(_fh)
OpenMesh::halfedge_inverse_map	Mesh/ArrayKernelT.cc	/^  std::map <int, int> halfedge_inverse_map;$/;"	l
OpenMesh::halfedges_end	Mesh/PolyMeshT.cc	/^  HalfedgeIter h_it(Kernel::halfedges_begin()), h_end(Kernel::halfedges_end());$/;"	p	file:	signature:()
OpenMesh::has_edge_status	Mesh/PolyMeshT.cc	/^  assert(Kernel::has_edge_status());\/\/this function needs edge status property$/;"	p	file:	signature:()
OpenMesh::has_vertex_status	Mesh/ArrayKernel.cc	/^  assert(has_vertex_status());\/\/this function requires vertex status property$/;"	p	file:	signature:()
OpenMesh::heh	Mesh/PolyMeshT.cc	/^    HalfedgeHandle heh = _heh;$/;"	l
OpenMesh::heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh0 = halfedge_handle(_eh, 0);$/;"	l
OpenMesh::heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh0 = new_edge(vh0, vh1);$/;"	l
OpenMesh::heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh1 = halfedge_handle(_eh, 1);$/;"	l
OpenMesh::heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh1 = opposite_halfedge_handle(heh0);$/;"	l
OpenMesh::hend	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hend = halfedge_handle(fh);$/;"	l
OpenMesh::hh	Mesh/ArrayKernelT.cc	/^  HalfedgeHandle hh;$/;"	l
OpenMesh::hh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hh   = next_halfedge_handle(hend);$/;"	l
OpenMesh::hh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hh;$/;"	l
OpenMesh::hh_it	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_HHandlePointer::iterator hh_it(hh_to_update.begin()), hh_it_end(hh_to_update.end());$/;"	p	file:	signature:(hh_to_update.begin())
OpenMesh::hh_it_end	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_HHandlePointer::iterator hh_it(hh_to_update.begin()), hh_it_end(hh_to_update.end());$/;"	p	file:	signature:(hh_to_update.end())
OpenMesh::hh_map	Mesh/ArrayKernelT.cc	/^  std::vector<HalfedgeHandle>  hh_map;$/;"	l
OpenMesh::hn	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  hn = next_halfedge_handle(h);$/;"	l
OpenMesh::hnew	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle hnew = new_edge(to_vertex_handle(hh), vh);$/;"	l
OpenMesh::hnext	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle hnext = next_halfedge_handle(hh);$/;"	l
OpenMesh::hold	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hold = new_edge(to_vertex_handle(hend), vh);$/;"	l
OpenMesh::hold	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(hend), hold);$/;"	l
OpenMesh::hp	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  hp = prev_halfedge_handle(h);$/;"	l
OpenMesh::hps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& hps = hprops_.properties();$/;"	l
OpenMesh::i	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	l
OpenMesh::i	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	l
OpenMesh::i	Mesh/PolyMeshT.cc	/^  unsigned int i = 0;$/;"	l
OpenMesh::i0	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	l
OpenMesh::i1	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	l
OpenMesh::id	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	l
OpenMesh::ii	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	l
OpenMesh::in_he_vec	Mesh/PolyMeshT.cc	/^  Normal in_he_vec;$/;"	l
OpenMesh::inner_next	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle                 inner_next, inner_prev,$/;"	l
OpenMesh::inner_prev	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle                 inner_next, inner_prev,$/;"	l
OpenMesh::insert	Mesh/PolyConnectivity.cc	/^      nb_fhs.insert(cff_it);$/;"	p	file:	signature:(cff_it)
OpenMesh::invalidate	Mesh/ArrayKernelT.cc	/^      (*fh_it)->invalidate();$/;"	p	file:	signature:()
OpenMesh::invalidate	Mesh/ArrayKernelT.cc	/^      (*hh_it)->invalidate();$/;"	p	file:	signature:()
OpenMesh::invalidate	Mesh/ArrayKernelT.cc	/^      (*v_it)->invalidate();$/;"	p	file:	signature:()
OpenMesh::is_boundary	Mesh/PolyConnectivity.cc	/^        assert(is_boundary(boundary_next));$/;"	p	file:	signature:(boundary_next)
OpenMesh::is_boundary	Mesh/PolyConnectivity.cc	/^        assert(is_boundary(boundary_prev));$/;"	p	file:	signature:(boundary_prev)
OpenMesh::is_eq	Geometry/MathDefs.hh	/^inline bool is_eq(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
OpenMesh::is_eq	Geometry/MathDefs.hh	/^inline bool is_eq(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
OpenMesh::is_flip_ok	Mesh/TriConnectivity.cc	/^  assert(is_flip_ok(_eh));\/\/let's make it sure it is actually checked$/;"	p	file:	signature:(_eh)
OpenMesh::is_ge	Geometry/MathDefs.hh	/^inline bool is_ge(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
OpenMesh::is_ge	Geometry/MathDefs.hh	/^inline bool is_ge(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
OpenMesh::is_gt	Geometry/MathDefs.hh	/^inline bool is_gt(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
OpenMesh::is_gt	Geometry/MathDefs.hh	/^inline bool is_gt(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
OpenMesh::is_le	Geometry/MathDefs.hh	/^inline bool is_le(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
OpenMesh::is_le	Geometry/MathDefs.hh	/^inline bool is_le(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
OpenMesh::is_lt	Geometry/MathDefs.hh	/^inline bool is_lt(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
OpenMesh::is_lt	Geometry/MathDefs.hh	/^inline bool is_lt(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
OpenMesh::is_zero	Geometry/MathDefs.hh	/^inline bool is_zero(const T& _a, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T& _a, Real _eps)
OpenMesh::is_zero	Geometry/MathDefs.hh	/^inline bool is_zero(const T& a)$/;"	f	namespace:OpenMesh	signature:(const T& a)
OpenMesh::it	Mesh/BaseKernel.cc	/^  PropertyContainer::Properties::const_iterator it;$/;"	l
OpenMesh::log_	Geometry/MathDefs.hh	/^inline double log_(double _value)$/;"	f	namespace:OpenMesh	signature:(double _value)
OpenMesh::loop_scheme_mask__	Mesh/PolyMeshT.cc	/^  static const LoopSchemeMaskDouble& loop_scheme_mask__ =$/;"	l	file:
OpenMesh::maxAngle	Geometry/NormalConeT.cc	/^    Scalar maxAngle    = std::max( angle(), centerAngle + _cone.angle());$/;"	l
OpenMesh::minAngle	Geometry/NormalConeT.cc	/^    Scalar minAngle    = std::min(-angle(), centerAngle - _cone.angle());$/;"	l
OpenMesh::mostream	System/mostream.hh	/^class mostream : public std::ostream$/;"	c	namespace:OpenMesh	inherits:std::ostream
OpenMesh::mostream::connect	System/mostream.hh	/^  template <class T> bool connect(T& _target) $/;"	f	class:OpenMesh::mostream	access:public	signature:(T& _target)
OpenMesh::mostream::disable	System/mostream.hh	/^  void disable() { streambuffer_.disable(); }$/;"	f	class:OpenMesh::mostream	access:public	signature:()
OpenMesh::mostream::disable	System/mostream.hh	/^  void disable() { streambuffer_.disable(); }$/;"	p	signature:()
OpenMesh::mostream::disconnect	System/mostream.hh	/^  template <class T> bool disconnect(T& _target) $/;"	f	class:OpenMesh::mostream	access:public	signature:(T& _target)
OpenMesh::mostream::enable	System/mostream.hh	/^  void enable() { streambuffer_.enable(); }$/;"	f	class:OpenMesh::mostream	access:public	signature:()
OpenMesh::mostream::enable	System/mostream.hh	/^  void enable() { streambuffer_.enable(); }$/;"	p	signature:()
OpenMesh::mostream::is_enabled	System/mostream.hh	/^  bool is_enabled() const { return streambuffer_.is_enabled(); }$/;"	f	class:OpenMesh::mostream	access:public	signature:() const
OpenMesh::mostream::mostream	System/mostream.hh	/^  explicit mostream() : std::ostream(NULL) { init(&streambuffer_); }$/;"	f	class:OpenMesh::mostream	access:public	signature:()
OpenMesh::mostream::streambuffer_	System/mostream.hh	/^  multiplex_streambuf  streambuffer_;$/;"	m	class:OpenMesh::mostream	access:private
OpenMesh::mps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& mps = mprops_.properties();$/;"	l
OpenMesh::multiplex_streambuf	System/mostream.hh	/^class multiplex_streambuf : public STREAMBUF$/;"	c	namespace:OpenMesh	inherits:STREAMBUF
OpenMesh::multiplex_streambuf::__connect	System/mostream.hh	/^  void __connect(target_type* _target) { targets_.push_back(_target); }$/;"	f	class:OpenMesh::multiplex_streambuf	access:private	signature:(target_type* _target)
OpenMesh::multiplex_streambuf::__disconnect	System/mostream.hh	/^  void __disconnect(target_type* _target) { $/;"	f	class:OpenMesh::multiplex_streambuf	access:private	signature:(target_type* _target)
OpenMesh::multiplex_streambuf::base_type	System/mostream.hh	/^  typedef STREAMBUF                   base_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
OpenMesh::multiplex_streambuf::buffer_	System/mostream.hh	/^      **t_it << buffer_;$/;"	l
OpenMesh::multiplex_streambuf::buffer_	System/mostream.hh	/^  std::string  buffer_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::c	System/mostream.hh	/^    char c = traits_type::to_char_type(_c);$/;"	l
OpenMesh::multiplex_streambuf::clear	System/mostream.hh	/^      buffer_.clear();$/;"	p	signature:()
OpenMesh::multiplex_streambuf::connect	System/mostream.hh	/^  template <class T> bool connect(T& _target) $/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:(T& _target)
OpenMesh::multiplex_streambuf::disable	System/mostream.hh	/^  void disable() { enabled_ = false; }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
OpenMesh::multiplex_streambuf::disconnect	System/mostream.hh	/^  template <class T> bool disconnect(T& _target) $/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:(T& _target)
OpenMesh::multiplex_streambuf::enable	System/mostream.hh	/^  void enable() { enabled_ = true; }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
OpenMesh::multiplex_streambuf::enabled_	System/mostream.hh	/^  bool         enabled_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::erase	System/mostream.hh	/^      target_map_.erase(t_it);$/;"	p	signature:(t_it)
OpenMesh::multiplex_streambuf::find	System/mostream.hh	/^    targets_.erase(std::find(targets_.begin(), targets_.end(), _target));$/;"	p	signature:(targets_.begin(), targets_.end(), _target)
OpenMesh::multiplex_streambuf::int_type	System/mostream.hh	/^  typedef base_type::int_type         int_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
OpenMesh::multiplex_streambuf::int_type	System/mostream.hh	/^  typedef int                         int_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
OpenMesh::multiplex_streambuf::is_enabled	System/mostream.hh	/^  bool is_enabled() const { return enabled_; }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:() const
OpenMesh::multiplex_streambuf::key	System/mostream.hh	/^    void*      key  = (void*) &_target;$/;"	l
OpenMesh::multiplex_streambuf::key	System/mostream.hh	/^    void* key = (void*) &_target;$/;"	l
OpenMesh::multiplex_streambuf::multiplex	System/mostream.hh	/^  void multiplex()$/;"	f	class:OpenMesh::multiplex_streambuf	access:private	signature:()
OpenMesh::multiplex_streambuf::multiplex_streambuf	System/mostream.hh	/^  multiplex_streambuf() : enabled_(true) { buffer_.reserve(100); }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
OpenMesh::multiplex_streambuf::overflow	System/mostream.hh	/^  int_type overflow(int_type _c = multiplex_streambuf::traits_type::eof())$/;"	f	class:OpenMesh::multiplex_streambuf	access:protected	signature:(int_type _c = multiplex_streambuf::traits_type::eof())
OpenMesh::multiplex_streambuf::push_back	System/mostream.hh	/^    buffer_.push_back(c);$/;"	p	signature:(c)
OpenMesh::multiplex_streambuf::push_back	System/mostream.hh	/^  void __connect(target_type* _target) { targets_.push_back(_target); }$/;"	p	signature:(_target)
OpenMesh::multiplex_streambuf::sync	System/mostream.hh	/^  virtual int sync() $/;"	f	class:OpenMesh::multiplex_streambuf	access:protected	signature:()
OpenMesh::multiplex_streambuf::t_end	System/mostream.hh	/^    tlist_iter t_it(targets_.begin()), t_end(targets_.end());$/;"	p	signature:(targets_.end())
OpenMesh::multiplex_streambuf::t_end	System/mostream.hh	/^    tmap_iter t_it(target_map_.begin()), t_end(target_map_.end());$/;"	p	signature:(target_map_.end())
OpenMesh::multiplex_streambuf::t_it	System/mostream.hh	/^    tlist_iter t_it(targets_.begin()), t_end(targets_.end());$/;"	p	signature:(targets_.begin())
OpenMesh::multiplex_streambuf::t_it	System/mostream.hh	/^    tmap_iter  t_it = target_map_.find(key);$/;"	l
OpenMesh::multiplex_streambuf::t_it	System/mostream.hh	/^    tmap_iter t_it(target_map_.begin()), t_end(target_map_.end());$/;"	p	signature:(target_map_.begin())
OpenMesh::multiplex_streambuf::target_list	System/mostream.hh	/^  typedef std::vector<target_type*>       target_list;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::target_map	System/mostream.hh	/^  typedef std::map<void*, target_type*>   target_map;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::target_map_	System/mostream.hh	/^  target_map   target_map_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::target_type	System/mostream.hh	/^  typedef basic_multiplex_target          target_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::targets_	System/mostream.hh	/^  target_list  targets_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::tlist_iter	System/mostream.hh	/^  typedef target_list::iterator           tlist_iter;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::tmap_iter	System/mostream.hh	/^  typedef target_map::iterator            tmap_iter;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
OpenMesh::multiplex_streambuf::traits_type	System/mostream.hh	/^  struct traits_type$/;"	s	class:OpenMesh::multiplex_streambuf	access:public
OpenMesh::multiplex_streambuf::traits_type	System/mostream.hh	/^  typedef base_type::traits_type      traits_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
OpenMesh::multiplex_streambuf::traits_type::eof	System/mostream.hh	/^    static int_type eof() { return -1; }$/;"	f	struct:OpenMesh::multiplex_streambuf::traits_type	access:public	signature:()
OpenMesh::multiplex_streambuf::traits_type::to_char_type	System/mostream.hh	/^    static char to_char_type(int_type c) { return char(c); }$/;"	f	struct:OpenMesh::multiplex_streambuf::traits_type	access:public	signature:(int_type c)
OpenMesh::multiplex_streambuf::~multiplex_streambuf	System/mostream.hh	/^  ~multiplex_streambuf()$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
OpenMesh::multiplex_target	System/mostream.hh	/^class multiplex_target : public basic_multiplex_target$/;"	c	namespace:OpenMesh	inherits:basic_multiplex_target
OpenMesh::multiplex_target::_s	System/mostream.hh	/^  virtual void operator<<(const std::string& _s) { target_ << _s; }$/;"	l
OpenMesh::multiplex_target::multiplex_target	System/mostream.hh	/^  multiplex_target(T& _t) : target_(_t) {}$/;"	f	class:OpenMesh::multiplex_target	access:public	signature:(T& _t)
OpenMesh::multiplex_target::operator <<	System/mostream.hh	/^  virtual void operator<<(const std::string& _s) { target_ << _s; }$/;"	f	class:OpenMesh::multiplex_target	access:public	signature:(const std::string& _s)
OpenMesh::multiplex_target::target_	System/mostream.hh	/^  T& target_;$/;"	m	class:OpenMesh::multiplex_target	access:private
OpenMesh::n	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	p	file:	signature:(_vhs_size)
OpenMesh::n	Mesh/PolyMeshT.cc	/^  Normal n    = cross(p1p2, p1p0);$/;"	l
OpenMesh::n	Mesh/PolyMeshT.cc	/^  Normal n;$/;"	l
OpenMesh::n_edges	Mesh/ArrayKernel.cc	/^  eprops_resize(n_edges());$/;"	p	file:	signature:()
OpenMesh::n_edges	Mesh/ArrayKernelT.cc	/^    eprops_resize(n_edges());$/;"	p	file:	signature:()
OpenMesh::n_faces	Mesh/ArrayKernel.cc	/^  fprops_resize(n_faces());$/;"	p	file:	signature:()
OpenMesh::n_faces	Mesh/ArrayKernelT.cc	/^    fprops_resize(n_faces());$/;"	p	file:	signature:()
OpenMesh::n_faces	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	p	file:	signature:()
OpenMesh::n_feature_edges	Mesh/PolyMeshT.cc	/^  uint n_feature_edges = 0;$/;"	l
OpenMesh::n_halfedges	Mesh/ArrayKernel.cc	/^  hprops_resize(n_halfedges());$/;"	p	file:	signature:()
OpenMesh::n_halfedges	Mesh/ArrayKernelT.cc	/^    hprops_resize(n_halfedges());$/;"	p	file:	signature:()
OpenMesh::n_isolated	Mesh/ArrayKernel.cc	/^  unsigned int n_isolated = 0;$/;"	l
OpenMesh::n_vertices	Mesh/ArrayKernel.cc	/^  vprops_resize(n_vertices());$/;"	p	file:	signature:()
OpenMesh::n_vertices	Mesh/ArrayKernelT.cc	/^    vprops_resize(n_vertices());$/;"	p	file:	signature:()
OpenMesh::name	Utils/BaseProperty.cc	/^  _ostr << "  " << name() << (persistent() ? ", persistent " : "") << "\\n";$/;"	p	file:	signature:()
OpenMesh::nb_fhs	Mesh/PolyConnectivity.cc	/^  std::set<FaceHandle> nb_fhs;$/;"	l
OpenMesh::new_e	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle new_e = new_edge(from_vertex_handle(h0), _vh);$/;"	l
OpenMesh::new_face	Mesh/PolyConnectivity.cc	/^  FaceHandle fh(new_face());$/;"	p	file:	signature:()
OpenMesh::new_fh	Mesh/PolyConnectivity.cc	/^    FaceHandle new_fh = new_face();$/;"	l
OpenMesh::new_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle new_fh = new_face();$/;"	l
OpenMesh::new_heh	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle new_heh = new_edge(to_vertex_handle(next_heh), start_vh);$/;"	l
OpenMesh::next0	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
OpenMesh::next1	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
OpenMesh::next_halfedge_handle	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle next_next_heh(next_halfedge_handle(next_heh));$/;"	p	file:	signature:(next_heh)
OpenMesh::next_halfedge_handle	Mesh/PolyConnectivity.cc	/^    collapse_loop(next_halfedge_handle(h1));$/;"	p	file:	signature:(h1)
OpenMesh::next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh(next_halfedge_handle(base_heh));$/;"	p	file:	signature:(base_heh)
OpenMesh::next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  assert(next_halfedge_handle(_prev_heh) != _next_heh);\/\/this can not be done$/;"	p	file:	signature:(_prev_heh)
OpenMesh::next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(hend), hold);$/;"	p	file:	signature:(hend)
OpenMesh::next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(next_heh), base_heh);$/;"	p	file:	signature:(next_heh)
OpenMesh::next_halfedge_handle	Mesh/PolyMeshT.cc	/^    HalfedgeHandle out_heh(next_halfedge_handle(cvih_it));$/;"	p	file:	signature:(cvih_it)
OpenMesh::next_heh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh = next_halfedge_handle(heh0);$/;"	l
OpenMesh::next_heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh0 = next_halfedge_handle(heh0);$/;"	l
OpenMesh::next_heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh1 = next_halfedge_handle(heh1);$/;"	l
OpenMesh::next_prev_heh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_prev_heh = next_halfedge_handle(_prev_heh);$/;"	l
OpenMesh::nh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle nh0 = next_halfedge_handle(h0);$/;"	l
OpenMesh::nh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle nh1 = next_halfedge_handle(h1);$/;"	l
OpenMesh::nh1	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(opposite_halfedge_handle(new_e), nh1);$/;"	l
OpenMesh::norm	Mesh/PolyMeshT.cc	/^  Scalar norm = n.length();$/;"	l
OpenMesh::norm	Mesh/PolyMeshT.cc	/^  typename vector_traits<Normal>::value_type norm = n.length();$/;"	l
OpenMesh::o	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  o  = opposite_halfedge_handle(h);$/;"	l
OpenMesh::o0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  o0 = opposite_halfedge_handle(h0);$/;"	l
OpenMesh::o0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle o0 = opposite_halfedge_handle(h0);$/;"	l
OpenMesh::o0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle o0 = halfedge_handle(_eh, 1);$/;"	l
OpenMesh::o1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  o1 = opposite_halfedge_handle(h1);$/;"	l
OpenMesh::o1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle o1 = next_halfedge_handle(o0);$/;"	l
OpenMesh::o1	Mesh/TriConnectivity.cc	/^    HalfedgeHandle o1 = next_halfedge_handle(o0);$/;"	l
OpenMesh::o1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  o1 = opposite_halfedge_handle(h1);$/;"	l
OpenMesh::o1	Mesh/TriConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(h0), o1);$/;"	l
OpenMesh::o2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle o2 = next_halfedge_handle(o1);$/;"	l
OpenMesh::oh	Mesh/TriConnectivity.cc	/^  HalfedgeHandle oh = halfedge_handle(_eh, 1);$/;"	l
OpenMesh::old_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle old_fh = face_handle(next_prev_heh);$/;"	l
OpenMesh::on	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  on = next_halfedge_handle(o);$/;"	l
OpenMesh::one	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle one, two;$/;"	l
OpenMesh::op	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  op = prev_halfedge_handle(o);$/;"	l
OpenMesh::operator *	Geometry/VectorT.hh	/^inline VectorT<Scalar,N> operator*(Scalar _s, const VectorT<Scalar,N>& _v) {$/;"	f	namespace:OpenMesh	signature:(Scalar _s, const VectorT<Scalar,N>& _v)
OpenMesh::operator <<	Mesh/Handles.hh	/^inline std::ostream& operator<<(std::ostream& _os, const BaseHandle& _hnd) $/;"	f	namespace:OpenMesh	signature:(std::ostream& _os, const BaseHandle& _hnd)
OpenMesh::opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^    set_boundary(opposite_halfedge_handle(new_e));$/;"	p	file:	signature:(new_e)
OpenMesh::opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^    set_face_handle(opposite_halfedge_handle(new_e), face_handle(h1));$/;"	p	file:	signature:(new_e)
OpenMesh::opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle v1v0(opposite_halfedge_handle(v0v1));$/;"	p	file:	signature:(v0v1)
OpenMesh::opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(opposite_halfedge_handle(new_e), nh1);$/;"	p	file:	signature:(new_e)
OpenMesh::opposite_halfedge_handle	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  o0(opposite_halfedge_handle(h0));$/;"	p	file:	signature:(h0)
OpenMesh::out_he_vec	Mesh/PolyMeshT.cc	/^    Normal out_he_vec;$/;"	l
OpenMesh::outer_next	Mesh/PolyConnectivity.cc	/^                                 outer_next, outer_prev,$/;"	l
OpenMesh::outer_prev	Mesh/PolyConnectivity.cc	/^                                 outer_next, outer_prev,$/;"	l
OpenMesh::p0	Mesh/PolyMeshT.cc	/^  Point p0 = this->point(fv_it);$/;"	l
OpenMesh::p0	Mesh/TriMeshT.cc	/^  const Point& p0(this->point(fv_it));  ++fv_it;$/;"	p	file:	signature:(this->point(fv_it))
OpenMesh::p0i	Mesh/PolyMeshT.cc	/^  Point p0i = p0; \/\/save point of vertex 0$/;"	l
OpenMesh::p1	Mesh/PolyMeshT.cc	/^  Point p1 = this->point(fv_it);$/;"	l
OpenMesh::p1	Mesh/TriMeshT.cc	/^  const Point& p1(this->point(fv_it));  ++fv_it;$/;"	p	file:	signature:(this->point(fv_it))
OpenMesh::p1i	Mesh/PolyMeshT.cc	/^  Point p1i = p1; \/\/save point of vertex 1$/;"	l
OpenMesh::p2	Mesh/PolyMeshT.cc	/^  Point p2;$/;"	l
OpenMesh::p2	Mesh/TriMeshT.cc	/^  const Point& p2(this->point(fv_it));$/;"	p	file:	signature:(this->point(fv_it))
OpenMesh::patch_end	Mesh/PolyConnectivity.cc	/^                                 patch_start, patch_end;$/;"	l
OpenMesh::patch_start	Mesh/PolyConnectivity.cc	/^                                 patch_start, patch_end;$/;"	l
OpenMesh::ph0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle ph0 = prev_halfedge_handle(h0);$/;"	l
OpenMesh::ph1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle ph1 = prev_halfedge_handle(h1);$/;"	l
OpenMesh::positive_angle	Geometry/MathDefs.hh	/^inline T positive_angle(T _angle)$/;"	f	namespace:OpenMesh	signature:(T _angle)
OpenMesh::positive_angle	Geometry/MathDefs.hh	/^inline T positive_angle(T _cos_angle, T _sin_angle)$/;"	f	namespace:OpenMesh	signature:(T _cos_angle, T _sin_angle)
OpenMesh::prev0	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
OpenMesh::prev1	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
OpenMesh::prev_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(o0), h1);$/;"	p	file:	signature:(o0)
OpenMesh::prev_halfedge_handle	Mesh/TriConnectivity.cc	/^    set_next_halfedge_handle(prev_halfedge_handle(h0), t1);$/;"	p	file:	signature:(h0)
OpenMesh::prev_halfedge_handle	Mesh/TriConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(h0), o1);$/;"	p	file:	signature:(h0)
OpenMesh::prev_heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle prev_heh0 = prev_halfedge_handle(heh0);$/;"	l
OpenMesh::prev_heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle prev_heh1 = prev_halfedge_handle(heh1);$/;"	l
OpenMesh::prev_next_heh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle prev_next_heh = prev_halfedge_handle(_next_heh);$/;"	l
OpenMesh::properties_	Utils/PropertyContainer.hh	/^  Properties   properties_;$/;"	m	namespace:OpenMesh
OpenMesh::push_back	Mesh/ArrayKernel.cc	/^    _bmc.push_back(i);$/;"	p	file:	signature:(i)
OpenMesh::push_back	Mesh/PolyConnectivity.cc	/^    face_handles.push_back(vf_it.handle());$/;"	p	file:	signature:(vf_it.handle())
OpenMesh::rad_to_deg	Geometry/MathDefs.hh	/^inline T rad_to_deg(const T& _angle)$/;"	f	namespace:OpenMesh	signature:(const T& _angle)
OpenMesh::randNum	Utils/RandomNumberGenerator.cc	/^  double randNum = 0.0;$/;"	l
OpenMesh::rem_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle rem_fh = face_handle(heh0), del_fh = face_handle(heh1);$/;"	l
OpenMesh::reserve	Mesh/ArrayKernel.cc	/^  edges_.reserve(_n_edges);$/;"	p	file:	signature:(_n_edges)
OpenMesh::reserve	Mesh/ArrayKernel.cc	/^  faces_.reserve(_n_faces);$/;"	p	file:	signature:(_n_faces)
OpenMesh::reserve	Mesh/ArrayKernel.cc	/^  vertices_.reserve(_n_vertices);$/;"	p	file:	signature:(_n_vertices)
OpenMesh::reserve	Mesh/ArrayKernelT.cc	/^  fh_map.reserve(nF);$/;"	p	file:	signature:(nF)
OpenMesh::reserve	Mesh/ArrayKernelT.cc	/^  hh_map.reserve(nH);$/;"	p	file:	signature:(nH)
OpenMesh::reserve	Mesh/ArrayKernelT.cc	/^  vh_map.reserve(nV);$/;"	p	file:	signature:(nV)
OpenMesh::resize	Mesh/ArrayKernel.cc	/^  edges_.resize(_n_edges);$/;"	p	file:	signature:(_n_edges)
OpenMesh::resize	Mesh/ArrayKernel.cc	/^  faces_.resize(_n_faces);$/;"	p	file:	signature:(_n_faces)
OpenMesh::resize	Mesh/ArrayKernel.cc	/^  vertices_.resize(_n_vertices);$/;"	p	file:	signature:(_n_vertices)
OpenMesh::resize	Mesh/PolyConnectivity.cc	/^    edgeData_.resize(n);$/;"	p	file:	signature:(n)
OpenMesh::sane_aarg	Geometry/MathDefs.hh	/^inline T sane_aarg(T _aarg)$/;"	f	namespace:OpenMesh	signature:(T _aarg)
OpenMesh::sideAngle0	Geometry/NormalConeT.cc	/^  Scalar sideAngle0 = std::max(angle_-centerAngle, _cone.angle_);$/;"	l
OpenMesh::sideAngle1	Geometry/NormalConeT.cc	/^  Scalar sideAngle1 = std::max(_cone.angle_-centerAngle, angle_);$/;"	l
OpenMesh::size	Mesh/BaseKernel.cc	/^  _ostr << eprops_.size() << " eprops:\\n";$/;"	p	file:	signature:()
OpenMesh::size	Mesh/BaseKernel.cc	/^  _ostr << fprops_.size() << " fprops:\\n";$/;"	p	file:	signature:()
OpenMesh::size	Mesh/BaseKernel.cc	/^  _ostr << hprops_.size() << " hprops:\\n";$/;"	p	file:	signature:()
OpenMesh::size	Mesh/BaseKernel.cc	/^  _ostr << mprops_.size() << " mprops:\\n";$/;"	p	file:	signature:()
OpenMesh::size	Mesh/BaseKernel.cc	/^  _ostr << vprops_.size() << " vprops:\\n";$/;"	p	file:	signature:()
OpenMesh::start_vh	Mesh/PolyConnectivity.cc	/^  VertexHandle start_vh = from_vertex_handle(base_heh);$/;"	l
OpenMesh::std::endl	Mesh/ArrayKernelT.cc	/^      omerr() << "garbage_collection: No edge status available. You can request it: mesh.request_edge_status() or define OM_GARBAGE_NO_STATUS_WARNING to silence this warning." << std::endl;$/;"	m	class:OpenMesh::std	file:
OpenMesh::std::endl	Mesh/ArrayKernelT.cc	/^      omerr() << "garbage_collection: No face status available. You can request it: mesh.request_face_status() or define OM_GARBAGE_NO_STATUS_WARNING to silence this warning." << std::endl;$/;"	m	class:OpenMesh::std	file:
OpenMesh::std::endl	Mesh/ArrayKernelT.cc	/^      omerr() << "garbage_collection: No vertex status available. You can request it: mesh.request_vertex_status() or define OM_GARBAGE_NO_STATUS_WARNING to silence this warning." << std::endl;$/;"	m	class:OpenMesh::std	file:
OpenMesh::std::swap	Mesh/ArrayKernelT.cc	/^      std::swap(edges_[i0], edges_[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(edges_[i0], edges_[i1])
OpenMesh::std::swap	Mesh/ArrayKernelT.cc	/^      std::swap(faces_[i0], faces_[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(faces_[i0], faces_[i1])
OpenMesh::std::swap	Mesh/ArrayKernelT.cc	/^      std::swap(fh_map[i0], fh_map[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(fh_map[i0], fh_map[i1])
OpenMesh::std::swap	Mesh/ArrayKernelT.cc	/^      std::swap(hh_map[2*i0+1], hh_map[2*i1+1]);$/;"	p	class:OpenMesh::std	file:	signature:(hh_map[2*i0+1], hh_map[2*i1+1])
OpenMesh::std::swap	Mesh/ArrayKernelT.cc	/^      std::swap(hh_map[2*i0], hh_map[2*i1]);$/;"	p	class:OpenMesh::std	file:	signature:(hh_map[2*i0], hh_map[2*i1])
OpenMesh::std::swap	Mesh/ArrayKernelT.cc	/^      std::swap(vertices_[i0], vertices_[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(vertices_[i0], vertices_[i1])
OpenMesh::std::swap	Mesh/ArrayKernelT.cc	/^      std::swap(vh_map[i0],  vh_map[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(vh_map[i0], vh_map[i1])
OpenMesh::std::swap	Mesh/PolyConnectivity.cc	/^    std::swap(del_fh, rem_fh);$/;"	p	class:OpenMesh::std	file:	signature:(del_fh, rem_fh)
OpenMesh::t0	Mesh/TriConnectivity.cc	/^    HalfedgeHandle t0 = opposite_halfedge_handle(e0);$/;"	l
OpenMesh::t1	Mesh/TriConnectivity.cc	/^    set_next_halfedge_handle(prev_halfedge_handle(h0), t1);$/;"	l
OpenMesh::t1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle t1 = opposite_halfedge_handle(e1);$/;"	l
OpenMesh::t2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle t2 = opposite_halfedge_handle(e2);$/;"	l
OpenMesh::tmp	Utils/RandomNumberGenerator.cc	/^  double tmp = resolution_;$/;"	l
OpenMesh::to_vertex_handle	Mesh/PolyConnectivity.cc	/^    vhandles.push_back(to_vertex_handle(hh));$/;"	p	file:	signature:(hh)
OpenMesh::to_vertex_handle	Mesh/PolyConnectivity.cc	/^  VertexHandle v0(to_vertex_handle(v1v0));$/;"	p	file:	signature:(v1v0)
OpenMesh::to_vertex_handle	Mesh/PolyConnectivity.cc	/^  VertexHandle v1(to_vertex_handle(v0v1));  $/;"	p	file:	signature:(v0v1)
OpenMesh::to_vertex_handle	Mesh/PolyMeshT.cc	/^    VertexHandle r1_v(to_vertex_handle(cvoh_it));$/;"	p	file:	signature:(cvoh_it)
OpenMesh::to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v0(to_vertex_handle(o0));$/;"	p	file:	signature:(o0)
OpenMesh::to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v0(to_vertex_handle(v1v0));$/;"	p	file:	signature:(v1v0)
OpenMesh::to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v1(to_vertex_handle(h0));$/;"	p	file:	signature:(h0)
OpenMesh::to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v1(to_vertex_handle(v0v1));$/;"	p	file:	signature:(v0v1)
OpenMesh::track_fhandles	Mesh/ArrayKernelT.cc	/^  const bool track_fhandles = ( !fh_to_update.empty() );$/;"	l
OpenMesh::track_hhandles	Mesh/ArrayKernelT.cc	/^  const bool track_hhandles = ( !hh_to_update.empty() );$/;"	l
OpenMesh::track_vhandles	Mesh/ArrayKernelT.cc	/^  const bool track_vhandles = ( !vh_to_update.empty() );$/;"	l
OpenMesh::two	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle one, two;$/;"	l
OpenMesh::v0	Mesh/PolyConnectivity.cc	/^    VertexHandle   v0, v1;$/;"	l
OpenMesh::v0	Mesh/PolyConnectivity.cc	/^  VertexHandle    v0 = to_vertex_handle(h0);$/;"	l
OpenMesh::v0	Mesh/TriConnectivity.cc	/^  VertexHandle  v0 = _vh;$/;"	l
OpenMesh::v0v1	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v0v1), v0v1);$/;"	l
OpenMesh::v0v1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v0v1 = new_edge(v0, v1);$/;"	l
OpenMesh::v0v1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
OpenMesh::v0v1_triangle	Mesh/PolyConnectivity.cc	/^  bool v0v1_triangle = false;$/;"	l
OpenMesh::v1	Mesh/PolyConnectivity.cc	/^    VertexHandle   v0, v1;$/;"	l
OpenMesh::v1	Mesh/PolyConnectivity.cc	/^  VertexHandle    v1 = to_vertex_handle(h1);$/;"	l
OpenMesh::v1	Mesh/TriConnectivity.cc	/^    VertexHandle v1 = to_vertex_handle(h1);$/;"	l
OpenMesh::v1	Mesh/TriConnectivity.cc	/^  VertexHandle  v1 = to_vertex_handle(_h0);$/;"	l
OpenMesh::v1v0	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v1v0), v1v0);$/;"	l
OpenMesh::v1v0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1v0 = opposite_halfedge_handle(v0v1);$/;"	l
OpenMesh::v1v0_triangle	Mesh/PolyConnectivity.cc	/^  bool v1v0_triangle = false;$/;"	l
OpenMesh::v1vl	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
OpenMesh::v2	Mesh/TriConnectivity.cc	/^  VertexHandle   v2 = to_vertex_handle(o0);$/;"	l
OpenMesh::v3	Mesh/TriConnectivity.cc	/^    VertexHandle v3 = to_vertex_handle(o1);$/;"	l
OpenMesh::v_01_n	Mesh/PolyConnectivity.cc	/^  VertexHandle v_01_n = to_vertex_handle(next_halfedge_handle(v0v1));  $/;"	l
OpenMesh::v_01_p	Mesh/PolyConnectivity.cc	/^  VertexHandle v_01_p = from_vertex_handle(prev_halfedge_handle(v0v1));$/;"	l
OpenMesh::v_10_n	Mesh/PolyConnectivity.cc	/^  VertexHandle v_10_n = to_vertex_handle(next_halfedge_handle(v1v0));$/;"	l
OpenMesh::v_10_p	Mesh/PolyConnectivity.cc	/^  VertexHandle v_10_p = from_vertex_handle(prev_halfedge_handle(v1v0));$/;"	l
OpenMesh::v_end	Mesh/PolyConnectivity.cc	/^                                      v_end(vhandles.end());$/;"	p	file:	signature:(vhandles.end())
OpenMesh::v_it	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_VHandlePointer::iterator v_it(vh_to_update.begin()), v_it_end(vh_to_update.end());$/;"	p	file:	signature:(vh_to_update.begin())
OpenMesh::v_it	Mesh/PolyConnectivity.cc	/^  std::vector<VertexHandle>::iterator v_it(vhandles.begin()),$/;"	p	file:	signature:(vhandles.begin())
OpenMesh::v_it_end	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_VHandlePointer::iterator v_it(vh_to_update.begin()), v_it_end(vh_to_update.end());$/;"	p	file:	signature:(vh_to_update.end())
OpenMesh::va0	Mesh/TriConnectivity.cc	/^  VertexHandle   va0 = to_vertex_handle(a0);$/;"	l
OpenMesh::va1	Mesh/TriConnectivity.cc	/^  VertexHandle   va1 = to_vertex_handle(a1);$/;"	l
OpenMesh::valence	Mesh/PolyMeshT.cc	/^  Scalar valence = 0.0;$/;"	l
OpenMesh::vb0	Mesh/TriConnectivity.cc	/^  VertexHandle   vb0 = to_vertex_handle(b0);$/;"	l
OpenMesh::vb1	Mesh/TriConnectivity.cc	/^  VertexHandle   vb1 = to_vertex_handle(b1);$/;"	l
OpenMesh::vector_cast	Mesh/PolyMeshT.cc	/^  Normal p1p0(vector_cast<Normal>(_p0));  p1p0 -= vector_cast<Normal>(_p1);$/;"	p	file:	signature:(_p0)
OpenMesh::vector_cast	Mesh/PolyMeshT.cc	/^  Normal p1p2(vector_cast<Normal>(_p2));  p1p2 -= vector_cast<Normal>(_p1);$/;"	p	file:	signature:(_p2)
OpenMesh::vector_cast	Utils/vector_cast.hh	/^vector_cast(const src_t& _src )$/;"	f	namespace:OpenMesh	signature:(const src_t& _src )
OpenMesh::vector_caster	Utils/vector_cast.hh	/^struct vector_caster$/;"	s	namespace:OpenMesh
OpenMesh::vector_caster	Utils/vector_cast.hh	/^struct vector_caster<dst_t,dst_t>$/;"	s	namespace:OpenMesh
OpenMesh::vector_caster::cast	Utils/vector_cast.hh	/^  inline static return_type cast(const dst_t& _src)$/;"	f	struct:OpenMesh::vector_caster	access:public	signature:(const dst_t& _src)
OpenMesh::vector_caster::cast	Utils/vector_cast.hh	/^  inline static return_type cast(const src_t& _src)$/;"	f	struct:OpenMesh::vector_caster	access:public	signature:(const src_t& _src)
OpenMesh::vector_caster::dst	Utils/vector_cast.hh	/^    dst_t dst;$/;"	l
OpenMesh::vector_caster::return_type	Utils/vector_cast.hh	/^  typedef const dst_t&  return_type;$/;"	t	struct:OpenMesh::vector_caster	access:public
OpenMesh::vector_caster::return_type	Utils/vector_cast.hh	/^  typedef dst_t  return_type;$/;"	t	struct:OpenMesh::vector_caster	access:public
OpenMesh::vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<1> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<1> )
OpenMesh::vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<2> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<2> )
OpenMesh::vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<3> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<3> )
OpenMesh::vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<4> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<4> )
OpenMesh::vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<5> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<5> )
OpenMesh::vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<6> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<6> )
OpenMesh::vector_traits	Utils/vector_traits.hh	/^struct vector_traits$/;"	s	namespace:OpenMesh
OpenMesh::vector_traits::size	Utils/vector_traits.hh	/^  static size_t size() { return size_; }$/;"	f	struct:OpenMesh::vector_traits	access:public	signature:()
OpenMesh::vector_traits::size_	Utils/vector_traits.hh	/^  static const size_t size_ = T::size_;$/;"	m	struct:OpenMesh::vector_traits	access:public
OpenMesh::vector_traits::value_type	Utils/vector_traits.hh	/^  typedef typename T::value_type  value_type;$/;"	t	struct:OpenMesh::vector_traits	access:public
OpenMesh::vector_traits::vector_type	Utils/vector_traits.hh	/^  typedef typename T::vector_type vector_type;$/;"	t	struct:OpenMesh::vector_traits	access:public
OpenMesh::vertexCount	Mesh/ArrayKernelT.cc	/^  const int vertexCount   = vertices_.size();$/;"	l
OpenMesh::vertex_inverse_map	Mesh/ArrayKernelT.cc	/^  std::map <int, int> vertex_inverse_map;$/;"	l
OpenMesh::vertices_end	Mesh/ArrayKernelT.cc	/^    KernelVertexIter v_it(vertices_begin()), v_end(vertices_end());$/;"	p	file:	signature:()
OpenMesh::vertices_end	Mesh/PolyMeshT.cc	/^  VertexIter  v_it(Kernel::vertices_begin()), v_end(Kernel::vertices_end());$/;"	p	file:	signature:()
OpenMesh::vfrom	Mesh/PolyConnectivity.cc	/^  VertexHandle vfrom = from_vertex_handle(h0);$/;"	l
OpenMesh::vh	Mesh/ArrayKernelT.cc	/^    VertexHandle     vh;$/;"	l
OpenMesh::vh	Mesh/PolyConnectivity.cc	/^  VertexHandle                   vh;$/;"	l
OpenMesh::vh	Mesh/PolyConnectivity.cc	/^  VertexHandle    vh = to_vertex_handle(h);$/;"	l
OpenMesh::vh0	Mesh/PolyConnectivity.cc	/^  VertexHandle vh0 = to_vertex_handle(_prev_heh);$/;"	l
OpenMesh::vh0	Mesh/PolyConnectivity.cc	/^  VertexHandle vh0 = to_vertex_handle(heh0);$/;"	l
OpenMesh::vh1	Mesh/PolyConnectivity.cc	/^  VertexHandle vh1 = from_vertex_handle(_next_heh);$/;"	l
OpenMesh::vh1	Mesh/PolyConnectivity.cc	/^  VertexHandle vh1 = to_vertex_handle(heh1);$/;"	l
OpenMesh::vh_map	Mesh/ArrayKernelT.cc	/^  std::vector<VertexHandle>    vh_map;$/;"	l
OpenMesh::vh_val	Mesh/PolyMeshT.cc	/^  unsigned int vh_val = valence(_vh);$/;"	l
OpenMesh::vhandles	Mesh/PolyConnectivity.cc	/^  std::vector<VertexHandle>  vhandles;$/;"	l
OpenMesh::vhandles	Mesh/TriConnectivity.cc	/^    VertexHandle vhandles[3];$/;"	l
OpenMesh::vhs	Mesh/PolyConnectivity.cc	/^  VertexHandle vhs[3] = { _vh0, _vh1, _vh2 };$/;"	l
OpenMesh::vhs	Mesh/PolyConnectivity.cc	/^  VertexHandle vhs[4] = { _vh0, _vh1, _vh2, _vh3 };$/;"	l
OpenMesh::vhs	Mesh/TriConnectivity.cc	/^  VertexHandle vhs[3] = { _vh0, _vh1, _vh2 };$/;"	l
OpenMesh::vl	Mesh/PolyConnectivity.cc	/^      VertexHandle vl = to_vertex_handle(next_halfedge_handle(v0v1));$/;"	l
OpenMesh::vlv1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
OpenMesh::vo	Mesh/PolyConnectivity.cc	/^  VertexHandle    vo = to_vertex_handle(o);$/;"	l
OpenMesh::vps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& vps = vprops_.properties();$/;"	l
OpenMesh::vr	Mesh/PolyConnectivity.cc	/^      VertexHandle vr = to_vertex_handle(next_halfedge_handle(v1v0));$/;"	l
OpenMesh::vrv1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
Option	IO/writer/BaseWriter.hh	/^  typedef unsigned int Option;$/;"	t	class:OpenMesh::IO::BaseWriter	access:public
Options	IO/Options.hh	/^  Options() : flags_( Default )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:()
Options	IO/Options.hh	/^  Options(Flag _flg) : flags_( _flg)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(Flag _flg)
Options	IO/Options.hh	/^  Options(const Options& _opt) : flags_(_opt.flags_)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const Options& _opt)
Options	IO/Options.hh	/^  Options(const value_type _flgs) : flags_( _flgs)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _flgs)
Options	IO/Options.hh	/^class Options$/;"	c	namespace:OpenMesh::IO
PLYReader	IO/reader/PLYReader.cc	/^_PLYReader_& PLYReader() {$/;"	f	namespace:OpenMesh::IO	signature:()
PLYReader	IO/reader/PLYReader.hh	/^OPENMESHDLLEXPORT _PLYReader_&  PLYReader();$/;"	p	namespace:OpenMesh::IO	signature:()
PLYReaderInstance	IO/IOInstances.hh	/^static BaseReader* PLYReaderInstance = &PLYReader();$/;"	m	namespace:OpenMesh::IO
PLYWriter	IO/writer/PLYWriter.cc	/^_PLYWriter_& PLYWriter() { return __PLYWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
PLYWriter	IO/writer/PLYWriter.hh	/^OPENMESHDLLEXPORT _PLYWriter_& PLYWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
PLYWriterInstance	IO/IOInstances.hh	/^static BaseWriter* PLYWriterInstance = &PLYWriter();$/;"	m	namespace:OpenMesh::IO
POLYMESH_CAST	Mesh/Casts.hh	/^inline PolyMesh_ArrayKernelT<Traits>& POLYMESH_CAST(TriMesh_ArrayKernelT<Traits>& _tri_mesh)$/;"	f	namespace:OpenMesh	signature:(TriMesh_ArrayKernelT<Traits>& _tri_mesh)
POLYMESH_CAST	Mesh/Casts.hh	/^inline const PolyMesh_ArrayKernelT<Traits>& POLYMESH_CAST(const TriMesh_ArrayKernelT<Traits>& _tri_mesh)$/;"	f	namespace:OpenMesh	signature:(const TriMesh_ArrayKernelT<Traits>& _tri_mesh)
PROPERTYMANAGER_HH_	Utils/PropertyManager.hh	43;"	d
Plane3d	Geometry/Plane3d.hh	/^  Plane3d()$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:()
Plane3d	Geometry/Plane3d.hh	/^  Plane3d(const vector_type &_dir, const vector_type &_pnt)$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:(const vector_type &_dir, const vector_type &_pnt)
Plane3d	Geometry/Plane3d.hh	/^class OPENMESHDLLEXPORT Plane3d$/;"	c	namespace:OpenMesh::VDPM
Point	IO/importer/ImporterT.hh	/^  typedef typename Mesh::Point       Point;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
Point	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Point         Point;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Point	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::Point            Point;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
Point	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Point           Point;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
Point	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Point     Point;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Point	Mesh/Traits.hh	/^    typedef typename T1::Point    Point;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
Point	Mesh/Traits.hh	/^  typedef Vec3f  Point;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
Point	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Point              Point;$/;"	t	class:OpenMesh::TriMeshT	access:public
PointsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<Point>               PointsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
PolyConnectivity	Mesh/PolyConnectivity.hh	/^  PolyConnectivity()  {}$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
PolyConnectivity	Mesh/PolyConnectivity.hh	/^class OPENMESHDLLEXPORT PolyConnectivity : public ArrayKernel$/;"	c	namespace:OpenMesh	inherits:ArrayKernel
PolyMesh	Mesh/TriMeshT.hh	/^  typedef PolyMeshT<Kernel>                     PolyMesh;$/;"	t	class:OpenMesh::TriMeshT	access:public
PolyMeshT	Mesh/PolyMeshT.hh	/^  PolyMeshT() {}$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
PolyMeshT	Mesh/PolyMeshT.hh	/^class PolyMeshT : public Kernel$/;"	c	namespace:OpenMesh	inherits:Kernel
PolyMesh_ArrayKernelT	Mesh/PolyMesh_ArrayKernelT.hh	/^class PolyMesh_ArrayKernelT$/;"	c	namespace:OpenMesh	inherits:PolyMesh_ArrayKernel_GeneratorT::Mesh
PolyMesh_ArrayKernel_GeneratorT	Mesh/PolyMesh_ArrayKernelT.hh	/^struct PolyMesh_ArrayKernel_GeneratorT$/;"	s	namespace:OpenMesh
PrevHalfedge	Mesh/Attributes.hh	/^  PrevHalfedge  = 4,  \/\/\/< Add storage for previous halfedge (halfedges). The bit is set by default in the DefaultTraits.$/;"	e	enum:OpenMesh::Attributes::AttributeBits
Properties	Utils/PropertyContainer.hh	/^  typedef std::vector<BaseProperty*> Properties;$/;"	t	class:OpenMesh::PropertyContainer	access:public
PropertyContainer	Utils/PropertyContainer.hh	/^  PropertyContainer() {}$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:()
PropertyContainer	Utils/PropertyContainer.hh	/^  PropertyContainer(const PropertyContainer& _rhs) { operator=(_rhs); }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const PropertyContainer& _rhs)
PropertyContainer	Utils/PropertyContainer.hh	/^class PropertyContainer$/;"	c	namespace:OpenMesh
PropertyHandle	Utils/AutoPropertyHandleT.hh	/^  typedef PropertyHandle_                   PropertyHandle;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(MeshT &mesh, const char *propname, bool existing = false) : mesh_(&mesh), retain_(existing) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname, bool existing = false)
PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(PropertyManager &&rhs) : mesh_(rhs.mesh_), prop_(rhs.prop_), retain_(rhs.retain_) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(PropertyManager &&rhs)
PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(Proxy p) : mesh_(p.mesh_), prop_(p.prop_), retain_(p.retain_) {}$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(Proxy p)
PropertyManager	Utils/PropertyManager.hh	/^        PropertyManager(const PropertyManager&);$/;"	p	class:OpenMesh::PropertyManager	access:private	signature:(const PropertyManager&)
PropertyManager	Utils/PropertyManager.hh	/^class PropertyManager {$/;"	c	namespace:OpenMesh
PropertyName	IO/OMFormat.hh	/^      PropertyName( ) { }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( )
PropertyName	IO/OMFormat.hh	/^      PropertyName( const std::string& _name ) { *this = _name; }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( const std::string& _name )
PropertyName	IO/OMFormat.hh	/^    class PropertyName : public std::string$/;"	c	struct:OpenMesh::IO::OMFormat::Chunk	inherits:std::string	access:public
PropertyName	IO/reader/OMReader.hh	/^  typedef OMFormat::Chunk::PropertyName PropertyName;$/;"	t	class:OpenMesh::IO::_OMReader_	access:private
PropertyT	Utils/Property.hh	/^  PropertyT(const PropertyT & _rhs)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(const PropertyT & _rhs)
PropertyT	Utils/Property.hh	/^  PropertyT(const std::string& _name = "<unknown>")$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(const std::string& _name = Ó)
PropertyT	Utils/Property.hh	/^class PropertyT : public BaseProperty$/;"	c	namespace:OpenMesh	inherits:BaseProperty
PropertyT	Utils/Property.hh	/^class PropertyT<bool> : public BaseProperty$/;"	c	namespace:OpenMesh	inherits:BaseProperty
PropertyT	Utils/Property.hh	/^class PropertyT<std::string> : public BaseProperty$/;"	c	namespace:OpenMesh	inherits:BaseProperty
Proxy	Utils/PropertyManager.hh	/^                Proxy(MeshT *mesh_, PROPTYPE prop_, bool retain_) :$/;"	f	class:OpenMesh::PropertyManager::Proxy	access:private	signature:(MeshT *mesh_, PROPTYPE prop_, bool retain_)
Proxy	Utils/PropertyManager.hh	/^        class Proxy {$/;"	c	class:OpenMesh::PropertyManager	access:public
QuadricT	Geometry/QuadricT.hh	/^  QuadricT( Scalar _a=0.0, Scalar _b=0.0, Scalar _c=0.0, Scalar _d=0.0 )$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:( Scalar _a=0.0, Scalar _b=0.0, Scalar _c=0.0, Scalar _d=0.0 )
QuadricT	Geometry/QuadricT.hh	/^  QuadricT(Scalar _a, Scalar _b, Scalar _c, Scalar _d,$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(Scalar _a, Scalar _b, Scalar _c, Scalar _d, Scalar _e, Scalar _f, Scalar _g, Scalar _h, Scalar _i, Scalar _j)
QuadricT	Geometry/QuadricT.hh	/^  QuadricT(const _Normal& _n, const _Point& _p)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Normal& _n, const _Point& _p)
QuadricT	Geometry/QuadricT.hh	/^  QuadricT(const _Point& _pt)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Point& _pt)
QuadricT	Geometry/QuadricT.hh	/^class QuadricT$/;"	c	namespace:OpenMesh::Geometry
Quadricd	Geometry/QuadricT.hh	/^typedef QuadricT<double> Quadricd;$/;"	t	namespace:OpenMesh::Geometry
Quadricf	Geometry/QuadricT.hh	/^typedef QuadricT<float> Quadricf;$/;"	t	namespace:OpenMesh::Geometry
R	Utils/Property.hh	/^    size_t R = data_.size() % 8;$/;"	l
REVERSE_FUNDAMENTAL_TYPE	IO/SR_rbo.hh	177;"	d
REVERSE_FUNDAMENTAL_TYPE	IO/SR_rbo.hh	200;"	d
RandomNumberGenerator	Utils/RandomNumberGenerator.cc	/^RandomNumberGenerator::RandomNumberGenerator(const double _resolution) :$/;"	f	class:OpenMesh::RandomNumberGenerator	signature:(const double _resolution)
RandomNumberGenerator	Utils/RandomNumberGenerator.hh	/^  RandomNumberGenerator(const double _resolution);$/;"	p	class:OpenMesh::RandomNumberGenerator	access:public	signature:(const double _resolution)
RandomNumberGenerator	Utils/RandomNumberGenerator.hh	/^class OPENMESHDLLEXPORT RandomNumberGenerator$/;"	c	namespace:OpenMesh
Refs	Mesh/FinalMeshItemsT.hh	/^  struct Refs$/;"	s	struct:OpenMesh::FinalMeshItemsT	access:public
Result	Mesh/Traits.hh	/^  struct Result$/;"	s	struct:OpenMesh::MergeTraits	access:public
Result	Utils/GenProg.hh	/^    typedef Else Result;$/;"	t	struct:OpenMesh::GenProg::SelectElse::Select	access:public
Result	Utils/GenProg.hh	/^    typedef Then Result;$/;"	t	struct:OpenMesh::GenProg::SelectThen::Select	access:public
Result	Utils/GenProg.hh	/^  typedef SelectElse Result;$/;"	t	struct:OpenMesh::GenProg::ChooseSelector	access:public
Result	Utils/GenProg.hh	/^  typedef SelectThen Result;$/;"	t	struct:OpenMesh::GenProg::ChooseSelector	access:public
Result	Utils/GenProg.hh	/^  typedef typename Selector::template Select<Then, Else>::Result  Result;$/;"	t	class:OpenMesh::GenProg::IF	access:public
Result	Utils/GenProg.hh	/^struct IF { typedef Then Result; };$/;"	t	struct:OpenMesh::GenProg::IF	access:public
Result	Utils/GenProg.hh	/^struct IF<false, Then, Else> { typedef Else Result; };$/;"	t	struct:OpenMesh::GenProg::IF	access:public
SELECTED	Mesh/Status.hh	/^  SELECTED              = 4,    \/\/\/< Item is selected.$/;"	e	enum:OpenMesh::Attributes::StatusBits
SIGNED	Mesh/ArrayKernel.hh	137;"	d
SIGNED	Mesh/ArrayKernel.hh	200;"	d
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(bool);$/;"	p	namespace:OpenMesh::IO	signature:(bool)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(double);$/;"	p	namespace:OpenMesh::IO	signature:(double)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(float);$/;"	p	namespace:OpenMesh::IO	signature:(float)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int16_t);$/;"	p	namespace:OpenMesh::IO	signature:(int16_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int32_t);$/;"	p	namespace:OpenMesh::IO	signature:(int32_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int64_t);$/;"	p	namespace:OpenMesh::IO	signature:(int64_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(int8_t);$/;"	p	namespace:OpenMesh::IO	signature:(int8_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(long double);$/;"	p	namespace:OpenMesh::IO	signature:(long double)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint16_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint16_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint32_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint32_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint64_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint64_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(uint8_t);$/;"	p	namespace:OpenMesh::IO	signature:(uint8_t)
SIMPLE_BINARY	IO/SR_binary_spec.hh	/^SIMPLE_BINARY(unsigned long);$/;"	p	namespace:OpenMesh::IO	signature:(unsigned long)
SIMPLE_BINARY	IO/SR_binary_spec.hh	126;"	d
SIMPLE_BINARY	IO/SR_binary_spec.hh	136;"	d
SIMPLE_BINARY	IO/SR_binary_spec.hh	164;"	d
SIMPLE_BINARY	IO/SR_binary_spec.hh	86;"	d
SIZE_BITS	IO/OMFormat.hh	/^    static const int SIZE_BITS     = 2; \/\/ 16$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
SIZE_DIM	IO/OMFormat.hh	/^    static const int SIZE_DIM      = 3; \/\/ 14$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
SIZE_ENTITY	IO/OMFormat.hh	/^    static const int SIZE_ENTITY   = 3; \/\/  5$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
SIZE_FLOAT	IO/OMFormat.hh	/^    static const int SIZE_FLOAT    = 1; \/\/ 11$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
SIZE_NAME	IO/OMFormat.hh	/^    static const int SIZE_NAME     = 1; \/\/  2$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
SIZE_RESERVED	IO/OMFormat.hh	/^    static const int SIZE_RESERVED = 1; \/\/  1$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
SIZE_SIGNED	IO/OMFormat.hh	/^    static const int SIZE_SIGNED   = 1; \/\/ 10$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
SIZE_TYPE	IO/OMFormat.hh	/^    static const int SIZE_TYPE     = 4; \/\/  9$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk	access:public
STLA	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	e	enum:OpenMesh::IO::_STLReader_::STL_Type
STLB	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	e	enum:OpenMesh::IO::_STLReader_::STL_Type
STLReader	IO/reader/STLReader.cc	/^_STLReader_&  STLReader() { return __STLReaderInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
STLReader	IO/reader/STLReader.hh	/^OPENMESHDLLEXPORT _STLReader_&  STLReader();$/;"	p	namespace:OpenMesh::IO	signature:()
STLReaderInstance	IO/IOInstances.hh	/^static BaseReader* STLReaderInstance = &STLReader();$/;"	m	namespace:OpenMesh::IO
STLWriter	IO/writer/STLWriter.cc	/^_STLWriter_& STLWriter() { return __STLWriterInstance; }$/;"	f	namespace:OpenMesh::IO	signature:()
STLWriter	IO/writer/STLWriter.hh	/^OPENMESHDLLEXPORT _STLWriter_& STLWriter();$/;"	p	namespace:OpenMesh::IO	signature:()
STLWriterInstance	IO/IOInstances.hh	/^static BaseWriter* STLWriterInstance = &STLWriter();$/;"	m	namespace:OpenMesh::IO
STL_Type	IO/reader/STLReader.hh	/^  enum STL_Type { STLA, STLB, NONE };$/;"	g	class:OpenMesh::IO::_STLReader_	access:private
STREAMBUF	System/mostream.hh	100;"	d
STREAMBUF	System/mostream.hh	104;"	d
STREAMBUF	System/mostream.hh	241;"	d
Scalar	Geometry/LoopSchemeMaskT.hh	/^  typedef T_                                Scalar;$/;"	t	class:OpenMesh::LoopSchemeMaskT	access:public
Scalar	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::Scalar        Scalar;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Scalar	Mesh/FinalMeshItemsT.hh	/^    typedef typename vector_traits<Point>::value_type Scalar;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
Scalar	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::Scalar          Scalar;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
Scalar	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Scalar    Scalar;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Scalar	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Scalar             Scalar;$/;"	t	class:OpenMesh::TriMeshT	access:public
Select	Utils/GenProg.hh	/^  template <class Then, class Else> struct Select {$/;"	s	struct:OpenMesh::GenProg::SelectElse	access:public
Select	Utils/GenProg.hh	/^  template <class Then, class Else> struct Select {$/;"	s	struct:OpenMesh::GenProg::SelectThen	access:public
SelectElse	Utils/GenProg.hh	/^struct SelectElse$/;"	s	namespace:OpenMesh::GenProg
SelectThen	Utils/GenProg.hh	/^struct SelectThen $/;"	s	namespace:OpenMesh::GenProg
Selector	Utils/GenProg.hh	/^  typedef typename ChooseSelector<condition>::Result  Selector;$/;"	t	class:OpenMesh::GenProg::IF	access:private
Self	Geometry/QuadricT.hh	/^  typedef QuadricT<Scalar> Self;$/;"	t	class:OpenMesh::Geometry::QuadricT	access:public
Self	Utils/AutoPropertyHandleT.hh	/^                                            Self;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
SingletonT	Utils/SingletonT.hh	/^  SingletonT();$/;"	p	class:OpenMesh::SingletonT	access:private	signature:()
SingletonT	Utils/SingletonT.hh	/^  SingletonT(const SingletonT&);$/;"	p	class:OpenMesh::SingletonT	access:private	signature:(const SingletonT&)
SingletonT	Utils/SingletonT.hh	/^class SingletonT$/;"	c	namespace:OpenMesh
Status	Mesh/Attributes.hh	/^  Status        = 8,  \/\/\/< Add status to mesh item (all items)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
StatusBits	Mesh/Status.hh	/^enum StatusBits {$/;"	g	namespace:OpenMesh::Attributes
StatusInfo	Mesh/ArrayKernel.hh	/^  typedef Attributes::StatusInfo            StatusInfo;$/;"	t	class:OpenMesh::ArrayKernel	access:public
StatusInfo	Mesh/Status.hh	/^  StatusInfo() : status_(0) {}$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:()
StatusInfo	Mesh/Status.hh	/^class StatusInfo$/;"	c	namespace:OpenMesh::Attributes
StatusSetT	Mesh/ArrayKernel.hh	/^    StatusSetT(ArrayKernel& _kernel, unsigned int _bit_mask)$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(ArrayKernel& _kernel, unsigned int _bit_mask)
StatusSetT	Mesh/ArrayKernel.hh	/^  class StatusSetT$/;"	c	class:OpenMesh::ArrayKernel	access:public
Swap	IO/Options.hh	/^      Swap           = 0x0006, \/\/\/< Swap byte order in binary mode$/;"	e	enum:OpenMesh::IO::Options::Flag
Swap	Utils/PropertyContainer.hh	/^    Swap(size_t _i0, size_t _i1) : i0_(_i0), i1_(_i1) {}$/;"	f	struct:OpenMesh::Swap	access:public	signature:(size_t _i0, size_t _i1)
Swap	Utils/PropertyContainer.hh	/^  struct Swap$/;"	s	namespace:OpenMesh
T	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(T()); }$/;"	p	signature:()
T1	Mesh/Traits.hh	/^    typedef _Traits1  T1;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
T2	Mesh/Traits.hh	/^    typedef _Traits2  T2;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
TAGGED	Mesh/Status.hh	/^  TAGGED                = 32,   \/\/\/< Item is tagged.$/;"	e	enum:OpenMesh::Attributes::StatusBits
TAGGED2	Mesh/Status.hh	/^  TAGGED2               = 64,   \/\/\/< Alternate bit for tagging an item.$/;"	e	enum:OpenMesh::Attributes::StatusBits
TEMPLATE_HEADER	Geometry/VectorT.hh	121;"	d
TEMPLATE_HEADER	Geometry/VectorT.hh	134;"	d
TEMPLATE_HEADER	Geometry/VectorT.hh	146;"	d
TEMPLATE_HEADER	Geometry/VectorT.hh	184;"	d
TEMPLATE_HEADER	Geometry/VectorT_inc.hh	51;"	d
TEXX	IO/reader/PLYReader.hh	/^    TEXX,TEXY,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
TEXY	IO/reader/PLYReader.hh	/^    TEXX,TEXY,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
TRAITS_TYPE	System/mostream.hh	102;"	d
TRIMESH_CAST	Mesh/Casts.hh	/^inline TriMesh_ArrayKernelT<Traits>& TRIMESH_CAST(PolyMesh_ArrayKernelT<Traits>& _poly_mesh)$/;"	f	namespace:OpenMesh	signature:(PolyMesh_ArrayKernelT<Traits>& _poly_mesh)
TRIMESH_CAST	Mesh/Casts.hh	/^inline const TriMesh_ArrayKernelT<Traits>& TRIMESH_CAST(const PolyMesh_ArrayKernelT<Traits>& _poly_mesh)$/;"	f	namespace:OpenMesh	signature:(const PolyMesh_ArrayKernelT<Traits>& _poly_mesh)
TexCoord	Mesh/Traits.hh	/^    typedef typename T1::TexCoord TexCoord;$/;"	t	struct:OpenMesh::MergeTraits::Result	access:public
TexCoord1D	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TexCoord1D    TexCoord1D;$/;"	t	class:OpenMesh::AttribKernelT	access:public
TexCoord1D	Mesh/Attributes.hh	/^  TexCoord1D    = 16, \/\/\/< Add 1D texture coordinates (vertices, halfedges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
TexCoord1D	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TexCoord1D       TexCoord1D;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
TexCoord1D	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TexCoord1D      TexCoord1D;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
TexCoord1D	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::TexCoord1D  TexCoord1D;$/;"	t	class:OpenMesh::PolyMeshT	access:public
TexCoord1D	Mesh/Traits.hh	/^  typedef float  TexCoord1D;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
TexCoord1D	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::TexCoord1D         TexCoord1D;$/;"	t	class:OpenMesh::TriMeshT	access:public
TexCoord2D	IO/importer/ImporterT.hh	/^  typedef typename Mesh::TexCoord2D  TexCoord2D;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
TexCoord2D	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TexCoord2D    TexCoord2D;$/;"	t	class:OpenMesh::AttribKernelT	access:public
TexCoord2D	Mesh/Attributes.hh	/^  TexCoord2D    = 32, \/\/\/< Add 2D texture coordinates (vertices, halfedges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
TexCoord2D	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TexCoord2D       TexCoord2D;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
TexCoord2D	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TexCoord2D      TexCoord2D;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
TexCoord2D	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::TexCoord2D  TexCoord2D;$/;"	t	class:OpenMesh::PolyMeshT	access:public
TexCoord2D	Mesh/Traits.hh	/^  typedef Vec2f  TexCoord2D;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
TexCoord2D	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::TexCoord2D         TexCoord2D;$/;"	t	class:OpenMesh::TriMeshT	access:public
TexCoord3D	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TexCoord3D    TexCoord3D;$/;"	t	class:OpenMesh::AttribKernelT	access:public
TexCoord3D	Mesh/Attributes.hh	/^  TexCoord3D    = 64, \/\/\/< Add 3D texture coordinates (vertices, halfedges)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
TexCoord3D	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TexCoord3D       TexCoord3D;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
TexCoord3D	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TexCoord3D      TexCoord3D;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
TexCoord3D	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::TexCoord3D  TexCoord3D;$/;"	t	class:OpenMesh::PolyMeshT	access:public
TexCoord3D	Mesh/Traits.hh	/^  typedef Vec3f  TexCoord3D;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
TexCoord3D	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::TexCoord3D         TexCoord3D;$/;"	t	class:OpenMesh::TriMeshT	access:public
TextureIndex	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::TextureIndex  TextureIndex;$/;"	t	class:OpenMesh::AttribKernelT	access:public
TextureIndex	Mesh/Attributes.hh	/^  TextureIndex  = 128 \/\/\/< Add texture index (faces)$/;"	e	enum:OpenMesh::Attributes::AttributeBits
TextureIndex	Mesh/FinalMeshItemsT.hh	/^    typedef typename Traits::TextureIndex     TextureIndex;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
TextureIndex	Mesh/FinalMeshItemsT.hh	/^  typedef typename Refs::TextureIndex    TextureIndex;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
TextureIndex	Mesh/Traits.hh	/^  typedef int TextureIndex;$/;"	t	struct:OpenMesh::DefaultTraits	access:public
This	Mesh/PolyConnectivity.hh	/^  typedef PolyConnectivity                            This;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
This	Mesh/PolyMeshT.hh	/^  typedef PolyMeshT<Kernel>                   This;$/;"	t	class:OpenMesh::PolyMeshT	access:public
This	Mesh/TriMeshT.hh	/^  typedef TriMeshT<Kernel>                      This;$/;"	t	class:OpenMesh::TriMeshT	access:public
Tr	IO/reader/OBJReader.hh	/^    float  Tr( void ) const { return Tr_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void ) const
Tr_	IO/reader/OBJReader.hh	/^    float Tr_;                          bool Tr_is_set_; \/\/ transperency$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
Tr_is_set_	IO/reader/OBJReader.hh	/^    float Tr_;                          bool Tr_is_set_; \/\/ transperency$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
TriConnectivity	Mesh/TriConnectivity.hh	/^  TriConnectivity() {}$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:()
TriConnectivity	Mesh/TriConnectivity.hh	/^class OPENMESHDLLEXPORT TriConnectivity : public PolyConnectivity$/;"	c	namespace:OpenMesh	inherits:PolyConnectivity
TriMeshT	Mesh/TriMeshT.hh	/^  TriMeshT() : PolyMesh() {}$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
TriMeshT	Mesh/TriMeshT.hh	/^class TriMeshT : public PolyMeshT<Kernel>$/;"	c	namespace:OpenMesh	inherits:PolyMeshT
TriMesh_ArrayKernelT	Mesh/TriMesh_ArrayKernelT.hh	/^class TriMesh_ArrayKernelT$/;"	c	namespace:OpenMesh	inherits:TriMesh_ArrayKernel_GeneratorT::Mesh
TriMesh_ArrayKernel_GeneratorT	Mesh/TriMesh_ArrayKernelT.hh	/^struct TriMesh_ArrayKernel_GeneratorT$/;"	s	namespace:OpenMesh
True	Utils/GenProg.hh	/^typedef Bool2Type<true> True;$/;"	t	namespace:OpenMesh::GenProg
Type	IO/OMFormat.cc	/^	<< as_string(Chunk::Type(_c.type_));$/;"	p	file:	signature:(_c.type_)
Type	IO/OMFormat.hh	/^    enum Type {$/;"	g	struct:OpenMesh::IO::OMFormat::Chunk	access:public
Type	Utils/Endian.hh	/^  enum Type {$/;"	g	class:OpenMesh::Endian	access:public
Type_Color	IO/OMFormat.hh	/^      Type_Color     = 0x04,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
Type_Custom	IO/OMFormat.hh	/^      Type_Custom    = 0x06,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
Type_Normal	IO/OMFormat.hh	/^      Type_Normal    = 0x01,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
Type_Pos	IO/OMFormat.hh	/^      Type_Pos       = 0x00,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
Type_Status	IO/OMFormat.hh	/^      Type_Status    = 0x03,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
Type_Texcoord	IO/OMFormat.hh	/^      Type_Texcoord  = 0x02,$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
Type_Topology	IO/OMFormat.hh	/^      Type_Topology  = 0x07$/;"	e	enum:OpenMesh::IO::OMFormat::Chunk::Type
UNSUPPORTED	IO/reader/PLYReader.hh	/^    UNSUPPORTED$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
UNUSED	Mesh/Status.hh	/^  UNUSED                = 256   \/\/\/< Unused$/;"	e	enum:OpenMesh::Attributes::StatusBits
UnknownSize	Utils/BaseProperty.hh	/^  static const size_t UnknownSize = size_t(-1);$/;"	m	class:OpenMesh::BaseProperty	access:public
Unsupported	IO/reader/PLYReader.hh	/^    Unsupported,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
Unsupported	IO/writer/PLYWriter.hh	/^    Unsupported ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
Utils	Utils/Noncopyable.hh	/^namespace Utils {$/;"	n	namespace:OpenMesh
VAttribs	Mesh/AttribKernelT.hh	/^    VAttribs = MeshItems::VAttribs,$/;"	e	enum:OpenMesh::AttribKernelT::Attribs
VAttribs	Mesh/FinalMeshItemsT.hh	/^    VAttribs = Traits::VertexAttributes,$/;"	e	enum:OpenMesh::FinalMeshItemsT::Attribs
VDPM	Geometry/Plane3d.hh	/^namespace VDPM {$/;"	n	namespace:OpenMesh
VECTORTS_BINARY	IO/SR_binary_spec.hh	193;"	d
VECTORTS_BINARY	IO/SR_binary_spec.hh	209;"	d
VECTORT_BINARY	IO/SR_binary_spec.hh	166;"	d
VECTORT_BINARY	IO/SR_binary_spec.hh	210;"	d
VEIter	Mesh/PolyConnectivity.hh	/^  typedef VertexEdgeIter        VEIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VFIter	Mesh/PolyConnectivity.hh	/^  typedef VertexFaceIter        VFIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VHandle	Mesh/PolyConnectivity.hh	/^  typedef VertexHandle    VHandle;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VHandles	IO/importer/BaseImporter.hh	/^  typedef std::vector<VertexHandle> VHandles;$/;"	t	class:OpenMesh::IO::BaseImporter	access:public
VHandles	IO/importer/ImporterT.hh	/^  typedef std::vector<VertexHandle>  VHandles;$/;"	t	class:OpenMesh::IO::ImporterT	access:public
VIHIter	Mesh/PolyConnectivity.hh	/^  typedef VertexIHalfedgeIter   VIHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VIter	Mesh/PolyConnectivity.hh	/^  typedef VertexIter    VIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VOHIter	Mesh/PolyConnectivity.hh	/^  typedef VertexOHalfedgeIter   VOHIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VPropHandleT	Utils/Property.hh	/^  explicit VPropHandleT(const BasePropHandleT<T>& _b) : BasePropHandleT<T>(_b) {}$/;"	f	struct:OpenMesh::VPropHandleT	access:public	signature:(const BasePropHandleT<T>& _b)
VPropHandleT	Utils/Property.hh	/^  explicit VPropHandleT(int _idx=-1) : BasePropHandleT<T>(_idx) {}$/;"	f	struct:OpenMesh::VPropHandleT	access:public	signature:(int _idx=-1)
VPropHandleT	Utils/Property.hh	/^struct VPropHandleT : public BasePropHandleT<T>$/;"	s	namespace:OpenMesh	inherits:BasePropHandleT
VVIter	Mesh/PolyConnectivity.hh	/^  typedef VertexVertexIter      VVIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
Value	Utils/AutoPropertyHandleT.hh	/^  typedef typename PropertyHandle::Value    Value;$/;"	t	class:OpenMesh::AutoPropertyHandleT	access:public
Value	Utils/Property.hh	/^  typedef T                                       Value;$/;"	t	class:OpenMesh::PropertyT	access:public
Value	Utils/Property.hh	/^  typedef T                                       Value;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::EPropHandleT	access:public
Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::FPropHandleT	access:public
Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::HPropHandleT	access:public
Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::MPropHandleT	access:public
Value	Utils/Property.hh	/^  typedef T                       Value;$/;"	t	struct:OpenMesh::VPropHandleT	access:public
Value	Utils/Property.hh	/^  typedef std::string                             Value;$/;"	t	class:OpenMesh::PropertyT	access:public
ValueType	IO/reader/PLYReader.hh	/^  enum ValueType {$/;"	g	class:OpenMesh::IO::_PLYReader_	access:public
ValueType	IO/writer/PLYWriter.hh	/^  enum ValueType {$/;"	g	class:OpenMesh::IO::_PLYWriter_	access:public
ValueTypeCHAR	IO/reader/PLYReader.hh	/^    ValueTypeINT8, ValueTypeCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeDOUBLE	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT64, ValueTypeDOUBLE$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeFLOAT	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeFLOAT	IO/writer/PLYWriter.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
ValueTypeFLOAT32	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeFLOAT32	IO/writer/PLYWriter.hh	/^    ValueTypeFLOAT32, ValueTypeFLOAT,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
ValueTypeFLOAT64	IO/reader/PLYReader.hh	/^    ValueTypeFLOAT64, ValueTypeDOUBLE$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeINT	IO/reader/PLYReader.hh	/^    ValueTypeINT32, ValueTypeINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeINT	IO/writer/PLYWriter.hh	/^    ValueTypeUINT8, ValueTypeINT32, ValueTypeINT ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
ValueTypeINT16	IO/reader/PLYReader.hh	/^    ValueTypeINT16, ValueTypeSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeINT32	IO/reader/PLYReader.hh	/^    ValueTypeINT32, ValueTypeINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeINT32	IO/writer/PLYWriter.hh	/^    ValueTypeUINT8, ValueTypeINT32, ValueTypeINT ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
ValueTypeINT8	IO/reader/PLYReader.hh	/^    ValueTypeINT8, ValueTypeCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeSHORT	IO/reader/PLYReader.hh	/^    ValueTypeINT16, ValueTypeSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeUCHAR	IO/reader/PLYReader.hh	/^    ValueTypeUINT8, ValueTypeUCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeUCHAR	IO/writer/PLYWriter.hh	/^    ValueTypeUCHAR$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
ValueTypeUINT	IO/reader/PLYReader.hh	/^    ValueTypeUINT32, ValueTypeUINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeUINT16	IO/reader/PLYReader.hh	/^    ValueTypeUINT16, ValueTypeUSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeUINT32	IO/reader/PLYReader.hh	/^    ValueTypeUINT32, ValueTypeUINT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeUINT8	IO/reader/PLYReader.hh	/^    ValueTypeUINT8, ValueTypeUCHAR,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
ValueTypeUINT8	IO/writer/PLYWriter.hh	/^    ValueTypeUINT8, ValueTypeINT32, ValueTypeINT ,$/;"	e	enum:OpenMesh::IO::_PLYWriter_::ValueType
ValueTypeUSHORT	IO/reader/PLYReader.hh	/^    ValueTypeUINT16, ValueTypeUSHORT,$/;"	e	enum:OpenMesh::IO::_PLYReader_::ValueType
Vec1c	Geometry/VectorT.hh	/^typedef VectorT<signed char,1> Vec1c;$/;"	t	namespace:OpenMesh
Vec1d	Geometry/VectorT.hh	/^typedef VectorT<double,1> Vec1d;$/;"	t	namespace:OpenMesh
Vec1f	Geometry/VectorT.hh	/^typedef VectorT<float,1> Vec1f;$/;"	t	namespace:OpenMesh
Vec1i	Geometry/VectorT.hh	/^typedef VectorT<signed int,1> Vec1i;$/;"	t	namespace:OpenMesh
Vec1s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,1> Vec1s;$/;"	t	namespace:OpenMesh
Vec1uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,1> Vec1uc;$/;"	t	namespace:OpenMesh
Vec1ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,1> Vec1ui;$/;"	t	namespace:OpenMesh
Vec1us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,1> Vec1us;$/;"	t	namespace:OpenMesh
Vec2c	Geometry/VectorT.hh	/^typedef VectorT<signed char,2> Vec2c;$/;"	t	namespace:OpenMesh
Vec2d	Geometry/VectorT.hh	/^typedef VectorT<double,2> Vec2d;$/;"	t	namespace:OpenMesh
Vec2f	Geometry/VectorT.hh	/^typedef VectorT<float,2> Vec2f;$/;"	t	namespace:OpenMesh
Vec2f	IO/reader/OBJReader.cc	/^          texcoords.push_back(OpenMesh::Vec2f(u, v));$/;"	p	file:	signature:(u, v)
Vec2i	Geometry/VectorT.hh	/^typedef VectorT<signed int,2> Vec2i;$/;"	t	namespace:OpenMesh
Vec2s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,2> Vec2s;$/;"	t	namespace:OpenMesh
Vec2uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,2> Vec2uc;$/;"	t	namespace:OpenMesh
Vec2ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,2> Vec2ui;$/;"	t	namespace:OpenMesh
Vec2us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,2> Vec2us;$/;"	t	namespace:OpenMesh
Vec3	Geometry/NormalConeT.hh	/^  typedef VectorT<Scalar, 3>  Vec3;$/;"	t	class:OpenMesh::NormalConeT	access:public
Vec3b	Geometry/VectorT.hh	/^typedef VectorT<bool,3> Vec3b;$/;"	t	namespace:OpenMesh
Vec3c	Geometry/VectorT.hh	/^typedef VectorT<signed char,3> Vec3c;$/;"	t	namespace:OpenMesh
Vec3d	Geometry/VectorT.hh	/^typedef VectorT<double,3> Vec3d;$/;"	t	namespace:OpenMesh
Vec3f	Geometry/VectorT.hh	/^typedef VectorT<float,3> Vec3f;$/;"	t	namespace:OpenMesh
Vec3f	IO/reader/OBJReader.cc	/^          normals.push_back(OpenMesh::Vec3f(x,y,z));$/;"	p	file:	signature:(x,y,z)
Vec3i	Geometry/VectorT.hh	/^typedef VectorT<signed int,3> Vec3i;$/;"	t	namespace:OpenMesh
Vec3s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,3> Vec3s;$/;"	t	namespace:OpenMesh
Vec3uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,3> Vec3uc;$/;"	t	namespace:OpenMesh
Vec3ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,3> Vec3ui;$/;"	t	namespace:OpenMesh
Vec3us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,3> Vec3us;$/;"	t	namespace:OpenMesh
Vec4c	Geometry/VectorT.hh	/^typedef VectorT<signed char,4> Vec4c;$/;"	t	namespace:OpenMesh
Vec4d	Geometry/VectorT.hh	/^typedef VectorT<double,4> Vec4d;$/;"	t	namespace:OpenMesh
Vec4f	Geometry/VectorT.hh	/^typedef VectorT<float,4> Vec4f;$/;"	t	namespace:OpenMesh
Vec4i	Geometry/VectorT.hh	/^typedef VectorT<signed int,4> Vec4i;$/;"	t	namespace:OpenMesh
Vec4s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,4> Vec4s;$/;"	t	namespace:OpenMesh
Vec4uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,4> Vec4uc;$/;"	t	namespace:OpenMesh
Vec4ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,4> Vec4ui;$/;"	t	namespace:OpenMesh
Vec4us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,4> Vec4us;$/;"	t	namespace:OpenMesh
Vec6c	Geometry/VectorT.hh	/^typedef VectorT<signed char,6> Vec6c;$/;"	t	namespace:OpenMesh
Vec6d	Geometry/VectorT.hh	/^typedef VectorT<double,6> Vec6d;$/;"	t	namespace:OpenMesh
Vec6f	Geometry/VectorT.hh	/^typedef VectorT<float,6> Vec6f;$/;"	t	namespace:OpenMesh
Vec6i	Geometry/VectorT.hh	/^typedef VectorT<signed int,6> Vec6i;$/;"	t	namespace:OpenMesh
Vec6s	Geometry/VectorT.hh	/^typedef VectorT<signed short int,6> Vec6s;$/;"	t	namespace:OpenMesh
Vec6uc	Geometry/VectorT.hh	/^typedef VectorT<unsigned char,6> Vec6uc;$/;"	t	namespace:OpenMesh
Vec6ui	Geometry/VectorT.hh	/^typedef VectorT<unsigned int,6> Vec6ui;$/;"	t	namespace:OpenMesh
Vec6us	Geometry/VectorT.hh	/^typedef VectorT<unsigned short int,6> Vec6us;$/;"	t	namespace:OpenMesh
VectorDataT	Geometry/VectorT.hh	/^template <> struct VectorDataT<float, 4>$/;"	s	namespace:OpenMesh
VectorDataT	Geometry/VectorT.hh	/^template <typename Scalar,int N> struct VectorDataT$/;"	s	namespace:OpenMesh
VectorT	Geometry/VectorT_inc.hh	/^  explicit inline VectorT(const Scalar _values[DIM]) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar _values[DIM])
VectorT	Geometry/VectorT_inc.hh	/^  explicit inline VectorT(const Scalar& v) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v)
VectorT	Geometry/VectorT_inc.hh	/^  explicit inline VectorT(const VectorT<otherScalarType,DIM>& _rhs) {$/;"	f	class:CLASSNAME	access:public	signature:(const VectorT<otherScalarType,DIM>& _rhs)
VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT() {}$/;"	f	class:CLASSNAME	access:public	signature:()
VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1)
VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1, const Scalar& v2) {$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2)
VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1, const Scalar& v2,$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2, const Scalar& v3, const Scalar& v4)
VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1, const Scalar& v2,$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2, const Scalar& v3, const Scalar& v4, const Scalar& v5)
VectorT	Geometry/VectorT_inc.hh	/^  inline VectorT(const Scalar& v0, const Scalar& v1,$/;"	f	class:CLASSNAME	access:public	signature:(const Scalar& v0, const Scalar& v1, const Scalar& v2, const Scalar& v3)
Vertex	Mesh/ArrayItems.hh	/^  class Vertex$/;"	c	struct:OpenMesh::ArrayItems	access:public
Vertex	Mesh/ArrayKernel.hh	/^    vertices_.push_back(Vertex());$/;"	p	signature:()
Vertex	Mesh/AttribKernelT.hh	/^  typedef typename Connectivity::Vertex     Vertex;$/;"	t	class:OpenMesh::AttribKernelT	access:public
Vertex	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::Vertex    Vertex;$/;"	t	class:OpenMesh::PolyMeshT	access:public
Vertex	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::Vertex             Vertex;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexAttributes	Mesh/Traits.hh	77;"	d
VertexColor	IO/Options.hh	/^      VertexColor    = 0x0020, \/\/\/< Has (r) \/ store (w) vertex colors$/;"	e	enum:OpenMesh::IO::Options::Flag
VertexColorsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<Color>               VertexColorsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
VertexContainer	Mesh/ArrayKernel.hh	/^  typedef std::vector<Vertex>                VertexContainer;$/;"	t	class:OpenMesh::ArrayKernel	access:private
VertexData	Mesh/AttribKernelT.hh	/^  typedef typename MeshItems::VertexData    VertexData;$/;"	t	class:OpenMesh::AttribKernelT	access:public
VertexData	Mesh/FinalMeshItemsT.hh	/^  typedef typename Traits::template VertexT<ITraits, Refs>      VertexData;$/;"	t	struct:OpenMesh::FinalMeshItemsT	access:public
VertexEdgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexEdgeIterT<This>            VertexEdgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VertexEdgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexEdgeIter            VertexEdgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
VertexEdgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexEdgeIter           VertexEdgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:()
VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT(const VertexEdgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT& _rhs)
VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
VertexEdgeIterT	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
VertexEdgeIterT	Mesh/CirculatorsT.hh	/^class VertexEdgeIterT$/;"	c	namespace:OpenMesh::Iterators
VertexFaceIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexFaceIterT<This>            VertexFaceIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VertexFaceIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexFaceIter            VertexFaceIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
VertexFaceIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexFaceIter           VertexFaceIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:()
VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT(const VertexFaceIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT& _rhs)
VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
VertexFaceIterT	Mesh/CirculatorsT.hh	/^  VertexFaceIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
VertexFaceIterT	Mesh/CirculatorsT.hh	/^class VertexFaceIterT$/;"	c	namespace:OpenMesh::Iterators
VertexHandle	IO/reader/OFFReader.cc	/^         vhandles.push_back(VertexHandle(idx));$/;"	p	file:	signature:(idx)
VertexHandle	IO/reader/OMReader.cc	/^          _bi.set_color(VertexHandle(vidx), v3uc);$/;"	p	file:	signature:(vidx)
VertexHandle	IO/reader/OMReader.cc	/^          _bi.set_normal(VertexHandle(vidx), v3f);$/;"	p	file:	signature:(vidx)
VertexHandle	IO/reader/OMReader.cc	/^          _bi.set_texcoord(VertexHandle(vidx), v2f);$/;"	p	file:	signature:(vidx)
VertexHandle	IO/reader/OMReader.cc	/^          vhandles.push_back(VertexHandle(vidx));$/;"	p	file:	signature:(vidx)
VertexHandle	IO/reader/PLYReader.cc	/^                vhandles.push_back(VertexHandle(idx));$/;"	p	file:	signature:(idx)
VertexHandle	Mesh/ArrayKernel.hh	/^  typedef OpenMesh::VertexHandle            VertexHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
VertexHandle	Mesh/ArrayKernelT.cc	/^  for (i=0; i<nV; ++i) vh_map.push_back(VertexHandle(i));$/;"	p	file:	signature:(i)
VertexHandle	Mesh/FinalMeshItemsT.hh	/^    typedef OpenMesh::VertexHandle            VertexHandle;$/;"	t	struct:OpenMesh::FinalMeshItemsT::Refs	access:public
VertexHandle	Mesh/Handles.hh	/^  explicit VertexHandle(int _idx=-1) : BaseHandle(_idx) {}$/;"	f	struct:OpenMesh::VertexHandle	access:public	signature:(int _idx=-1)
VertexHandle	Mesh/Handles.hh	/^struct VertexHandle : public BaseHandle$/;"	s	namespace:OpenMesh	inherits:BaseHandle
VertexHandle	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexHandle       VertexHandle;$/;"	t	class:OpenMesh::PolyMeshT	access:public
VertexHandle	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexHandle       VertexHandle;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexIHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexIHalfedgeIterT<This>       VertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VertexIHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexIHalfedgeIter       VertexIHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
VertexIHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexIHalfedgeIter      VertexIHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:()
VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT(const VertexIHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT& _rhs)
VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
VertexIHalfedgeIterT	Mesh/CirculatorsT.hh	/^class VertexIHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
VertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::GenericIteratorT<This, This::VertexHandle, ArrayKernel, &This::has_vertex_status, &This::n_vertices> VertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexIter                 VertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
VertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexIter         VertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexNormal	IO/Options.hh	/^      VertexNormal   = 0x0010, \/\/\/< Has (r) \/ store (w) vertex normals$/;"	e	enum:OpenMesh::IO::Options::Flag
VertexNormalsPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<Normal>              VertexNormalsPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
VertexOHalfedgeIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexOHalfedgeIterT<This>       VertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VertexOHalfedgeIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexOHalfedgeIter       VertexOHalfedgeIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
VertexOHalfedgeIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexOHalfedgeIter      VertexOHalfedgeIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT() : mesh_(0), lap_counter_(false) {}$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:()
VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT(const VertexOHalfedgeIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT& _rhs)
VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
VertexOHalfedgeIterT	Mesh/CirculatorsT.hh	/^class VertexOHalfedgeIterT$/;"	c	namespace:OpenMesh::Iterators
VertexProperty	IO/reader/PLYReader.hh	/^  enum VertexProperty {$/;"	g	class:OpenMesh::IO::_PLYReader_	access:private
VertexStatusPropertyHandle	Mesh/ArrayKernel.hh	/^  typedef VPropHandleT<StatusInfo>          VertexStatusPropertyHandle;$/;"	t	class:OpenMesh::ArrayKernel	access:public
VertexStatusSet	Mesh/ArrayKernel.hh	/^  typedef AutoStatusSetT<VertexHandle>      VertexStatusSet;$/;"	t	class:OpenMesh::ArrayKernel	access:public
VertexT	Mesh/Traits.hh	/^    template <class Base, class Refs> class VertexT :$/;"	c	struct:OpenMesh::MergeTraits::Result	inherits:T1::,VertexT	access:public
VertexTexCoord	IO/Options.hh	/^      VertexTexCoord = 0x0040, \/\/\/< Has (r) \/ store (w) texture coordinates$/;"	e	enum:OpenMesh::IO::Options::Flag
VertexTexCoords1DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<TexCoord1D>          VertexTexCoords1DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
VertexTexCoords2DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<TexCoord2D>          VertexTexCoords2DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
VertexTexCoords3DPropertyHandle	Mesh/AttribKernelT.hh	/^  typedef VPropHandleT<TexCoord3D>          VertexTexCoords3DPropertyHandle;$/;"	t	class:OpenMesh::AttribKernelT	access:public
VertexTraits	Mesh/Traits.hh	89;"	d
VertexVertexIter	Mesh/PolyConnectivity.hh	/^  typedef Iterators::VertexVertexIterT<This>          VertexVertexIter;$/;"	t	class:OpenMesh::PolyConnectivity	access:public
VertexVertexIter	Mesh/PolyMeshT.hh	/^  typedef typename Kernel::VertexVertexIter          VertexVertexIter;$/;"	t	class:OpenMesh::PolyMeshT	access:public
VertexVertexIter	Mesh/TriMeshT.hh	/^  typedef typename PolyMesh::VertexVertexIter         VertexVertexIter;$/;"	t	class:OpenMesh::TriMeshT	access:public
VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT() : mesh_(0), lap_counter_(0) {}$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:()
VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT(const VertexVertexIterT& _rhs) :$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT& _rhs)
VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(mesh_ref _mesh, HalfedgeHandle _heh, bool _end = false)
VertexVertexIterT	Mesh/CirculatorsT.hh	/^  VertexVertexIterT(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false) :$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(mesh_ref _mesh, typename Mesh::VertexHandle _start, bool _end = false)
VertexVertexIterT	Mesh/CirculatorsT.hh	/^class VertexVertexIterT$/;"	c	namespace:OpenMesh::Iterators
X	IO/SR_binary.hh	120;"	d
X	IO/SR_binary.hh	81;"	d
XCOORD	IO/reader/PLYReader.hh	/^    XCOORD,YCOORD,ZCOORD,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
XNORM	IO/reader/PLYReader.hh	/^    XNORM,YNORM,ZNORM,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
YCOORD	IO/reader/PLYReader.hh	/^    XCOORD,YCOORD,ZCOORD,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
YNORM	IO/reader/PLYReader.hh	/^    XNORM,YNORM,ZNORM,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
ZCOORD	IO/reader/PLYReader.hh	/^    XCOORD,YCOORD,ZCOORD,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
ZNORM	IO/reader/PLYReader.hh	/^    XNORM,YNORM,ZNORM,$/;"	e	enum:OpenMesh::IO::_PLYReader_::VertexProperty
_IOManager_	IO/IOManager.hh	/^  _IOManager_() {}$/;"	f	class:OpenMesh::IO::_IOManager_	access:private	signature:()
_IOManager_	IO/IOManager.hh	/^class OPENMESHDLLEXPORT _IOManager_$/;"	c	namespace:OpenMesh::IO
_OBJReader_	IO/reader/OBJReader.cc	/^_OBJReader_()$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:()
_OBJReader_	IO/reader/OBJReader.hh	/^  _OBJReader_();$/;"	p	class:OpenMesh::IO::_OBJReader_	access:public	signature:()
_OBJReader_	IO/reader/OBJReader.hh	/^class OPENMESHDLLEXPORT _OBJReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
_OBJWriter_	IO/writer/OBJWriter.cc	/^_OBJWriter_::_OBJWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:()
_OBJWriter_	IO/writer/OBJWriter.hh	/^  _OBJWriter_();$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:public	signature:()
_OBJWriter_	IO/writer/OBJWriter.hh	/^class OPENMESHDLLEXPORT _OBJWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
_OFFReader_	IO/reader/OFFReader.cc	/^_OFFReader_::_OFFReader_()$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:()
_OFFReader_	IO/reader/OFFReader.hh	/^  _OFFReader_();$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:()
_OFFReader_	IO/reader/OFFReader.hh	/^class OPENMESHDLLEXPORT _OFFReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
_OFFWriter_	IO/writer/OFFWriter.cc	/^_OFFWriter_::_OFFWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:()
_OFFWriter_	IO/writer/OFFWriter.hh	/^  _OFFWriter_();$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:()
_OFFWriter_	IO/writer/OFFWriter.hh	/^class OPENMESHDLLEXPORT _OFFWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
_OMReader_	IO/reader/OMReader.cc	/^_OMReader_::_OMReader_()$/;"	f	class:OpenMesh::IO::_OMReader_	signature:()
_OMReader_	IO/reader/OMReader.hh	/^  _OMReader_();$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:()
_OMReader_	IO/reader/OMReader.hh	/^class OPENMESHDLLEXPORT _OMReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
_OMWriter_	IO/writer/OMWriter.cc	/^_OMWriter_()$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:()
_OMWriter_	IO/writer/OMWriter.hh	/^  _OMWriter_();$/;"	p	class:OpenMesh::IO::_OMWriter_	access:public	signature:()
_OMWriter_	IO/writer/OMWriter.hh	/^class OPENMESHDLLEXPORT _OMWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
_PLYReader_	IO/reader/PLYReader.cc	/^_PLYReader_::_PLYReader_() {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:()
_PLYReader_	IO/reader/PLYReader.hh	/^  _PLYReader_();$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:()
_PLYReader_	IO/reader/PLYReader.hh	/^class OPENMESHDLLEXPORT _PLYReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
_PLYWriter_	IO/writer/PLYWriter.cc	/^_PLYWriter_::_PLYWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:()
_PLYWriter_	IO/writer/PLYWriter.hh	/^  _PLYWriter_();$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:()
_PLYWriter_	IO/writer/PLYWriter.hh	/^class OPENMESHDLLEXPORT _PLYWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
_STLReader_	IO/reader/STLReader.cc	/^_STLReader_()$/;"	f	class:OpenMesh::IO::_STLReader_	signature:()
_STLReader_	IO/reader/STLReader.hh	/^  _STLReader_();$/;"	p	class:OpenMesh::IO::_STLReader_	access:public	signature:()
_STLReader_	IO/reader/STLReader.hh	/^class OPENMESHDLLEXPORT _STLReader_ : public BaseReader$/;"	c	namespace:OpenMesh::IO	inherits:BaseReader
_STLWriter_	IO/writer/STLWriter.cc	/^_STLWriter_::_STLWriter_() { IOManager().register_module(this); }$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:()
_STLWriter_	IO/writer/STLWriter.hh	/^  _STLWriter_();$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:()
_STLWriter_	IO/writer/STLWriter.hh	/^class OPENMESHDLLEXPORT _STLWriter_ : public BaseWriter$/;"	c	namespace:OpenMesh::IO	inherits:BaseWriter
__BASEEXPORTER_HH__	IO/exporter/BaseExporter.hh	51;"	d
__BASEIMPORTER_HH__	IO/importer/BaseImporter.hh	51;"	d
__BASEREADER_HH__	IO/reader/BaseReader.hh	51;"	d
__BASEWRITER_HH__	IO/writer/BaseWriter.hh	51;"	d
__EXPORTERT_HH__	IO/exporter/ExporterT.hh	51;"	d
__IMPORTERT_HH__	IO/importer/ImporterT.hh	51;"	d
__INTEL_COMPILER	System/compiler.hh	64;"	d
__IOINSTANCES_HH__	IO/IOInstances.hh	57;"	d
__IOMANAGER_HH__	IO/IOManager.hh	49;"	d
__IOManager_instance	IO/IOManager.cc	/^_IOManager_  *__IOManager_instance = 0;$/;"	m	namespace:OpenMesh::IO	file:
__OBJREADER_HH__	IO/reader/OBJReader.hh	51;"	d
__OBJReaderInstance	IO/reader/OBJReader.cc	/^_OBJReader_  __OBJReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
__OBJWRITER_HH__	IO/writer/OBJWriter.hh	51;"	d
__OBJWriterinstance	IO/writer/OBJWriter.cc	/^_OBJWriter_  __OBJWriterinstance;$/;"	m	namespace:OpenMesh::IO	file:
__OFFREADER_HH__	IO/reader/OFFReader.hh	51;"	d
__OFFReaderInstance	IO/reader/OFFReader.cc	/^_OFFReader_  __OFFReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
__OFFWRITER_HH__	IO/writer/OFFWriter.hh	51;"	d
__OFFWriterInstance	IO/writer/OFFWriter.cc	/^_OFFWriter_  __OFFWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
__OMREADER_HH__	IO/reader/OMReader.hh	51;"	d
__OMReaderInstance	IO/reader/OMReader.cc	/^_OMReader_  __OMReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
__OMWRITER_HH__	IO/writer/OMWriter.hh	51;"	d
__OMWriterInstance	IO/writer/OMWriter.cc	/^_OMWriter_  __OMWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
__PLYREADER_HH__	IO/reader/PLYReader.hh	51;"	d
__PLYReaderInstance	IO/reader/PLYReader.cc	/^_PLYReader_ __PLYReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
__PLYWRITER_HH__	IO/writer/PLYWriter.hh	51;"	d
__PLYWriterInstance	IO/writer/PLYWriter.cc	/^_PLYWriter_  __PLYWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
__SINGLETON_HH__	Utils/SingletonT.hh	51;"	d
__STLREADER_HH__	IO/reader/STLReader.hh	51;"	d
__STLReaderInstance	IO/reader/STLReader.cc	/^_STLReader_  __STLReaderInstance;$/;"	m	namespace:OpenMesh::IO	file:
__STLWRITER_HH__	IO/writer/STLWriter.hh	51;"	d
__STLWriterInstance	IO/writer/STLWriter.cc	/^_STLWriter_  __STLWriterInstance;$/;"	m	namespace:OpenMesh::IO	file:
__connect	System/mostream.hh	/^  void __connect(target_type* _target) { targets_.push_back(_target); }$/;"	f	class:OpenMesh::multiplex_streambuf	access:private	signature:(target_type* _target)
__decrement	Mesh/Handles.hh	/^  void __decrement() { --idx_; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
__decrement	Mesh/IteratorsT.hh	/^                hnd_.__decrement();$/;"	p	signature:()
__decrement	Mesh/IteratorsT.hh	/^            hnd_.__decrement();$/;"	p	signature:()
__decrement	Mesh/gen/iterators_template.hh	/^      hnd_.__decrement();$/;"	p	signature:()
__decrement	Mesh/gen/iterators_template.hh	/^  { hnd_.__decrement(); if (skip_bits_) skip_bwd(); return *this; }$/;"	p	signature:()
__disconnect	System/mostream.hh	/^  void __disconnect(target_type* _target) { $/;"	f	class:OpenMesh::multiplex_streambuf	access:private	signature:(target_type* _target)
__increment	Mesh/Handles.hh	/^  void __increment() { ++idx_; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
__increment	Mesh/IteratorsT.hh	/^                hnd_.__increment();$/;"	p	signature:()
__increment	Mesh/IteratorsT.hh	/^            hnd_.__increment();$/;"	p	signature:()
__increment	Mesh/gen/iterators_template.hh	/^      hnd_.__increment();$/;"	p	signature:()
__increment	Mesh/gen/iterators_template.hh	/^  { hnd_.__increment(); if (skip_bits_) skip_fwd(); return *this; }$/;"	p	signature:()
_add	Utils/PropertyContainer.hh	/^  size_t _add( BaseProperty* _bp )$/;"	f	class:OpenMesh::PropertyContainer	access:protected	signature:( BaseProperty* _bp )
_add_eprop	Mesh/BaseKernel.hh	/^  size_t _add_eprop( BaseProperty* _bp ) { return eprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
_add_fprop	Mesh/BaseKernel.hh	/^  size_t _add_fprop( BaseProperty* _bp ) { return fprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
_add_hprop	Mesh/BaseKernel.hh	/^  size_t _add_hprop( BaseProperty* _bp ) { return hprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
_add_mprop	Mesh/BaseKernel.hh	/^  size_t _add_mprop( BaseProperty* _bp ) { return mprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
_add_vprop	Mesh/BaseKernel.hh	/^  size_t _add_vprop( BaseProperty* _bp ) { return vprops_._add( _bp ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( BaseProperty* _bp )
_bi	IO/reader/OBJReader.cc	/^          _bi.add_texture_information( (*material).second.map_Kd_index() , (*material).second.map_Kd() );$/;"	p	file:	signature:(*material).second.map_Kd_index() , (*material).second.map_Kd() 
_count	IO/reader/PLYReader.hh	/^	  _in.read(reinterpret_cast<char*>(&buff[0]), _count);$/;"	l
_eprop	Mesh/BaseKernel.hh	/^  BaseProperty& _eprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
_eprop	Mesh/BaseKernel.hh	/^  BaseProperty& _eprop( size_t _idx ) { return eprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
_eprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _eprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
_eprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _eprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
_fprop	Mesh/BaseKernel.hh	/^  BaseProperty& _fprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
_fprop	Mesh/BaseKernel.hh	/^  BaseProperty& _fprop( size_t _idx ) { return fprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
_fprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _fprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
_fprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _fprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
_get_eprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_eprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
_get_eprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_eprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
_get_fprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_fprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
_get_fprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_fprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
_get_hprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_hprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
_get_hprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_hprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
_get_mprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_mprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
_get_mprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_mprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
_get_vprop	Mesh/BaseKernel.hh	/^  BaseProperty* _get_vprop( const std::string& _name)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name)
_get_vprop	Mesh/BaseKernel.hh	/^  const BaseProperty* _get_vprop( const std::string& _name) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( const std::string& _name) const
_hdr	IO/OMFormat.hh	/^    OMFormat::uint16 val; val << _hdr;$/;"	l
_hprop	Mesh/BaseKernel.hh	/^  BaseProperty& _hprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
_hprop	Mesh/BaseKernel.hh	/^  BaseProperty& _hprop( size_t _idx ) { return hprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
_hprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _hprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
_hprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _hprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
_in	IO/BinaryHelper.cc	/^  _in.read((char*)dc.c, 8);$/;"	p	file:	signature:(char*)dc.c, 8
_in	IO/BinaryHelper.cc	/^  _in.read((char*)fc.c, 4);$/;"	p	file:	signature:(char*)fc.c, 4
_in	IO/BinaryHelper.cc	/^  _in.read((char*)ic.c, 4);$/;"	p	file:	signature:(char*)ic.c, 4
_in	IO/BinaryHelper.cc	/^  _in.read((char*)sc.c, 2);$/;"	p	file:	signature:(char*)sc.c, 2
_mprop	Mesh/BaseKernel.hh	/^  BaseProperty& _mprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
_mprop	Mesh/BaseKernel.hh	/^  BaseProperty& _mprop( size_t _idx ) { return mprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
_mprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _mprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
_mprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _mprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
_os	IO/OMFormat.hh	/^      _os.write( (char*)this, 4); \/\/ magic_, mesh_, version_$/;"	p	signature:(char*)this, 4
_out	IO/BinaryHelper.cc	/^  _out.write((char*)dc.c, 8);$/;"	p	file:	signature:(char*)dc.c, 8
_out	IO/BinaryHelper.cc	/^  _out.write((char*)fc.c, 4);$/;"	p	file:	signature:(char*)fc.c, 4
_out	IO/BinaryHelper.cc	/^  _out.write((char*)ic.c, 4);$/;"	p	file:	signature:(char*)ic.c, 4
_out	IO/BinaryHelper.cc	/^  _out.write((char*)sc.c, 2);$/;"	p	file:	signature:(char*)sc.c, 2
_property	Utils/PropertyContainer.hh	/^  BaseProperty& _property( size_t _idx )$/;"	f	class:OpenMesh::PropertyContainer	access:protected	signature:( size_t _idx )
_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N(uint8_t* _val);$/;"	p	namespace:OpenMesh::IO	signature:(uint8_t* _val)
_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<12>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<16>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<1>(uint8_t* \/*_val*\/) { }$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* )
_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<2>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<4>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
_reverse_byte_order_N	IO/SR_rbo.hh	/^void _reverse_byte_order_N<8>(uint8_t* _val)$/;"	f	namespace:OpenMesh::IO	signature:(uint8_t* _val)
_s	System/mostream.hh	/^  virtual void operator<<(const std::string& _s) { target_ << _s; }$/;"	l
_vprop	Mesh/BaseKernel.hh	/^  BaseProperty& _vprop( BaseHandle _h )$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h )
_vprop	Mesh/BaseKernel.hh	/^  BaseProperty& _vprop( size_t _idx ) { return vprops_._property( _idx ); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx )
_vprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _vprop( BaseHandle _h ) const$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:( BaseHandle _h ) const
_vprop	Mesh/BaseKernel.hh	/^  const BaseProperty& _vprop( size_t _idx ) const$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( size_t _idx ) const
a	Geometry/QuadricT.hh	/^  Scalar a() const { return a_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
a	IO/writer/STLWriter.cc	/^      _out << "vertex " << a[0] << " " << a[1] << " " << a[2] << "\\n";$/;"	l
a	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
a0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle a0 = halfedge_handle(_eh, 0);$/;"	l
a1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle a1 = next_halfedge_handle(a0);$/;"	l
a2	Mesh/TriConnectivity.cc	/^  HalfedgeHandle a2 = next_halfedge_handle(a1);$/;"	l
a_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
active_	Mesh/gen/circulators_template.hh	/^  bool             active_;$/;"	m	class:CirculatorT	access:private
add	Utils/PropertyContainer.hh	/^  BasePropHandleT<T> add(const T&, const std::string& _name="<unknown>")$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const T&, const std::string& _name=Ó)
add_face	IO/importer/BaseImporter.hh	/^  virtual FaceHandle add_face(const VHandles& _indices) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(const VHandles& _indices)
add_face	IO/importer/ImporterT.hh	/^  virtual FaceHandle add_face(const VHandles& _indices)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(const VHandles& _indices)
add_face	IO/reader/OMReader.cc	/^        _bi.add_face(vhandles);$/;"	p	file:	signature:(vhandles)
add_face	IO/reader/STLReader.cc	/^      _bi.add_face(vhandles);$/;"	p	file:	signature:(vhandles)
add_face	Mesh/PolyConnectivity.cc	/^FaceHandle PolyConnectivity::add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
add_face	Mesh/PolyConnectivity.cc	/^FaceHandle PolyConnectivity::add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3)
add_face	Mesh/PolyConnectivity.cc	/^FaceHandle PolyConnectivity::add_face(const std::vector<VertexHandle>& _vhandles)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(const std::vector<VertexHandle>& _vhandles)
add_face	Mesh/PolyConnectivity.cc	/^PolyConnectivity::add_face(const VertexHandle* _vertex_handles, size_t _vhs_size)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(const VertexHandle* _vertex_handles, size_t _vhs_size)
add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2, VertexHandle _vh3)
add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(const VertexHandle* _vhandles, size_t _vhs_size);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(const VertexHandle* _vhandles, size_t _vhs_size)
add_face	Mesh/PolyConnectivity.hh	/^  FaceHandle add_face(const std::vector<VertexHandle>& _vhandles);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(const std::vector<VertexHandle>& _vhandles)
add_face	Mesh/TriConnectivity.cc	/^FaceHandle TriConnectivity::add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)$/;"	f	class:OpenMesh::TriConnectivity	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
add_face	Mesh/TriConnectivity.cc	/^FaceHandle TriConnectivity::add_face(const std::vector<VertexHandle>& _vhandles)$/;"	f	class:OpenMesh::TriConnectivity	signature:(const std::vector<VertexHandle>& _vhandles)
add_face	Mesh/TriConnectivity.cc	/^TriConnectivity::add_face(const VertexHandle* _vertex_handles, size_t _vhs_size)$/;"	f	class:OpenMesh::TriConnectivity	signature:(const VertexHandle* _vertex_handles, size_t _vhs_size)
add_face	Mesh/TriConnectivity.hh	/^  FaceHandle add_face(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(VertexHandle _vh0, VertexHandle _vh1, VertexHandle _vh2)
add_face	Mesh/TriConnectivity.hh	/^  FaceHandle add_face(const VertexHandle* _vhandles, size_t _vhs_size);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(const VertexHandle* _vhandles, size_t _vhs_size)
add_face	Mesh/TriConnectivity.hh	/^  FaceHandle add_face(const std::vector<VertexHandle>& _vhandles);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(const std::vector<VertexHandle>& _vhandles)
add_face_texcoords	IO/importer/BaseImporter.hh	/^  virtual void add_face_texcoords( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords)
add_face_texcoords	IO/importer/ImporterT.hh	/^  virtual void add_face_texcoords( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:( FaceHandle _fh, VertexHandle _vh, const std::vector<Vec2f>& _face_texcoords)
add_face_texcoords	IO/reader/OBJReader.cc	/^        _bi.add_face_texcoords(fh, vhandles[0], face_texcoords);$/;"	p	file:	signature:(fh, vhandles[0], face_texcoords)
add_property	IO/importer/ImporterT.hh	/^      mesh_.add_property(property,"TextureMapping");$/;"	p	signature:(property,Ó)
add_property	Mesh/BaseKernel.hh	/^  void add_property( EPropHandleT<T>& _ph, const std::string& _name="<eprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( EPropHandleT<T>& _ph, const std::string& _name=Ó)
add_property	Mesh/BaseKernel.hh	/^  void add_property( FPropHandleT<T>& _ph, const std::string& _name="<fprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( FPropHandleT<T>& _ph, const std::string& _name=Ó)
add_property	Mesh/BaseKernel.hh	/^  void add_property( HPropHandleT<T>& _ph, const std::string& _name="<hprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( HPropHandleT<T>& _ph, const std::string& _name=Ó)
add_property	Mesh/BaseKernel.hh	/^  void add_property( MPropHandleT<T>& _ph, const std::string& _name="<mprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( MPropHandleT<T>& _ph, const std::string& _name=Ó)
add_property	Mesh/BaseKernel.hh	/^  void add_property( VPropHandleT<T>& _ph, const std::string& _name="<vprop>")$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:( VPropHandleT<T>& _ph, const std::string& _name=Ó)
add_property	Utils/AutoPropertyHandleT.hh	/^  inline void                               add_property(Mesh& _m, const std::string& _pp_name = std::string())$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(Mesh& _m, const std::string& _pp_name = std::string())
add_property	Utils/PropertyManager.hh	/^                mesh_->add_property(prop_, propname);$/;"	p	signature:(prop_, propname)
add_texture_information	IO/importer/BaseImporter.hh	/^  virtual void add_texture_information( int _id , std::string _name ) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:( int _id , std::string _name )
add_texture_information	IO/importer/ImporterT.hh	/^  virtual void add_texture_information( int _id , std::string _name ) {$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:( int _id , std::string _name )
add_vertex	IO/importer/BaseImporter.hh	/^  virtual VertexHandle add_vertex(const Vec3f& _point) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(const Vec3f& _point)
add_vertex	IO/importer/ImporterT.hh	/^  virtual VertexHandle add_vertex(const Vec3f& _point)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(const Vec3f& _point)
add_vertex	IO/reader/OMReader.cc	/^        _bi.add_vertex(v3f);$/;"	p	file:	signature:(v3f)
add_vertex	Mesh/PolyConnectivity.hh	/^  inline VertexHandle add_vertex()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
add_vertex	Mesh/PolyMeshT.hh	/^  inline VertexHandle add_vertex(const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(const Point& _p)
adjust_outgoing_halfedge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::adjust_outgoing_halfedge(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh)
adjust_outgoing_halfedge	Mesh/PolyConnectivity.hh	/^  void adjust_outgoing_halfedge(VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
ah	Mesh/TriConnectivity.cc	/^  VertexHandle ah = to_vertex_handle(next_halfedge_handle(hh));$/;"	l
all	IO/IOManager.cc	/^  std::string all = "";$/;"	l
all	IO/IOManager.cc	/^  std::string all;$/;"	l
angle	Geometry/MathDefs.hh	/^T angle(T _cos_angle, T _sin_angle)$/;"	f	namespace:OpenMesh	signature:(T _cos_angle, T _sin_angle)
angle	Geometry/NormalConeT.hh	/^  inline Scalar angle() const { return angle_; }$/;"	f	class:OpenMesh::NormalConeT	access:public	signature:() const
angle_	Geometry/NormalConeT.hh	/^  Scalar  angle_;$/;"	m	class:OpenMesh::NormalConeT	access:private
as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Dim d)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Dim d)
as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Entity e)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Entity e)
as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Float_Size d)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Float_Size d)
as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Integer_Size d)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Integer_Size d)
as_string	IO/OMFormat.cc	/^  const char *as_string(Chunk::Type t)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Type t)
as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Dim d);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Dim d)
as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Entity e);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Entity e)
as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Float_Size d);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Float_Size d)
as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Integer_Size d);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Integer_Size d)
as_string	IO/OMFormat.hh	/^  const char *as_string(Chunk::Type t);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Type t)
as_string	Utils/Endian.cc	/^const char * Endian::as_string(Type _t)$/;"	f	class:OpenMesh::Endian	signature:(Type _t)
as_string	Utils/Endian.hh	/^  static const char * as_string(Type _t);$/;"	p	class:OpenMesh::Endian	access:public	signature:(Type _t)
assert_compile	Utils/GenProg.hh	154;"	d
assign	Mesh/AttribKernelT.hh	/^  void assign(const _AttribKernel& _other)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(const _AttribKernel& _other)
assign_connectivity	Mesh/ArrayKernel.cc	/^void ArrayKernel::assign_connectivity(const ArrayKernel& _other)$/;"	f	class:OpenMesh::ArrayKernel	signature:(const ArrayKernel& _other)
assign_connectivity	Mesh/ArrayKernel.hh	/^  void                                      assign_connectivity(const ArrayKernel& _other);$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(const ArrayKernel& _other)
assign_connectivity	Mesh/PolyConnectivity.hh	/^  inline void assign_connectivity(const PolyConnectivity& _other)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(const PolyConnectivity& _other)
assign_connectivity	Mesh/PolyConnectivity.hh	/^  { ArrayKernel::assign_connectivity(_other); }$/;"	p	class:OpenMesh::PolyConnectivity::ArrayKernel	signature:(_other)
assign_connectivity	Mesh/TriConnectivity.hh	/^    PolyConnectivity::assign_connectivity(_other); $/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_other)
assign_connectivity	Mesh/TriConnectivity.hh	/^  inline void assign_connectivity(const PolyConnectivity& _other)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(const PolyConnectivity& _other)
assign_connectivity	Mesh/TriConnectivity.hh	/^  inline void assign_connectivity(const TriConnectivity& _other)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(const TriConnectivity& _other)
assign_connectivity	Mesh/TriConnectivity.hh	/^  { PolyConnectivity::assign_connectivity(_other); }$/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_other)
axisAngle	Geometry/NormalConeT.cc	/^    Scalar axisAngle = 0.5*(minAngle + maxAngle);$/;"	l
b	Geometry/QuadricT.hh	/^  Scalar b() const { return b_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
b	IO/SR_binary_spec.hh	/^    size_t   b = binary<status_t>::restore(_os, v, _swap);$/;"	l
b	IO/reader/OBJReader.cc	/^        stream >> r; stream >> g; stream >> b;$/;"	l
b	IO/reader/OBJReader.cc	/^      stream >> r; stream >> g; stream >> b;$/;"	l
b	IO/reader/OBJReader.cc	/^  int                       r, g, b;$/;"	l
b	IO/reader/OMReader.cc	/^      size_t b;$/;"	l
b	IO/reader/OMReader.cc	/^  size_t b = bytes_;$/;"	l
b	IO/writer/OMWriter.cc	/^    size_t b;$/;"	l
b	IO/writer/STLWriter.cc	/^      _out << "vertex " << b[0] << " " << b[1] << " " << b[2] << "\\n";$/;"	l
b	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
b0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle b0 = halfedge_handle(_eh, 1);$/;"	l
b1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle b1 = next_halfedge_handle(b0);$/;"	l
b2	Mesh/TriConnectivity.cc	/^  HalfedgeHandle b2 = next_halfedge_handle(b1);$/;"	l
b_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
back	Mesh/ArrayKernel.hh	/^    inline Handle&                          back()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
back	Mesh/ArrayKernel.hh	/^    inline const Handle&                    back() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
base_heh	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(next_heh), base_heh);$/;"	l
base_type	System/mostream.hh	/^  typedef STREAMBUF                   base_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
basic_multiplex_target	System/mostream.hh	/^class basic_multiplex_target$/;"	c	namespace:OpenMesh
begin	Mesh/ArrayKernel.hh	/^    inline const_iterator                   begin() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
begin	Mesh/ArrayKernel.hh	/^    inline iterator                         begin()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
begin	Mesh/PolyConnectivity.hh	/^          ITER_TYPE begin() { return (container_.*begin_fn)(); }$/;"	f	class:OpenMesh::PolyConnectivity::EntityRange	access:public	signature:()
bh	Mesh/TriConnectivity.cc	/^  VertexHandle bh = to_vertex_handle(next_halfedge_handle(oh));$/;"	l
bidx	Utils/Property.hh	/^    size_t        bidx; \/\/$/;"	l
bidx	Utils/Property.hh	/^    size_t        bidx;$/;"	l
binary	IO/SR_binary.hh	/^template < typename T > struct binary$/;"	s	namespace:OpenMesh::IO
binary	IO/SR_binary_spec.hh	/^template <> struct binary< std::string > {$/;"	s	namespace:OpenMesh::IO
binary	IO/SR_binary_spec.hh	/^template <> struct binary<OpenMesh::Attributes::StatusInfo>$/;"	s	namespace:OpenMesh::IO
binary_size	IO/IOManager.hh	/^  size_t binary_size(const std::string& _format,$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:(const std::string& _format, BaseExporter& _be, Options _opt = Options::Default)
binary_size	IO/MeshIO.hh	/^size_t binary_size(const Mesh&        _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(const Mesh& _mesh, const std::string& _ext, Options _opt = Options::Default)
binary_size	IO/reader/STLReader.cc	/^  size_t binary_size = 84 + nT*50;$/;"	l
binary_size	IO/writer/BaseWriter.hh	/^  virtual size_t binary_size(BaseExporter&, Options) const { return 0; }$/;"	f	class:OpenMesh::IO::BaseWriter	access:public	signature:(BaseExporter&, Options) const
binary_size	IO/writer/OBJWriter.hh	/^  size_t binary_size(BaseExporter&, Options) const { return 0; }$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:(BaseExporter&, Options) const
binary_size	IO/writer/OFFWriter.cc	/^binary_size(BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(BaseExporter& _be, Options _opt) const
binary_size	IO/writer/OFFWriter.hh	/^  size_t binary_size(BaseExporter& _be, Options _opt) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:(BaseExporter& _be, Options _opt) const
binary_size	IO/writer/OMWriter.cc	/^size_t _OMWriter_::binary_size(BaseExporter& \/* _be *\/, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(BaseExporter& , Options ) const
binary_size	IO/writer/OMWriter.hh	/^  size_t binary_size(BaseExporter& _be, Options _opt) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:public	signature:(BaseExporter& _be, Options _opt) const
binary_size	IO/writer/PLYWriter.cc	/^binary_size(BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(BaseExporter& _be, Options _opt) const
binary_size	IO/writer/PLYWriter.hh	/^  size_t binary_size(BaseExporter& _be, Options _opt) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:(BaseExporter& _be, Options _opt) const
binary_size	IO/writer/STLWriter.cc	/^binary_size(BaseExporter& _be, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(BaseExporter& _be, Options ) const
binary_size	IO/writer/STLWriter.hh	/^  size_t binary_size(BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:(BaseExporter&, Options) const
bit_mask	Mesh/ArrayKernel.hh	/^    unsigned int bit_mask = bit_masks(_hnd).back();$/;"	l
bit_mask_	Mesh/ArrayKernel.hh	/^      Base::kernel_.push_bit_mask(Handle(), Base::bit_mask_);$/;"	m	class:OpenMesh::ArrayKernel::AutoStatusSetT::Base
bit_mask_	Mesh/ArrayKernel.hh	/^    const unsigned int                      bit_mask_;$/;"	m	class:OpenMesh::ArrayKernel::StatusSetT	access:public
bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(EdgeHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(EdgeHandle )
bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(FaceHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(FaceHandle )
bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(HalfedgeHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(HalfedgeHandle )
bit_masks	Mesh/ArrayKernel.hh	/^  inline BitMaskContainer&                  bit_masks(VertexHandle \/*_dummy_hnd*\/)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(VertexHandle )
bits	IO/OMFormat.hh	/^  unsigned int bits(const T& val)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T& val)
bits	Mesh/Status.hh	/^  unsigned int bits() const { return status_; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
bits	Utils/Property.hh	/^      _istr >> bits;$/;"	l
bits	Utils/Property.hh	/^      _ostr << bits;$/;"	l
bits	Utils/Property.hh	/^    unsigned char bits; \/\/ bitset$/;"	l
bits_	IO/OMFormat.hh	/^      unsigned bits_    : SIZE_BITS;   \/\/ {8, 16, 32, 64} | {32, 64, 128}$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
block_size	IO/reader/OMReader.cc	/^  Chunk::esize_t block_size;$/;"	l
bool	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(bool()); }$/;"	p	signature:()
boundary0	Mesh/PolyConnectivity.cc	/^  bool boundary0 = is_boundary(h0);$/;"	l
boundary1	Mesh/PolyConnectivity.cc	/^  bool boundary1 = is_boundary(h1);$/;"	l
boundary_next	Mesh/PolyConnectivity.cc	/^                                 boundary_next, boundary_prev,$/;"	l
boundary_prev	Mesh/PolyConnectivity.cc	/^                                 boundary_next, boundary_prev,$/;"	l
bp	IO/writer/OMWriter.cc	/^    const BaseProperty *bp = _be.kernel()._get_fprop("f:colors");$/;"	l
bp	IO/writer/OMWriter.cc	/^    const BaseProperty *bp = _be.kernel()._get_fprop("f:normals");$/;"	l
buf	IO/OMFormat.hh	/^      char buf[256];$/;"	l
buff	IO/reader/PLYReader.hh	/^  mutable unsigned char buff[8];$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
buffer_	System/mostream.hh	/^      **t_it << buffer_;$/;"	l
buffer_	System/mostream.hh	/^  std::string  buffer_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
bw	IO/IOManager.hh	/^    const BaseWriter *bw = find_writer(_format);$/;"	l
bytes	IO/OMFormat.hh	/^      size_t bytes = 4;$/;"	l
bytes	IO/OMFormat.hh	/^    size_t bytes =  restore( _is, _vec[0], _swap );$/;"	l
bytes	IO/OMFormat.hh	/^    size_t bytes =  store( _os, _vec[0], _swap );$/;"	l
bytes	IO/OMFormat.hh	/^    size_t bytes = binary<uint16_t>::restore( _is, val, _swap );$/;"	l
bytes	IO/OMFormat.hh	/^    size_t bytes;$/;"	l
bytes	IO/OMFormatT.cc	/^    size_t bytes = 0;$/;"	l
bytes	IO/SR_binary_spec.hh	/^      size_t bytes = binary<length_t>::store( _os, len, _swap );$/;"	l
bytes	IO/SR_binary_spec.hh	/^    size_t   bytes = binary<length_t>::restore( _is, len, _swap );$/;"	l
bytes	IO/writer/OMWriter.cc	/^  size_t bytes  = sizeof( OMFormat::Header );$/;"	l
bytes	IO/writer/OMWriter.cc	/^  size_t bytes = 0;$/;"	l
bytes	Utils/Property.hh	/^    size_t bytes = 0;$/;"	l
bytes_	IO/reader/OMReader.hh	/^  mutable size_t       bytes_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
c	Geometry/QuadricT.hh	/^  Scalar c() const { return c_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
c	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
c	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
c	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	m	union:OpenMesh::IO::u2	file:	access:public
c	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	m	union:OpenMesh::IO::u3	file:	access:public
c	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	m	union:OpenMesh::IO::u4	file:	access:public
c	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3i         c;$/;"	l
c	IO/reader/PLYReader.cc	/^                    _in >> c[0];$/;"	l
c	IO/reader/PLYReader.cc	/^                    _in >> c[1];$/;"	l
c	IO/reader/PLYReader.cc	/^                    _in >> c[2];$/;"	l
c	IO/reader/PLYReader.cc	/^                    _in >> c[3];$/;"	l
c	IO/reader/PLYReader.cc	/^    OpenMesh::Vec4i        c;  \/\/ Color$/;"	l
c	IO/reader/PLYReader.cc	/^    OpenMesh::Vec4i c;$/;"	l
c	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon5	file:	access:public
c	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon6	file:	access:public
c	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon7	file:	access:public
c	IO/writer/OBJWriter.cc	/^  OpenMesh::Vec3f c;$/;"	l
c	IO/writer/OFFWriter.cc	/^            _out << " " << c;$/;"	l
c	IO/writer/OFFWriter.cc	/^          _out << " " << c;$/;"	l
c	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec3i c;$/;"	l
c	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4i c;$/;"	l
c	IO/writer/OMWriter.cc	/^      Vec3uc c;$/;"	l
c	IO/writer/OMWriter.cc	/^    Vec3uc c = _be.color(VertexHandle(0));$/;"	l
c	IO/writer/PLYWriter.cc	/^          _out << " " << c;$/;"	l
c	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec3ui c;$/;"	l
c	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4uc c;$/;"	l
c	IO/writer/STLWriter.cc	/^      _out << "vertex " << c[0] << " " << c[1] << " " << c[2] << "\\n";$/;"	l
c	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
c	System/mostream.hh	/^    char c = traits_type::to_char_type(_c);$/;"	l
c1	IO/reader/OFFReader.cc	/^      std::string c1 = _line.substr (0,found);$/;"	l
c3	IO/reader/OFFReader.cc	/^        case 3 : stream >> c3[0];  stream >> c3[1];  stream >> c3[2];$/;"	l
c3	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3i         c3;$/;"	l
c3f	IO/reader/OFFReader.cc	/^        case 5 : stream >> c3f[0];  stream >> c3f[1];  stream >> c3f[2];$/;"	l
c3f	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         c3f;$/;"	l
c4	IO/reader/OFFReader.cc	/^        case 4 : stream >> c4[0];  stream >> c4[1];  stream >> c4[2]; stream >> c4[3];$/;"	l
c4	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4i         c4;$/;"	l
c4f	IO/reader/OFFReader.cc	/^        case 6 : stream >> c4f[0];  stream >> c4f[1];  stream >> c4f[2]; stream >> c4f[3];$/;"	l
c4f	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4f         c4f;$/;"	l
cA	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4i         cA;$/;"	l
cA	IO/writer/OBJWriter.cc	/^  OpenMesh::Vec4f cA;$/;"	l
cA	IO/writer/OFFWriter.cc	/^            _out << " " << cA;$/;"	l
cA	IO/writer/OFFWriter.cc	/^          _out << " " << cA;$/;"	l
cA	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4i cA;$/;"	l
cA	IO/writer/PLYWriter.cc	/^          _out << " " << cA;$/;"	l
cA	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4ui cA;$/;"	l
cAf	IO/reader/OFFReader.cc	/^  OpenMesh::Vec4f         cAf;$/;"	l
cAf	IO/writer/OFFWriter.cc	/^            _out << " " << cAf;$/;"	l
cAf	IO/writer/OFFWriter.cc	/^          _out << " " << cAf;$/;"	l
cAf	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4f cAf;$/;"	l
cAf	IO/writer/PLYWriter.cc	/^          _out << " " << cAf;$/;"	l
cAf	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4f cAf;$/;"	l
c_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
cache_size	Geometry/LoopSchemeMaskT.hh	/^  enum { cache_size = cache_size_ };$/;"	e	enum:OpenMesh::LoopSchemeMaskT::__anon4
cache_weights	Geometry/LoopSchemeMaskT.hh	/^  void                                      cache_weights()$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:()
calc_dihedral_angle	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
calc_dihedral_angle	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
calc_dihedral_angle_fast	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle_fast(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
calc_dihedral_angle_fast	Mesh/PolyMeshT.hh	/^  Scalar calc_dihedral_angle_fast(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
calc_edge_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_length(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
calc_edge_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_length(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
calc_edge_sqr_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_sqr_length(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh) const
calc_edge_sqr_length	Mesh/PolyMeshT.hh	/^  Scalar calc_edge_sqr_length(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh) const
calc_edge_vector	Mesh/PolyMeshT.hh	/^  void calc_edge_vector(EdgeHandle _eh, Normal& _edge_vec) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh, Normal& _edge_vec) const
calc_edge_vector	Mesh/PolyMeshT.hh	/^  void calc_edge_vector(HalfedgeHandle _heh, Normal& _edge_vec) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, Normal& _edge_vec) const
calc_face_centroid	Mesh/PolyMeshT.cc	/^calc_face_centroid(FaceHandle _fh, Point& _pt) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(FaceHandle _fh, Point& _pt) const
calc_face_centroid	Mesh/PolyMeshT.hh	/^  void calc_face_centroid(FaceHandle _fh, Point& _pt) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh, Point& _pt) const
calc_face_normal	Mesh/PolyMeshT.cc	/^calc_face_normal(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(FaceHandle _fh) const
calc_face_normal	Mesh/PolyMeshT.cc	/^calc_face_normal(const Point& _p0,$/;"	f	class:OpenMesh::PolyMeshT	signature:(const Point& _p0, const Point& _p1, const Point& _p2) const
calc_face_normal	Mesh/PolyMeshT.hh	/^      Normal f_n(calc_face_normal(fh));\/\/this normal is (for convex fh) OK$/;"	p	signature:(fh)
calc_face_normal	Mesh/PolyMeshT.hh	/^  Normal calc_face_normal(const Point& _p0, const Point& _p1,$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(const Point& _p0, const Point& _p1, const Point& _p2) const
calc_face_normal	Mesh/PolyMeshT.hh	/^  virtual Normal calc_face_normal(FaceHandle _fh) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh) const
calc_face_normal	Mesh/TriMeshT.cc	/^calc_face_normal(FaceHandle _fh) const$/;"	f	class:OpenMesh::TriMeshT	signature:(FaceHandle _fh) const
calc_face_normal	Mesh/TriMeshT.hh	/^  Normal calc_face_normal(FaceHandle _fh) const;$/;"	p	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh) const
calc_halfedge_normal	Mesh/PolyMeshT.cc	/^calc_halfedge_normal(HalfedgeHandle _heh, const double _feature_angle) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(HalfedgeHandle _heh, const double _feature_angle) const
calc_halfedge_normal	Mesh/PolyMeshT.hh	/^  virtual Normal calc_halfedge_normal(HalfedgeHandle _heh, const double _feature_angle = 0.8) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, const double _feature_angle = 0.8) const
calc_sector_angle	Mesh/PolyMeshT.hh	/^  Scalar calc_sector_angle(HalfedgeHandle _in_heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh) const
calc_sector_area	Mesh/PolyMeshT.hh	/^  Scalar calc_sector_area(HalfedgeHandle _in_heh) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh) const
calc_sector_normal	Mesh/PolyMeshT.hh	/^  void calc_sector_normal(HalfedgeHandle _in_heh, Normal& _sector_normal) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh, Normal& _sector_normal) const
calc_sector_vectors	Mesh/PolyMeshT.hh	/^  void calc_sector_vectors(HalfedgeHandle _in_heh, Normal& _vec0, Normal& _vec1) const$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _in_heh, Normal& _vec0, Normal& _vec1) const
calc_vertex_normal	Mesh/PolyMeshT.cc	/^calc_vertex_normal(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh) const
calc_vertex_normal	Mesh/PolyMeshT.hh	/^  Normal calc_vertex_normal(VertexHandle _vh) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh) const
calc_vertex_normal_correct	Mesh/PolyMeshT.cc	/^calc_vertex_normal_correct(VertexHandle _vh, Normal& _n) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh, Normal& _n) const
calc_vertex_normal_correct	Mesh/PolyMeshT.hh	/^  void calc_vertex_normal_correct(VertexHandle _vh, Normal& _n) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh, Normal& _n) const
calc_vertex_normal_fast	Mesh/PolyMeshT.cc	/^calc_vertex_normal_fast(VertexHandle _vh, Normal& _n) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh, Normal& _n) const
calc_vertex_normal_fast	Mesh/PolyMeshT.hh	/^  void calc_vertex_normal_fast(VertexHandle _vh, Normal& _n) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh, Normal& _n) const
calc_vertex_normal_loop	Mesh/PolyMeshT.cc	/^calc_vertex_normal_loop(VertexHandle _vh, Normal& _n) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(VertexHandle _vh, Normal& _n) const
calc_vertex_normal_loop	Mesh/PolyMeshT.hh	/^  void calc_vertex_normal_loop(VertexHandle _vh, Normal& _n) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh, Normal& _n) const
can_read	IO/IOManager.cc	/^can_read( const std::string& _format ) const$/;"	f	class:OpenMesh::IO::_IOManager_	signature:( const std::string& _format ) const
can_read	IO/IOManager.hh	/^  bool can_read( const std::string& _format ) const;$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:( const std::string& _format ) const
can_u_read	IO/reader/BaseReader.cc	/^can_u_read(const std::string& _filename) const $/;"	f	class:OpenMesh::IO::BaseReader	signature:(const std::string& _filename) const
can_u_read	IO/reader/BaseReader.hh	/^  virtual bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:(const std::string& _filename) const
can_u_read	IO/reader/OFFReader.cc	/^bool _OFFReader_::can_u_read(const std::string& _filename) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(const std::string& _filename) const
can_u_read	IO/reader/OFFReader.cc	/^bool _OFFReader_::can_u_read(std::istream& _is) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _is) const
can_u_read	IO/reader/OFFReader.hh	/^  bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:(const std::string& _filename) const
can_u_read	IO/reader/OFFReader.hh	/^  bool can_u_read(std::istream& _is) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _is) const
can_u_read	IO/reader/OMReader.cc	/^bool _OMReader_::can_u_read(const std::string& _filename) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(const std::string& _filename) const
can_u_read	IO/reader/OMReader.cc	/^bool _OMReader_::can_u_read(std::istream& _is) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is) const
can_u_read	IO/reader/OMReader.hh	/^  virtual bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(const std::string& _filename) const
can_u_read	IO/reader/OMReader.hh	/^  virtual bool can_u_read(std::istream& _is) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(std::istream& _is) const
can_u_read	IO/reader/PLYReader.cc	/^bool _PLYReader_::can_u_read(const std::string& _filename) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(const std::string& _filename) const
can_u_read	IO/reader/PLYReader.cc	/^bool _PLYReader_::can_u_read(std::istream& _is) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _is) const
can_u_read	IO/reader/PLYReader.hh	/^  bool can_u_read(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:(const std::string& _filename) const
can_u_read	IO/reader/PLYReader.hh	/^  bool can_u_read(std::istream& _is) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _is) const
can_u_write	IO/writer/BaseWriter.cc	/^can_u_write(const std::string& _filename) const $/;"	f	class:OpenMesh::IO::BaseWriter	signature:(const std::string& _filename) const
can_u_write	IO/writer/BaseWriter.hh	/^  virtual bool can_u_write(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:(const std::string& _filename) const
can_write	IO/IOManager.cc	/^can_write( const std::string& _format ) const$/;"	f	class:OpenMesh::IO::_IOManager_	signature:( const std::string& _format ) const
can_write	IO/IOManager.hh	/^  bool can_write( const std::string& _format ) const;$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:( const std::string& _format ) const
cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec3f& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec3f& _src)
cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec3uc& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec3uc& _src)
cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec4f& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec4f& _src)
cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec4i& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec4i& _src)
cast	Utils/color_cast.hh	/^  inline static return_type cast(const Vec4uc& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const Vec4uc& _src)
cast	Utils/color_cast.hh	/^  inline static return_type cast(const dst_t& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const dst_t& _src)
cast	Utils/color_cast.hh	/^  inline static return_type cast(const src_t& _src)$/;"	f	struct:OpenMesh::color_caster	access:public	signature:(const src_t& _src)
cast	Utils/vector_cast.hh	/^  inline static return_type cast(const dst_t& _src)$/;"	f	struct:OpenMesh::vector_caster	access:public	signature:(const dst_t& _src)
cast	Utils/vector_cast.hh	/^  inline static return_type cast(const src_t& _src)$/;"	f	struct:OpenMesh::vector_caster	access:public	signature:(const src_t& _src)
ccw_rotated_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle ccw_rotated_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
centerAngle	Geometry/NormalConeT.cc	/^    Scalar centerAngle = acos(dotp);$/;"	l
centerAngle	Geometry/NormalConeT.cc	/^  Scalar centerAngle = dotp >= 1.0 ? 0.0 : (dotp <= -1.0 ? M_PI : acos(dotp));$/;"	l
center_normal	Geometry/NormalConeT.hh	/^  const Vec3& center_normal() const { return center_normal_; }$/;"	f	class:OpenMesh::NormalConeT	access:public	signature:() const
center_normal_	Geometry/NormalConeT.hh	/^  Vec3    center_normal_;$/;"	m	class:OpenMesh::NormalConeT	access:private
cerr	IO/OMFormat.hh	/^	std::cerr << "Invalid value in _chunk_hdr.entity_\\n";$/;"	m	class:OpenMesh::IO::OMFormat::std
cf	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         cf;$/;"	l
cf	IO/writer/OFFWriter.cc	/^            _out << " " << cf;$/;"	l
cf	IO/writer/OFFWriter.cc	/^          _out << " " << cf;$/;"	l
cf	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec3f cf;$/;"	l
cf	IO/writer/OFFWriter.cc	/^  OpenMesh::Vec4f cf;$/;"	l
cf	IO/writer/PLYWriter.cc	/^          _out << " " << cf;$/;"	l
cf	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec3f cf;$/;"	l
cf	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec4f cf;$/;"	l
cfe_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceEdgeIter cfe_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfe_end	Mesh/PolyConnectivity.hh	/^  ConstFaceEdgeIter cfe_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfe_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceEdgeIter cfe_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cff_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceFaceIter cff_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cff_end	Mesh/PolyConnectivity.hh	/^  ConstFaceFaceIter cff_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cff_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceFaceIter cff_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfh_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceHalfedgeIter cfh_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfh_end	Mesh/PolyConnectivity.hh	/^  ConstFaceHalfedgeIter cfh_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfh_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceHalfedgeIter cfh_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfv_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceVertexIter cfv_begin(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfv_end	Mesh/PolyConnectivity.hh	/^  ConstFaceVertexIter cfv_end(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
cfv_iter	Mesh/PolyConnectivity.hh	/^  ConstFaceVertexIter cfv_iter(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
change_bit	Mesh/Status.hh	/^  void change_bit(unsigned int _s, bool _b) {  $/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s, bool _b)
chdr	IO/writer/OMWriter.cc	/^  OMFormat::Chunk::Header  chdr;$/;"	l
check	IO/Options.hh	/^  bool check(const value_type _rhs) const$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _rhs) const
check	IO/writer/BaseWriter.hh	/^  bool check(BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::BaseWriter	access:protected	signature:(BaseExporter& _be, Options _opt) const
check_and_set_persistent	Utils/BaseProperty.hh	/^  void check_and_set_persistent( bool _yn )$/;"	f	class:OpenMesh::BaseProperty	access:protected	signature:( bool _yn )
check_extension	IO/reader/BaseReader.cc	/^check_extension(const std::string& _fname, const std::string& _ext) const$/;"	f	class:OpenMesh::IO::BaseReader	signature:(const std::string& _fname, const std::string& _ext) const
check_extension	IO/reader/BaseReader.hh	/^  bool check_extension(const std::string& _fname, $/;"	p	class:OpenMesh::IO::BaseReader	access:protected	signature:(const std::string& _fname, const std::string& _ext) const
check_stl_type	IO/reader/STLReader.cc	/^check_stl_type(const std::string& _filename) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename) const
check_stl_type	IO/reader/STLReader.hh	/^  STL_Type check_stl_type(const std::string& _filename) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(const std::string& _filename) const
chunk_data_size	IO/OMFormat.hh	/^  inline size_t chunk_data_size( Header& _hdr,  Chunk::Header& _chunk_hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( Header& _hdr, Chunk::Header& _chunk_hdr )
chunk_header	IO/writer/OMWriter.cc	/^  OMFormat::Chunk::Header chunk_header;$/;"	l
chunk_header_	IO/reader/OMReader.hh	/^  mutable ChunkHeader  chunk_header_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
chunk_header_size	IO/OMFormat.hh	/^  inline size_t chunk_header_size( void ) { return sizeof(uint16); }$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( void )
chunk_size	IO/OMFormat.hh	/^  inline size_t chunk_size( Header& _hdr, Chunk::Header& _chunk_hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( Header& _hdr, Chunk::Header& _chunk_hdr )
clean	Mesh/ArrayKernel.cc	/^void ArrayKernel::clean()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
clean	Mesh/ArrayKernel.hh	/^  void clean();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
cleanup	IO/Options.hh	/^  void cleanup(void)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(void)
cleanup	IO/reader/OBJReader.cc	/^        mat.cleanup();$/;"	p	file:	signature:()
cleanup	IO/reader/OBJReader.cc	/^  mat.cleanup();$/;"	p	file:	signature:()
cleanup	IO/reader/OBJReader.hh	/^    void cleanup()$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:()
cleanup	IO/reader/OFFReader.cc	/^  options_.cleanup();$/;"	p	file:	signature:()
cleanup	IO/reader/PLYReader.cc	/^    options_.cleanup();$/;"	p	file:	signature:()
clear	Geometry/QuadricT.hh	/^  void clear()  { a_ = b_ = c_ = d_ = e_ = f_ = g_ = h_ = i_ = j_ = 0.0; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:()
clear	IO/MeshIO.hh	/^  if (_clear) _mesh.clear();$/;"	p	signature:()
clear	IO/Options.hh	/^  void clear(void)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(void)
clear	IO/exporter/ExporterT.hh	/^    _vhandles.clear();$/;"	p	signature:()
clear	IO/importer/ImporterT.hh	/^        halfedgeNormals_.clear();$/;"	p	signature:()
clear	IO/importer/ImporterT.hh	/^      failed_faces_.clear();$/;"	p	signature:()
clear	IO/importer/ImporterT.hh	/^  void prepare() { failed_faces_.clear(); }$/;"	p	signature:()
clear	IO/reader/OBJReader.cc	/^      face_texcoords.clear();$/;"	p	file:	signature:()
clear	IO/reader/OBJReader.cc	/^      vhandles.clear();$/;"	p	file:	signature:()
clear	IO/reader/OBJReader.cc	/^  materials_.clear();$/;"	p	file:	signature:()
clear	IO/reader/OFFReader.cc	/^      vhandles.clear();$/;"	p	file:	signature:()
clear	IO/reader/OFFReader.cc	/^   _opt.clear();$/;"	p	file:	signature:()
clear	IO/reader/OMReader.cc	/^        vhandles.clear();$/;"	p	file:	signature:()
clear	IO/reader/PLYReader.cc	/^            vhandles.clear();$/;"	p	file:	signature:()
clear	IO/reader/PLYReader.cc	/^    _opt.clear();$/;"	p	file:	signature:()
clear	IO/reader/PLYReader.cc	/^    vertexPropertyMap_.clear();$/;"	p	file:	signature:()
clear	IO/reader/STLReader.cc	/^      vhandles.clear();$/;"	p	file:	signature:()
clear	IO/reader/STLReader.cc	/^    vhandles.clear();$/;"	p	file:	signature:()
clear	IO/writer/OBJWriter.cc	/^  materialA_.clear();$/;"	p	file:	signature:()
clear	IO/writer/OBJWriter.cc	/^  material_.clear();$/;"	p	file:	signature:()
clear	Mesh/ArrayKernel.cc	/^  edges_.clear();$/;"	p	file:	signature:()
clear	Mesh/ArrayKernel.cc	/^  faces_.clear();$/;"	p	file:	signature:()
clear	Mesh/ArrayKernel.cc	/^  vertices_.clear();$/;"	p	file:	signature:()
clear	Mesh/ArrayKernel.cc	/^void ArrayKernel::clear()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
clear	Mesh/ArrayKernel.hh	/^      handles_.clear();$/;"	p	signature:()
clear	Mesh/ArrayKernel.hh	/^    inline void                             clear()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
clear	Mesh/ArrayKernel.hh	/^    void                                    clear()$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:()
clear	Mesh/ArrayKernel.hh	/^  void clear();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
clear	Mesh/BaseKernel.cc	/^  _string.clear();$/;"	p	file:	signature:()
clear	Mesh/BaseKernel.hh	/^	eprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^	fprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^	hprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^	vprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^    eprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^    fprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^    hprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^    mprops_.clear();$/;"	p	signature:()
clear	Mesh/BaseKernel.hh	/^    vprops_.clear();$/;"	p	signature:()
clear	System/mostream.hh	/^      buffer_.clear();$/;"	p	signature:()
clear	Utils/BaseProperty.hh	/^  virtual void clear() = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:()
clear	Utils/Property.hh	/^  virtual void clear()  { data_.clear(); vector_type().swap(data_);    }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
clear	Utils/Property.hh	/^  virtual void clear()  { data_.clear(); vector_type().swap(data_);    }$/;"	p	signature:()
clear	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->clear(); }$/;"	p	signature:()
clear	Utils/PropertyContainer.hh	/^  void clear()$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:()
clog	IO/OMFormat.cc	/^	std::clog << "as_string(Chunk::Entity): Invalid value!";$/;"	m	class:OpenMesh::IO::OMFormat::std	file:
clone	Utils/BaseProperty.hh	/^  virtual BaseProperty* clone () const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:() const
clone	Utils/Property.hh	/^  PropertyT<T>* clone() const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
clone	Utils/Property.hh	/^  PropertyT<bool>* clone() const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
clone	Utils/Property.hh	/^  PropertyT<value_type>* clone() const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
close	IO/reader/OBJReader.cc	/^        matStream.close();$/;"	p	file:	signature:()
close	IO/reader/OBJReader.cc	/^  in.close();$/;"	p	file:	signature:()
close	IO/reader/OFFReader.cc	/^      ifs.close();$/;"	p	file:	signature:()
close	IO/reader/OFFReader.cc	/^  ifile.close();$/;"	p	file:	signature:()
close	IO/reader/OMReader.cc	/^  ifs.close();$/;"	p	file:	signature:()
close	IO/reader/PLYReader.cc	/^            ifs.close();$/;"	p	file:	signature:()
close	IO/reader/PLYReader.cc	/^    in.close();$/;"	p	file:	signature:()
close	IO/reader/STLReader.cc	/^      in.close();$/;"	p	file:	signature:()
close	IO/reader/STLReader.cc	/^    in.close();$/;"	p	file:	signature:()
close	IO/writer/OBJWriter.cc	/^      matStream.close();$/;"	p	file:	signature:()
close	IO/writer/OBJWriter.cc	/^  out.close();$/;"	p	file:	signature:()
close	IO/writer/OFFWriter.cc	/^  out.close();$/;"	p	file:	signature:()
close	IO/writer/OMWriter.cc	/^  ofs.close();$/;"	p	file:	signature:()
close	IO/writer/PLYWriter.cc	/^  out.close();$/;"	p	file:	signature:()
close	IO/writer/STLWriter.cc	/^  out.close();$/;"	p	file:	signature:()
cmpExt	IO/reader/BaseReader.cc	/^  std::string cmpExt(_ext);$/;"	p	file:	signature:(_ext)
collapse	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::collapse(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _hh)
collapse	Mesh/PolyConnectivity.hh	/^  void collapse(HalfedgeHandle _heh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _heh)
collapse_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::collapse_edge(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _hh)
collapse_edge	Mesh/PolyConnectivity.hh	/^  void collapse_edge(HalfedgeHandle _hh);$/;"	p	class:OpenMesh::PolyConnectivity	access:protected	signature:(HalfedgeHandle _hh)
collapse_loop	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::collapse_loop(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _hh)
collapse_loop	Mesh/PolyConnectivity.hh	/^  void collapse_loop(HalfedgeHandle _hh);$/;"	p	class:OpenMesh::PolyConnectivity	access:protected	signature:(HalfedgeHandle _hh)
color	IO/exporter/BaseExporter.hh	/^  virtual Vec3uc color (FaceHandle _fh)      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
color	IO/exporter/BaseExporter.hh	/^  virtual Vec3uc color(EdgeHandle _eh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
color	IO/exporter/BaseExporter.hh	/^  virtual Vec3uc color(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
color	IO/exporter/ExporterT.hh	/^  Vec3uc  color(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
color	IO/exporter/ExporterT.hh	/^  Vec3uc color(EdgeHandle _eh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
color	IO/exporter/ExporterT.hh	/^  Vec3uc color(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
color	Mesh/AttribKernelT.hh	/^  const Color& color(EdgeHandle _eh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh) const
color	Mesh/AttribKernelT.hh	/^  const Color& color(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
color	Mesh/AttribKernelT.hh	/^  const Color& color(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
color	Mesh/AttribKernelT.hh	/^  const Color& color(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
colorA	IO/exporter/BaseExporter.hh	/^  virtual Vec4uc colorA(EdgeHandle _eh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
colorA	IO/exporter/BaseExporter.hh	/^  virtual Vec4uc colorA(FaceHandle _fh)      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
colorA	IO/exporter/BaseExporter.hh	/^  virtual Vec4uc colorA(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
colorA	IO/exporter/ExporterT.hh	/^  Vec4uc  colorA(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
colorA	IO/exporter/ExporterT.hh	/^  Vec4uc colorA(EdgeHandle _eh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
colorA	IO/exporter/ExporterT.hh	/^  Vec4uc colorA(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
colorAf	IO/exporter/BaseExporter.hh	/^  virtual Vec4f colorAf(EdgeHandle _eh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
colorAf	IO/exporter/BaseExporter.hh	/^  virtual Vec4f colorAf(FaceHandle _fh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
colorAf	IO/exporter/BaseExporter.hh	/^  virtual Vec4f colorAf(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
colorAf	IO/exporter/ExporterT.hh	/^  Vec4f colorAf(EdgeHandle _eh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
colorAf	IO/exporter/ExporterT.hh	/^  Vec4f colorAf(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
colorAf	IO/exporter/ExporterT.hh	/^  Vec4f colorAf(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
colorAi	IO/exporter/BaseExporter.hh	/^  virtual Vec4ui colorAi(EdgeHandle _eh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
colorAi	IO/exporter/BaseExporter.hh	/^  virtual Vec4ui colorAi(FaceHandle _fh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
colorAi	IO/exporter/BaseExporter.hh	/^  virtual Vec4ui colorAi(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
colorAi	IO/exporter/ExporterT.hh	/^  Vec4ui  colorAi(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
colorAi	IO/exporter/ExporterT.hh	/^  Vec4ui colorAi(EdgeHandle _eh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
colorAi	IO/exporter/ExporterT.hh	/^  Vec4ui colorAi(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
colorType	IO/reader/OFFReader.cc	/^            std::cerr << "Error in file format (colorType = " << colorType << ")\\n";$/;"	l
colorType	IO/reader/OFFReader.cc	/^      int colorType = getColorType(line, false );$/;"	l
colorType	IO/reader/OFFReader.cc	/^    int colorType = getColorType(line, options_.vertex_has_texcoord() );$/;"	l
color_cast	Utils/color_cast.hh	/^color_cast(const src_t& _src )$/;"	f	namespace:OpenMesh	signature:(const src_t& _src )
color_caster	Utils/color_cast.hh	/^struct color_caster$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3f, Vec3uc>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3f, Vec4uc>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3i,Vec3f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3i,Vec4f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3uc,Vec3f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3uc,Vec4f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3ui,Vec3f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec3ui,Vec4f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f, Vec3uc>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f, Vec4uc>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f,Vec3f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4f,Vec4i>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4i,Vec4f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4uc,Vec3f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4uc,Vec3uc>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4uc,Vec4f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<Vec4ui,Vec4f>$/;"	s	namespace:OpenMesh
color_caster	Utils/color_cast.hh	/^struct color_caster<dst_t,dst_t>$/;"	s	namespace:OpenMesh
color_has_alpha	IO/Options.hh	/^  bool color_has_alpha()     const { return check(ColorAlpha); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
color_is_float	IO/Options.hh	/^  bool color_is_float()      const { return check(ColorFloat); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
colorf	IO/exporter/BaseExporter.hh	/^  virtual Vec3f colorf(EdgeHandle _eh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
colorf	IO/exporter/BaseExporter.hh	/^  virtual Vec3f colorf(FaceHandle _fh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
colorf	IO/exporter/BaseExporter.hh	/^  virtual Vec3f colorf(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
colorf	IO/exporter/ExporterT.hh	/^  Vec3f colorf(EdgeHandle _eh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
colorf	IO/exporter/ExporterT.hh	/^  Vec3f colorf(FaceHandle _fh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
colorf	IO/exporter/ExporterT.hh	/^  Vec3f colorf(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
colori	IO/exporter/BaseExporter.hh	/^  virtual Vec3ui colori(EdgeHandle _eh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(EdgeHandle _eh) const
colori	IO/exporter/BaseExporter.hh	/^  virtual Vec3ui colori(FaceHandle _fh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
colori	IO/exporter/BaseExporter.hh	/^  virtual Vec3ui colori(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
colori	IO/exporter/ExporterT.hh	/^  Vec3ui  colori(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
colori	IO/exporter/ExporterT.hh	/^  Vec3ui colori(EdgeHandle _eh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(EdgeHandle _eh) const
colori	IO/exporter/ExporterT.hh	/^  Vec3ui colori(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
colors	IO/reader/OBJReader.cc	/^  std::vector<Vec3uc>       colors;$/;"	l
comp	IO/reader/STLReader.cc	/^  CmpVec comp(eps_);$/;"	p	file:	signature:(eps_)
compile_time_error__no_fundamental_type	IO/SR_rbo.hh	/^inline void compile_time_error__no_fundamental_type()$/;"	f	namespace:OpenMesh::IO	signature:()
compute_limit_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_limit_weight(uint _valence)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence)
compute_proj_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_proj_weight(uint _valence)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence)
compute_step_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_step_weight(uint _valence)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence)
compute_tang0_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_tang0_weight(uint _valence, uint _ver_id)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence, uint _ver_id)
compute_tang1_weight	Geometry/LoopSchemeMaskT.hh	/^  inline static Scalar                      compute_tang1_weight(uint _valence, uint _ver_id)$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:protected	signature:(uint _valence, uint _ver_id)
connect	System/mostream.hh	/^  template <class T> bool connect(T& _target) $/;"	f	class:OpenMesh::mostream	access:public	signature:(T& _target)
connect	System/mostream.hh	/^  template <class T> bool connect(T& _target) $/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:(T& _target)
connect	System/omstream.cc	/^    mystream.connect(std::cerr);$/;"	p	file:	signature:(std::cerr)
connect	System/omstream.cc	/^    mystream.connect(std::clog);$/;"	p	file:	signature:(std::clog)
connect	System/omstream.cc	/^    mystream.connect(std::cout);$/;"	p	file:	signature:(std::cout)
const_cast	IO/SR_binary_spec.hh	/^    _is.read( const_cast<char*>(_val.data()), len );$/;"	p	signature:(_val.data())
const_iterator	Mesh/ArrayKernel.hh	/^                                            const_iterator;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public
const_prop_iterator	Mesh/BaseKernel.hh	/^  typedef PropertyContainer::const_iterator const_prop_iterator;$/;"	t	class:OpenMesh::BaseKernel	access:public
const_reference	Utils/Property.hh	/^  typedef typename vector_type::const_reference   const_reference;$/;"	t	class:OpenMesh::PropertyT	access:public
const_reference	Utils/Property.hh	/^  typedef typename vector_type::const_reference   const_reference;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
const_reference	Utils/Property.hh	/^  typedef vector_type::const_reference            const_reference;$/;"	t	class:OpenMesh::PropertyT	access:public
consume_input	IO/reader/PLYReader.hh	/^  void consume_input(std::istream& _in, int _count) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _in, int _count) const
container_	Mesh/PolyConnectivity.hh	/^          CONTAINER_TYPE &container_;$/;"	m	class:OpenMesh::PolyConnectivity::EntityRange	access:private
copy	Utils/BaseProperty.hh	/^  virtual void copy(size_t _io, size_t _i1) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _io, size_t _i1)
copy	Utils/Property.hh	/^  virtual void copy(size_t _i0, size_t _i1)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _i0, size_t _i1)
copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(EdgeHandle _eh_from, EdgeHandle _eh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EdgeHandle _eh_from, EdgeHandle _eh_to, bool _copyBuildIn = false)
copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(FaceHandle _fh_from, FaceHandle _fh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FaceHandle _fh_from, FaceHandle _fh_to, bool _copyBuildIn = false)
copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(HalfedgeHandle _hh_from, HalfedgeHandle _hh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HalfedgeHandle _hh_from, HalfedgeHandle _hh_to, bool _copyBuildIn = false)
copy_all_properties	Mesh/BaseKernel.hh	/^  void copy_all_properties(VertexHandle _vh_from, VertexHandle _vh_to, bool _copyBuildIn = false) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VertexHandle _vh_from, VertexHandle _vh_to, bool _copyBuildIn = false)
copy_property	Mesh/BaseKernel.hh	/^  void copy_property(EPropHandleT<T> _ph, EdgeHandle _eh_from, EdgeHandle _eh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph, EdgeHandle _eh_from, EdgeHandle _eh_to)
copy_property	Mesh/BaseKernel.hh	/^  void copy_property(FPropHandleT<T> _ph, FaceHandle _fh_from, FaceHandle _fh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph, FaceHandle _fh_from, FaceHandle _fh_to)
copy_property	Mesh/BaseKernel.hh	/^  void copy_property(HPropHandleT<T> _ph, HalfedgeHandle _hh_from, HalfedgeHandle _hh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph, HalfedgeHandle _hh_from, HalfedgeHandle _hh_to)
copy_property	Mesh/BaseKernel.hh	/^  void copy_property(VPropHandleT<T>& _ph, VertexHandle _vh_from, VertexHandle _vh_to) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T>& _ph, VertexHandle _vh_from, VertexHandle _vh_to)
cos_a	Mesh/PolyMeshT.hh	/^    Scalar cos_a = dot(v0 , v1) \/ denom;$/;"	l
count	IO/reader/OFFReader.cc	/^    int count = 0;$/;"	l
createIfNotExists	Utils/PropertyManager.hh	/^        static PropertyManager createIfNotExists(MeshT &mesh, const char *propname) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname)
createIfNotExists	Utils/PropertyManager.hh	/^        static Proxy createIfNotExists(MeshT &mesh, const char *propname) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname)
cross	Geometry/VectorT.hh	/^cross(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2) {$/;"	f	namespace:OpenMesh	signature:(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2)
cur_heh	IO/importer/ImporterT.hh	/^    HalfedgeHandle cur_heh   = mesh_.halfedge_handle(_fh);$/;"	l
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
current_halfedge_handle	Mesh/CirculatorsT.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
current_halfedge_handle	Mesh/gen/circulators_template.hh	/^  HalfedgeHandle current_halfedge_handle() const {$/;"	f	class:CirculatorT	access:public	signature:() const
custom_prop	IO/reader/OMReader.cc	/^  Chunk::PropertyName custom_prop;$/;"	l
custom_prop	IO/reader/OMReader.cc	/^  OMFormat::Chunk::PropertyName custom_prop;$/;"	l
cve_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexEdgeIter cve_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cve_end	Mesh/PolyConnectivity.hh	/^  ConstVertexEdgeIter cve_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cve_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexEdgeIter cve_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvf_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexFaceIter cvf_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvf_end	Mesh/PolyConnectivity.hh	/^  ConstVertexFaceIter cvf_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvf_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexFaceIter cvf_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvih_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexIHalfedgeIter cvih_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvih_end	Mesh/PolyConnectivity.hh	/^  ConstVertexIHalfedgeIter cvih_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvih_it	Mesh/PolyMeshT.cc	/^  ConstVertexIHalfedgeIter cvih_it = cvih_iter(_vh);$/;"	l
cvih_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexIHalfedgeIter cvih_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvoh_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexOHalfedgeIter cvoh_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvoh_end	Mesh/PolyConnectivity.hh	/^  ConstVertexOHalfedgeIter cvoh_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvoh_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexOHalfedgeIter cvoh_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvv_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexVertexIter cvv_begin(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvv_end	Mesh/PolyConnectivity.hh	/^  ConstVertexVertexIter cvv_end(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cvv_iter	Mesh/PolyConnectivity.hh	/^  ConstVertexVertexIter cvv_iter(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
cw_rotated_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle cw_rotated_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
d	Geometry/QuadricT.hh	/^  Scalar d() const { return d_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
d	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	m	union:OpenMesh::IO::u4	file:	access:public
d_	Geometry/Plane3d.hh	/^  value_type  d_;$/;"	m	class:OpenMesh::VDPM::Plane3d	access:public
d_	Geometry/QuadricT.hh	/^  Scalar a_, b_, c_, d_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
da_cos	Mesh/PolyMeshT.hh	/^    Scalar da_cos = dot(n0, n1);$/;"	l
da_cos	Mesh/PolyMeshT.hh	/^    Scalar da_cos = dot(n0, n1)\/denom;$/;"	l
da_sin_sign	Mesh/PolyMeshT.hh	/^    Scalar da_sin_sign = dot(cross(n0, n1), he);$/;"	l
data	Geometry/VectorT_inc.hh	/^  inline Scalar* data() { return Base::values_; }$/;"	f	class:CLASSNAME	access:public	signature:()
data	Geometry/VectorT_inc.hh	/^  inline const Scalar*data() const { return Base::values_; }$/;"	f	class:CLASSNAME	access:public	signature:() const
data	Mesh/AttribKernelT.hh	/^  EdgeData&                                 data(EdgeHandle _eh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh)
data	Mesh/AttribKernelT.hh	/^  FaceData&                                 data(FaceHandle _fh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh)
data	Mesh/AttribKernelT.hh	/^  HalfedgeData&                             data(HalfedgeHandle _heh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh)
data	Mesh/AttribKernelT.hh	/^  VertexData&                               data(VertexHandle _vh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh)
data	Mesh/AttribKernelT.hh	/^  const EdgeData&                           data(EdgeHandle _eh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh) const
data	Mesh/AttribKernelT.hh	/^  const FaceData&                           data(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
data	Mesh/AttribKernelT.hh	/^  const HalfedgeData&                       data(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
data	Mesh/AttribKernelT.hh	/^  const VertexData&                         data(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
data	Utils/Property.hh	/^  const T* data() const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
data	Utils/Property.hh	/^  const value_type* data() const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
data_	Utils/Property.hh	/^  vector_type data_;$/;"	m	class:OpenMesh::PropertyT	access:private
data_bytes	IO/reader/OMReader.cc	/^  size_t data_bytes;$/;"	l
data_epph_	Mesh/AttribKernelT.hh	/^  DataEPropHandle                           data_epph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
data_fpph_	Mesh/AttribKernelT.hh	/^  DataFPropHandle                           data_fpph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
data_hpph_	Mesh/AttribKernelT.hh	/^  DataHPropHandle                           data_hpph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
data_vector	Utils/Property.hh	/^  vector_type& data_vector() {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
data_vpph_	Mesh/AttribKernelT.hh	/^  DataVPropHandle                           data_vpph_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
dbl_eps__	Geometry/MathDefs.hh	/^const double dbl_eps__ = 1e-09;$/;"	m	namespace:OpenMesh
dc	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	l
deg_to_rad	Geometry/MathDefs.hh	/^inline T deg_to_rad(const T& _angle)$/;"	f	namespace:OpenMesh	signature:(const T& _angle)
del_end	Mesh/PolyConnectivity.cc	/^                                      del_end(deleted_edges.end());$/;"	p	file:	signature:(deleted_edges.end())
del_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle rem_fh = face_handle(heh0), del_fh = face_handle(heh1);$/;"	l
del_it	Mesh/PolyConnectivity.cc	/^    std::vector<EdgeHandle>::iterator del_it(deleted_edges.begin()),$/;"	p	file:	signature:(deleted_edges.begin())
deleteProperty	Utils/PropertyManager.hh	/^        void deleteProperty() {$/;"	f	class:OpenMesh::PropertyManager	access:private	signature:()
delete_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::delete_edge(EdgeHandle _eh, bool _delete_isolated_vertices)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh, bool _delete_isolated_vertices)
delete_edge	Mesh/PolyConnectivity.hh	/^  void delete_edge(EdgeHandle _eh, bool _delete_isolated_vertices=true);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh, bool _delete_isolated_vertices=true)
delete_face	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::delete_face(FaceHandle _fh, bool _delete_isolated_vertices)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh, bool _delete_isolated_vertices)
delete_face	Mesh/PolyConnectivity.hh	/^  void delete_face(FaceHandle _fh, bool _delete_isolated_vertices=true);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, bool _delete_isolated_vertices=true)
delete_isolated_vertices	Mesh/ArrayKernel.cc	/^unsigned int ArrayKernel::delete_isolated_vertices()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
delete_isolated_vertices	Mesh/ArrayKernel.hh	/^  unsigned int delete_isolated_vertices();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
delete_vertex	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::delete_vertex(VertexHandle _vh, bool _delete_isolated_vertices)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh, bool _delete_isolated_vertices)
delete_vertex	Mesh/PolyConnectivity.hh	/^  void delete_vertex(VertexHandle _vh, bool _delete_isolated_vertices = true);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh, bool _delete_isolated_vertices = true)
deleted	Mesh/Status.hh	/^  bool deleted() const  { return is_bit_set(DELETED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
deleted_edges	Mesh/PolyConnectivity.cc	/^  std::vector<EdgeHandle> deleted_edges;$/;"	l
denom	Geometry/LoopSchemeMaskT.hh	/^    double denom = (3.0 + 2.0*cos(2.0*M_PI\/(double)_valence));$/;"	l
denom	Mesh/PolyMeshT.hh	/^    Scalar denom = n0.norm()*n1.norm();$/;"	l
denom	Mesh/PolyMeshT.hh	/^    Scalar denom = v0.norm()*v1.norm();$/;"	l
deref	Mesh/PolyConnectivity.hh	/^  Edge&            deref(EdgeHandle _h)           { return edge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _h)
deref	Mesh/PolyConnectivity.hh	/^  Face&            deref(FaceHandle _h)           { return face(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _h)
deref	Mesh/PolyConnectivity.hh	/^  Halfedge&        deref(HalfedgeHandle _h)       { return halfedge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _h)
deref	Mesh/PolyConnectivity.hh	/^  Vertex&          deref(VertexHandle _h)         { return vertex(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _h)
deref	Mesh/PolyConnectivity.hh	/^  const Edge&      deref(EdgeHandle _h)     const { return edge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _h) const
deref	Mesh/PolyConnectivity.hh	/^  const Face&      deref(FaceHandle _h)     const { return face(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _h) const
deref	Mesh/PolyConnectivity.hh	/^  const Halfedge&  deref(HalfedgeHandle _h) const { return halfedge(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _h) const
deref	Mesh/PolyConnectivity.hh	/^  const Vertex&    deref(VertexHandle _h)   const { return vertex(_h); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _h) const
destroyed__	Utils/SingletonT.cc	/^bool SingletonT<T>::destroyed__ = false;$/;"	m	class:OpenMesh::SingletonT	file:
destroyed__	Utils/SingletonT.hh	/^  static bool   destroyed__;$/;"	m	class:OpenMesh::SingletonT	access:private
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
difference_type	Mesh/CirculatorsT.hh	/^  typedef std::ptrdiff_t                    difference_type;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
difference_type	Mesh/IteratorsT.hh	/^        typedef std::ptrdiff_t                  difference_type;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
dim	Geometry/VectorT_inc.hh	/^  static inline int dim() { return DIM; }$/;"	f	class:CLASSNAME	access:public	signature:()
dim	IO/OMFormat.hh	/^  Chunk::Dim dim( VecType )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( VecType )
dim	IO/OMFormat.hh	/^  Chunk::Dim dim( const Chunk::Header& _hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( const Chunk::Header& _hdr )
dim_	IO/OMFormat.hh	/^      unsigned dim_     : SIZE_DIM;    \/\/ 0 1D, 1 2D, 2 3D, .., 7 8D$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
dimensions	IO/OMFormat.hh	/^  inline size_t dimensions(const Chunk::Header& _chdr) { return _chdr.dim_+1; }$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const Chunk::Header& _chdr)
dimensions	IO/reader/OMReader.cc	/^      assert( OMFormat::dimensions(chunk_header_) == 3);$/;"	p	file:	signature:(chunk_header_)
disable	System/mostream.hh	/^  void disable() { enabled_ = false; }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
disable	System/mostream.hh	/^  void disable() { streambuffer_.disable(); }$/;"	f	class:OpenMesh::mostream	access:public	signature:()
disable	System/mostream.hh	/^  void disable() { streambuffer_.disable(); }$/;"	p	signature:()
disable	System/omstream.cc	/^    mystream.disable();$/;"	p	file:	signature:()
disable_skipping	Mesh/IteratorsT.hh	/^        void disable_skipping() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
disable_skipping	Mesh/gen/iterators_template.hh	/^  void disable_skipping() { skip_bits_ = 0; }$/;"	f	class:IteratorT	access:public	signature:()
disconnect	System/mostream.hh	/^  template <class T> bool disconnect(T& _target) $/;"	f	class:OpenMesh::mostream	access:public	signature:(T& _target)
disconnect	System/mostream.hh	/^  template <class T> bool disconnect(T& _target) $/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:(T& _target)
dot	Geometry/VectorT.hh	/^dot(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2) {$/;"	f	namespace:OpenMesh	signature:(const VectorT<Scalar,N>& _v1, const VectorT<Scalar,N>& _v2)
dot	IO/reader/OBJReader.cc	/^    std::string::size_type dot = _filename.find_last_of("\\\\\/");$/;"	l
dot	IO/reader/OBJReader.cc	/^    std::string::size_type dot = _filename.rfind("\/");$/;"	l
dot	IO/writer/OBJWriter.cc	/^    std::string::size_type dot = _filename.find_last_of("\\\\\/");$/;"	l
dot	IO/writer/OBJWriter.cc	/^    std::string::size_type dot = _filename.rfind("\/");$/;"	l
dotp	Geometry/NormalConeT.cc	/^  Scalar dotp = (center_normal_ | _cone.center_normal_);$/;"	l
dotp	Geometry/NormalConeT.cc	/^  Scalar dotp = (center_normal_ | _norm);$/;"	l
dst	Utils/color_cast.hh	/^    dst_t dst;$/;"	l
dst	Utils/vector_cast.hh	/^    dst_t dst;$/;"	l
dummy	IO/reader/OFFReader.cc	/^  _in >> dummy;$/;"	l
dummy	IO/reader/OFFReader.cc	/^  unsigned int            nV, nF, dummy;$/;"	l
dummy	IO/reader/STLReader.cc	/^  char                       dummy[100];$/;"	l
dummy	IO/reader/STLReader.cc	/^  char dummy[100];$/;"	l
dummy	Utils/PropertyManager.hh	/^            PROPTYPE dummy;$/;"	l
dummy_prop	Utils/PropertyManager.hh	/^            PROPTYPE dummy_prop;$/;"	l
e	Geometry/QuadricT.hh	/^  Scalar e() const { return e_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
e0	Mesh/TriConnectivity.cc	/^    HalfedgeHandle e0 = new_edge(_vh, v1);$/;"	l
e1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle e1 = new_edge(_vh, v2);$/;"	l
e2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle e2 = new_edge(_vh, v3);$/;"	l
e_	Geometry/QuadricT.hh	/^             e_, f_, g_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
edge	Mesh/ArrayKernel.hh	/^  Edge& edge(EdgeHandle _eh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh)
edge	Mesh/ArrayKernel.hh	/^  const Edge& edge(EdgeHandle _eh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh) const
edgeData_	Mesh/PolyConnectivity.hh	/^       std::vector<AddFaceEdgeInfo> edgeData_; \/\/$/;"	m	class:OpenMesh::PolyConnectivity	access:private
edge_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          edge_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
edge_colors	Mesh/AttribKernelT.hh	/^  const Color* edge_colors() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
edge_colors_	Mesh/AttribKernelT.hh	/^  EdgeColorsPropertyHandle                  edge_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
edge_colors_pph	Mesh/AttribKernelT.hh	/^  EdgeColorsPropertyHandle                  edge_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
edge_handle	Mesh/ArrayKernel.hh	/^  EdgeHandle edge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
edge_handle	Mesh/ArrayKernel.hh	/^  EdgeHandle edge_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
edge_handle	Mesh/PolyConnectivity.cc	/^        deleted_edges.push_back(edge_handle(hh));$/;"	p	file:	signature:(hh)
edge_has_color	IO/Options.hh	/^  bool edge_has_color()      const { return check(EdgeColor); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
edge_status_	Mesh/ArrayKernel.hh	/^  EdgeStatusPropertyHandle                  edge_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
edge_status_pph	Mesh/ArrayKernel.hh	/^  inline EdgeStatusPropertyHandle           edge_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
edge_vec	Mesh/PolyMeshT.hh	/^    Normal edge_vec;$/;"	l
edges	Mesh/PolyConnectivity.hh	/^  ConstEdgeRange edges() const { return ConstEdgeRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
edges_	Mesh/ArrayKernel.hh	/^  EdgeContainer                             edges_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
edges_begin	Mesh/ArrayKernel.hh	/^  KernelConstEdgeIter   edges_begin() const     { return edges_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
edges_begin	Mesh/ArrayKernel.hh	/^  KernelEdgeIter        edges_begin()           { return edges_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
edges_begin	Mesh/PolyConnectivity.hh	/^  ConstEdgeIter edges_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
edges_begin	Mesh/PolyConnectivity.hh	/^  EdgeIter edges_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
edges_empty	Mesh/ArrayKernel.hh	/^  bool edges_empty()     const { return edges_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
edges_end	Mesh/ArrayKernel.hh	/^  KernelConstEdgeIter   edges_end() const       { return edges_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
edges_end	Mesh/ArrayKernel.hh	/^  KernelEdgeIter        edges_end()             { return edges_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
edges_end	Mesh/PolyConnectivity.hh	/^  ConstEdgeIter edges_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
edges_end	Mesh/PolyConnectivity.hh	/^  EdgeIter edges_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
edges_sbegin	Mesh/PolyConnectivity.hh	/^  ConstEdgeIter edges_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
edges_sbegin	Mesh/PolyConnectivity.hh	/^  EdgeIter edges_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
eh	Mesh/ArrayKernel.hh	/^    unsigned int eh = ( (char*)&_he - (char*)&edges_.front() ) \/  sizeof(Edge)  ;$/;"	l
eh	Mesh/PolyMeshT.cc	/^  EdgeHandle eh = Kernel::edge_handle(_heh);$/;"	l
eh0	Mesh/PolyConnectivity.cc	/^  EdgeHandle eh0 = edge_handle( next_halfedge_handle( halfedge_handle(_eh, 1) ) );$/;"	l
elementName	IO/reader/PLYReader.cc	/^            _is >> elementName;$/;"	l
elementName	IO/reader/PLYReader.cc	/^    std::string elementName = "";$/;"	l
element_size	IO/writer/OMWriter.cc	/^  OMFormat::Chunk::esize_t element_size   = _bp.element_size();$/;"	l
element_size	Utils/BaseProperty.hh	/^  virtual size_t       element_size() const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:() const
element_size	Utils/Property.hh	/^  virtual size_t       element_size() const { return IO::size_of<T>(); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
element_size	Utils/Property.hh	/^  virtual size_t       element_size() const { return UnknownSize;    }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
empty	Mesh/ArrayKernel.hh	/^    inline bool                             empty() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
empty_fh	Mesh/ArrayKernel.cc	/^  std::vector<FaceHandle*> empty_fh;$/;"	l
empty_hh	Mesh/ArrayKernel.cc	/^  std::vector<HalfedgeHandle*> empty_hh;$/;"	l
empty_vh	Mesh/ArrayKernel.cc	/^  std::vector<VertexHandle*> empty_vh;$/;"	l
enable	IO/writer/OMWriter.cc	/^  ~Enabler() { obj_.enable(); }$/;"	p	file:	signature:()
enable	System/mostream.hh	/^  void enable() { enabled_ = true; }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
enable	System/mostream.hh	/^  void enable() { streambuffer_.enable(); }$/;"	f	class:OpenMesh::mostream	access:public	signature:()
enable	System/mostream.hh	/^  void enable() { streambuffer_.enable(); }$/;"	p	signature:()
enable_skipping	Mesh/IteratorsT.hh	/^        void enable_skipping() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
enable_skipping	Mesh/gen/iterators_template.hh	/^  void enable_skipping()$/;"	f	class:IteratorT	access:public	signature:()
enabled_	System/mostream.hh	/^  bool         enabled_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
end	IO/importer/ImporterT.hh	/^      VHandles::const_iterator it, it2, end(_indices.end());$/;"	p	signature:(_indices.end())
end	IO/reader/BaseReader.hh	/^  _string.erase(std::find_if(_string.rbegin(), _string.rend(), std::not1(std::ptr_fun<int, int>(std::isspace))).base(), _string.end());$/;"	p	signature:()
end	IO/reader/OBJReader.cc	/^  size_t end   = _string.find_last_not_of(" \\t\\r\\n");$/;"	l
end	IO/reader/STLReader.cc	/^  size_t end   = _string.find_last_not_of(" \\t\\r\\n");$/;"	l
end	Mesh/ArrayKernel.hh	/^    inline const_iterator                   end() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
end	Mesh/ArrayKernel.hh	/^    inline iterator                         end()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
end	Mesh/PolyConnectivity.hh	/^          ITER_TYPE end() { return (container_.*end_fn)(); }$/;"	f	class:OpenMesh::PolyConnectivity::EntityRange	access:public	signature:()
end_heh	IO/importer/ImporterT.hh	/^    HalfedgeHandle end_heh   = mesh_.prev_halfedge_handle(cur_heh);$/;"	l
endian_test	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	l
endl	IO/OMFormat.cc	/^	  << as_string(Chunk::Dim(_c.dim_)) << std::endl;$/;"	m	class:OpenMesh::IO::OMFormat::std	file:
endl	IO/OMFormat.cc	/^	<< as_string(Chunk::Entity(_c.entity_)) << std::endl;$/;"	m	class:OpenMesh::IO::OMFormat::std	file:
endl	IO/SR_rbo.hh	/^  omerr() << "Not defined for type " << typeid(T).name() << std::endl;$/;"	m	class:OpenMesh::IO::std
endl	IO/reader/OBJReader.cc	/^                    omerr() << "Error setting Texture coordinates" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OBJReader.cc	/^                  omerr() << "Error setting Texture coordinates" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OBJReader.cc	/^              << "allowed!" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OBJReader.cc	/^          << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OBJReader.cc	/^      omlog() << "Load material file " << matFile << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OFFReader.cc	/^	  << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OFFReader.cc	/^       << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OMReader.cc	/^    omerr() << "[OMReader] : cannot not open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/OMReader.cc	/^    omerr() << "[OMReader] : cannot read from stream " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^                        omerr() << "Unsupported Entry type for face list: " << listEntryType << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^                        omerr() << "Unsupported Index type for face list: " << listIndexType << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^                        std::cerr << "Unsupported property : " << propertyName << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^                    omerr() << "List type not supported for vertices!" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^                    omerr() << "Properties not supported for faces " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^                omerr() << "PLY header unsupported element type: " << elementName << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^            omerr() << "Error while reading PLY file header" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^            omlog() << "PLY header comment : " << line << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^            omlog() << "Unsupported keyword : " << keyword << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^            std::cerr << "unsupported conversion type to int: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^            std::cerr << "unsupported conversion type to unsigned int: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^        omerr() << "Defect PLY header detected" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^        omerr() << "Unsupported PLY format: " << fileType << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^        omerr() << "[PLYReader] : Only vertex dimension 3 is supported." << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^        omerr() << "[PLYReader] : cannot not open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^        omerr() << "[PLYReader] : cannot not use stream" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^        std::cerr << "unsupported conversion type to double: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/PLYReader.cc	/^        std::cerr << "unsupported conversion type to float: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/reader/STLReader.cc	/^	  << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^	  << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^        _out << "usemtl mat" << material << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "Ka 0.5000 0.5000 0.5000" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "Kd " << materialA_[i][0] << materialA_[i][1] << materialA_[i][2] << std::endl;;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "Kd " << material_[i][0] << material_[i][1] << material_[i][2] << std::endl;;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "Tr " << materialA_[i][3] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "illum 1" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "newmtl " << "mat" << i << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "vn " << n[0] <<" "<< n[1] <<" "<< n[2] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      _out << "vt " << t[0] <<" "<< t[1] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^      omerr() << "[OBJWriter] : cannot write material file " << matFile << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^    _out << "mtllib " << objName_ << ".mat" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^    _out << "v " << v[0] <<" "<< v[1] <<" "<< v[2] << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^    _out << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OBJWriter.cc	/^  _out << _be.n_faces() << " faces" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OFFWriter.cc	/^	  << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OMWriter.cc	/^	<< _bp.name() << "]" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OMWriter.cc	/^    omerr() << "[OMWriter] : cannot open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OMWriter.cc	/^    omlog() << "  b       = " << b << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OMWriter.cc	/^  omlog() << "  n_bytes = " << _bp.size_of() << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/OMWriter.cc	/^ std::clog << "#bytes written: " << bytes << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^        _out << "property float alpha" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^        _out << "property uchar alpha" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^      _out << "property float blue" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^      _out << "property float green" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^      _out << "property float red" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^      _out << "property uchar blue" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^      _out << "property uchar green" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^      _out << "property uchar red" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^      std::cerr << "unsupported conversion type to float: " << _type << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    _out << "1.0" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    _out << "format ascii 1.0" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    _out << "property float nx" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    _out << "property float ny" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    _out << "property float nz" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    _out << "property float u" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    _out << "property float v" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    omerr() << "[PLYWriter] : Warning: Face colors are not supported and thus not exported! " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^    omerr() << "[PLYWriter] : Warning: Face normals are not supported and thus not exported! " << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "element face " << _be.n_faces() << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "element vertex " << _be.n_vertices() << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "end_header" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "ply" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "property float x" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "property float y" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "property float z" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/PLYWriter.cc	/^  _out << "property list uchar int vertex_indices" << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	IO/writer/STLWriter.cc	/^    omerr() << "[STLWriter] : cannot open file " << _filename << std::endl;$/;"	m	class:OpenMesh::IO::std	file:
endl	Mesh/ArrayKernelT.cc	/^      omerr() << "garbage_collection: No edge status available. You can request it: mesh.request_edge_status() or define OM_GARBAGE_NO_STATUS_WARNING to silence this warning." << std::endl;$/;"	m	class:OpenMesh::std	file:
endl	Mesh/ArrayKernelT.cc	/^      omerr() << "garbage_collection: No face status available. You can request it: mesh.request_face_status() or define OM_GARBAGE_NO_STATUS_WARNING to silence this warning." << std::endl;$/;"	m	class:OpenMesh::std	file:
endl	Mesh/ArrayKernelT.cc	/^      omerr() << "garbage_collection: No vertex status available. You can request it: mesh.request_vertex_status() or define OM_GARBAGE_NO_STATUS_WARNING to silence this warning." << std::endl;$/;"	m	class:OpenMesh::std	file:
endl	Utils/Property.hh	/^    std::cout << std::endl;$/;"	m	class:OpenMesh::PropertyT::std
entity_	IO/OMFormat.hh	/^      unsigned entity_  : SIZE_ENTITY; \/\/ 0 vertex, 1 mesh, 2 edge,$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORALPHA, valueType);$/;"	p	file:	signature:(COLORALPHA, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORBLUE, valueType);$/;"	p	file:	signature:(COLORBLUE, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORGREEN, valueType);$/;"	p	file:	signature:(COLORGREEN, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(COLORRED, valueType);$/;"	p	file:	signature:(COLORRED, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(TEXX, valueType);$/;"	p	file:	signature:(TEXX, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(TEXY, valueType);$/;"	p	file:	signature:(TEXY, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(UNSUPPORTED, valueType);$/;"	p	file:	signature:(UNSUPPORTED, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(XCOORD, valueType);$/;"	p	file:	signature:(XCOORD, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(XNORM, valueType);$/;"	p	file:	signature:(XNORM, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(YCOORD, valueType);$/;"	p	file:	signature:(YCOORD, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(YNORM, valueType);$/;"	p	file:	signature:(YNORM, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(ZCOORD, valueType);$/;"	p	file:	signature:(ZCOORD, valueType)
entry	IO/reader/PLYReader.cc	/^                        std::pair<VertexProperty, ValueType> entry(ZNORM, valueType);$/;"	p	file:	signature:(ZNORM, valueType)
entry	IO/reader/PLYReader.cc	/^                      std::pair<VertexProperty, ValueType> entry(COLORBLUE, valueType);$/;"	p	file:	signature:(COLORBLUE, valueType)
entry	IO/reader/PLYReader.cc	/^                      std::pair<VertexProperty, ValueType> entry(COLORGREEN, valueType);$/;"	p	file:	signature:(COLORGREEN, valueType)
entry	IO/reader/PLYReader.cc	/^                      std::pair<VertexProperty, ValueType> entry(COLORRED, valueType);$/;"	p	file:	signature:(COLORRED, valueType)
enum_type	IO/Options.hh	/^  typedef int       enum_type;$/;"	t	class:OpenMesh::IO::Options	access:public
eof	System/mostream.hh	/^    static int_type eof() { return -1; }$/;"	f	struct:OpenMesh::multiplex_streambuf::traits_type	access:public	signature:()
eprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::eprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
eprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::eprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
eprop_stats	Mesh/BaseKernel.hh	/^  void eprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
eprop_stats	Mesh/BaseKernel.hh	/^  void eprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
eprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  eprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
eprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator eprops_begin() const { return eprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
eprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator eprops_begin() { return eprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
eprops_clear	Mesh/BaseKernel.hh	/^  void eprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
eprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator eprops_end()   const { return eprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
eprops_end	Mesh/BaseKernel.hh	/^  prop_iterator eprops_end()   { return eprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
eprops_reserve	Mesh/BaseKernel.hh	/^  void eprops_reserve(unsigned int _n) const { eprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
eprops_resize	Mesh/BaseKernel.hh	/^  void eprops_resize(unsigned int _n) const { eprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
eprops_swap	Mesh/BaseKernel.hh	/^  void eprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
eps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& eps = eprops_.properties();$/;"	l
eps_	IO/reader/STLReader.cc	/^  float eps_;$/;"	m	class:OpenMesh::IO::CmpVec	file:	access:private
eps_	IO/reader/STLReader.hh	/^  float eps_;$/;"	m	class:OpenMesh::IO::_STLReader_	access:private
eps__	Geometry/MathDefs.hh	/^inline double eps__(double)$/;"	f	namespace:OpenMesh	signature:(double)
eps__	Geometry/MathDefs.hh	/^inline float eps__(float) $/;"	f	namespace:OpenMesh	signature:(float)
epsilon	IO/reader/STLReader.hh	/^  float epsilon() const { return eps_; }$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:() const
erase	IO/reader/BaseReader.hh	/^  _string.erase(_string.begin(), std::find_if(_string.begin(), _string.end(), std::not1(std::ptr_fun<int, int>(std::isspace))));$/;"	p	signature:(_string.begin(), std::find_if(_string.begin(), _string.end(), std::not1(std::ptr_fun<int, int>(std::isspace))))
erase	Mesh/ArrayKernel.hh	/^    inline void                             erase(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(Handle _hnd)
erase	Mesh/ArrayKernel.hh	/^    inline void                             erase(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(Handle _hnd)
erase	Mesh/ArrayKernel.hh	/^    inline void                             erase(iterator _it)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(iterator _it)
erase	System/mostream.hh	/^      target_map_.erase(t_it);$/;"	p	signature:(t_it)
esize_t	IO/OMFormat.hh	/^    typedef uint32 esize_t; \/\/ element size, used for custom properties$/;"	t	struct:OpenMesh::IO::OMFormat::Chunk	access:public
evaluate	Geometry/QuadricT.hh	/^  Scalar evaluate(const _Vec3& _v, GenProg::Int2Type<3>\/*_dimension*\/) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:protected	signature:(const _Vec3& _v, GenProg::Int2Type<3> ) const
evaluate	Geometry/QuadricT.hh	/^  Scalar evaluate(const _Vec4& _v, GenProg::Int2Type<4>\/*_dimension*\/) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:protected	signature:(const _Vec4& _v, GenProg::Int2Type<4> ) const
evt	IO/reader/OMReader.cc	/^  std::vector<char> evt;$/;"	l
exporter	IO/MeshIO.hh	/^  ExporterT<Mesh> exporter(_mesh);$/;"	p	signature:(_mesh)
expr	Geometry/VectorT_inc.hh	162;"	d
expr	Geometry/VectorT_inc.hh	164;"	d
expr	Geometry/VectorT_inc.hh	212;"	d
expr	Geometry/VectorT_inc.hh	214;"	d
expr	Geometry/VectorT_inc.hh	230;"	d
expr	Geometry/VectorT_inc.hh	232;"	d
expr	Geometry/VectorT_inc.hh	239;"	d
expr	Geometry/VectorT_inc.hh	241;"	d
expr	Geometry/VectorT_inc.hh	278;"	d
expr	Geometry/VectorT_inc.hh	280;"	d
expr	Geometry/VectorT_inc.hh	286;"	d
expr	Geometry/VectorT_inc.hh	288;"	d
expr	Geometry/VectorT_inc.hh	294;"	d
expr	Geometry/VectorT_inc.hh	296;"	d
expr	Geometry/VectorT_inc.hh	302;"	d
expr	Geometry/VectorT_inc.hh	304;"	d
expr	Geometry/VectorT_inc.hh	360;"	d
expr	Geometry/VectorT_inc.hh	362;"	d
expr	Geometry/VectorT_inc.hh	386;"	d
expr	Geometry/VectorT_inc.hh	388;"	d
expr	Geometry/VectorT_inc.hh	409;"	d
expr	Geometry/VectorT_inc.hh	411;"	d
expr	Geometry/VectorT_inc.hh	461;"	d
expr	Geometry/VectorT_inc.hh	463;"	d
expr	Geometry/VectorT_inc.hh	539;"	d
expr	Geometry/VectorT_inc.hh	541;"	d
expr	Geometry/VectorT_inc.hh	548;"	d
expr	Geometry/VectorT_inc.hh	550;"	d
expr	Geometry/VectorT_inc.hh	556;"	d
expr	Geometry/VectorT_inc.hh	558;"	d
expr	Geometry/VectorT_inc.hh	565;"	d
expr	Geometry/VectorT_inc.hh	567;"	d
expr	Geometry/VectorT_inc.hh	589;"	d
expr	Geometry/VectorT_inc.hh	591;"	d
expr	Geometry/VectorT_inc.hh	597;"	d
expr	Geometry/VectorT_inc.hh	599;"	d
expr	Geometry/VectorT_inc.hh	612;"	d
expr	Geometry/VectorT_inc.hh	615;"	d
expr	Geometry/VectorT_inc.hh	627;"	d
expr	Geometry/VectorT_inc.hh	629;"	d
ext	IO/IOManager.cc	/^  string ext;$/;"	l
ext	IO/reader/BaseReader.cc	/^    std::string ext;$/;"	l
extension	IO/reader/BaseReader.cc	/^  std::string extension;$/;"	l
extension	IO/writer/BaseWriter.cc	/^  std::string extension;$/;"	l
f	Geometry/QuadricT.hh	/^  Scalar f() const { return f_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
f	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	m	union:OpenMesh::IO::u3	file:	access:public
f	Utils/color_cast.hh	/^    const float f = 1.0f \/ 255.0f;$/;"	l
f0	Mesh/TriConnectivity.cc	/^  FaceHandle      f0 = face_handle(h0);$/;"	l
f0	Mesh/TriConnectivity.cc	/^  FaceHandle     f0 = face_handle(h0);$/;"	l
f1	IO/reader/OBJReader.cc	/^      stream >> f1; stream >> f2; stream >> f3;$/;"	l
f1	IO/reader/OBJReader.cc	/^      stream >> f1;$/;"	l
f1	IO/reader/OBJReader.cc	/^  float       f1,f2,f3;$/;"	l
f1	Mesh/TriConnectivity.cc	/^    FaceHandle f1 = new_face();$/;"	l
f1	Mesh/TriConnectivity.cc	/^  FaceHandle      f1 = new_face();$/;"	l
f2	IO/reader/OBJReader.cc	/^      stream >> f1; stream >> f2; stream >> f3;$/;"	l
f2	IO/reader/OBJReader.cc	/^  float       f1,f2,f3;$/;"	l
f2	Mesh/TriConnectivity.cc	/^    FaceHandle f2 = new_face();$/;"	l
f3	IO/reader/OBJReader.cc	/^      stream >> f1; stream >> f2; stream >> f3;$/;"	l
f3	IO/reader/OBJReader.cc	/^  float       f1,f2,f3;$/;"	l
f3	Mesh/TriConnectivity.cc	/^  FaceHandle     f3 = face_handle(o0);$/;"	l
f_	Geometry/QuadricT.hh	/^             e_, f_, g_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
fa	Mesh/TriConnectivity.cc	/^  FaceHandle     fa  = face_handle(a0);$/;"	l
face	Mesh/ArrayKernel.hh	/^  Face& face(FaceHandle _fh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh)
face	Mesh/ArrayKernel.hh	/^  const Face& face(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
faceCount	Mesh/ArrayKernelT.cc	/^  const int faceCount     = faces_.size();$/;"	l
faceCount_	IO/reader/PLYReader.cc	/^                _is >> faceCount_;$/;"	l
faceCount_	IO/reader/PLYReader.hh	/^  mutable unsigned int faceCount_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
faceEntryType_	IO/reader/PLYReader.hh	/^  mutable ValueType faceEntryType_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
faceIndexType_	IO/reader/PLYReader.hh	/^  mutable ValueType faceIndexType_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
faceLine	IO/reader/OBJReader.cc	/^      std::string faceLine;$/;"	l
faceVertices	IO/reader/OBJReader.cc	/^      BaseImporter::VHandles faceVertices;$/;"	l
face_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          face_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
face_colors_	Mesh/AttribKernelT.hh	/^  FaceColorsPropertyHandle                  face_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
face_colors_pph	Mesh/AttribKernelT.hh	/^  FaceColorsPropertyHandle                  face_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
face_handle	Mesh/ArrayKernel.hh	/^  FaceHandle face_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
face_handle	Mesh/ArrayKernel.hh	/^  FaceHandle face_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
face_handle	Mesh/PolyConnectivity.cc	/^    set_face_handle(opposite_halfedge_handle(new_e), face_handle(h1));$/;"	p	file:	signature:(h1)
face_handle	Mesh/PolyConnectivity.cc	/^  FaceHandle fh0(face_handle(halfedge_handle(_eh, 0)));$/;"	p	file:	signature:(halfedge_handle(
face_handle	Mesh/PolyConnectivity.cc	/^  FaceHandle fh1(face_handle(halfedge_handle(_eh, 1)));$/;"	p	file:	signature:(halfedge_handle(
face_handle	Mesh/PolyMeshT.cc	/^          fhs.push_back(Kernel::face_handle(heh));$/;"	p	file:	signature:(heh)
face_handle	Mesh/PolyMeshT.cc	/^      fhs.push_back(Kernel::face_handle(heh));$/;"	p	file:	signature:(heh)
face_handle	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v0v1), v0v1);$/;"	p	file:	signature:(v0v1)
face_handle	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v1v0), v1v0);$/;"	p	file:	signature:(v1v0)
face_handle_	Mesh/ArrayItems.hh	/^    FaceHandle      face_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_without_prev	access:private
face_handles	Mesh/PolyConnectivity.cc	/^  std::vector<FaceHandle> face_handles;$/;"	l
face_has_color	IO/Options.hh	/^  bool face_has_color()      const { return check(FaceColor); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
face_has_normal	IO/Options.hh	/^  bool face_has_normal()     const { return check(FaceNormal); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
face_has_texcoord	IO/Options.hh	/^  bool face_has_texcoord()   const { return check(FaceTexCoord); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
face_inverse_map	Mesh/ArrayKernelT.cc	/^  std::map <int, int> face_inverse_map;$/;"	l
face_normals_	Mesh/AttribKernelT.hh	/^  FaceNormalsPropertyHandle                 face_normals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
face_normals_pph	Mesh/AttribKernelT.hh	/^  FaceNormalsPropertyHandle                 face_normals_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
face_status_	Mesh/ArrayKernel.hh	/^  FaceStatusPropertyHandle                  face_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
face_status_pph	Mesh/ArrayKernel.hh	/^  inline FaceStatusPropertyHandle           face_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
face_texcoords	IO/reader/OBJReader.cc	/^  std::vector<Vec2f>        face_texcoords;$/;"	l
face_texture_index_	Mesh/AttribKernelT.hh	/^  FaceTextureIndexPropertyHandle            face_texture_index_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
face_texture_index_pph	Mesh/AttribKernelT.hh	/^  FaceTextureIndexPropertyHandle            face_texture_index_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
faces	Mesh/PolyConnectivity.hh	/^  ConstFaceRange faces() const { return ConstFaceRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
faces_	Mesh/ArrayKernel.hh	/^  FaceContainer                             faces_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
faces_begin	Mesh/ArrayKernel.hh	/^  KernelConstFaceIter   faces_begin() const     { return faces_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
faces_begin	Mesh/ArrayKernel.hh	/^  KernelFaceIter        faces_begin()           { return faces_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
faces_begin	Mesh/PolyConnectivity.hh	/^  ConstFaceIter faces_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
faces_begin	Mesh/PolyConnectivity.hh	/^  FaceIter faces_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
faces_empty	Mesh/ArrayKernel.hh	/^  bool faces_empty()     const { return faces_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
faces_end	Mesh/ArrayKernel.hh	/^  KernelConstFaceIter   faces_end() const       { return faces_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
faces_end	Mesh/ArrayKernel.hh	/^  KernelFaceIter        faces_end()             { return faces_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
faces_end	Mesh/ArrayKernelT.cc	/^    KernelFaceIter  f_it(faces_begin()), f_end(faces_end());$/;"	p	file:	signature:()
faces_end	Mesh/PolyConnectivity.cc	/^  FaceIter f_it(faces_begin()), f_end(faces_end());$/;"	p	file:	signature:()
faces_end	Mesh/PolyConnectivity.hh	/^  ConstFaceIter faces_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
faces_end	Mesh/PolyConnectivity.hh	/^  FaceIter faces_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
faces_end	Mesh/PolyMeshT.cc	/^  FaceIter f_it(Kernel::faces_begin()), f_end(Kernel::faces_end());$/;"	p	file:	signature:()
faces_sbegin	Mesh/PolyConnectivity.hh	/^  ConstFaceIter faces_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
faces_sbegin	Mesh/PolyConnectivity.hh	/^  FaceIter faces_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
failed_faces_	IO/importer/ImporterT.hh	/^  std::vector<VHandles>  failed_faces_;$/;"	m	class:OpenMesh::IO::ImporterT	access:private
fb	Mesh/TriConnectivity.cc	/^  FaceHandle     fb  = face_handle(b0);$/;"	l
fc	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	l
fc	IO/reader/OBJReader.cc	/^          Vec3uc fc = color_cast<Vec3uc, Vec3f>(mat.Kd());$/;"	l
fe_begin	Mesh/PolyConnectivity.hh	/^  FaceEdgeIter fe_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fe_end	Mesh/PolyConnectivity.hh	/^  FaceEdgeIter fe_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fe_it	IO/importer/ImporterT.hh	/^            typename Mesh::FaceEdgeIter fe_it = mesh_.fe_iter(fh);$/;"	l
fe_iter	Mesh/PolyConnectivity.hh	/^  FaceEdgeIter fe_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
feature	Mesh/Status.hh	/^  bool feature() const  { return is_bit_set(FEATURE); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
ff_begin	Mesh/PolyConnectivity.hh	/^  FaceFaceIter ff_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
ff_end	Mesh/PolyConnectivity.hh	/^  FaceFaceIter ff_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
ff_iter	Mesh/PolyConnectivity.hh	/^  FaceFaceIter ff_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fh	IO/importer/ImporterT.hh	/^        FaceHandle fh = mesh_.add_face(vhandles);$/;"	l
fh	IO/importer/ImporterT.hh	/^    FaceHandle fh;$/;"	l
fh	IO/reader/OBJReader.cc	/^      FaceHandle fh;$/;"	l
fh	IO/reader/OFFReader.cc	/^    FaceHandle fh = _bi.add_face(vhandles);$/;"	l
fh	IO/reader/PLYReader.cc	/^        FaceHandle fh = _bi.add_face(vhandles);$/;"	l
fh	IO/reader/STLReader.cc	/^        FaceHandle fh = _bi.add_face(vhandles);$/;"	l
fh	IO/writer/STLWriter.cc	/^  FaceHandle fh;$/;"	l
fh	Mesh/ArrayKernelT.cc	/^    FaceHandle      fh;$/;"	l
fh	Mesh/PolyConnectivity.cc	/^  FaceHandle      fh = face_handle(h);$/;"	l
fh	Mesh/PolyConnectivity.cc	/^  FaceHandle      fh = face_handle(h0);$/;"	l
fh	Mesh/PolyMeshT.hh	/^      FaceHandle fh(this->face_handle(this->opposite_halfedge_handle(_in_heh)));$/;"	p	signature:(this->face_handle(this->opposite_halfedge_handle(_in_heh)))
fh	Mesh/TriConnectivity.cc	/^    FaceHandle fh;$/;"	l
fh0	Mesh/PolyConnectivity.cc	/^  FaceHandle fh0 = face_handle(heh0);\/\/fh0 or fh1 might be a invalid,$/;"	l
fh1	Mesh/PolyConnectivity.cc	/^  FaceHandle fh1 = face_handle(heh1);\/\/i.e., representing the boundary$/;"	l
fh1	Mesh/PolyMeshT.cc	/^  FaceHandle fh1 = Kernel::face_handle(Kernel::opposite_halfedge_handle(_heh));$/;"	l
fh_begin	Mesh/PolyConnectivity.hh	/^  FaceHalfedgeIter fh_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fh_end	Mesh/PolyConnectivity.cc	/^                                    fh_end(face_handles.end());$/;"	p	file:	signature:(face_handles.end())
fh_end	Mesh/PolyConnectivity.hh	/^  FaceHalfedgeIter fh_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fh_it	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_FHandlePointer::iterator fh_it(fh_to_update.begin()), fh_it_end(fh_to_update.end());$/;"	p	file:	signature:(fh_to_update.begin())
fh_it	Mesh/PolyConnectivity.cc	/^  std::vector<FaceHandle>::iterator fh_it(face_handles.begin()),$/;"	p	file:	signature:(face_handles.begin())
fh_it_end	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_FHandlePointer::iterator fh_it(fh_to_update.begin()), fh_it_end(fh_to_update.end());$/;"	p	file:	signature:(fh_to_update.end())
fh_iter	Mesh/PolyConnectivity.hh	/^  FaceHalfedgeIter fh_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fh_map	Mesh/ArrayKernelT.cc	/^  std::vector<FaceHandle>      fh_map;$/;"	l
fhs	Mesh/PolyMeshT.cc	/^    std::vector<FaceHandle> fhs; fhs.reserve(10);$/;"	l
fidx	IO/reader/OMReader.cc	/^  size_t fidx = 0;$/;"	l
fileOptions	IO/reader/OBJReader.cc	/^  Options fileOptions;$/;"	l
fileOptions_	IO/reader/OMReader.hh	/^  mutable Options      fileOptions_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
fileType	IO/reader/PLYReader.cc	/^    _is >> fileType;$/;"	l
fileType	IO/reader/PLYReader.cc	/^    std::string fileType;$/;"	l
file_type	IO/reader/STLReader.cc	/^  STL_Type file_type = NONE;$/;"	l
filename	IO/IOManager.cc	/^  std::string filename = "dummy." + _format;$/;"	l
filename	IO/IOManager.cc	/^  std::string filename = "dummy." + ext;$/;"	l
filters	IO/IOManager.cc	/^  std::string filters = "";$/;"	l
filters	IO/IOManager.cc	/^  std::string filters;$/;"	l
find	System/mostream.hh	/^    targets_.erase(std::find(targets_.begin(), targets_.end(), _target));$/;"	p	signature:(targets_.begin(), targets_.end(), _target)
find_feature_edges	Mesh/PolyMeshT.cc	/^uint PolyMeshT<Kernel>::find_feature_edges(Scalar _angle_tresh)$/;"	f	class:OpenMesh::PolyMeshT	signature:(Scalar _angle_tresh)
find_feature_edges	Mesh/PolyMeshT.hh	/^  unsigned int find_feature_edges(Scalar _angle_tresh = OpenMesh::deg_to_rad(44.0));$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(Scalar _angle_tresh = OpenMesh::deg_to_rad(44.0))
find_halfedge	Mesh/PolyConnectivity.cc	/^PolyConnectivity::find_halfedge(VertexHandle _start_vh, VertexHandle _end_vh ) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _start_vh, VertexHandle _end_vh ) const
find_halfedge	Mesh/PolyConnectivity.hh	/^  HalfedgeHandle find_halfedge(VertexHandle _start_vh, VertexHandle _end_vh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _start_vh, VertexHandle _end_vh) const
find_writer	IO/IOManager.cc	/^find_writer(const std::string& _format)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(const std::string& _format)
find_writer	IO/IOManager.hh	/^  const BaseWriter *find_writer(const std::string& _format);$/;"	p	class:OpenMesh::IO::_IOManager_	access:private	signature:(const std::string& _format)
finish	IO/IOManager.cc	/^      _bi.finish();$/;"	p	file:	signature:()
finish	IO/importer/BaseImporter.hh	/^  virtual void finish()  {}$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
finish	IO/importer/ImporterT.hh	/^  void finish()$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:()
fixed	IO/writer/OFFWriter.cc	/^    _out << std::fixed;$/;"	m	class:OpenMesh::IO::std	file:
fixed	IO/writer/PLYWriter.cc	/^    _out << std::fixed;$/;"	m	class:OpenMesh::IO::std	file:
fixed_nonmanifold	Mesh/Status.hh	/^  bool fixed_nonmanifold() const  { return is_bit_set(FIXEDNONMANIFOLD); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
flags_	IO/Options.hh	/^  value_type flags_;$/;"	m	class:OpenMesh::IO::Options	access:private
flip	Mesh/TriConnectivity.cc	/^void TriConnectivity::flip(EdgeHandle _eh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh)
flip	Mesh/TriConnectivity.hh	/^  void flip(EdgeHandle _eh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh)
float32	IO/OMFormat.hh	/^  typedef float32_t          float32;$/;"	t	namespace:OpenMesh::IO::OMFormat
float32_t	IO/SR_types.hh	/^typedef float          float32_t;$/;"	t	namespace:OpenMesh::IO
float64	IO/OMFormat.hh	/^  typedef float64_t          float64;$/;"	t	namespace:OpenMesh::IO::OMFormat
float64_t	IO/SR_types.hh	/^typedef double         float64_t;$/;"	t	namespace:OpenMesh::IO
float_	IO/OMFormat.hh	/^      unsigned float_   : SIZE_FLOAT;  \/\/ bool$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
float_size	IO/OMFormat.hh	/^  template <typename T> Chunk::Float_Size float_size(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
float_type	IO/OFFFormat.hh	/^   typedef float float_type;$/;"	t	struct:OpenMesh::IO::OFFFormat	access:public
flt_eps__	Geometry/MathDefs.hh	/^const float flt_eps__ = (float)1e-05;$/;"	m	namespace:OpenMesh
fn0	Mesh/PolyMeshT.cc	/^  Normal fn0 = Kernel::normal(fh0);$/;"	l
fn1	Mesh/PolyMeshT.cc	/^  Normal fn1 = Kernel::normal(fh1);$/;"	l
fnew	Mesh/PolyConnectivity.cc	/^    FaceHandle fnew = new_face();$/;"	l
fo	Mesh/PolyConnectivity.cc	/^  FaceHandle      fo = face_handle(o);$/;"	l
fo	Mesh/PolyConnectivity.cc	/^  FaceHandle      fo = face_handle(o0);$/;"	l
for_each	Utils/PropertyContainer.hh	/^	std::for_each(properties_.begin(), properties_.end(), ClearAll());$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), ClearAll())
for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Delete());$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Delete())
for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Reserve(_n));$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Reserve(_n))
for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Resize(_n));$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Resize(_n))
for_each	Utils/PropertyContainer.hh	/^    std::for_each(properties_.begin(), properties_.end(), Swap(_i0, _i1));$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Swap(_i0, _i1))
for_each	Utils/PropertyContainer.hh	/^  virtual ~PropertyContainer() { std::for_each(properties_.begin(), properties_.end(), Delete()); }$/;"	p	class:OpenMesh::PropertyContainer::std	signature:(properties_.begin(), properties_.end(), Delete())
found	IO/reader/OBJReader.cc	/^          size_t found=vertex.find("\/");$/;"	l
found	IO/reader/OFFReader.cc	/^    size_t found;$/;"	l
fprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::fprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
fprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::fprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
fprop_stats	Mesh/BaseKernel.hh	/^  void fprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
fprop_stats	Mesh/BaseKernel.hh	/^  void fprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
fprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  fprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
fprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator fprops_begin() const { return fprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
fprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator fprops_begin() { return fprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
fprops_clear	Mesh/BaseKernel.hh	/^  void fprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
fprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator fprops_end()   const { return fprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
fprops_end	Mesh/BaseKernel.hh	/^  prop_iterator fprops_end()   { return fprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
fprops_reserve	Mesh/BaseKernel.hh	/^  void fprops_reserve(unsigned int _n) const { fprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
fprops_resize	Mesh/BaseKernel.hh	/^  void fprops_resize(unsigned int _n) const { fprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
fprops_swap	Mesh/BaseKernel.hh	/^  void fprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
fps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& fps = fprops_.properties();$/;"	l
free_property	Utils/AutoPropertyHandleT.hh	/^  inline void                               free_property()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
from_vertex_handle	Mesh/ArrayKernel.hh	/^  VertexHandle from_vertex_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
front	Mesh/ArrayKernel.hh	/^    inline Handle&                          front()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
front	Mesh/ArrayKernel.hh	/^    inline const Handle&                    front() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
fv_begin	Mesh/PolyConnectivity.hh	/^  FaceVertexIter fv_begin(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fv_end	Mesh/PolyConnectivity.hh	/^  FaceVertexIter fv_end(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
fv_it	Mesh/PolyMeshT.cc	/^  ConstFaceVertexIter fv_it(this->cfv_iter(_fh));$/;"	p	file:	signature:(this->cfv_iter(_fh))
fv_it	Mesh/TriMeshT.cc	/^  ConstFaceVertexIter fv_it(this->cfv_iter(_fh));$/;"	p	file:	signature:(this->cfv_iter(_fh))
fv_iter	Mesh/PolyConnectivity.hh	/^  FaceVertexIter fv_iter(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
g	Geometry/QuadricT.hh	/^  Scalar g() const { return g_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
g	IO/reader/OBJReader.cc	/^        stream >> r; stream >> g; stream >> b;$/;"	l
g	IO/reader/OBJReader.cc	/^      stream >> r; stream >> g; stream >> b;$/;"	l
g	IO/reader/OBJReader.cc	/^  int                       r, g, b;$/;"	l
g_	Geometry/QuadricT.hh	/^             e_, f_, g_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
garbage	IO/reader/STLReader.cc	/^        std::string garbage;$/;"	l
garbage	IO/reader/STLReader.cc	/^        strstream >> garbage;$/;"	l
garbage	IO/reader/STLReader.cc	/^      std::string garbage;$/;"	l
garbage	IO/reader/STLReader.cc	/^      strstream >> garbage;$/;"	l
garbage_collection	Mesh/ArrayKernel.cc	/^void ArrayKernel::garbage_collection(bool _v, bool _e, bool _f)$/;"	f	class:OpenMesh::ArrayKernel	signature:(bool _v, bool _e, bool _f)
garbage_collection	Mesh/ArrayKernel.hh	/^  void garbage_collection(bool _v=true, bool _e=true, bool _f=true);$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(bool _v=true, bool _e=true, bool _f=true)
garbage_collection	Mesh/ArrayKernel.hh	/^  void garbage_collection(std_API_Container_VHandlePointer& vh_to_update,$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(std_API_Container_VHandlePointer& vh_to_update, std_API_Container_HHandlePointer& hh_to_update, std_API_Container_FHandlePointer& fh_to_update, bool _v=true, bool _e=true, bool _f=true)
garbage_collection	Mesh/ArrayKernelT.cc	/^void ArrayKernel::garbage_collection(std_API_Container_VHandlePointer& vh_to_update,$/;"	f	class:OpenMesh::ArrayKernel	signature:(std_API_Container_VHandlePointer& vh_to_update, std_API_Container_HHandlePointer& hh_to_update, std_API_Container_FHandlePointer& fh_to_update, bool _v, bool _e, bool _f)
generate_circulator	Mesh/gen/generate.sh	/^function generate_circulator$/;"	f
generate_iterator	Mesh/gen/generate.sh	/^function generate_iterator$/;"	f
getColorType	IO/reader/OFFReader.cc	/^int _OFFReader_::getColorType(std::string& _line, bool _texCoordsAvailable) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::string& _line, bool _texCoordsAvailable) const
getColorType	IO/reader/OFFReader.hh	/^  int getColorType(std::string & _line, bool _texCoordsAvailable) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::string & _line, bool _texCoordsAvailable) const
getMaterial	IO/writer/OBJWriter.cc	/^int _OBJWriter_::getMaterial(OpenMesh::Vec3f _color) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(OpenMesh::Vec3f _color) const
getMaterial	IO/writer/OBJWriter.cc	/^int _OBJWriter_::getMaterial(OpenMesh::Vec4f _color) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(OpenMesh::Vec4f _color) const
getMaterial	IO/writer/OBJWriter.hh	/^  int getMaterial(OpenMesh::Vec3f _color) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:private	signature:(OpenMesh::Vec3f _color) const
getMaterial	IO/writer/OBJWriter.hh	/^  int getMaterial(OpenMesh::Vec4f _color) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:private	signature:(OpenMesh::Vec4f _color) const
getRand	Utils/RandomNumberGenerator.cc	/^double RandomNumberGenerator::getRand() const {$/;"	f	class:OpenMesh::RandomNumberGenerator	signature:() const
getRand	Utils/RandomNumberGenerator.hh	/^  double getRand() const;$/;"	p	class:OpenMesh::RandomNumberGenerator	access:public	signature:() const
get_description	IO/reader/BaseReader.hh	/^  virtual std::string get_description() const = 0;$/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:() const
get_description	IO/reader/OBJReader.hh	/^  std::string get_description() const { return "Alias\/Wavefront"; }$/;"	f	class:OpenMesh::IO::_OBJReader_	access:public	signature:() const
get_description	IO/reader/OFFReader.hh	/^  std::string get_description() const { return "Object File Format"; }$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:() const
get_description	IO/reader/OMReader.hh	/^  std::string get_description() const { return "OpenMesh File Format"; }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:() const
get_description	IO/reader/PLYReader.hh	/^  std::string get_description() const { return "PLY polygon file format"; }$/;"	f	class:OpenMesh::IO::_PLYReader_	access:public	signature:() const
get_description	IO/reader/STLReader.hh	/^  std::string get_description() const$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:() const
get_description	IO/writer/BaseWriter.hh	/^  virtual std::string get_description() const = 0;$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:() const
get_description	IO/writer/OBJWriter.hh	/^  std::string get_description() const  { return "Alias\/Wavefront"; }$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:() const
get_description	IO/writer/OFFWriter.hh	/^  std::string get_description() const { return "no description"; }$/;"	f	class:OpenMesh::IO::_OFFWriter_	access:public	signature:() const
get_description	IO/writer/OMWriter.hh	/^  std::string get_description() const$/;"	f	class:OpenMesh::IO::_OMWriter_	access:public	signature:() const
get_description	IO/writer/PLYWriter.hh	/^  std::string get_description() const { return "PLY polygon file format"; }$/;"	f	class:OpenMesh::IO::_PLYWriter_	access:public	signature:() const
get_description	IO/writer/STLWriter.hh	/^  std::string get_description() const { return "Stereolithography Format"; }$/;"	f	class:OpenMesh::IO::_STLWriter_	access:public	signature:() const
get_extensions	IO/reader/BaseReader.hh	/^  virtual std::string get_extensions() const = 0;$/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:() const
get_extensions	IO/reader/OBJReader.hh	/^  std::string get_extensions()  const { return "obj"; }$/;"	f	class:OpenMesh::IO::_OBJReader_	access:public	signature:() const
get_extensions	IO/reader/OFFReader.hh	/^  std::string get_extensions()  const { return "off"; }$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:() const
get_extensions	IO/reader/OMReader.hh	/^  std::string get_extensions()  const { return "om"; }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:() const
get_extensions	IO/reader/PLYReader.hh	/^  std::string get_extensions()  const { return "ply"; }$/;"	f	class:OpenMesh::IO::_PLYReader_	access:public	signature:() const
get_extensions	IO/reader/STLReader.hh	/^  std::string get_extensions() const { return "stl stla stlb"; }$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:() const
get_extensions	IO/writer/BaseWriter.hh	/^  virtual std::string get_extensions() const = 0;$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:() const
get_extensions	IO/writer/OBJWriter.hh	/^  std::string get_extensions()  const  { return "obj"; }$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:() const
get_extensions	IO/writer/OFFWriter.hh	/^  std::string get_extensions() const  { return "off"; }$/;"	f	class:OpenMesh::IO::_OFFWriter_	access:public	signature:() const
get_extensions	IO/writer/OMWriter.hh	/^  std::string get_extensions() const$/;"	f	class:OpenMesh::IO::_OMWriter_	access:public	signature:() const
get_extensions	IO/writer/PLYWriter.hh	/^  std::string get_extensions() const  { return "ply"; }$/;"	f	class:OpenMesh::IO::_PLYWriter_	access:public	signature:() const
get_extensions	IO/writer/STLWriter.hh	/^  std::string get_extensions()  const { return "stla stlb"; }$/;"	f	class:OpenMesh::IO::_STLWriter_	access:public	signature:() const
get_magic	IO/reader/BaseReader.hh	/^  virtual std::string get_magic() const { return std::string(""); }$/;"	f	class:OpenMesh::IO::BaseReader	access:public	signature:() const
get_magic	IO/reader/OFFReader.hh	/^  std::string get_magic()       const { return "OFF"; }$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:() const
get_magic	IO/reader/OMReader.hh	/^  std::string get_magic()       const { return "OM"; }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:() const
get_magic	IO/reader/PLYReader.hh	/^  std::string get_magic()       const { return "PLY"; }$/;"	f	class:OpenMesh::IO::_PLYReader_	access:public	signature:() const
get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(EPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T>& _ph, const std::string& _name) const
get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(FPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T>& _ph, const std::string& _name) const
get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(HPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T>& _ph, const std::string& _name) const
get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(MPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T>& _ph, const std::string& _name) const
get_property_handle	Mesh/BaseKernel.hh	/^  bool get_property_handle(VPropHandleT<T>& _ph,$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T>& _ph, const std::string& _name) const
get_property_name	IO/reader/PLYReader.cc	/^std::string get_property_name(std::string _string1, std::string _string2) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string _string1, std::string _string2)
get_property_type	IO/reader/PLYReader.cc	/^_PLYReader_::ValueType get_property_type(std::string _string1, std::string _string2) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string _string1, std::string _string2)
get_vhandles	IO/exporter/BaseExporter.hh	/^  get_vhandles(FaceHandle _fh,$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh, std::vector<VertexHandle>& _vhandles) const
get_vhandles	IO/exporter/ExporterT.hh	/^  unsigned int get_vhandles(FaceHandle _fh,$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh, std::vector<VertexHandle>& _vhandles) const
getline	IO/reader/OBJReader.cc	/^      std::getline(stream,faceLine);$/;"	p	class:OpenMesh::IO::std	file:	signature:(stream,faceLine)
getline	IO/reader/OBJReader.cc	/^      std::getline(stream,matFile);$/;"	p	class:OpenMesh::IO::std	file:	signature:(stream,matFile)
getline	IO/reader/OBJReader.cc	/^      std::getline(stream,textureName);$/;"	p	class:OpenMesh::IO::std	file:	signature:(stream,textureName)
getline	IO/reader/OBJReader.cc	/^    std::getline(_in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,line)
getline	IO/reader/OFFReader.cc	/^      std::getline(_in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,line)
getline	IO/reader/OFFReader.cc	/^    std::getline(_in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,line)
getline	IO/reader/OFFReader.cc	/^  _is.getline(line, LINE_LEN);$/;"	p	file:	signature:(line, LINE_LEN)
getline	IO/reader/OFFReader.cc	/^  std::getline(_in,header);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in,header)
getline	IO/reader/PLYReader.cc	/^            std::getline(_is, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_is, line)
getline	IO/reader/PLYReader.cc	/^    std::getline(_is, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_is, line)
getline	IO/reader/STLReader.cc	/^        std::getline(_in, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in, line)
getline	IO/reader/STLReader.cc	/^        std::getline(in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(in,line)
getline	IO/reader/STLReader.cc	/^    std::getline(_in, line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(_in, line)
getline	IO/reader/STLReader.cc	/^    std::getline(in,line);$/;"	p	class:OpenMesh::IO::std	file:	signature:(in,line)
h	Geometry/QuadricT.hh	/^  Scalar h() const { return h_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
h	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  h  = _hh;$/;"	l
h0	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
h0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  h0 = _hh;$/;"	l
h0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h0 = _hh;$/;"	l
h0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h0 = halfedge_handle(_eh, 0);$/;"	l
h0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h0(_hh);$/;"	p	file:	signature:(_hh)
h0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle h0 = halfedge_handle(_eh, 0);$/;"	l
h1	Mesh/PolyConnectivity.cc	/^      HalfedgeHandle h1 = next_halfedge_handle(v0v1);$/;"	l
h1	Mesh/PolyConnectivity.cc	/^      HalfedgeHandle h1 = next_halfedge_handle(v1v0);$/;"	l
h1	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
h1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  h1 = next_halfedge_handle(h0);$/;"	l
h1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h1 = halfedge_handle(_eh, 1);$/;"	l
h1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle h1 = next_halfedge_handle(h0);$/;"	l
h1	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(o0), h1);$/;"	l
h1	Mesh/TriConnectivity.cc	/^    HalfedgeHandle h1 = next_halfedge_handle(h0);$/;"	l
h1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h1 = new_edge(v1, v0);$/;"	l
h1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h1, h2;$/;"	l
h2	Mesh/PolyConnectivity.cc	/^      HalfedgeHandle h2 = next_halfedge_handle(h1);$/;"	l
h2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle h2 = next_halfedge_handle(h1);$/;"	l
h2	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  h1, h2;$/;"	l
h_	Geometry/QuadricT.hh	/^                 h_, i_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
halfedge	Mesh/ArrayKernel.hh	/^  Halfedge& halfedge(HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh)
halfedge	Mesh/ArrayKernel.hh	/^  const Halfedge& halfedge(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
halfedgeCount	Mesh/ArrayKernelT.cc	/^  const int halfedgeCount = edges_.size() * 2;$/;"	l
halfedgeNormals_	IO/importer/ImporterT.hh	/^  std::map<VertexHandle,Normal> halfedgeNormals_;$/;"	m	class:OpenMesh::IO::ImporterT	access:private
halfedge_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          halfedge_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
halfedge_colors	Mesh/AttribKernelT.hh	/^  const Color* halfedge_colors() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
halfedge_colors_	Mesh/AttribKernelT.hh	/^  HalfedgeColorsPropertyHandle              halfedge_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
halfedge_colors_pph	Mesh/AttribKernelT.hh	/^  HalfedgeColorsPropertyHandle              halfedge_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
halfedge_handle	Mesh/ArrayKernel.hh	/^    HalfedgeHandle heh0(halfedge_handle(eh, 0));$/;"	p	signature:(eh, 0)
halfedge_handle	Mesh/ArrayKernel.hh	/^    HalfedgeHandle heh1(halfedge_handle(eh, 1));$/;"	p	signature:(eh, 1)
halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(EdgeHandle _eh, unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh, unsigned int _i) const
halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle halfedge_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
halfedge_handle	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle base_heh(halfedge_handle(_fh));$/;"	p	file:	signature:(_fh)
halfedge_handle	Mesh/PolyConnectivity.hh	/^               HalfedgeHandle halfedge_handle;$/;"	m	struct:OpenMesh::PolyConnectivity::AddFaceEdgeInfo	access:public
halfedge_handle	Mesh/PolyConnectivity.hh	/^    HalfedgeHandle heh(halfedge_handle(_vh));$/;"	p	signature:(_vh)
halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Face	access:private
halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Vertex	access:private
halfedge_inverse_map	Mesh/ArrayKernelT.cc	/^  std::map <int, int> halfedge_inverse_map;$/;"	l
halfedge_normals_	Mesh/AttribKernelT.hh	/^  HalfedgeNormalsPropertyHandle             halfedge_normals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
halfedge_normals_pph	Mesh/AttribKernelT.hh	/^  HalfedgeNormalsPropertyHandle              halfedge_normals_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
halfedge_status_	Mesh/ArrayKernel.hh	/^  HalfedgeStatusPropertyHandle              halfedge_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
halfedge_status_pph	Mesh/ArrayKernel.hh	/^  inline HalfedgeStatusPropertyHandle       halfedge_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
halfedge_texcoords1D_	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords1DPropertyHandle         halfedge_texcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
halfedge_texcoords1D_pph	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords1DPropertyHandle           halfedge_texcoords1D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
halfedge_texcoords2D_	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords2DPropertyHandle         halfedge_texcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
halfedge_texcoords2D_pph	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords2DPropertyHandle           halfedge_texcoords2D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
halfedge_texcoords3D_	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords3DPropertyHandle         halfedge_texcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
halfedge_texcoords3D_pph	Mesh/AttribKernelT.hh	/^  HalfedgeTexCoords3DPropertyHandle           halfedge_texcoords3D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
halfedges	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeRange halfedges() const { return ConstHalfedgeRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
halfedges_	Mesh/ArrayItems.hh	/^    Halfedge  halfedges_[2];$/;"	m	class:OpenMesh::ArrayItems::Edge	access:private
halfedges_begin	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeIter halfedges_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
halfedges_begin	Mesh/PolyConnectivity.hh	/^  HalfedgeIter halfedges_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
halfedges_empty	Mesh/ArrayKernel.hh	/^  bool halfedges_empty() const { return edges_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
halfedges_end	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeIter halfedges_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
halfedges_end	Mesh/PolyConnectivity.hh	/^  HalfedgeIter halfedges_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
halfedges_end	Mesh/PolyMeshT.cc	/^  HalfedgeIter h_it(Kernel::halfedges_begin()), h_end(Kernel::halfedges_end());$/;"	p	file:	signature:()
halfedges_sbegin	Mesh/PolyConnectivity.hh	/^  ConstHalfedgeIter halfedges_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
halfedges_sbegin	Mesh/PolyConnectivity.hh	/^  HalfedgeIter halfedges_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
handle	IO/reader/STLReader.cc	/^          VertexHandle handle = _bi.add_vertex(v);$/;"	l
handle	IO/reader/STLReader.cc	/^        VertexHandle handle = _bi.add_vertex(v);$/;"	l
handle	Mesh/ArrayKernel.hh	/^    EdgeHandle eh(handle(edges_.back()));$/;"	p	signature:(edges_.back())
handle	Mesh/ArrayKernel.hh	/^  EdgeHandle handle(const Edge& _e) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Edge& _e) const
handle	Mesh/ArrayKernel.hh	/^  FaceHandle handle(const Face& _f) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Face& _f) const
handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle handle(const Halfedge& _he) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Halfedge& _he) const
handle	Mesh/ArrayKernel.hh	/^  VertexHandle handle(const Vertex& _v) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Vertex& _v) const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::EdgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::FaceHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::HalfedgeHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
handle	Mesh/CirculatorsT.hh	/^  typename Mesh::VertexHandle handle() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
handle	Mesh/IteratorsT.hh	/^        value_handle handle() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
handle	Mesh/gen/circulators_template.hh	/^  TargetHandle handle() const {$/;"	f	class:CirculatorT	access:public	signature:() const
handle	Mesh/gen/iterators_template.hh	/^  value_handle handle() const { return hnd_; }$/;"	f	class:IteratorT	access:public	signature:() const
handle	Utils/PropertyContainer.hh	/^  BasePropHandleT<T> handle(const T&, const std::string& _name) const$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const T&, const std::string& _name) const
handles_	Mesh/ArrayKernel.hh	/^    HandleContainer                         handles_;$/;"	m	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:protected
has_Ka	IO/reader/OBJReader.hh	/^    bool has_Ka(void)     { return Ka_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
has_Kd	IO/reader/OBJReader.hh	/^    bool has_Kd(void)     { return Kd_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
has_Ks	IO/reader/OBJReader.hh	/^    bool has_Ks(void)     { return Ks_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
has_Tr	IO/reader/OBJReader.hh	/^    bool has_Tr(void)     { return Tr_is_set_;     }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
has_edge_colors	IO/exporter/BaseExporter.hh	/^  virtual bool has_edge_colors()      const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
has_edge_colors	IO/exporter/ExporterT.hh	/^  bool has_edge_colors()      const { return mesh_.has_edge_colors();      }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
has_edge_colors	Mesh/AttribKernelT.hh	/^  bool has_edge_colors()          const { return edge_colors_.is_valid();         }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_edge_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_edge_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
has_edge_status	Mesh/PolyMeshT.cc	/^  assert(Kernel::has_edge_status());\/\/this function needs edge status property$/;"	p	file:	signature:()
has_face_colors	IO/exporter/BaseExporter.hh	/^  virtual bool has_face_colors()      const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
has_face_colors	IO/exporter/ExporterT.hh	/^  bool has_face_colors()      const { return mesh_.has_face_colors();      }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
has_face_colors	Mesh/AttribKernelT.hh	/^  bool has_face_colors()          const { return face_colors_.is_valid();         }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_face_normals	IO/exporter/BaseExporter.hh	/^  virtual bool has_face_normals()     const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
has_face_normals	IO/exporter/ExporterT.hh	/^  bool has_face_normals()     const { return mesh_.has_face_normals();     }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
has_face_normals	Mesh/AttribKernelT.hh	/^  bool has_face_normals()         const { return face_normals_.is_valid();        }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_face_normals	Mesh/PolyMeshT.hh	/^    assert(Kernel::has_face_normals());$/;"	p	signature:()
has_face_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_face_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
has_face_texture_index	Mesh/AttribKernelT.hh	/^  bool has_face_texture_index()   const { return face_texture_index_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_halfedge_colors	Mesh/AttribKernelT.hh	/^  bool has_halfedge_colors()      const { return halfedge_colors_.is_valid();     }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_halfedge_normals	Mesh/AttribKernelT.hh	/^  bool has_halfedge_normals()     const { return halfedge_normals_.is_valid();    }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_halfedge_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_halfedge_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
has_halfedge_texcoords1D	Mesh/AttribKernelT.hh	/^  bool has_halfedge_texcoords1D() const { return halfedge_texcoords1D_.is_valid();}$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_halfedge_texcoords2D	Mesh/AttribKernelT.hh	/^  bool has_halfedge_texcoords2D() const { return halfedge_texcoords2D_.is_valid();}$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_halfedge_texcoords3D	Mesh/AttribKernelT.hh	/^  bool has_halfedge_texcoords3D() const { return halfedge_texcoords3D_.is_valid();}$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_map_Kd	IO/reader/OBJReader.hh	/^    bool has_map_Kd(void) { return map_Kd_is_set_; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void)
has_vertex_colors	IO/exporter/BaseExporter.hh	/^  virtual bool has_vertex_colors()    const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
has_vertex_colors	IO/exporter/ExporterT.hh	/^  bool has_vertex_colors()    const { return mesh_.has_vertex_colors();    }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
has_vertex_colors	Mesh/AttribKernelT.hh	/^  bool has_vertex_colors()        const { return vertex_colors_.is_valid();       }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_vertex_normals	IO/exporter/BaseExporter.hh	/^  virtual bool has_vertex_normals()   const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
has_vertex_normals	IO/exporter/ExporterT.hh	/^  bool has_vertex_normals()   const { return mesh_.has_vertex_normals();   }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
has_vertex_normals	Mesh/AttribKernelT.hh	/^  bool has_vertex_normals()       const { return vertex_normals_.is_valid();      }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_vertex_status	Mesh/ArrayKernel.cc	/^  assert(has_vertex_status());\/\/this function requires vertex status property$/;"	p	file:	signature:()
has_vertex_status	Mesh/ArrayKernel.hh	/^  inline bool                               has_vertex_status() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
has_vertex_texcoords	IO/exporter/BaseExporter.hh	/^  virtual bool has_vertex_texcoords() const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
has_vertex_texcoords	IO/exporter/ExporterT.hh	/^  bool has_vertex_texcoords() const { return mesh_.has_vertex_texcoords2D(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
has_vertex_texcoords1D	Mesh/AttribKernelT.hh	/^  bool has_vertex_texcoords1D()   const { return vertex_texcoords1D_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_vertex_texcoords2D	Mesh/AttribKernelT.hh	/^  bool has_vertex_texcoords2D()   const { return vertex_texcoords2D_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
has_vertex_texcoords3D	Mesh/AttribKernelT.hh	/^  bool has_vertex_texcoords3D()   const { return vertex_texcoords3D_.is_valid();  }$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
hdr	IO/reader/OMReader.cc	/^  OMFormat::Header *hdr = (OMFormat::Header*) &evt[0];$/;"	l
he	Mesh/PolyMeshT.hh	/^    Normal he;$/;"	l
he	Mesh/PolyMeshT.hh	/^    Normal n0, n1, he;$/;"	l
header	IO/reader/OFFReader.cc	/^  std::string header;$/;"	l
header	IO/writer/OMWriter.cc	/^  OMFormat::Header header;$/;"	l
header	IO/writer/STLWriter.cc	/^  const char header[80] =$/;"	l
header_	IO/reader/OMReader.hh	/^  mutable Header       header_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
header_size	IO/OMFormat.hh	/^  inline size_t header_size(void) { return sizeof(Header); }$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(void)
heh	IO/importer/ImporterT.hh	/^          typename Mesh::HalfedgeHandle heh = fh_iter.current_halfedge_handle();$/;"	l
heh	Mesh/ArrayKernel.hh	/^      HalfedgeHandle  heh(_heh);$/;"	p	signature:(_heh)
heh	Mesh/PolyMeshT.cc	/^    HalfedgeHandle heh = _heh;$/;"	l
heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh0 = halfedge_handle(_eh, 0);$/;"	l
heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh0 = new_edge(vh0, vh1);$/;"	l
heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh1 = halfedge_handle(_eh, 1);$/;"	l
heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle heh1 = opposite_halfedge_handle(heh0);$/;"	l
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
heh_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
heh_	Mesh/gen/circulators_template.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:CirculatorT	access:private
hend	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hend = halfedge_handle(fh);$/;"	l
hh	Mesh/ArrayKernelT.cc	/^  HalfedgeHandle hh;$/;"	l
hh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hh   = next_halfedge_handle(hend);$/;"	l
hh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hh;$/;"	l
hh_it	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_HHandlePointer::iterator hh_it(hh_to_update.begin()), hh_it_end(hh_to_update.end());$/;"	p	file:	signature:(hh_to_update.begin())
hh_it_end	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_HHandlePointer::iterator hh_it(hh_to_update.begin()), hh_it_end(hh_to_update.end());$/;"	p	file:	signature:(hh_to_update.end())
hh_map	Mesh/ArrayKernelT.cc	/^  std::vector<HalfedgeHandle>  hh_map;$/;"	l
hidden	Mesh/Status.hh	/^  bool hidden() const  { return is_bit_set(HIDDEN); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
hn	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  hn = next_halfedge_handle(h);$/;"	l
hnd_	Mesh/IteratorsT.hh	/^        value_handle hnd_;$/;"	m	class:OpenMesh::Iterators::GenericIteratorT	access:protected
hnd_	Mesh/gen/iterators_template.hh	/^  value_handle  hnd_;$/;"	m	class:IteratorT	access:private
hnew	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle hnew = new_edge(to_vertex_handle(hh), vh);$/;"	l
hnext	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle hnext = next_halfedge_handle(hh);$/;"	l
hold	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle hold = new_edge(to_vertex_handle(hend), vh);$/;"	l
hold	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(hend), hold);$/;"	l
hp	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  hp = prev_halfedge_handle(h);$/;"	l
hprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::hprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
hprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::hprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
hprop_stats	Mesh/BaseKernel.hh	/^  void hprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
hprop_stats	Mesh/BaseKernel.hh	/^  void hprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
hprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  hprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
hprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator hprops_begin() const { return hprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
hprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator hprops_begin() { return hprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
hprops_clear	Mesh/BaseKernel.hh	/^  void hprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
hprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator hprops_end()   const { return hprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
hprops_end	Mesh/BaseKernel.hh	/^  prop_iterator hprops_end()   { return hprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
hprops_reserve	Mesh/BaseKernel.hh	/^  void hprops_reserve(unsigned int _n) const { hprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
hprops_resize	Mesh/BaseKernel.hh	/^  void hprops_resize(unsigned int _n) const { hprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
hprops_swap	Mesh/BaseKernel.hh	/^  void hprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
hps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& hps = hprops_.properties();$/;"	l
htexcoords1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D* htexcoords1D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
htexcoords2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D* htexcoords2D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
htexcoords3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D* htexcoords3D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
i	Geometry/QuadricT.hh	/^  Scalar i() const { return i_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
i	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	m	union:OpenMesh::IO::u2	file:	access:public
i	IO/reader/OBJReader.cc	/^    int i = 0;$/;"	l
i	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
i	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
i	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon5	file:	access:public
i	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon6	file:	access:public
i	IO/reader/STLReader.cc	/^  union { unsigned int i; unsigned char c[4]; } endian_test;$/;"	m	union:OpenMesh::IO::__anon7	file:	access:public
i	IO/reader/STLReader.cc	/^  unsigned int               i, nT;$/;"	l
i	IO/reader/STLReader.cc	/^  unsigned int               i;$/;"	l
i	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
i	IO/writer/OFFWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
i	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
i	IO/writer/OMWriter.cc	/^  unsigned int i, nV, nF;$/;"	l
i	IO/writer/PLYWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
i	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
i	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces()), nV;$/;"	l
i	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces());$/;"	l
i	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	l
i	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	l
i	Mesh/PolyMeshT.cc	/^  unsigned int i = 0;$/;"	l
i0	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	l
i0_	Utils/PropertyContainer.hh	/^    size_t i0_, i1_;$/;"	m	struct:OpenMesh::Swap	access:public
i1	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	l
i1_	Utils/PropertyContainer.hh	/^    size_t i0_, i1_;$/;"	m	struct:OpenMesh::Swap	access:public
i_	Geometry/QuadricT.hh	/^                 h_, i_,$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
ic	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	l
id	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	l
idx	IO/reader/OFFReader.cc	/^         _in >> idx;$/;"	l
idx	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
idx	IO/reader/PLYReader.cc	/^                _in >> idx;$/;"	l
idx	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
idx	IO/writer/OBJWriter.cc	/^          _out  << idx;$/;"	l
idx	IO/writer/OBJWriter.cc	/^          _out << idx;$/;"	l
idx	IO/writer/OBJWriter.cc	/^      _out << " " << idx;$/;"	l
idx	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
idx	IO/writer/OFFWriter.cc	/^	       _out << vhandles[j].idx() << " ";$/;"	p	file:	signature:()
idx	IO/writer/OFFWriter.cc	/^      _out << vhandles[0].idx()  << " ";$/;"	p	file:	signature:()
idx	IO/writer/OFFWriter.cc	/^      _out << vhandles[1].idx()  << " ";$/;"	p	file:	signature:()
idx	IO/writer/OFFWriter.cc	/^      _out << vhandles[2].idx();$/;"	p	file:	signature:()
idx	IO/writer/PLYWriter.cc	/^         _out << vhandles[j].idx() << " ";$/;"	p	file:	signature:()
idx	IO/writer/PLYWriter.cc	/^      _out << vhandles[0].idx()  << " ";$/;"	p	file:	signature:()
idx	IO/writer/PLYWriter.cc	/^      _out << vhandles[1].idx()  << " ";$/;"	p	file:	signature:()
idx	IO/writer/PLYWriter.cc	/^      _out << vhandles[2].idx();$/;"	p	file:	signature:()
idx	Mesh/Handles.hh	/^  int idx() const { return idx_; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:() const
idx	Utils/Property.hh	/^    size_t        idx;  \/\/ element index$/;"	l
idx	Utils/PropertyContainer.hh	/^    int idx=0;$/;"	l
idx	Utils/PropertyContainer.hh	/^    size_t idx=0;$/;"	l
idx_	Mesh/Handles.hh	/^  int idx_; $/;"	m	class:OpenMesh::BaseHandle	access:private
ifile	IO/reader/OFFReader.cc	/^  std::ifstream ifile(_filename.c_str(), (options_.is_binary() ? std::ios::binary | std::ios::in$/;"	p	file:	signature:(_filename.c_str(), (options_.is_binary() ? std::ios::binary | std::ios::in : std::ios::in) )
ifile	IO/reader/OMReader.cc	/^    std::ifstream ifile(_filename.c_str());$/;"	p	file:	signature:(_filename.c_str())
ifs	IO/reader/OFFReader.cc	/^    std::ifstream ifs(_filename.c_str());$/;"	p	file:	signature:(_filename.c_str())
ifs	IO/reader/OMReader.cc	/^  std::ifstream ifs(_filename.c_str(), std::ios::binary);$/;"	p	file:	signature:(_filename.c_str(), std::ios::binary)
ifs	IO/reader/PLYReader.cc	/^        std::ifstream ifs(_filename.c_str());$/;"	p	file:	signature:(_filename.c_str())
ignore	IO/reader/OMReader.cc	/^      _is.ignore(size_of);$/;"	p	file:	signature:(size_of)
ignore	IO/reader/OMReader.cc	/^    _is.ignore(block_size);$/;"	p	file:	signature:(block_size)
ii	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	l
importer	IO/MeshIO.hh	/^  ImporterT<Mesh> importer(_mesh);$/;"	p	signature:(_mesh)
in	IO/reader/OBJReader.cc	/^  std::fstream in( _filename.c_str(), std::ios_base::in );$/;"	p	file:	signature:( _filename.c_str(), std::ios_base::in )
in	IO/reader/PLYReader.cc	/^    std::fstream in(_filename.c_str(), (std::ios_base::binary | std::ios_base::in) );$/;"	p	file:	signature:(_filename.c_str(), (std::ios_base::binary | std::ios_base::in) )
in	IO/reader/STLReader.cc	/^  FILE*  in = fopen(_filename.c_str(), "rb");$/;"	l
in	IO/reader/STLReader.cc	/^  FILE* in = fopen(_filename.c_str(), "rb");$/;"	l
in	IO/reader/STLReader.cc	/^  std::fstream in( _filename.c_str(), std::ios_base::in );$/;"	p	file:	signature:( _filename.c_str(), std::ios_base::in )
in_he_vec	Mesh/PolyMeshT.cc	/^  Normal in_he_vec;$/;"	l
indef	IO/reader/OBJReader.cc	/^  bool        indef = false;$/;"	l
index_Kd_	IO/reader/OBJReader.hh	/^    std::string map_Kd_; int index_Kd_; bool map_Kd_is_set_; \/\/ Texture$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
init_bit_masks	Mesh/ArrayKernel.cc	/^void ArrayKernel::init_bit_masks()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
init_bit_masks	Mesh/ArrayKernel.cc	/^void ArrayKernel::init_bit_masks(BitMaskContainer& _bmc)$/;"	f	class:OpenMesh::ArrayKernel	signature:(BitMaskContainer& _bmc)
init_bit_masks	Mesh/ArrayKernel.hh	/^  void                                      init_bit_masks();$/;"	p	class:OpenMesh::ArrayKernel	access:private	signature:()
init_bit_masks	Mesh/ArrayKernel.hh	/^  void                                      init_bit_masks(BitMaskContainer& _bmc);$/;"	p	class:OpenMesh::ArrayKernel	access:private	signature:(BitMaskContainer& _bmc)
initialized	System/omstream.cc	/^  static bool initialized = false;$/;"	l	file:
inner_next	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle                 inner_next, inner_prev,$/;"	l
inner_prev	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle                 inner_next, inner_prev,$/;"	l
insert	IO/IOManager.hh	/^    reader_modules_.insert(_bl);$/;"	p	signature:(_bl)
insert	IO/IOManager.hh	/^    writer_modules_.insert(_bw);$/;"	p	signature:(_bw)
insert	Mesh/ArrayKernel.hh	/^        Base::insert(_hnd);$/;"	p	class:OpenMesh::ArrayKernel::ExtStatusSetT::Base	signature:(_hnd)
insert	Mesh/ArrayKernel.hh	/^    inline void                             insert(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:(Handle _hnd)
insert	Mesh/ArrayKernel.hh	/^    inline void                             insert(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(Handle _hnd)
insert	Mesh/PolyConnectivity.cc	/^      nb_fhs.insert(cff_it);$/;"	p	file:	signature:(cff_it)
insert_edge	Mesh/PolyConnectivity.cc	/^PolyConnectivity::insert_edge(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh)
insert_edge	Mesh/PolyConnectivity.hh	/^  HalfedgeHandle insert_edge(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _prev_heh, HalfedgeHandle _next_heh)
insert_edge	Mesh/TriConnectivity.cc	/^TriConnectivity::insert_edge(VertexHandle _vh, HalfedgeHandle _h0, HalfedgeHandle _h1)$/;"	f	class:OpenMesh::TriConnectivity	signature:(VertexHandle _vh, HalfedgeHandle _h0, HalfedgeHandle _h1)
insert_edge	Mesh/TriConnectivity.hh	/^  HalfedgeHandle insert_edge(VertexHandle _vh,$/;"	p	class:OpenMesh::TriConnectivity	access:private	signature:(VertexHandle _vh, HalfedgeHandle _h0, HalfedgeHandle _h1)
insert_loop	Mesh/TriConnectivity.cc	/^TriConnectivity::insert_loop(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(HalfedgeHandle _hh)
insert_loop	Mesh/TriConnectivity.hh	/^  HalfedgeHandle insert_loop(HalfedgeHandle _hh);$/;"	p	class:OpenMesh::TriConnectivity	access:private	signature:(HalfedgeHandle _hh)
int16	IO/OMFormat.hh	/^  typedef int16_t            int16;$/;"	t	namespace:OpenMesh::IO::OMFormat
int16_t	IO/SR_types.hh	/^typedef short          int16_t; typedef unsigned short     uint16_t;$/;"	t	namespace:OpenMesh::IO
int32	IO/OMFormat.hh	/^  typedef int32_t            int32;$/;"	t	namespace:OpenMesh::IO::OMFormat
int32_t	IO/SR_types.hh	/^typedef int            int32_t; typedef unsigned int       uint32_t;$/;"	t	namespace:OpenMesh::IO
int64	IO/OMFormat.hh	/^  typedef int64_t            int64;$/;"	t	namespace:OpenMesh::IO::OMFormat
int64_t	IO/SR_types.hh	/^typedef __int64        int64_t; typedef unsigned __int64   uint64_t;$/;"	t	namespace:OpenMesh::IO
int64_t	IO/SR_types.hh	/^typedef long long      int64_t; typedef unsigned long long uint64_t;$/;"	t	namespace:OpenMesh::IO
int8	IO/OMFormat.hh	/^  typedef int8_t             int8;$/;"	t	namespace:OpenMesh::IO::OMFormat
int8_t	IO/SR_types.hh	/^typedef char           int8_t;  typedef unsigned char      uint8_t;$/;"	t	namespace:OpenMesh::IO
int_type	System/mostream.hh	/^  typedef base_type::int_type         int_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
int_type	System/mostream.hh	/^  typedef int                         int_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
integer_size	IO/OMFormat.hh	/^  template <typename T> Chunk::Integer_Size integer_size(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
integer_type	IO/OFFFormat.hh	/^   typedef int   integer_type;$/;"	t	struct:OpenMesh::IO::OFFFormat	access:public
invalidate	Mesh/ArrayKernel.hh	/^  { halfedge(_heh).face_handle_.invalidate(); }$/;"	p	signature:()
invalidate	Mesh/ArrayKernel.hh	/^  { vertex(_vh).halfedge_handle_.invalidate(); }$/;"	p	signature:()
invalidate	Mesh/ArrayKernelT.cc	/^      (*fh_it)->invalidate();$/;"	p	file:	signature:()
invalidate	Mesh/ArrayKernelT.cc	/^      (*hh_it)->invalidate();$/;"	p	file:	signature:()
invalidate	Mesh/ArrayKernelT.cc	/^      (*v_it)->invalidate();$/;"	p	file:	signature:()
invalidate	Mesh/Handles.hh	/^  void invalidate() { idx_ = -1; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
is_	IO/SR_binary_spec.hh	/^  std::istream& is_;$/;"	m	struct:OpenMesh::IO::FunctorRestore	access:public
is_binary	IO/Options.hh	/^  bool is_binary()           const { return check(Binary); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
is_bit_set	Mesh/Status.hh	/^  bool is_bit_set(unsigned int _s) const { return (status_ & _s) > 0; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s) const
is_boundary	Mesh/ArrayKernel.hh	/^  bool is_boundary(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
is_boundary	Mesh/PolyConnectivity.cc	/^        assert(is_boundary(boundary_next));$/;"	p	file:	signature:(boundary_next)
is_boundary	Mesh/PolyConnectivity.cc	/^        assert(is_boundary(boundary_prev));$/;"	p	file:	signature:(boundary_prev)
is_boundary	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_boundary(FaceHandle _fh, bool _check_vertex) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh, bool _check_vertex) const
is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh) const
is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(FaceHandle _fh, bool _check_vertex=false) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, bool _check_vertex=false) const
is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _heh) const
is_boundary	Mesh/PolyConnectivity.hh	/^  bool is_boundary(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
is_collapse_ok	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_collapse_ok(HalfedgeHandle v0v1)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(HalfedgeHandle v0v1)
is_collapse_ok	Mesh/PolyConnectivity.hh	/^  bool is_collapse_ok(HalfedgeHandle _he);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _he)
is_collapse_ok	Mesh/TriConnectivity.cc	/^bool TriConnectivity::is_collapse_ok(HalfedgeHandle v0v1)$/;"	f	class:OpenMesh::TriConnectivity	signature:(HalfedgeHandle v0v1)
is_collapse_ok	Mesh/TriConnectivity.hh	/^  bool is_collapse_ok(HalfedgeHandle _heh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(HalfedgeHandle _heh)
is_empty	IO/Options.hh	/^  bool is_empty(void) const { return !flags_; }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(void) const
is_enabled	System/mostream.hh	/^  bool is_enabled() const { return enabled_; }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:() const
is_enabled	System/mostream.hh	/^  bool is_enabled() const { return streambuffer_.is_enabled(); }$/;"	f	class:OpenMesh::mostream	access:public	signature:() const
is_eq	Geometry/MathDefs.hh	/^inline bool is_eq(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
is_eq	Geometry/MathDefs.hh	/^inline bool is_eq(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
is_estimated_feature_edge	Mesh/PolyMeshT.cc	/^is_estimated_feature_edge(HalfedgeHandle _heh, const double _feature_angle) const$/;"	f	class:OpenMesh::PolyMeshT	signature:(HalfedgeHandle _heh, const double _feature_angle) const
is_estimated_feature_edge	Mesh/PolyMeshT.hh	/^  bool is_estimated_feature_edge(HalfedgeHandle _heh, const double _feature_angle) const;$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, const double _feature_angle) const
is_flip_ok	Mesh/TriConnectivity.cc	/^  assert(is_flip_ok(_eh));\/\/let's make it sure it is actually checked$/;"	p	file:	signature:(_eh)
is_flip_ok	Mesh/TriConnectivity.cc	/^bool TriConnectivity::is_flip_ok(EdgeHandle _eh) const$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh) const
is_flip_ok	Mesh/TriConnectivity.hh	/^  bool is_flip_ok(EdgeHandle _eh) const;$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh) const
is_float	IO/OMFormat.hh	/^    assert( is_float(d) );$/;"	p	signature:(d)
is_float	IO/OMFormat.hh	/^  template <typename T> bool is_float(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
is_ge	Geometry/MathDefs.hh	/^inline bool is_ge(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
is_ge	Geometry/MathDefs.hh	/^inline bool is_ge(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
is_gt	Geometry/MathDefs.hh	/^inline bool is_gt(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
is_gt	Geometry/MathDefs.hh	/^inline bool is_gt(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
is_in	Mesh/ArrayKernel.hh	/^    inline bool                             is_in(Handle _hnd) const$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:(Handle _hnd) const
is_integer	IO/OMFormat.hh	/^    assert( OMFormat::is_integer( _val ) );$/;"	p	signature:(_val )
is_integer	IO/OMFormat.hh	/^    assert( is_integer(d) );$/;"	p	signature:(d)
is_integer	IO/OMFormat.hh	/^  template <typename T> bool is_integer(const T)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T)
is_integer	IO/OMFormatT.cc	/^    assert( OMFormat::is_integer( _val ) );$/;"	p	file:	signature:(_val )
is_isolated	Mesh/ArrayKernel.hh	/^  bool is_isolated(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
is_le	Geometry/MathDefs.hh	/^inline bool is_le(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
is_le	Geometry/MathDefs.hh	/^inline bool is_le(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
is_lt	Geometry/MathDefs.hh	/^inline bool is_lt(const T1& a, const T2& b)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b)
is_lt	Geometry/MathDefs.hh	/^inline bool is_lt(const T1& a, const T2& b, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T1& a, const T2& b, Real _eps)
is_manifold	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_manifold(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh) const
is_manifold	Mesh/PolyConnectivity.hh	/^  bool is_manifold(VertexHandle _vh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
is_new	Mesh/PolyConnectivity.hh	/^               bool is_new;$/;"	m	struct:OpenMesh::PolyConnectivity::AddFaceEdgeInfo	access:public
is_polymesh	Mesh/PolyMeshT.hh	/^  static bool is_polymesh() { return true;  }$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
is_polymesh	Mesh/TriMeshT.hh	/^  static bool is_polymesh() { return false; }$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
is_signed	IO/OMFormat.hh	/^  template <typename T> bool is_signed(const T&)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const T&)
is_simple_link	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_simple_link(EdgeHandle _eh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh) const
is_simple_link	Mesh/PolyConnectivity.hh	/^  bool is_simple_link(EdgeHandle _eh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh) const
is_simply_connected	Mesh/PolyConnectivity.cc	/^bool PolyConnectivity::is_simply_connected(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh) const
is_simply_connected	Mesh/PolyConnectivity.hh	/^  bool is_simply_connected(FaceHandle _fh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
is_streamable	IO/SR_binary.hh	/^  static const bool is_streamable = false;$/;"	m	struct:OpenMesh::IO::binary	access:public
is_streamable	IO/SR_binary_spec.hh	/^  static const bool is_streamable = true;$/;"	m	struct:OpenMesh::IO::binary	access:public
is_streamable	IO/StoreRestore.hh	/^bool is_streamable( const T& ) $/;"	f	namespace:OpenMesh::IO	signature:( const T& )
is_streamable	IO/StoreRestore.hh	/^bool is_streamable(void)$/;"	f	namespace:OpenMesh::IO	signature:(void)
is_triangle_mesh	IO/exporter/BaseExporter.hh	/^  virtual bool is_triangle_mesh()     const { return false; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
is_triangle_mesh	IO/exporter/ExporterT.hh	/^  bool is_triangle_mesh() const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
is_triangle_mesh	IO/importer/BaseImporter.hh	/^  virtual bool is_triangle_mesh()     const { return false; }$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
is_triangle_mesh	IO/importer/ImporterT.hh	/^  bool is_triangle_mesh() const$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
is_triangles	Mesh/PolyConnectivity.hh	/^  inline static bool is_triangles()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
is_triangles	Mesh/TriConnectivity.hh	/^  inline static bool is_triangles()$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:()
is_trimesh	Mesh/PolyMeshT.hh	/^  static bool is_trimesh()  { return false; }$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
is_trimesh	Mesh/TriMeshT.hh	/^  static bool is_trimesh()  { return  true; }$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
is_valid	IO/OMFormat.hh	/^	assert( is_valid( _rhs.size() ) );$/;"	p	signature:(_rhs.size() )
is_valid	IO/OMFormat.hh	/^      bool is_valid() const { return is_valid( size() ); }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:() const
is_valid	IO/OMFormat.hh	/^      static bool is_valid( size_t _s ) { return _s <= size_max; }$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( size_t _s )
is_valid	IO/OMFormat.hh	/^    assert( OMFormat::Chunk::PropertyName::is_valid( size ) );$/;"	p	signature:(size )
is_valid	IO/reader/OBJReader.hh	/^    bool is_valid(void) const$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:(void) const
is_valid	Mesh/Handles.hh	/^  bool is_valid() const { return idx_ != -1; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:() const
is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_eh));$/;"	p	signature:(_eh)
is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_fh));$/;"	p	signature:(_fh)
is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_heh));$/;"	p	signature:(_heh)
is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_nheh));$/;"	p	signature:(_nheh)
is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_pheh));$/;"	p	signature:(_pheh)
is_valid_handle	Mesh/ArrayKernel.hh	/^    assert(is_valid_handle(_vh));$/;"	p	signature:(_vh)
is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(EdgeHandle _eh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh) const
is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
is_valid_handle	Mesh/ArrayKernel.hh	/^  bool is_valid_handle(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
is_zero	Geometry/MathDefs.hh	/^inline bool is_zero(const T& _a, Real _eps)$/;"	f	namespace:OpenMesh	signature:(const T& _a, Real _eps)
is_zero	Geometry/MathDefs.hh	/^inline bool is_zero(const T& a)$/;"	f	namespace:OpenMesh	signature:(const T& a)
istringstream	IO/IOManager.cc	/^    std::istringstream iss((*it)->get_extensions());$/;"	p	file:	signature:(*it)->get_extensions()
it	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it     =  reader_modules_.begin();$/;"	l
it	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it     = reader_modules_.begin(),$/;"	l
it	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it     = reader_modules_.begin();$/;"	l
it	IO/IOManager.cc	/^  std::set<BaseWriter*>::const_iterator it     = writer_modules_.begin(),$/;"	l
it	IO/IOManager.cc	/^  std::set<BaseWriter*>::const_iterator it     = writer_modules_.begin();$/;"	l
it	IO/importer/ImporterT.hh	/^      VHandles::const_iterator it, it2, end(_indices.end());$/;"	l
it	IO/reader/OMReader.cc	/^  std::vector<char>::reverse_iterator it = evt.rbegin();$/;"	l
it	Mesh/ArrayKernel.hh	/^        iterator it = std::find(begin(), end(), _hnd);$/;"	l
it	Mesh/BaseKernel.cc	/^  PropertyContainer::Properties::const_iterator it;$/;"	l
it2	IO/importer/ImporterT.hh	/^      VHandles::const_iterator it, it2, end(_indices.end());$/;"	l
it_end	IO/IOManager.cc	/^                                        it_end = reader_modules_.end();$/;"	l
it_end	IO/IOManager.cc	/^                                        it_end = writer_modules_.end();$/;"	l
it_end	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it_end =  reader_modules_.end();$/;"	l
it_end	IO/IOManager.cc	/^  std::set<BaseReader*>::const_iterator it_end = reader_modules_.end();$/;"	l
it_end	IO/IOManager.cc	/^  std::set<BaseWriter*>::const_iterator it_end = writer_modules_.end();$/;"	l
it_heNs	IO/importer/ImporterT.hh	/^          typename std::map<VertexHandle,Normal>::iterator it_heNs = halfedgeNormals_.find(vh);$/;"	l
iterations_	Utils/RandomNumberGenerator.hh	/^  unsigned int iterations_;$/;"	m	class:OpenMesh::RandomNumberGenerator	access:private
iterator	Mesh/ArrayKernel.hh	/^                                            iterator;$/;"	t	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
iterator_category	Mesh/CirculatorsT.hh	/^  typedef std::bidirectional_iterator_tag   iterator_category;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
iterator_category	Mesh/IteratorsT.hh	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
j	Geometry/QuadricT.hh	/^  Scalar j() const { return j_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
j	IO/reader/OFFReader.cc	/^      _in >> j;$/;"	l
j	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
j	IO/reader/PLYReader.cc	/^            _in >> j;$/;"	l
j	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
j	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
j	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
j	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
j_	Geometry/QuadricT.hh	/^                     j_;$/;"	m	class:OpenMesh::Geometry::QuadricT	access:private
k	IO/reader/OFFReader.cc	/^      _in >> k;$/;"	l
k	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
k	IO/reader/PLYReader.cc	/^            _in >> k;$/;"	l
k	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
kernel	IO/exporter/BaseExporter.hh	/^  virtual const BaseKernel* kernel() { return 0; }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:()
kernel	IO/exporter/ExporterT.hh	/^  virtual const BaseKernel* kernel() { return &mesh_; }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:()
kernel	IO/importer/BaseImporter.hh	/^  virtual BaseKernel* kernel() { return 0; }$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
kernel	IO/importer/ImporterT.hh	/^  virtual BaseKernel* kernel() { return &mesh_; }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:()
kernel_	Mesh/ArrayKernel.hh	/^    ArrayKernel&                            kernel_;$/;"	m	class:OpenMesh::ArrayKernel::StatusSetT	access:protected
key	IO/reader/OBJReader.cc	/^      stream >> key;$/;"	l
key	IO/reader/OBJReader.cc	/^  std::string key;$/;"	l
key	System/mostream.hh	/^    void*      key  = (void*) &_target;$/;"	l
key	System/mostream.hh	/^    void* key = (void*) &_target;$/;"	l
keyWrd	IO/reader/OBJReader.cc	/^    stream >> keyWrd;$/;"	l
keyWrd	IO/reader/OBJReader.cc	/^  std::string keyWrd;$/;"	l
keyword	IO/reader/PLYReader.cc	/^        _is >> keyword;$/;"	l
keyword	IO/reader/PLYReader.cc	/^    _is >> keyword;$/;"	l
keyword	IO/reader/PLYReader.cc	/^    std::string keyword;$/;"	l
l	IO/reader/OFFReader.cc	/^      _in >> l;$/;"	l
l	IO/reader/OFFReader.cc	/^  unsigned int            i, j, k, l, idx;$/;"	l
l	IO/reader/PLYReader.cc	/^            _in >> l;$/;"	l
l	IO/reader/PLYReader.cc	/^    unsigned int i, j, k, l, idx;$/;"	l
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
lap_counter_	Mesh/CirculatorsT.hh	/^  int              lap_counter_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
lastMat	IO/writer/OBJWriter.cc	/^  int lastMat = -1;$/;"	l
left_trim	IO/reader/BaseReader.hh	/^static inline std::string &left_trim(std::string &_string) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string &_string)
len	IO/SR_binary_spec.hh	/^      length_t len = _v.size();$/;"	l
len	IO/SR_binary_spec.hh	/^    _is.read( const_cast<char*>(_val.data()), len );$/;"	l
len	IO/SR_binary_spec.hh	/^    length_t len;$/;"	l
length_t	IO/SR_binary_spec.hh	/^  typedef uint16_t    length_t;$/;"	t	struct:OpenMesh::IO::binary	access:public
limit_weights_	Geometry/LoopSchemeMaskT.hh	/^  Scalar                                    limit_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
line	IO/reader/OBJReader.cc	/^  std::string line;$/;"	l
line	IO/reader/OFFReader.cc	/^      std::string line;$/;"	l
line	IO/reader/OFFReader.cc	/^    std::string line;$/;"	l
line	IO/reader/OFFReader.cc	/^  char line[LINE_LEN], *p;$/;"	l
line	IO/reader/PLYReader.cc	/^    std::string line;$/;"	l
line	IO/reader/STLReader.cc	/^  std::string line;$/;"	l
lineData	IO/reader/OBJReader.cc	/^      std::stringstream lineData( faceLine );$/;"	p	file:	signature:( faceLine )
listEntryType	IO/reader/PLYReader.cc	/^                    _is >> listEntryType;$/;"	l
listEntryType	IO/reader/PLYReader.cc	/^    std::string listEntryType;$/;"	l
listIndexType	IO/reader/PLYReader.cc	/^                    _is >> listIndexType;$/;"	l
listIndexType	IO/reader/PLYReader.cc	/^    std::string listIndexType;$/;"	l
local	Utils/Endian.hh	/^  static Type local() { return local_; }$/;"	f	class:OpenMesh::Endian	access:public	signature:()
local_	Utils/Endian.cc	/^const Endian::Type Endian::local_ = *((unsigned char*)&Endian::one_)$/;"	m	class:OpenMesh::Endian	file:
local_	Utils/Endian.hh	/^   static const Type local_;$/;"	m	class:OpenMesh::Endian	access:private
locked	Mesh/Status.hh	/^  bool locked() const  { return is_bit_set(LOCKED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
log_	Geometry/MathDefs.hh	/^inline double log_(double _value)$/;"	f	namespace:OpenMesh	signature:(double _value)
loop_scheme_mask__	Mesh/PolyMeshT.cc	/^  static const LoopSchemeMaskDouble& loop_scheme_mask__ =$/;"	l	file:
m128	Geometry/VectorT.hh	/^    __m128  m128;$/;"	m	union:OpenMesh::VectorDataT::__anon3	access:public
m_	Utils/AutoPropertyHandleT.hh	/^  Mesh*                                     m_;$/;"	m	class:OpenMesh::AutoPropertyHandleT	access:protected
magic_	IO/OMFormat.hh	/^    uchar  magic_[2]; \/\/ OM$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
magic_	IO/writer/OMWriter.cc	/^const OMFormat::uchar _OMWriter_::magic_[3] = "OM";$/;"	m	class:OpenMesh::IO::_OMWriter_	file:
magic_	IO/writer/OMWriter.hh	/^  static const OMFormat::uchar magic_[3];$/;"	m	class:OpenMesh::IO::_OMWriter_	access:protected
major_version	IO/OMFormat.hh	/^  inline uint16 major_version(const uint8 version)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const uint8 version)
map_Kd	IO/reader/OBJReader.hh	/^    const std::string& map_Kd( void ) { return map_Kd_ ; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void )
map_Kd_	IO/reader/OBJReader.hh	/^    std::string map_Kd_; int index_Kd_; bool map_Kd_is_set_; \/\/ Texture$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
map_Kd_index	IO/reader/OBJReader.hh	/^    const int& map_Kd_index( void ) { return index_Kd_ ; }$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( void )
map_Kd_is_set_	IO/reader/OBJReader.hh	/^    std::string map_Kd_; int index_Kd_; bool map_Kd_is_set_; \/\/ Texture$/;"	m	class:OpenMesh::IO::_OBJReader_::Material	access:private
mat	IO/reader/OBJReader.cc	/^        Material& mat = materials_[matname];$/;"	l
mat	IO/reader/OBJReader.cc	/^  Material    mat;$/;"	l
matFile	IO/reader/OBJReader.cc	/^      std::string matFile;$/;"	l
matFile	IO/writer/OBJWriter.cc	/^    std::string matFile = path_ + objName_ + ".mat";$/;"	l
matStream	IO/reader/OBJReader.cc	/^      std::fstream matStream( matFile.c_str(), std::ios_base::in );$/;"	p	file:	signature:( matFile.c_str(), std::ios_base::in )
matStream	IO/writer/OBJWriter.cc	/^    std::fstream matStream(matFile.c_str(), std::ios_base::out );$/;"	p	file:	signature:(matFile.c_str(), std::ios_base::out )
material	IO/writer/OBJWriter.cc	/^      int material = -1;$/;"	l
materialA_	IO/writer/OBJWriter.hh	/^  mutable std::vector< OpenMesh::Vec4f > materialA_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
material_	IO/writer/OBJWriter.hh	/^  mutable std::vector< OpenMesh::Vec3f > material_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
materials_	IO/reader/OBJReader.hh	/^  MaterialList materials_;$/;"	m	class:OpenMesh::IO::_OBJReader_	access:private
matname	IO/reader/OBJReader.cc	/^      stream >> matname;$/;"	l
matname	IO/reader/OBJReader.cc	/^  std::string               matname;$/;"	l
max	Geometry/NormalConeT.cc	59;"	d	file:
maxAngle	Geometry/NormalConeT.cc	/^    Scalar maxAngle    = std::max( angle(), centerAngle + _cone.angle());$/;"	l
maxNum_	Utils/RandomNumberGenerator.hh	/^  double maxNum_;$/;"	m	class:OpenMesh::RandomNumberGenerator	access:private
max_angle	Geometry/NormalConeT.cc	/^max_angle(const NormalConeT& _cone) const$/;"	f	class:OpenMesh::NormalConeT	signature:(const NormalConeT& _cone) const
max_angle	Geometry/NormalConeT.cc	/^max_angle(const Vec3& _norm) const$/;"	f	class:OpenMesh::NormalConeT	signature:(const Vec3& _norm) const
max_angle	Geometry/NormalConeT.hh	/^  Scalar max_angle(const NormalConeT&) const;$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const NormalConeT&) const
max_angle	Geometry/NormalConeT.hh	/^  Scalar max_angle(const Vec3&) const;$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const Vec3&) const
merge	Geometry/NormalConeT.cc	/^merge(const NormalConeT& _cone)$/;"	f	class:OpenMesh::NormalConeT	signature:(const NormalConeT& _cone)
merge	Geometry/NormalConeT.hh	/^  void merge(const NormalConeT&);$/;"	p	class:OpenMesh::NormalConeT	access:public	signature:(const NormalConeT&)
mesh_	IO/OMFormat.hh	/^    uchar  mesh_;    \/\/ [T]riangles, [Q]uads, [P]olygonals$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
mesh_	IO/exporter/ExporterT.hh	/^   const Mesh& mesh_;$/;"	m	class:OpenMesh::IO::ExporterT	access:private
mesh_	IO/importer/ImporterT.hh	/^  Mesh& mesh_;$/;"	m	class:OpenMesh::IO::ImporterT	access:private
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
mesh_	Mesh/CirculatorsT.hh	/^  mesh_ptr         mesh_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
mesh_	Mesh/IteratorsT.hh	/^        mesh_ptr mesh_;$/;"	m	class:OpenMesh::Iterators::GenericIteratorT	access:protected
mesh_	Mesh/gen/circulators_template.hh	/^  mesh_ptr         mesh_;$/;"	m	class:CirculatorT	access:private
mesh_	Mesh/gen/iterators_template.hh	/^  mesh_ptr      mesh_;$/;"	m	class:IteratorT	access:private
mesh_	Utils/PropertyManager.hh	/^                MeshT *mesh_;$/;"	m	class:OpenMesh::PropertyManager::Proxy	access:private
mesh_	Utils/PropertyManager.hh	/^        MeshT *mesh_;$/;"	m	class:OpenMesh::PropertyManager	access:private
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef Mesh*                             mesh_ptr;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
mesh_ptr	Mesh/CirculatorsT.hh	/^  typedef const Mesh*                       mesh_ptr;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
mesh_ptr	Mesh/IteratorsT.hh	/^        typedef const Mesh*                     mesh_ptr;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
mesh_ptr	Mesh/gen/circulators_template.hh	/^  typedef Mesh*               mesh_ptr;$/;"	t	class:CirculatorT	access:public
mesh_ptr	Mesh/gen/circulators_template.hh	/^  typedef const Mesh*         mesh_ptr;$/;"	t	class:CirculatorT	access:public
mesh_ptr	Mesh/gen/iterators_template.hh	/^  typedef Mesh*                mesh_ptr;$/;"	t	class:IteratorT	access:public
mesh_ptr	Mesh/gen/iterators_template.hh	/^  typedef const Mesh*          mesh_ptr;$/;"	t	class:IteratorT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef Mesh&                             mesh_ref;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
mesh_ref	Mesh/CirculatorsT.hh	/^  typedef const Mesh&                       mesh_ref;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
mesh_ref	Mesh/IteratorsT.hh	/^        typedef const Mesh&                     mesh_ref;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
mesh_ref	Mesh/gen/circulators_template.hh	/^  typedef Mesh&               mesh_ref;$/;"	t	class:CirculatorT	access:public
mesh_ref	Mesh/gen/circulators_template.hh	/^  typedef const Mesh&         mesh_ref;$/;"	t	class:CirculatorT	access:public
mesh_ref	Mesh/gen/iterators_template.hh	/^  typedef Mesh&                mesh_ref;$/;"	t	class:IteratorT	access:public
mesh_ref	Mesh/gen/iterators_template.hh	/^  typedef const Mesh&          mesh_ref;$/;"	t	class:IteratorT	access:public
min	Geometry/NormalConeT.cc	63;"	d	file:
minAngle	Geometry/NormalConeT.cc	/^    Scalar minAngle    = std::min(-angle(), centerAngle - _cone.angle());$/;"	l
minor_version	IO/OMFormat.hh	/^  inline uint16 minor_version(const uint8 version)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const uint8 version)
mk_version	IO/OMFormat.hh	/^  inline uint8 mk_version(const uint16 major, const uint16 minor)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(const uint16 major, const uint16 minor)
mostream	System/mostream.hh	/^  explicit mostream() : std::ostream(NULL) { init(&streambuffer_); }$/;"	f	class:OpenMesh::mostream	access:public	signature:()
mostream	System/mostream.hh	/^class mostream : public std::ostream$/;"	c	namespace:OpenMesh	inherits:std::ostream
mprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::mprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
mprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::mprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
mprop_stats	Mesh/BaseKernel.hh	/^  void mprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
mprop_stats	Mesh/BaseKernel.hh	/^  void mprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
mproperty	Mesh/BaseKernel.hh	/^  PropertyT<T>& mproperty(MPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph)
mproperty	Mesh/BaseKernel.hh	/^  const PropertyT<T>& mproperty(MPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph) const
mprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  mprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
mprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator mprops_begin() const { return mprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
mprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator mprops_begin() { return mprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
mprops_clear	Mesh/BaseKernel.hh	/^  void mprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
mprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator mprops_end()   const { return mprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
mprops_end	Mesh/BaseKernel.hh	/^  prop_iterator mprops_end()   { return mprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
mprops_resize	Mesh/BaseKernel.hh	/^  void mprops_resize(unsigned int _n) const { mprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
mps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& mps = mprops_.properties();$/;"	l
multiplex	System/mostream.hh	/^  void multiplex()$/;"	f	class:OpenMesh::multiplex_streambuf	access:private	signature:()
multiplex_streambuf	System/mostream.hh	/^  multiplex_streambuf() : enabled_(true) { buffer_.reserve(100); }$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
multiplex_streambuf	System/mostream.hh	/^class multiplex_streambuf : public STREAMBUF$/;"	c	namespace:OpenMesh	inherits:STREAMBUF
multiplex_target	System/mostream.hh	/^  multiplex_target(T& _t) : target_(_t) {}$/;"	f	class:OpenMesh::multiplex_target	access:public	signature:(T& _t)
multiplex_target	System/mostream.hh	/^class multiplex_target : public basic_multiplex_target$/;"	c	namespace:OpenMesh	inherits:basic_multiplex_target
my_bool	Utils/GenProg.hh	/^template <bool b> struct Bool2Type { enum { my_bool = b }; };$/;"	e	enum:OpenMesh::GenProg::Bool2Type::__anon1
my_int	Utils/GenProg.hh	/^template <int i>  struct Int2Type  { enum { my_int = i }; };$/;"	e	enum:OpenMesh::GenProg::Int2Type::__anon2
mystream	System/omstream.cc	/^  static OpenMesh::mostream mystream;$/;"	l	file:
n	IO/reader/OFFReader.cc	/^      _in >> n[0]; _in >> n[1]; _in >> n[2];$/;"	l
n	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         v, n;$/;"	l
n	IO/reader/PLYReader.cc	/^                _in >> n[0];$/;"	l
n	IO/reader/PLYReader.cc	/^                _in >> n[1];$/;"	l
n	IO/reader/PLYReader.cc	/^                _in >> n[2];$/;"	l
n	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f        v, n;  \/\/ Vertex$/;"	l
n	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f v, n;$/;"	l
n	IO/reader/STLReader.cc	/^      strstream >> n[0];$/;"	l
n	IO/reader/STLReader.cc	/^      strstream >> n[1];$/;"	l
n	IO/reader/STLReader.cc	/^      strstream >> n[2];$/;"	l
n	IO/reader/STLReader.cc	/^  OpenMesh::Vec3f            n;$/;"	l
n	IO/writer/OBJWriter.cc	/^  Vec3f v, n;$/;"	l
n	IO/writer/OFFWriter.cc	/^      _out << " " << n[0] << " " << n[1] << " " << n[2];$/;"	l
n	IO/writer/OFFWriter.cc	/^  Vec3f v, n;$/;"	l
n	IO/writer/OMWriter.cc	/^      Vec3f n = _be.normal(FaceHandle(0));$/;"	l
n	IO/writer/OMWriter.cc	/^    Vec3f n = _be.normal(VertexHandle(0));$/;"	l
n	IO/writer/PLYWriter.cc	/^      _out << " " << n[0] << " " << n[1] << " " << n[2];$/;"	l
n	IO/writer/PLYWriter.cc	/^  Vec3f v, n;$/;"	l
n	IO/writer/STLWriter.cc	/^      _out << "facet normal " << n[0] << " " << n[1] << " " << n[2] << "\\nouter loop\\n";$/;"	l
n	IO/writer/STLWriter.cc	/^  Vec3f  a, b, c, n;$/;"	l
n	Mesh/PolyConnectivity.cc	/^  uint                           i, ii, n(_vhs_size), id;$/;"	p	file:	signature:(_vhs_size)
n	Mesh/PolyMeshT.cc	/^  Normal n    = cross(p1p2, p1p0);$/;"	l
n	Mesh/PolyMeshT.cc	/^  Normal n;$/;"	l
n0	Mesh/PolyMeshT.hh	/^    Normal n0, n1, he;$/;"	l
n0	Mesh/PolyMeshT.hh	/^    const Normal& n0 = this->normal(this->face_handle(_heh));$/;"	l
n1	Mesh/PolyMeshT.hh	/^    Normal n0, n1, he;$/;"	l
n1	Mesh/PolyMeshT.hh	/^    const Normal& n1 = this->normal(this->face_handle(this->opposite_halfedge_handle(_heh)));$/;"	l
nF	IO/reader/OFFReader.cc	/^  _in >> nF;$/;"	l
nF	IO/reader/OFFReader.cc	/^  unsigned int            nV, nF, dummy;$/;"	l
nF	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
nF	IO/writer/OFFWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
nF	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
nF	IO/writer/OMWriter.cc	/^  unsigned int i, nV, nF;$/;"	l
nF	IO/writer/PLYWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
nF	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
nF	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces()), nV;$/;"	p	file:	signature:(_be.n_faces())
nF	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces());$/;"	p	file:	signature:(_be.n_faces())
nT	IO/reader/STLReader.cc	/^  size_t nT = read_int(in, swapFlag);$/;"	l
nT	IO/reader/STLReader.cc	/^  unsigned int               i, nT;$/;"	l
nV	IO/reader/OFFReader.cc	/^    _in >> nV;$/;"	l
nV	IO/reader/OFFReader.cc	/^  _in >> nV;$/;"	l
nV	IO/reader/OFFReader.cc	/^  unsigned int            nV, nF, dummy;$/;"	l
nV	IO/reader/OMReader.cc	/^      size_t nV = 0;$/;"	l
nV	IO/reader/PLYReader.cc	/^        _in >> nV;$/;"	l
nV	IO/reader/PLYReader.cc	/^    unsigned int nV;$/;"	l
nV	IO/writer/OBJWriter.cc	/^  unsigned int i, j, nV, nF, idx;$/;"	l
nV	IO/writer/OFFWriter.cc	/^      _out << nV << " ";$/;"	l
nV	IO/writer/OFFWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
nV	IO/writer/OFFWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
nV	IO/writer/OMWriter.cc	/^  unsigned int i, nV, nF;$/;"	l
nV	IO/writer/PLYWriter.cc	/^      _out << nV << " ";$/;"	l
nV	IO/writer/PLYWriter.cc	/^    unsigned int i, nV, nF;$/;"	l
nV	IO/writer/PLYWriter.cc	/^  unsigned int i, j, nV, nF;$/;"	l
nV	IO/writer/STLWriter.cc	/^  unsigned int i, nF(_be.n_faces()), nV;$/;"	l
n_	Geometry/Plane3d.hh	/^  vector_type n_;$/;"	m	class:OpenMesh::VDPM::Plane3d	access:public
n_	Utils/PropertyContainer.hh	/^    size_t n_;$/;"	m	class:OpenMesh::PropertyContainer	access:protected
n_bytes	IO/SR_binary_spec.hh	/^  static size_t n_bytes(size_t _n_elem)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(size_t _n_elem)
n_bytes	IO/reader/OMReader.cc	/^    size_t n_bytes = _bp->size_of(_n_elem);$/;"	l
n_edges	IO/exporter/BaseExporter.hh	/^  virtual size_t n_edges()      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
n_edges	IO/exporter/ExporterT.hh	/^  size_t n_edges()     const { return mesh_.n_edges(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
n_edges	IO/importer/BaseImporter.hh	/^  virtual size_t n_edges()      const = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
n_edges	IO/importer/ImporterT.hh	/^  size_t n_edges()     const { return mesh_.n_edges(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
n_edges	Mesh/ArrayKernel.cc	/^  eprops_resize(n_edges());$/;"	p	file:	signature:()
n_edges	Mesh/ArrayKernel.hh	/^    eprops_resize(n_edges());\/\/TODO:should it be push_back()?$/;"	p	signature:()
n_edges	Mesh/ArrayKernel.hh	/^  unsigned int n_edges()     const { return edges_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
n_edges	Mesh/ArrayKernelT.cc	/^    eprops_resize(n_edges());$/;"	p	file:	signature:()
n_edges	Mesh/BaseKernel.hh	/^    eprops_.resize(n_edges());$/;"	p	signature:()
n_edges	Mesh/BaseKernel.hh	/^  virtual uint n_edges()     const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
n_edges_	IO/OMFormat.hh	/^    uint32 n_edges_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
n_elements	Mesh/ArrayKernel.hh	/^      unsigned int n_elements = kernel_.status_pph(Handle()).is_valid() ?$/;"	l
n_elements	Utils/BaseProperty.hh	/^  virtual size_t       n_elements() const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:() const
n_elements	Utils/Property.hh	/^  virtual size_t       n_elements()   const { return data_.size();  }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
n_elements	Utils/Property.hh	/^  virtual size_t       n_elements()   const { return data_.size(); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
n_eprops	Mesh/BaseKernel.hh	/^  size_t n_eprops(void) const { return eprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
n_faces	IO/exporter/BaseExporter.hh	/^  virtual size_t n_faces()      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
n_faces	IO/exporter/ExporterT.hh	/^  size_t n_faces()     const { return mesh_.n_faces(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
n_faces	IO/importer/BaseImporter.hh	/^  virtual size_t n_faces()      const = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
n_faces	IO/importer/ImporterT.hh	/^  size_t n_faces()     const { return mesh_.n_faces(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
n_faces	IO/reader/OBJReader.cc	/^      size_t n_faces = _bi.n_faces();$/;"	l
n_faces	IO/writer/OFFWriter.cc	/^  _out << _be.n_faces() << " ";$/;"	p	file:	signature:()
n_faces	Mesh/ArrayKernel.cc	/^  fprops_resize(n_faces());$/;"	p	file:	signature:()
n_faces	Mesh/ArrayKernel.hh	/^    fprops_resize(n_faces());$/;"	p	signature:()
n_faces	Mesh/ArrayKernel.hh	/^  unsigned int n_faces()     const { return faces_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
n_faces	Mesh/ArrayKernelT.cc	/^    fprops_resize(n_faces());$/;"	p	file:	signature:()
n_faces	Mesh/ArrayKernelT.cc	/^  int i, i0, i1, nV(n_vertices()), nE(n_edges()), nH(2*n_edges()), nF(n_faces());$/;"	p	file:	signature:()
n_faces	Mesh/BaseKernel.hh	/^    fprops_.resize(n_faces());$/;"	p	signature:()
n_faces	Mesh/BaseKernel.hh	/^  virtual uint n_faces()     const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
n_faces_	IO/OMFormat.hh	/^    uint32 n_faces_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
n_feature_edges	Mesh/PolyMeshT.cc	/^  uint n_feature_edges = 0;$/;"	l
n_fprops	Mesh/BaseKernel.hh	/^  size_t n_fprops(void) const { return fprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
n_halfedges	Mesh/ArrayKernel.cc	/^  hprops_resize(n_halfedges());$/;"	p	file:	signature:()
n_halfedges	Mesh/ArrayKernel.hh	/^    hprops_resize(n_halfedges());\/\/TODO:should it be push_back()?$/;"	p	signature:()
n_halfedges	Mesh/ArrayKernel.hh	/^  unsigned int n_halfedges() const { return 2*edges_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
n_halfedges	Mesh/ArrayKernelT.cc	/^    hprops_resize(n_halfedges());$/;"	p	file:	signature:()
n_halfedges	Mesh/BaseKernel.hh	/^    hprops_.resize(n_halfedges());$/;"	p	signature:()
n_halfedges	Mesh/BaseKernel.hh	/^  virtual uint n_halfedges() const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
n_hprops	Mesh/BaseKernel.hh	/^  size_t n_hprops(void) const { return hprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
n_isolated	Mesh/ArrayKernel.cc	/^  unsigned int n_isolated = 0;$/;"	l
n_mprops	Mesh/BaseKernel.hh	/^  size_t n_mprops(void) const { return mprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
n_vertices	IO/exporter/BaseExporter.hh	/^  virtual size_t n_vertices()   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:() const
n_vertices	IO/exporter/ExporterT.hh	/^  size_t n_vertices()  const { return mesh_.n_vertices(); }$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:() const
n_vertices	IO/importer/BaseImporter.hh	/^  virtual size_t n_vertices()   const = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:() const
n_vertices	IO/importer/ImporterT.hh	/^  size_t n_vertices()  const { return mesh_.n_vertices(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:() const
n_vertices	IO/writer/OBJWriter.cc	/^  _out << "# " << _be.n_vertices() << " vertices, ";$/;"	p	file:	signature:()
n_vertices	IO/writer/OFFWriter.cc	/^  _out << _be.n_vertices() << " ";$/;"	p	file:	signature:()
n_vertices	Mesh/ArrayKernel.cc	/^  vprops_resize(n_vertices());$/;"	p	file:	signature:()
n_vertices	Mesh/ArrayKernel.hh	/^    vprops_resize(n_vertices());\/\/TODO:should it be push_back()?$/;"	p	signature:()
n_vertices	Mesh/ArrayKernel.hh	/^  unsigned int n_vertices()  const { return vertices_.size(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
n_vertices	Mesh/ArrayKernelT.cc	/^    vprops_resize(n_vertices());$/;"	p	file:	signature:()
n_vertices	Mesh/BaseKernel.hh	/^    vprops_.resize(n_vertices());$/;"	p	signature:()
n_vertices	Mesh/BaseKernel.hh	/^  virtual uint n_vertices()  const { return 0; }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
n_vertices_	IO/OMFormat.hh	/^    uint32 n_vertices_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
n_vprops	Mesh/BaseKernel.hh	/^  size_t n_vprops(void) const { return vprops_.size(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(void) const
name	IO/reader/OMReader.cc	/^      omerr() << "Warning! Property " << _bp->name() << " not loaded: " << "Mismatching data sizes!n";$/;"	p	file:	signature:()
name	Utils/BaseProperty.cc	/^  _ostr << "  " << name() << (persistent() ? ", persistent " : "") << "\\n";$/;"	p	file:	signature:()
name	Utils/BaseProperty.hh	/^  const std::string& name() const { return name_; }$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:() const
name_	IO/OMFormat.hh	/^      unsigned name_    : SIZE_NAME;   \/\/ 1 named property, 0 anonymous$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
name_	Utils/BaseProperty.hh	/^  std::string name_;$/;"	m	class:OpenMesh::BaseProperty	access:private
nb_fhs	Mesh/PolyConnectivity.cc	/^  std::set<FaceHandle> nb_fhs;$/;"	l
needed_bits	IO/OMFormat.cc	/^  Chunk::Integer_Size needed_bits( size_t s )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( size_t s )
needed_bits	IO/OMFormat.hh	/^  Chunk::Integer_Size needed_bits( size_t s );$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:( size_t s )
needs_adjust	Mesh/PolyConnectivity.hh	/^               bool needs_adjust;$/;"	m	struct:OpenMesh::PolyConnectivity::AddFaceEdgeInfo	access:public
new_e	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle new_e = new_edge(from_vertex_handle(h0), _vh);$/;"	l
new_edge	Mesh/ArrayKernel.hh	/^  inline HalfedgeHandle new_edge(VertexHandle _start_vh, VertexHandle _end_vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _start_vh, VertexHandle _end_vh)
new_face	Mesh/ArrayKernel.hh	/^  inline FaceHandle new_face()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
new_face	Mesh/ArrayKernel.hh	/^  inline FaceHandle new_face(const Face& _f)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(const Face& _f)
new_face	Mesh/PolyConnectivity.cc	/^  FaceHandle fh(new_face());$/;"	p	file:	signature:()
new_fh	Mesh/PolyConnectivity.cc	/^    FaceHandle new_fh = new_face();$/;"	l
new_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle new_fh = new_face();$/;"	l
new_heh	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle new_heh = new_edge(to_vertex_handle(next_heh), start_vh);$/;"	l
new_vertex	Mesh/ArrayKernel.hh	/^  inline VertexHandle new_vertex()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
new_vertex	Mesh/PolyMeshT.hh	/^    VertexHandle vh(Kernel::new_vertex());$/;"	p	signature:()
new_vertex	Mesh/PolyMeshT.hh	/^  inline VertexHandle new_vertex()$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
new_vertex	Mesh/PolyMeshT.hh	/^  inline VertexHandle new_vertex(const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(const Point& _p)
newfaces	IO/reader/OBJReader.cc	/^        std::vector<FaceHandle> newfaces;$/;"	l
next0	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
next1	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
next_cache_	Mesh/PolyConnectivity.hh	/^       std::vector<std::pair<HalfedgeHandle, HalfedgeHandle> > next_cache_; \/\/ cache for set_next_halfedge and vertex' set_halfedge$/;"	m	class:OpenMesh::PolyConnectivity	access:private
next_cache_count_	Mesh/PolyConnectivity.hh	/^       uint next_cache_count_;$/;"	m	class:OpenMesh::PolyConnectivity	access:private
next_halfedge_handle	Mesh/ArrayKernel.hh	/^      HalfedgeHandle  next_heh(next_halfedge_handle(heh));$/;"	p	signature:(heh)
next_halfedge_handle	Mesh/ArrayKernel.hh	/^      HalfedgeHandle next_heh(next_halfedge_handle(curr_heh));$/;"	p	signature:(curr_heh)
next_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle next_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
next_halfedge_handle	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle next_next_heh(next_halfedge_handle(next_heh));$/;"	p	file:	signature:(next_heh)
next_halfedge_handle	Mesh/PolyConnectivity.cc	/^    collapse_loop(next_halfedge_handle(h1));$/;"	p	file:	signature:(h1)
next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh(next_halfedge_handle(base_heh));$/;"	p	file:	signature:(base_heh)
next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  assert(next_halfedge_handle(_prev_heh) != _next_heh);\/\/this can not be done$/;"	p	file:	signature:(_prev_heh)
next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(hend), hold);$/;"	p	file:	signature:(hend)
next_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(next_halfedge_handle(next_heh), base_heh);$/;"	p	file:	signature:(next_heh)
next_halfedge_handle	Mesh/PolyMeshT.cc	/^    HalfedgeHandle out_heh(next_halfedge_handle(cvih_it));$/;"	p	file:	signature:(cvih_it)
next_halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  next_halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_without_prev	access:private
next_heh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh = next_halfedge_handle(heh0);$/;"	l
next_heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh0 = next_halfedge_handle(heh0);$/;"	l
next_heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_heh1 = next_halfedge_handle(heh1);$/;"	l
next_prev_heh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle next_prev_heh = next_halfedge_handle(_prev_heh);$/;"	l
nh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle nh0 = next_halfedge_handle(h0);$/;"	l
nh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle nh1 = next_halfedge_handle(h1);$/;"	l
nh1	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(opposite_halfedge_handle(new_e), nh1);$/;"	l
norm	Mesh/PolyMeshT.cc	/^  Scalar norm = n.length();$/;"	l
norm	Mesh/PolyMeshT.cc	/^  typename vector_traits<Normal>::value_type norm = n.length();$/;"	l
normal	IO/exporter/BaseExporter.hh	/^  virtual Vec3f  normal(FaceHandle _fh)      const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(FaceHandle _fh) const
normal	IO/exporter/BaseExporter.hh	/^  virtual Vec3f  normal(VertexHandle _vh)   const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
normal	IO/exporter/ExporterT.hh	/^  Vec3f  normal(FaceHandle _fh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(FaceHandle _fh) const
normal	IO/exporter/ExporterT.hh	/^  Vec3f  normal(VertexHandle _vh)   const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
normal	Mesh/AttribKernelT.hh	/^  const Normal& normal(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
normal	Mesh/AttribKernelT.hh	/^  const Normal& normal(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
normal	Mesh/AttribKernelT.hh	/^  const Normal& normal(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
normalize	Geometry/Plane3d.hh	/^    n_.normalize();$/;"	p	signature:()
normals	IO/reader/OBJReader.cc	/^  std::vector<Vec3f>        normals;$/;"	l
o	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  o  = opposite_halfedge_handle(h);$/;"	l
o0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  o0 = opposite_halfedge_handle(h0);$/;"	l
o0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle o0 = opposite_halfedge_handle(h0);$/;"	l
o0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle o0 = halfedge_handle(_eh, 1);$/;"	l
o1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  o1 = opposite_halfedge_handle(h1);$/;"	l
o1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle o1 = next_halfedge_handle(o0);$/;"	l
o1	Mesh/TriConnectivity.cc	/^    HalfedgeHandle o1 = next_halfedge_handle(o0);$/;"	l
o1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  o1 = opposite_halfedge_handle(h1);$/;"	l
o1	Mesh/TriConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(h0), o1);$/;"	l
o2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle o2 = next_halfedge_handle(o1);$/;"	l
objName_	IO/writer/OBJWriter.hh	/^  mutable std::string objName_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
obj_	IO/writer/OMWriter.cc	/^  T& obj_;$/;"	m	struct:OpenMesh::IO::Enabler	file:	access:public
ofs	IO/writer/OMWriter.cc	/^  std::ofstream ofs(_filename.c_str(), std::ios::binary);$/;"	p	file:	signature:(_filename.c_str(), std::ios::binary)
oh	Mesh/TriConnectivity.cc	/^  HalfedgeHandle oh = halfedge_handle(_eh, 1);$/;"	l
ok	IO/IOManager.cc	/^      bool ok = (*it)->read(_filename, _bi, _opt);$/;"	l
ok	IO/IOManager.cc	/^      bool ok = (*it)->read(_is, _bi, _opt);$/;"	l
old_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle old_fh = face_handle(next_prev_heh);$/;"	l
omerr	System/omstream.cc	/^OpenMesh::mostream& omerr() $/;"	f	signature:()
omerr	System/omstream.hh	/^OPENMESHDLLEXPORT OpenMesh::mostream& omerr();$/;"	p	signature:()
omlog	IO/writer/OMWriter.cc	/^    Enabler<mostream> enabler(omlog());$/;"	p	file:	signature:()
omlog	System/omstream.cc	/^OpenMesh::mostream& omlog() $/;"	f	signature:()
omlog	System/omstream.hh	/^OPENMESHDLLEXPORT OpenMesh::mostream& omlog();$/;"	p	signature:()
omout	System/omstream.cc	/^OpenMesh::mostream& omout() $/;"	f	signature:()
omout	System/omstream.hh	/^OPENMESHDLLEXPORT OpenMesh::mostream& omout();$/;"	p	signature:()
on	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  on = next_halfedge_handle(o);$/;"	l
one	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle one, two;$/;"	l
one_	Utils/Endian.cc	/^int Endian::one_ = 1;$/;"	m	class:OpenMesh::Endian	file:
one_	Utils/Endian.hh	/^   static int one_;$/;"	m	class:OpenMesh::Endian	access:private
onlyVertices	IO/writer/OBJWriter.cc	/^  bool onlyVertices =    !_opt.check(Options::VertexTexCoord)$/;"	l
op	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle  op = prev_halfedge_handle(o);$/;"	l
operator !=	IO/Options.hh	/^  bool operator != (const value_type _rhs) const$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstFaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const ConstVertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const FaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT& _rhs) const
operator !=	Mesh/CirculatorsT.hh	/^  bool operator!=(const VertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT& _rhs) const
operator !=	Mesh/Handles.hh	/^  bool operator!=(const BaseHandle& _rhs) const { $/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(const BaseHandle& _rhs) const
operator !=	Mesh/IteratorsT.hh	/^        bool operator!=(const GenericIteratorT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:(const GenericIteratorT& _rhs) const
operator !=	Mesh/gen/circulators_template.hh	/^  bool operator!=(const CirculatorT& _rhs) const {$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT& _rhs) const
operator !=	Mesh/gen/iterators_template.hh	/^  bool operator!=(const IteratorT& _rhs) const $/;"	f	class:IteratorT	access:public	signature:(const IteratorT& _rhs) const
operator %	Geometry/VectorT.hh	/^VectorT<double,3>::operator%(const VectorT<double,3>& _rhs) const$/;"	f	class:OpenMesh::VectorT	signature:(const VectorT<double,3>& _rhs) const
operator %	Geometry/VectorT.hh	/^VectorT<float,3>::operator%(const VectorT<float,3>& _rhs) const $/;"	f	class:OpenMesh::VectorT	signature:(const VectorT<float,3>& _rhs) const
operator &&	IO/Options.hh	/^  bool operator && (const value_type _rhs) const;$/;"	p	class:OpenMesh::IO::Options	access:private	signature:(const value_type _rhs) const
operator ()	Geometry/QuadricT.hh	/^  Scalar operator()(const _Vec& _v) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Vec& _v) const
operator ()	IO/SR_binary_spec.hh	/^  size_t operator () ( size_t _v1, T& _s2 )$/;"	f	struct:OpenMesh::IO::FunctorRestore	access:public	signature:( size_t _v1, T& _s2 )
operator ()	IO/SR_binary_spec.hh	/^  size_t operator () ( size_t _v1, const T& _s2 )$/;"	f	struct:OpenMesh::IO::FunctorStore	access:public	signature:( size_t _v1, const T& _s2 )
operator ()	IO/reader/STLReader.cc	/^  bool operator()( const Vec3f& _v0, const Vec3f& _v1 ) const$/;"	f	class:OpenMesh::IO::CmpVec	access:public	signature:( const Vec3f& _v0, const Vec3f& _v1 ) const
operator ()	Utils/Property.hh	/^    size_t operator () ( size_t _b, const T& _v )$/;"	f	struct:OpenMesh::PropertyT::plus	access:public	signature:( size_t _b, const T& _v )
operator ()	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->clear(); }$/;"	f	struct:OpenMesh::ClearAll	access:public	signature:(BaseProperty* _p) const
operator ()	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->swap(i0_, i1_); }$/;"	f	struct:OpenMesh::Swap	access:public	signature:(BaseProperty* _p) const
operator ()	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) delete _p; _p=NULL; }$/;"	f	struct:OpenMesh::Delete	access:public	signature:(BaseProperty* _p) const
operator *	Geometry/QuadricT.hh	/^  _Vec4 operator*(const _Vec4& _v) const$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Vec4& _v) const
operator *	Geometry/VectorT.hh	/^inline VectorT<Scalar,N> operator*(Scalar _s, const VectorT<Scalar,N>& _v) {$/;"	f	namespace:OpenMesh	signature:(Scalar _s, const VectorT<Scalar,N>& _v)
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const { $/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
operator *	Mesh/CirculatorsT.hh	/^  reference operator*() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
operator *	Mesh/IteratorsT.hh	/^        reference operator*() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
operator *	Mesh/gen/circulators_template.hh	/^  reference operator*() const { $/;"	f	class:CirculatorT	access:public	signature:() const
operator *	Mesh/gen/iterators_template.hh	/^  reference operator*()  const { return mesh_->deref(hnd_); }$/;"	f	class:IteratorT	access:public	signature:() const
operator *	Utils/PropertyManager.hh	/^        inline PROPTYPE &operator* () {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:()
operator *	Utils/PropertyManager.hh	/^        inline const PROPTYPE &operator* () const {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:() const
operator *=	Geometry/QuadricT.hh	/^  QuadricT<Scalar>& operator*=( Scalar _s)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:( Scalar _s)
operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  FaceFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  FaceVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  VertexFaceIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:()
operator ++	Mesh/CirculatorsT.hh	/^  VertexVertexIterT& operator++() { $/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:()
operator ++	Mesh/IteratorsT.hh	/^        GenericIteratorT& operator++() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
operator ++	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator++() { $/;"	f	class:CirculatorT	access:public	signature:()
operator ++	Mesh/gen/iterators_template.hh	/^  IteratorT& operator++() $/;"	f	class:IteratorT	access:public	signature:()
operator +=	Geometry/QuadricT.hh	/^  QuadricT<Scalar>& operator+=( const QuadricT<Scalar>& _q )$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:( const QuadricT<Scalar>& _q )
operator +=	IO/Options.hh	/^  Options& operator += ( const value_type _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs )
operator --	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  FaceFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  FaceVertexIterT& operator--() {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  VertexFaceIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:()
operator --	Mesh/CirculatorsT.hh	/^  VertexVertexIterT& operator--() { $/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:()
operator --	Mesh/IteratorsT.hh	/^        GenericIteratorT& operator--() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:()
operator --	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator--() { $/;"	f	class:CirculatorT	access:public	signature:()
operator --	Mesh/gen/iterators_template.hh	/^  IteratorT& operator--() $/;"	f	class:IteratorT	access:public	signature:()
operator -=	IO/Options.hh	/^  Options& operator -= ( const value_type _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs )
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
operator ->	Mesh/CirculatorsT.hh	/^  pointer operator->() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
operator ->	Mesh/IteratorsT.hh	/^        pointer operator->() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
operator ->	Mesh/gen/circulators_template.hh	/^  pointer operator->() const { $/;"	f	class:CirculatorT	access:public	signature:() const
operator ->	Mesh/gen/iterators_template.hh	/^  pointer   operator->() const { return &(mesh_->deref(hnd_)); }$/;"	f	class:IteratorT	access:public	signature:() const
operator <	Mesh/Handles.hh	/^  bool operator<(const BaseHandle& _rhs) const { $/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(const BaseHandle& _rhs) const
operator <<	IO/OMFormat.cc	/^  operator << (Chunk::Header& hdr, const uint16 val)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Header& hdr, const uint16 val)
operator <<	IO/OMFormat.cc	/^  operator << (uint16& val, const Chunk::Header& hdr)$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:(uint16& val, const Chunk::Header& hdr)
operator <<	IO/OMFormat.cc	/^  std::ostream& operator << ( std::ostream& _os, const Chunk::Header& _c )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Chunk::Header& _c )
operator <<	IO/OMFormat.cc	/^  std::ostream& operator << ( std::ostream& _os, const Header& _h )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Header& _h )
operator <<	IO/OMFormat.hh	/^  Chunk::Header& operator << (Chunk::Header& hdr, const uint16 val);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(Chunk::Header& hdr, const uint16 val)
operator <<	IO/OMFormat.hh	/^  std::ostream& operator << ( std::ostream& _os, const Chunk::Header& _c );$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Chunk::Header& _c )
operator <<	IO/OMFormat.hh	/^  std::ostream& operator << ( std::ostream& _os, const Header& _h );$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:( std::ostream& _os, const Header& _h )
operator <<	IO/OMFormat.hh	/^  uint16& operator << (uint16& val, const Chunk::Header& hdr);$/;"	p	namespace:OpenMesh::IO::OMFormat	signature:(uint16& val, const Chunk::Header& hdr)
operator <<	Mesh/Handles.hh	/^inline std::ostream& operator<<(std::ostream& _os, const BaseHandle& _hnd) $/;"	f	namespace:OpenMesh	signature:(std::ostream& _os, const BaseHandle& _hnd)
operator <<	System/mostream.hh	/^  virtual void operator<<(const std::string& _s) = 0;$/;"	p	class:OpenMesh::basic_multiplex_target	access:public	signature:(const std::string& _s)
operator <<	System/mostream.hh	/^  virtual void operator<<(const std::string& _s) { target_ << _s; }$/;"	f	class:OpenMesh::multiplex_target	access:public	signature:(const std::string& _s)
operator =	Geometry/VectorT_inc.hh	/^  inline vector_type& operator=(const VectorT<otherScalarType,DIM>& _rhs) {$/;"	f	class:CLASSNAME	access:public	signature:(const VectorT<otherScalarType,DIM>& _rhs)
operator =	Geometry/VectorT_inc.hh	/^  inline vector_type& operator=(const vector_type& _rhs) {$/;"	f	class:CLASSNAME	access:public	signature:(const vector_type& _rhs)
operator =	IO/OMFormat.hh	/^	  std::string::operator = ( _rhs );$/;"	p	class:OpenMesh::IO::OMFormat::Chunk::PropertyName::std::string	signature:( _rhs )
operator =	IO/OMFormat.hh	/^	  this->std::string::operator = ( _rhs.substr(0, size_max) );$/;"	p	class:OpenMesh::IO::OMFormat::Chunk::PropertyName::std::string	signature:( _rhs.substr(0, size_max) )
operator =	IO/OMFormat.hh	/^      PropertyName& operator = ( const std::string& _rhs )$/;"	f	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public	signature:( const std::string& _rhs )
operator =	IO/Options.hh	/^  Options& operator = ( const Options& _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const Options& _rhs )
operator =	IO/Options.hh	/^  Options& operator = ( const value_type _rhs )$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs )
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator=(const ConstFaceEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceEdgeIterT& operator=(const FaceEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const FaceEdgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator=(const ConstFaceFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceFaceIterT& operator=(const FaceFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const FaceFaceIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator=(const ConstFaceHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceHalfedgeIterT& operator=(const FaceHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator=(const ConstFaceVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstFaceVertexIterT& operator=(const FaceVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const FaceVertexIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator=(const ConstVertexEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexEdgeIterT& operator=(const VertexEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const VertexEdgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator=(const ConstVertexFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexFaceIterT& operator=(const VertexFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const VertexFaceIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator=(const ConstVertexIHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexIHalfedgeIterT& operator=(const VertexIHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator=(const ConstVertexOHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexOHalfedgeIterT& operator=(const VertexOHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator=(const ConstVertexVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  ConstVertexVertexIterT& operator=(const VertexVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const VertexVertexIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  FaceEdgeIterT& operator=(const FaceEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  FaceFaceIterT& operator=(const FaceFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  FaceHalfedgeIterT& operator=(const FaceHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  FaceVertexIterT& operator=(const FaceVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  VertexEdgeIterT& operator=(const VertexEdgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  VertexFaceIterT& operator=(const VertexFaceIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  VertexIHalfedgeIterT& operator=(const VertexIHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  VertexOHalfedgeIterT& operator=(const VertexOHalfedgeIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT<Mesh>& _rhs)
operator =	Mesh/CirculatorsT.hh	/^  VertexVertexIterT& operator=(const VertexVertexIterT<Mesh>& _rhs)$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT<Mesh>& _rhs)
operator =	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator=(const CirculatorT<Mesh>& _rhs)$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT<Mesh>& _rhs)
operator =	Mesh/gen/circulators_template.hh	/^  CirculatorT& operator=(const NonConstCircT<Mesh>& _rhs)$/;"	f	class:CirculatorT	access:public	signature:(const NonConstCircT<Mesh>& _rhs)
operator =	Mesh/gen/iterators_template.hh	/^  IteratorT& operator=(const IteratorT<Mesh>& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const IteratorT<Mesh>& _rhs)
operator =	Mesh/gen/iterators_template.hh	/^  IteratorT& operator=(const NonConstIterT<Mesh>& _rhs) $/;"	f	class:IteratorT	access:public	signature:(const NonConstIterT<Mesh>& _rhs)
operator =	Utils/Noncopyable.hh	/^  const Noncopyable& operator=( const Noncopyable& );$/;"	p	class:OpenMesh::Utils::Noncopyable	access:private	signature:( const Noncopyable& )
operator =	Utils/PropertyContainer.hh	/^  PropertyContainer& operator=(const PropertyContainer& _rhs)$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(const PropertyContainer& _rhs)
operator =	Utils/PropertyManager.hh	/^        PropertyManager &operator=(PropertyManager &&rhs) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(PropertyManager &&rhs)
operator =	Utils/PropertyManager.hh	/^        PropertyManager &operator=(Proxy p) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(Proxy p)
operator =	Utils/PropertyManager.hh	/^        const PropertyManager& operator=(const PropertyManager&);$/;"	p	class:OpenMesh::PropertyManager	access:private	signature:(const PropertyManager&)
operator =	Utils/SingletonT.hh	/^  SingletonT& operator=(const SingletonT&);$/;"	p	class:OpenMesh::SingletonT	access:private	signature:(const SingletonT&)
operator ==	IO/Options.hh	/^  bool operator == (const value_type _rhs) const$/;"	f	class:OpenMesh::IO::Options	access:public	signature:(const value_type _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:(const ConstFaceEdgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:(const ConstFaceFaceIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:(const ConstFaceHalfedgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstFaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:(const ConstFaceVertexIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:(const ConstVertexEdgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:(const ConstVertexFaceIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:(const ConstVertexIHalfedgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:(const ConstVertexOHalfedgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const ConstVertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:(const ConstVertexVertexIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:(const FaceEdgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:(const FaceFaceIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:(const FaceHalfedgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const FaceVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:(const FaceVertexIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexEdgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:(const VertexEdgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexFaceIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:(const VertexFaceIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexIHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:(const VertexIHalfedgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexOHalfedgeIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:(const VertexOHalfedgeIterT& _rhs) const
operator ==	Mesh/CirculatorsT.hh	/^  bool operator==(const VertexVertexIterT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:(const VertexVertexIterT& _rhs) const
operator ==	Mesh/Handles.hh	/^  bool operator==(const BaseHandle& _rhs) const { $/;"	f	class:OpenMesh::BaseHandle	access:public	signature:(const BaseHandle& _rhs) const
operator ==	Mesh/IteratorsT.hh	/^        bool operator==(const GenericIteratorT& _rhs) const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:(const GenericIteratorT& _rhs) const
operator ==	Mesh/gen/circulators_template.hh	/^  bool operator==(const CirculatorT& _rhs) const {$/;"	f	class:CirculatorT	access:public	signature:(const CirculatorT& _rhs) const
operator ==	Mesh/gen/iterators_template.hh	/^  bool operator==(const IteratorT& _rhs) const $/;"	f	class:IteratorT	access:public	signature:(const IteratorT& _rhs) const
operator Proxy	Utils/PropertyManager.hh	/^        operator Proxy() {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:()
operator TargetHandle	Mesh/gen/circulators_template.hh	/^  operator TargetHandle() const {$/;"	f	class:CirculatorT	access:public	signature:() const
operator []	Geometry/VectorT_inc.hh	/^  inline Scalar& operator[](size_t _i) {$/;"	f	class:CLASSNAME	access:public	signature:(size_t _i)
operator []	Utils/AutoPropertyHandleT.hh	/^  inline Value&                             operator [] (_Handle _hnd)$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(_Handle _hnd)
operator []	Utils/AutoPropertyHandleT.hh	/^  inline const Value&                       operator [] (_Handle _hnd) const$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:(_Handle _hnd) const
operator []	Utils/Property.hh	/^  const_reference operator[](int _idx) const {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx) const
operator []	Utils/Property.hh	/^  const_reference operator[](int _idx) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx) const
operator []	Utils/Property.hh	/^  reference operator[](int _idx) {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx)
operator []	Utils/Property.hh	/^  reference operator[](int _idx)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(int _idx)
operator []	Utils/PropertyManager.hh	/^        inline typename PROPTYPE::const_reference operator[] (const HandleType &handle) const {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(const HandleType &handle) const
operator []	Utils/PropertyManager.hh	/^        inline typename PROPTYPE::reference operator[] (const HandleType &handle) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(const HandleType &handle)
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const { $/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
operator bool	Mesh/CirculatorsT.hh	/^  operator bool() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
operator bool	Mesh/gen/circulators_template.hh	/^  operator bool() const { $/;"	f	class:CirculatorT	access:public	signature:() const
operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public	signature:() const
operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public	signature:() const
operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceEdgeIterT	access:public	signature:() const
operator typename Mesh::EdgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::EdgeHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexEdgeIterT	access:public	signature:() const
operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public	signature:() const
operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public	signature:() const
operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceFaceIterT	access:public	signature:() const
operator typename Mesh::FaceHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::FaceHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexFaceIterT	access:public	signature:() const
operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public	signature:() const
operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public	signature:() const
operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public	signature:() const
operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public	signature:() const
operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public	signature:() const
operator typename Mesh::HalfedgeHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::HalfedgeHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public	signature:() const
operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public	signature:() const
operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public	signature:() const
operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::FaceVertexIterT	access:public	signature:() const
operator typename Mesh::VertexHandle	Mesh/CirculatorsT.hh	/^  operator typename Mesh::VertexHandle() const {$/;"	f	class:OpenMesh::Iterators::VertexVertexIterT	access:public	signature:() const
operator value_handle	Mesh/IteratorsT.hh	/^        operator value_handle() const {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:public	signature:() const
operator value_handle	Mesh/gen/iterators_template.hh	/^  operator value_handle() const { return hnd_; }$/;"	f	class:IteratorT	access:public	signature:() const
operator value_type	IO/Options.hh	/^  operator value_type ()     const { return flags_; }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
opposite_face_handle	Mesh/PolyConnectivity.hh	/^  inline FaceHandle opposite_face_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(HalfedgeHandle _heh) const
opposite_halfedge_handle	Mesh/ArrayKernel.hh	/^      HalfedgeHandle curr_heh(opposite_halfedge_handle(_heh));$/;"	p	signature:(_heh)
opposite_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle opposite_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^    set_boundary(opposite_halfedge_handle(new_e));$/;"	p	file:	signature:(new_e)
opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^    set_face_handle(opposite_halfedge_handle(new_e), face_handle(h1));$/;"	p	file:	signature:(new_e)
opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle v1v0(opposite_halfedge_handle(v0v1));$/;"	p	file:	signature:(v0v1)
opposite_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(opposite_halfedge_handle(new_e), nh1);$/;"	p	file:	signature:(new_e)
opposite_halfedge_handle	Mesh/TriConnectivity.cc	/^  HalfedgeHandle  o0(opposite_halfedge_handle(h0));$/;"	p	file:	signature:(h0)
opposite_he_opposite_vh	Mesh/TriConnectivity.hh	/^  VertexHandle opposite_he_opposite_vh(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(HalfedgeHandle _heh) const
opposite_vh	Mesh/TriConnectivity.hh	/^  inline VertexHandle opposite_vh(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(HalfedgeHandle _heh) const
opt	IO/MeshIO.hh	/^  Options opt;$/;"	l
options_	IO/reader/OFFReader.hh	/^  mutable Options options_;$/;"	m	class:OpenMesh::IO::_OFFReader_	access:private
options_	IO/reader/PLYReader.hh	/^  mutable Options options_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
options_	IO/writer/PLYWriter.hh	/^  mutable Options options_;$/;"	m	class:OpenMesh::IO::_PLYWriter_	access:private
os_	IO/SR_binary_spec.hh	/^  std::ostream& os_;$/;"	m	struct:OpenMesh::IO::FunctorStore	access:public
oss	Utils/PropertyManager.hh	/^                    std::ostringstream oss;$/;"	l
out	IO/writer/OBJWriter.cc	/^  std::fstream out(_filename.c_str(), std::ios_base::out );$/;"	p	file:	signature:(_filename.c_str(), std::ios_base::out )
out	IO/writer/PLYWriter.cc	/^  std::fstream out(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out$/;"	p	file:	signature:(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out : std::ios_base::out) )
out	IO/writer/STLWriter.cc	/^  FILE* out = fopen(_filename.c_str(), "w");$/;"	l
out	IO/writer/STLWriter.cc	/^  FILE* out = fopen(_filename.c_str(), "wb");$/;"	l
out	IO/writer/STLWriter.cc	/^  std::fstream out(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out$/;"	p	file:	signature:(_filename.c_str(), (_opt.check(Options::Binary) ? std::ios_base::binary | std::ios_base::out : std::ios_base::out) )
out_he_vec	Mesh/PolyMeshT.cc	/^    Normal out_he_vec;$/;"	l
outer_next	Mesh/PolyConnectivity.cc	/^                                 outer_next, outer_prev,$/;"	l
outer_prev	Mesh/PolyConnectivity.cc	/^                                 outer_next, outer_prev,$/;"	l
overflow	System/mostream.hh	/^  int_type overflow(int_type _c = multiplex_streambuf::traits_type::eof())$/;"	f	class:OpenMesh::multiplex_streambuf	access:protected	signature:(int_type _c = multiplex_streambuf::traits_type::eof())
own_property	Utils/AutoPropertyHandleT.hh	/^  inline bool                               own_property() const$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:() const
own_property_	Utils/AutoPropertyHandleT.hh	/^  bool                                      own_property_;\/\/ref counting?$/;"	m	class:OpenMesh::AutoPropertyHandleT	access:protected
p	IO/importer/ImporterT.hh	/^          Point p = mesh_.point(vhandles[j]);$/;"	l
p	IO/reader/OFFReader.cc	/^  char line[LINE_LEN], *p;$/;"	l
p	Utils/Property.hh	/^    PropertyT<T>* p = new PropertyT<T>( *this );$/;"	l
p	Utils/Property.hh	/^    PropertyT<bool>* p = new PropertyT<bool>( *this );$/;"	l
p	Utils/Property.hh	/^    PropertyT<value_type>* p = new PropertyT<value_type>( *this );$/;"	l
p	Utils/PropertyManager.hh	/^            Proxy p(mesh_, prop_, retain_);$/;"	p	signature:(mesh_, prop_, retain_)
p0	Mesh/PolyMeshT.cc	/^  Point p0 = this->point(fv_it);$/;"	l
p0	Mesh/TriMeshT.cc	/^  const Point& p0(this->point(fv_it));  ++fv_it;$/;"	p	file:	signature:(this->point(fv_it))
p0i	Mesh/PolyMeshT.cc	/^  Point p0i = p0; \/\/save point of vertex 0$/;"	l
p1	Mesh/PolyMeshT.cc	/^  Point p1 = this->point(fv_it);$/;"	l
p1	Mesh/TriMeshT.cc	/^  const Point& p1(this->point(fv_it));  ++fv_it;$/;"	p	file:	signature:(this->point(fv_it))
p1i	Mesh/PolyMeshT.cc	/^  Point p1i = p1; \/\/save point of vertex 1$/;"	l
p2	Mesh/PolyMeshT.cc	/^  Point p2;$/;"	l
p2	Mesh/TriMeshT.cc	/^  const Point& p2(this->point(fv_it));$/;"	p	file:	signature:(this->point(fv_it))
pInstance__	Utils/SingletonT.cc	/^T* SingletonT<T>::pInstance__ = 0;$/;"	m	class:OpenMesh::SingletonT	file:
pInstance__	Utils/SingletonT.hh	/^  static T*     pInstance__;$/;"	m	class:OpenMesh::SingletonT	access:private
p_end	Utils/PropertyContainer.hh	/^    Properties::iterator p_it=properties_.begin(), p_end=properties_.end();$/;"	l
p_it	Utils/PropertyContainer.hh	/^    Properties::const_iterator p_it = properties_.begin();$/;"	l
p_it	Utils/PropertyContainer.hh	/^    Properties::iterator p_it=properties_.begin(), p_end=properties_.end();$/;"	l
patch_end	Mesh/PolyConnectivity.cc	/^                                 patch_start, patch_end;$/;"	l
patch_start	Mesh/PolyConnectivity.cc	/^                                 patch_start, patch_end;$/;"	l
path_	IO/reader/OBJReader.hh	/^  std::string path_;$/;"	m	class:OpenMesh::IO::_OBJReader_	access:private
path_	IO/writer/OBJWriter.hh	/^  mutable std::string path_;$/;"	m	class:OpenMesh::IO::_OBJWriter_	access:private
persistent	Utils/BaseProperty.hh	/^  bool persistent(void) const { return persistent_; }$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(void) const
persistent_	Utils/BaseProperty.hh	/^  bool        persistent_;$/;"	m	class:OpenMesh::BaseProperty	access:private
ph0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle ph0 = prev_halfedge_handle(h0);$/;"	l
ph1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle ph1 = prev_halfedge_handle(h1);$/;"	l
plus	Utils/Property.hh	/^  struct plus {$/;"	s	class:OpenMesh::PropertyT	access:public
pm	Utils/PropertyManager.hh	/^            PropertyManager pm(mesh, propname, mesh.get_property_handle(dummy_prop, propname));$/;"	p	signature:(mesh, propname, mesh.get_property_handle(dummy_prop, propname))
pn	IO/reader/OMReader.cc	/^      OMFormat::Chunk::PropertyName pn;$/;"	l
point	IO/exporter/BaseExporter.hh	/^  virtual Vec3f  point(VertexHandle _vh)    const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
point	IO/exporter/ExporterT.hh	/^  Vec3f  point(VertexHandle _vh)    const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
point	Mesh/AttribKernelT.hh	/^  Point& point(VertexHandle _vh)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh)
point	Mesh/AttribKernelT.hh	/^  const Point& point(VertexHandle _vh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face*        pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge*    pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge*    pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge*    pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex*      pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex*      pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge*              pointer;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face*              pointer;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge*          pointer;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
pointer	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex*            pointer;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
pointer	Mesh/IteratorsT.hh	/^        typedef const value_type*               pointer;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
pointer	Mesh/gen/circulators_template.hh	/^  typedef TargetType*         pointer;$/;"	t	class:CirculatorT	access:public
pointer	Mesh/gen/circulators_template.hh	/^  typedef const TargetType*   pointer;$/;"	t	class:CirculatorT	access:public
pointer	Mesh/gen/iterators_template.hh	/^  typedef const value_type*    pointer;$/;"	t	class:IteratorT	access:public
pointer	Mesh/gen/iterators_template.hh	/^  typedef value_type*          pointer;$/;"	t	class:IteratorT	access:public
points	Mesh/AttribKernelT.hh	/^  const Point* points() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
points_	Mesh/AttribKernelT.hh	/^  PointsPropertyHandle                      points_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
points_pph	Mesh/AttribKernelT.hh	/^  PointsPropertyHandle                      points_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
pop_back	Mesh/ArrayKernel.hh	/^      *_it.pop_back();$/;"	p	signature:()
pop_bit_mask	Mesh/ArrayKernel.hh	/^  unsigned int                              pop_bit_mask(Handle _hnd)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(Handle _hnd)
pos	IO/reader/BaseReader.cc	/^  std::string::size_type pos(_filename.rfind("."));$/;"	p	file:	signature:(_filename.rfind(Ó))
pos	IO/reader/BaseReader.cc	/^  std::string::size_type pos(_fname.rfind("."));$/;"	p	file:	signature:(_fname.rfind(Ó))
pos	IO/writer/BaseWriter.cc	/^  std::string::size_type pos(_filename.rfind("."));$/;"	p	file:	signature:(_filename.rfind(Ó))
positive_angle	Geometry/MathDefs.hh	/^inline T positive_angle(T _angle)$/;"	f	namespace:OpenMesh	signature:(T _angle)
positive_angle	Geometry/MathDefs.hh	/^inline T positive_angle(T _cos_angle, T _sin_angle)$/;"	f	namespace:OpenMesh	signature:(T _cos_angle, T _sin_angle)
precision	IO/writer/OBJWriter.cc	/^  _out.precision(_precision);$/;"	p	file:	signature:(_precision)
precision	IO/writer/OBJWriter.cc	/^  out.precision(_precision);$/;"	p	file:	signature:(_precision)
precision	IO/writer/OFFWriter.cc	/^    _os.precision(_precision);$/;"	p	file:	signature:(_precision)
precision	IO/writer/OFFWriter.cc	/^    out.precision(_precision);$/;"	p	file:	signature:(_precision)
precision	IO/writer/PLYWriter.cc	/^    _os.precision(_precision);$/;"	p	file:	signature:(_precision)
precision	IO/writer/PLYWriter.cc	/^    out.precision(_precision);$/;"	p	file:	signature:(_precision)
precision	IO/writer/STLWriter.cc	/^  _out.precision(_precision);$/;"	p	file:	signature:(_precision)
prepare	IO/IOManager.cc	/^      _bi.prepare();$/;"	p	file:	signature:()
prepare	IO/importer/BaseImporter.hh	/^  virtual void prepare()  {}$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
prepare	IO/importer/ImporterT.hh	/^  void prepare() { failed_faces_.clear(); }$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:()
prev0	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
prev1	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle h0, h1, next0, next1, prev0, prev1;$/;"	l
prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle prev_halfedge_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle prev_halfedge_handle(HalfedgeHandle _heh, GenProg::False) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, GenProg::False) const
prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  HalfedgeHandle prev_halfedge_handle(HalfedgeHandle _heh, GenProg::True) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, GenProg::True) const
prev_halfedge_handle	Mesh/PolyConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(o0), h1);$/;"	p	file:	signature:(o0)
prev_halfedge_handle	Mesh/TriConnectivity.cc	/^    set_next_halfedge_handle(prev_halfedge_handle(h0), t1);$/;"	p	file:	signature:(h0)
prev_halfedge_handle	Mesh/TriConnectivity.cc	/^  set_next_halfedge_handle(prev_halfedge_handle(h0), o1);$/;"	p	file:	signature:(h0)
prev_halfedge_handle_	Mesh/ArrayItems.hh	/^    HalfedgeHandle  prev_halfedge_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_with_prev	access:private
prev_heh0	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle prev_heh0 = prev_halfedge_handle(heh0);$/;"	l
prev_heh1	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle prev_heh1 = prev_halfedge_handle(heh1);$/;"	l
prev_next_heh	Mesh/PolyConnectivity.cc	/^  HalfedgeHandle prev_next_heh = prev_halfedge_handle(_next_heh);$/;"	l
proj_weight	Geometry/LoopSchemeMaskT.hh	/^    double proj_weight = compute_proj_weight(_valence);$/;"	l
proj_weight	Geometry/LoopSchemeMaskT.hh	/^  inline Scalar                             proj_weight(uint _valence) const$/;"	f	class:OpenMesh::LoopSchemeMaskT	access:public	signature:(uint _valence) const
proj_weights_	Geometry/LoopSchemeMaskT.hh	/^  Scalar                                    proj_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
prop	IO/writer/OMWriter.cc	/^  BaseKernel::const_prop_iterator prop;$/;"	l
prop_	Utils/PropertyManager.hh	/^                PROPTYPE prop_;$/;"	m	class:OpenMesh::PropertyManager::Proxy	access:private
prop_	Utils/PropertyManager.hh	/^        PROPTYPE prop_;$/;"	m	class:OpenMesh::PropertyManager	access:private
prop_iterator	Mesh/BaseKernel.hh	/^  typedef PropertyContainer::iterator prop_iterator;$/;"	t	class:OpenMesh::BaseKernel	access:public
properties	Utils/PropertyContainer.hh	/^  const Properties& properties() const { return properties_; }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:() const
properties_	Utils/PropertyContainer.hh	/^  Properties   properties_;$/;"	m	namespace:OpenMesh
property	IO/importer/ImporterT.hh	/^      mesh_.property(property)[_id] = _name;$/;"	p	signature:(property)
property	IO/importer/ImporterT.hh	/^    OpenMesh::MPropHandleT< std::map< int, std::string > > property;$/;"	l
property	Mesh/BaseKernel.hh	/^      eprops_.property(_ph)[_eh_from.idx()] = eprops_.property(_ph)[_eh_from.idx()];$/;"	p	signature:(_ph)
property	Mesh/BaseKernel.hh	/^      fprops_.property(_ph)[_fh_from.idx()] = fprops_.property(_ph)[_fh_from.idx()];$/;"	p	signature:(_ph)
property	Mesh/BaseKernel.hh	/^      hprops_.property(_ph)[_hh_from.idx()] = hprops_.property(_ph)[_hh_from.idx()];$/;"	p	signature:(_ph)
property	Mesh/BaseKernel.hh	/^      vprops_.property(_ph)[_vh_from.idx()] = vprops_.property(_ph)[_vh_from.idx()];$/;"	p	signature:(_ph)
property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(EPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph)
property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(FPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph)
property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(HPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph)
property	Mesh/BaseKernel.hh	/^  PropertyT<T>& property(VPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph)
property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(EPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph) const
property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(FPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph) const
property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(HPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph) const
property	Mesh/BaseKernel.hh	/^  const PropertyT<T>& property(VPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph) const
property	Mesh/BaseKernel.hh	/^  property(EPropHandleT<T> _ph, EdgeHandle _eh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph, EdgeHandle _eh) const
property	Mesh/BaseKernel.hh	/^  property(EPropHandleT<T> _ph, EdgeHandle _eh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T> _ph, EdgeHandle _eh)
property	Mesh/BaseKernel.hh	/^  property(FPropHandleT<T> _ph, FaceHandle _fh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph, FaceHandle _fh) const
property	Mesh/BaseKernel.hh	/^  property(FPropHandleT<T> _ph, FaceHandle _fh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T> _ph, FaceHandle _fh)
property	Mesh/BaseKernel.hh	/^  property(HPropHandleT<T> _ph, HalfedgeHandle _hh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph, HalfedgeHandle _hh) const
property	Mesh/BaseKernel.hh	/^  property(HPropHandleT<T> _ph, HalfedgeHandle _hh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T> _ph, HalfedgeHandle _hh)
property	Mesh/BaseKernel.hh	/^  property(MPropHandleT<T> _ph) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph) const
property	Mesh/BaseKernel.hh	/^  property(MPropHandleT<T> _ph) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T> _ph)
property	Mesh/BaseKernel.hh	/^  property(VPropHandleT<T> _ph, VertexHandle _vh) const {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph, VertexHandle _vh) const
property	Mesh/BaseKernel.hh	/^  property(VPropHandleT<T> _ph, VertexHandle _vh) {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T> _ph, VertexHandle _vh)
property	Utils/PropertyContainer.hh	/^  BaseProperty* property( const std::string& _name ) const$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:( const std::string& _name ) const
property	Utils/PropertyContainer.hh	/^  template <class T> PropertyT<T>& property(BasePropHandleT<T> _h)$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(BasePropHandleT<T> _h)
property	Utils/PropertyContainer.hh	/^  template <class T> const PropertyT<T>& property(BasePropHandleT<T> _h) const$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(BasePropHandleT<T> _h) const
propertyExists	Utils/PropertyManager.hh	/^        static bool propertyExists(MeshT &mesh, const char *propname) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(MeshT &mesh, const char *propname)
propertyName	IO/reader/PLYReader.cc	/^                    _is >> propertyName;$/;"	l
propertyName	IO/reader/PLYReader.cc	/^    std::string propertyName;$/;"	l
property_name_	IO/reader/OMReader.hh	/^  mutable PropertyName property_name_;$/;"	m	class:OpenMesh::IO::_OMReader_	access:private
property_stats	Mesh/BaseKernel.cc	/^void BaseKernel::property_stats(std::ostream& _ostr) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr) const
property_stats	Mesh/BaseKernel.hh	/^  void property_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
propname	Utils/PropertyManager.hh	/^                    oss << "Requested property handle \\"" << propname << "\\" does not exist.";$/;"	l
push_back	IO/exporter/ExporterT.hh	/^      _vhandles.push_back(fv_it.handle());$/;"	p	signature:(fv_it.handle())
push_back	IO/importer/ImporterT.hh	/^            failed_faces_.push_back(_indices);$/;"	p	signature:(_indices)
push_back	IO/importer/ImporterT.hh	/^        failed_faces_.push_back(_indices);$/;"	p	signature:(_indices)
push_back	IO/reader/OBJReader.cc	/^                    face_texcoords.push_back( texcoords[value-1] );$/;"	p	file:	signature:( texcoords[value-1] )
push_back	IO/reader/OBJReader.cc	/^            colors.push_back(OpenMesh::Vec3uc((unsigned char)r,(unsigned char)g,(unsigned char)b));$/;"	p	file:	signature:(unsigned char)r,(unsigned char)g,(unsigned char)b
push_back	IO/reader/OBJReader.cc	/^          colors.push_back(OpenMesh::Vec3uc((unsigned char)r,(unsigned char)g,(unsigned char)b));$/;"	p	file:	signature:(unsigned char)r,(unsigned char)g,(unsigned char)b
push_back	IO/reader/OBJReader.cc	/^        vertexHandles.push_back(_bi.add_vertex(OpenMesh::Vec3f(x,y,z)));$/;"	p	file:	signature:(_bi.add_vertex(OpenMesh::Vec3f(x,y,z)))
push_back	IO/reader/STLReader.cc	/^          vhandles.push_back(handle);$/;"	p	file:	signature:(handle)
push_back	IO/reader/STLReader.cc	/^        vhandles.push_back(handle);$/;"	p	file:	signature:(handle)
push_back	Mesh/ArrayKernel.cc	/^    _bmc.push_back(i);$/;"	p	file:	signature:(i)
push_back	Mesh/ArrayKernel.hh	/^        handles_.push_back(_hnd);$/;"	p	signature:(_hnd)
push_back	Mesh/ArrayKernel.hh	/^    faces_.push_back(_f);$/;"	p	signature:(_f)
push_back	Mesh/PolyConnectivity.cc	/^    face_handles.push_back(vf_it.handle());$/;"	p	file:	signature:(vf_it.handle())
push_back	System/mostream.hh	/^    buffer_.push_back(c);$/;"	p	signature:(c)
push_back	System/mostream.hh	/^  void __connect(target_type* _target) { targets_.push_back(_target); }$/;"	p	signature:(_target)
push_back	Utils/BaseProperty.hh	/^  virtual void push_back() = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:()
push_back	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(T()); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
push_back	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(bool()); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
push_back	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(std::string()); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:()
push_back	Utils/PropertyContainer.hh	/^    if (p_it==p_end) properties_.push_back(NULL);$/;"	p	signature:(NULL)
push_bit_mask	Mesh/ArrayKernel.hh	/^  void                                      push_bit_mask(Handle _hnd, unsigned int _bit_mask)$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:(Handle _hnd, unsigned int _bit_mask)
qt_read_filters	IO/IOManager.hh	/^  const std::string& qt_read_filters()  const { return read_filters_;  }$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:() const
qt_write_filters	IO/IOManager.hh	/^  const std::string& qt_write_filters() const { return write_filters_; }$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:() const
r	IO/reader/OBJReader.cc	/^        stream >> r; stream >> g; stream >> b;$/;"	l
r	IO/reader/OBJReader.cc	/^      stream >> r; stream >> g; stream >> b;$/;"	l
r	IO/reader/OBJReader.cc	/^  int                       r, g, b;$/;"	l
rad_to_deg	Geometry/MathDefs.hh	/^inline T rad_to_deg(const T& _angle)$/;"	f	namespace:OpenMesh	signature:(const T& _angle)
randNum	Utils/RandomNumberGenerator.cc	/^  double randNum = 0.0;$/;"	l
rc	IO/writer/OMWriter.cc	/^  bool rc = write(ofs, _be, _opt);$/;"	l
read	IO/IOManager.cc	/^read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/IOManager.cc	/^read(std::istream& _is, const std::string& _ext, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(std::istream& _is, const std::string& _ext, BaseImporter& _bi, Options& _opt)
read	IO/IOManager.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/IOManager.hh	/^  bool read(std::istream& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(std::istream& _filename, const std::string& _ext, BaseImporter& _bi, Options& _opt)
read	IO/OMFormat.hh	/^      _is.read( buf, size ); \/\/ size bytes$/;"	p	signature:( buf, size )
read	IO/reader/BaseReader.hh	/^  virtual bool read(const std::string& _filename, $/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/BaseReader.hh	/^  virtual bool read(std::istream& _is, $/;"	p	class:OpenMesh::IO::BaseReader	access:public	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
read	IO/reader/OBJReader.cc	/^read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/OBJReader.cc	/^read(std::istream& _in, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
read	IO/reader/OBJReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_OBJReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/OBJReader.hh	/^  bool read(std::istream& _in,$/;"	p	class:OpenMesh::IO::_OBJReader_	access:public	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
read	IO/reader/OFFReader.cc	/^_OFFReader_::read(const std::string& _filename, BaseImporter& _bi,$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/OFFReader.cc	/^_OFFReader_::read(std::istream& _in, BaseImporter& _bi, Options& _opt )$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt )
read	IO/reader/OFFReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/OFFReader.hh	/^  bool read(std::istream& _in, BaseImporter& _bi, Options& _opt );$/;"	p	class:OpenMesh::IO::_OFFReader_	access:public	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt )
read	IO/reader/OMReader.cc	/^bool _OMReader_::read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/OMReader.cc	/^bool _OMReader_::read(std::istream& _is, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
read	IO/reader/OMReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt )
read	IO/reader/OMReader.hh	/^  bool read(std::istream& _is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:public	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt )
read	IO/reader/PLYReader.cc	/^bool _PLYReader_::read(const std::string& _filename, BaseImporter& _bi, Options& _opt) {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/PLYReader.cc	/^bool _PLYReader_::read(std::istream& _in, BaseImporter& _bi, Options& _opt) {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
read	IO/reader/PLYReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/PLYReader.hh	/^  bool read(std::istream& _is,$/;"	p	class:OpenMesh::IO::_PLYReader_	access:public	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
read	IO/reader/STLReader.cc	/^    _in.read(dummy, 12);$/;"	p	file:	signature:(dummy, 12)
read	IO/reader/STLReader.cc	/^    _in.read(dummy, 2);$/;"	p	file:	signature:(dummy, 2)
read	IO/reader/STLReader.cc	/^  _in.read(dummy, 80);$/;"	p	file:	signature:(dummy, 80)
read	IO/reader/STLReader.cc	/^_STLReader_::read(std::istream& _is,$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt)
read	IO/reader/STLReader.cc	/^read(const std::string& _filename, BaseImporter& _bi, Options& _opt)$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/STLReader.hh	/^  bool read(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_STLReader_	access:public	signature:(const std::string& _filename, BaseImporter& _bi, Options& _opt)
read	IO/reader/STLReader.hh	/^  bool read(std::istream& _in,$/;"	p	class:OpenMesh::IO::_STLReader_	access:public	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt)
readInteger	IO/reader/PLYReader.cc	/^void _PLYReader_::readInteger(ValueType _type, std::istream& _in, int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, int& _value) const
readInteger	IO/reader/PLYReader.cc	/^void _PLYReader_::readInteger(ValueType _type, std::istream& _in, unsigned int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, unsigned int& _value) const
readInteger	IO/reader/PLYReader.hh	/^  void readInteger(ValueType _type, std::istream& _in, int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type, std::istream& _in, int& _value) const
readInteger	IO/reader/PLYReader.hh	/^  void readInteger(ValueType _type, std::istream& _in, unsigned int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type, std::istream& _in, unsigned int& _value) const
readToFloatValue	IO/reader/PLYReader.hh	/^  float readToFloatValue(ValueType _type , std::fstream& _in) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::fstream& _in) const
readValue	IO/reader/OFFReader.cc	/^void _OFFReader_::readValue(std::istream& _in, float& _value) const{$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, float& _value) const
readValue	IO/reader/OFFReader.cc	/^void _OFFReader_::readValue(std::istream& _in, int& _value) const{$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, int& _value) const
readValue	IO/reader/OFFReader.cc	/^void _OFFReader_::readValue(std::istream& _in, unsigned int& _value) const{$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, unsigned int& _value) const
readValue	IO/reader/OFFReader.hh	/^  void readValue(std::istream& _in, float& _value) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, float& _value) const
readValue	IO/reader/OFFReader.hh	/^  void readValue(std::istream& _in, int& _value) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, int& _value) const
readValue	IO/reader/OFFReader.hh	/^  void readValue(std::istream& _in, unsigned int& _value) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, unsigned int& _value) const
readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, double& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, double& _value) const
readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, float& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, float& _value) const
readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, int& _value) const
readValue	IO/reader/PLYReader.cc	/^void _PLYReader_::readValue(ValueType _type, std::istream& _in, unsigned int& _value) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(ValueType _type, std::istream& _in, unsigned int& _value) const
readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type , std::istream& _in, float& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::istream& _in, float& _value) const
readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type , std::istream& _in, int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::istream& _in, int& _value) const
readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type , std::istream& _in, unsigned int& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type , std::istream& _in, unsigned int& _value) const
readValue	IO/reader/PLYReader.hh	/^  void readValue(ValueType _type, std::istream& _in, double& _value) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(ValueType _type, std::istream& _in, double& _value) const
read_ascii	IO/reader/OFFReader.cc	/^_OFFReader_::read_ascii(std::istream& _in, BaseImporter& _bi, Options& _opt) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt) const
read_ascii	IO/reader/OFFReader.hh	/^  bool read_ascii(std::istream& _in, BaseImporter& _bi, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt) const
read_ascii	IO/reader/OMReader.cc	/^bool _OMReader_::read_ascii(std::istream& \/* _is *\/, BaseImporter& \/* _bi *\/, Options& \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& , BaseImporter& , Options& ) const
read_ascii	IO/reader/OMReader.hh	/^  bool read_ascii(std::istream& _is, BaseImporter& _bi, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt) const
read_ascii	IO/reader/PLYReader.cc	/^bool _PLYReader_::read_ascii(std::istream& _in, BaseImporter& _bi, const Options& _opt) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _in, BaseImporter& _bi, const Options& _opt) const
read_ascii	IO/reader/PLYReader.hh	/^  bool read_ascii(std::istream& _in, BaseImporter& _bi, const Options& _opt) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, const Options& _opt) const
read_binary	IO/reader/OFFReader.cc	/^_OFFReader_::read_binary(std::istream& _in, BaseImporter& _bi, Options& _opt, bool \/*_swap*\/) const$/;"	f	class:OpenMesh::IO::_OFFReader_	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt, bool ) const
read_binary	IO/reader/OFFReader.hh	/^  bool read_binary(std::istream& _in, BaseImporter& _bi, Options& _opt, bool swap) const;$/;"	p	class:OpenMesh::IO::_OFFReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, Options& _opt, bool swap) const
read_binary	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary(std::istream& _is, BaseImporter& _bi, Options& _opt) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt) const
read_binary	IO/reader/OMReader.hh	/^  bool read_binary(std::istream& _is, BaseImporter& _bi, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:(std::istream& _is, BaseImporter& _bi, Options& _opt) const
read_binary	IO/reader/PLYReader.cc	/^bool _PLYReader_::read_binary(std::istream& _in, BaseImporter& _bi, bool \/*_swap*\/, const Options& _opt) const {$/;"	f	class:OpenMesh::IO::_PLYReader_	signature:(std::istream& _in, BaseImporter& _bi, bool , const Options& _opt) const
read_binary	IO/reader/PLYReader.hh	/^  bool read_binary(std::istream& _in, BaseImporter& _bi, bool swap, const Options& _opt) const;$/;"	p	class:OpenMesh::IO::_PLYReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi, bool swap, const Options& _opt) const
read_binary_edge_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_edge_chunk(std::istream &_is, BaseImporter &_bi, Options &\/*_opt *\/, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options & , bool _swap) const
read_binary_edge_chunk	IO/reader/OMReader.hh	/^  bool read_binary_edge_chunk(     std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
read_binary_face_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_face_chunk(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
read_binary_face_chunk	IO/reader/OMReader.hh	/^  bool read_binary_face_chunk(     std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
read_binary_halfedge_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_halfedge_chunk(std::istream &_is, BaseImporter &_bi, Options &\/* _opt *\/, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options & , bool _swap) const
read_binary_halfedge_chunk	IO/reader/OMReader.hh	/^  bool read_binary_halfedge_chunk( std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
read_binary_mesh_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_mesh_chunk(std::istream &_is, BaseImporter &_bi, Options & \/* _opt *\/, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options & , bool _swap) const
read_binary_mesh_chunk	IO/reader/OMReader.hh	/^  bool read_binary_mesh_chunk(     std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
read_binary_vertex_chunk	IO/reader/OMReader.cc	/^bool _OMReader_::read_binary_vertex_chunk(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
read_binary_vertex_chunk	IO/reader/OMReader.hh	/^  bool read_binary_vertex_chunk(   std::istream      &_is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream &_is, BaseImporter &_bi, Options &_opt, bool _swap) const
read_double	IO/BinaryHelper.cc	/^double read_double(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
read_double	IO/BinaryHelper.cc	/^double read_double(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
read_double	IO/BinaryHelper.hh	/^double read_double(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
read_double	IO/BinaryHelper.hh	/^double read_double(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
read_filters_	IO/IOManager.hh	/^  std::string read_filters_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
read_float	IO/BinaryHelper.cc	/^float read_float(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
read_float	IO/BinaryHelper.cc	/^float read_float(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
read_float	IO/BinaryHelper.hh	/^float read_float(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
read_float	IO/BinaryHelper.hh	/^float read_float(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
read_int	IO/BinaryHelper.cc	/^int read_int(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
read_int	IO/BinaryHelper.cc	/^int read_int(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
read_int	IO/BinaryHelper.hh	/^int read_int(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
read_int	IO/BinaryHelper.hh	/^int read_int(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
read_material	IO/reader/OBJReader.cc	/^read_material(std::fstream& _in)$/;"	f	class:OpenMesh::IO::_OBJReader_	signature:(std::fstream& _in)
read_material	IO/reader/OBJReader.hh	/^  bool read_material( std::fstream& _in );$/;"	p	class:OpenMesh::IO::_OBJReader_	access:private	signature:( std::fstream& _in )
read_mesh	IO/MeshIO.hh	/^read_mesh(Mesh&         _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(Mesh& _mesh, const std::string& _filename)
read_mesh	IO/MeshIO.hh	/^read_mesh(Mesh&         _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(Mesh& _mesh, const std::string& _filename, Options& _opt, bool _clear = true)
read_mesh	IO/MeshIO.hh	/^read_mesh(Mesh&         _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(Mesh& _mesh, std::istream& _is, const std::string& _ext, Options& _opt, bool _clear = true)
read_short	IO/BinaryHelper.cc	/^short int read_short(FILE* _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap)
read_short	IO/BinaryHelper.cc	/^short int read_short(std::istream& _in, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap)
read_short	IO/BinaryHelper.hh	/^short int read_short(FILE* _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(FILE* _in, bool _swap=false)
read_short	IO/BinaryHelper.hh	/^short int read_short(std::istream& _in, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(std::istream& _in, bool _swap=false)
read_stla	IO/reader/STLReader.cc	/^read_stla(const std::string& _filename, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename, BaseImporter& _bi) const
read_stla	IO/reader/STLReader.cc	/^read_stla(std::istream& _in, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(std::istream& _in, BaseImporter& _bi) const
read_stla	IO/reader/STLReader.hh	/^  bool read_stla(const std::string& _filename, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(const std::string& _filename, BaseImporter& _bi) const
read_stla	IO/reader/STLReader.hh	/^  bool read_stla(std::istream& _in, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi) const
read_stlb	IO/reader/STLReader.cc	/^read_stlb(const std::string& _filename, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(const std::string& _filename, BaseImporter& _bi) const
read_stlb	IO/reader/STLReader.cc	/^read_stlb(std::istream& _in, BaseImporter& _bi) const$/;"	f	class:OpenMesh::IO::_STLReader_	signature:(std::istream& _in, BaseImporter& _bi) const
read_stlb	IO/reader/STLReader.hh	/^  bool read_stlb(const std::string& _filename, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(const std::string& _filename, BaseImporter& _bi) const
read_stlb	IO/reader/STLReader.hh	/^  bool read_stlb(std::istream& _in, BaseImporter& _bi) const;$/;"	p	class:OpenMesh::IO::_STLReader_	access:private	signature:(std::istream& _in, BaseImporter& _bi) const
reader_modules_	IO/IOManager.hh	/^  std::set<BaseReader*> reader_modules_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
refcount_ecolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_ecolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_estatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_estatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
refcount_fcolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_fcolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_fnormals_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_fnormals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_fstatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_fstatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
refcount_ftextureIndex_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_ftextureIndex_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_hecolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_hecolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_henormals_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_henormals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_hstatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_hstatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
refcount_htexcoords1D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_htexcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_htexcoords2D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_htexcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_htexcoords3D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_htexcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_vcolors_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vcolors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_vnormals_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vnormals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_vstatus_	Mesh/ArrayKernel.hh	/^  unsigned int                              refcount_vstatus_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
refcount_vtexcoords1D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vtexcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_vtexcoords2D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vtexcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
refcount_vtexcoords3D_	Mesh/AttribKernelT.hh	/^  unsigned int                              refcount_vtexcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge&        reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Edge&        reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face&        reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Face&        reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge&    reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge&    reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Halfedge&    reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex&      reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef const typename Mesh::Vertex&      reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge&              reference;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face&              reference;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge&          reference;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
reference	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex&            reference;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
reference	Mesh/IteratorsT.hh	/^        typedef const value_type&               reference;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
reference	Mesh/gen/circulators_template.hh	/^  typedef TargetType&         reference;$/;"	t	class:CirculatorT	access:public
reference	Mesh/gen/circulators_template.hh	/^  typedef const TargetType&   reference;$/;"	t	class:CirculatorT	access:public
reference	Mesh/gen/iterators_template.hh	/^  typedef const value_type&    reference;$/;"	t	class:IteratorT	access:public
reference	Mesh/gen/iterators_template.hh	/^  typedef value_type&          reference;$/;"	t	class:IteratorT	access:public
reference	Utils/Property.hh	/^  typedef typename vector_type::reference         reference;$/;"	t	class:OpenMesh::PropertyT	access:public
reference	Utils/Property.hh	/^  typedef typename vector_type::reference         reference;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
reference	Utils/Property.hh	/^  typedef vector_type::reference                  reference;$/;"	t	class:OpenMesh::PropertyT	access:public
register_module	IO/IOManager.hh	/^  bool register_module(BaseReader* _bl)$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:(BaseReader* _bl)
register_module	IO/IOManager.hh	/^  bool register_module(BaseWriter* _bw)$/;"	f	class:OpenMesh::IO::_IOManager_	access:public	signature:(BaseWriter* _bw)
reinsert_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::reinsert_edge(EdgeHandle _eh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh)
reinsert_edge	Mesh/PolyConnectivity.hh	/^  void reinsert_edge(EdgeHandle _eh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh)
release_edge_colors	Mesh/AttribKernelT.hh	/^  void release_edge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_edge_status	Mesh/ArrayKernel.hh	/^  void release_edge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
release_face_colors	Mesh/AttribKernelT.hh	/^  void release_face_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_face_normals	Mesh/AttribKernelT.hh	/^  void release_face_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_face_status	Mesh/ArrayKernel.hh	/^  void release_face_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
release_face_texture_index	Mesh/AttribKernelT.hh	/^  void release_face_texture_index()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_halfedge_colors	Mesh/AttribKernelT.hh	/^  void release_halfedge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_halfedge_normals	Mesh/AttribKernelT.hh	/^  void release_halfedge_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_halfedge_status	Mesh/ArrayKernel.hh	/^  void release_halfedge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
release_halfedge_texcoords1D	Mesh/AttribKernelT.hh	/^  void release_halfedge_texcoords1D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_halfedge_texcoords2D	Mesh/AttribKernelT.hh	/^  void release_halfedge_texcoords2D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_halfedge_texcoords3D	Mesh/AttribKernelT.hh	/^  void release_halfedge_texcoords3D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_vertex_colors	Mesh/AttribKernelT.hh	/^  void release_vertex_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_vertex_normals	Mesh/AttribKernelT.hh	/^  void release_vertex_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_vertex_status	Mesh/ArrayKernel.hh	/^  void release_vertex_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
release_vertex_texcoords1D	Mesh/AttribKernelT.hh	/^  void release_vertex_texcoords1D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_vertex_texcoords2D	Mesh/AttribKernelT.hh	/^  void release_vertex_texcoords2D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
release_vertex_texcoords3D	Mesh/AttribKernelT.hh	/^  void release_vertex_texcoords3D() {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
rem_fh	Mesh/PolyConnectivity.cc	/^  FaceHandle rem_fh = face_handle(heh0), del_fh = face_handle(heh1);$/;"	l
remainingChars	IO/reader/OFFReader.cc	/^  size_t remainingChars = _is.gcount();$/;"	l
remove	Mesh/BaseKernel.hh	/^      eprops_.remove(_ph);$/;"	p	signature:(_ph)
remove	Mesh/BaseKernel.hh	/^      fprops_.remove(_ph);$/;"	p	signature:(_ph)
remove	Mesh/BaseKernel.hh	/^      hprops_.remove(_ph);$/;"	p	signature:(_ph)
remove	Mesh/BaseKernel.hh	/^      mprops_.remove(_ph);$/;"	p	signature:(_ph)
remove	Mesh/BaseKernel.hh	/^      vprops_.remove(_ph);$/;"	p	signature:(_ph)
remove	Utils/PropertyContainer.hh	/^  template <class T> void remove(BasePropHandleT<T> _h)$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(BasePropHandleT<T> _h)
remove_edge	Mesh/PolyConnectivity.cc	/^PolyConnectivity::remove_edge(EdgeHandle _eh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh)
remove_edge	Mesh/PolyConnectivity.hh	/^  FaceHandle remove_edge(EdgeHandle _eh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh)
remove_property	Mesh/BaseKernel.hh	/^  void remove_property(EPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(EPropHandleT<T>& _ph)
remove_property	Mesh/BaseKernel.hh	/^  void remove_property(FPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(FPropHandleT<T>& _ph)
remove_property	Mesh/BaseKernel.hh	/^  void remove_property(HPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(HPropHandleT<T>& _ph)
remove_property	Mesh/BaseKernel.hh	/^  void remove_property(MPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(MPropHandleT<T>& _ph)
remove_property	Mesh/BaseKernel.hh	/^  void remove_property(VPropHandleT<T>& _ph)$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:(VPropHandleT<T>& _ph)
remove_property	Utils/AutoPropertyHandleT.hh	/^  inline void                               remove_property()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
remove_property	Utils/PropertyManager.hh	/^                mesh_->remove_property(prop_);$/;"	p	signature:(prop_)
request_edge_colors	Mesh/AttribKernelT.hh	/^  void request_edge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_edge_status	Mesh/ArrayKernel.hh	/^  void request_edge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
request_edge_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_edge_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
request_face_colors	Mesh/AttribKernelT.hh	/^  void request_face_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_face_normals	Mesh/AttribKernelT.hh	/^  void request_face_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_face_status	Mesh/ArrayKernel.hh	/^  void request_face_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
request_face_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_face_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
request_face_texture_index	Mesh/AttribKernelT.hh	/^  void request_face_texture_index()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_halfedge_colors	Mesh/AttribKernelT.hh	/^  void request_halfedge_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_halfedge_normals	Mesh/AttribKernelT.hh	/^  void request_halfedge_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_halfedge_status	Mesh/ArrayKernel.hh	/^  void request_halfedge_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
request_halfedge_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_halfedge_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
request_halfedge_texcoords1D	Mesh/AttribKernelT.hh	/^  void request_halfedge_texcoords1D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_halfedge_texcoords2D	Mesh/AttribKernelT.hh	/^  void request_halfedge_texcoords2D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_halfedge_texcoords3D	Mesh/AttribKernelT.hh	/^  void request_halfedge_texcoords3D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_vertex_colors	Mesh/AttribKernelT.hh	/^  void request_vertex_colors()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_vertex_normals	Mesh/AttribKernelT.hh	/^  void request_vertex_normals()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_vertex_status	Mesh/ArrayKernel.hh	/^  void request_vertex_status()$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:()
request_vertex_status	Mesh/AttribKernelT.hh	/^      Connectivity::request_vertex_status();$/;"	p	class:OpenMesh::AttribKernelT::Connectivity	signature:()
request_vertex_texcoords1D	Mesh/AttribKernelT.hh	/^  void request_vertex_texcoords1D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_vertex_texcoords2D	Mesh/AttribKernelT.hh	/^  void request_vertex_texcoords2D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
request_vertex_texcoords3D	Mesh/AttribKernelT.hh	/^  void request_vertex_texcoords3D()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
reserve	IO/importer/BaseImporter.hh	/^  virtual void reserve( unsigned int \/* nV *\/,$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:( unsigned int , unsigned int , unsigned int )
reserve	IO/importer/ImporterT.hh	/^    mesh_.reserve(nV, nE, nF);$/;"	p	signature:(nV, nE, nF)
reserve	IO/importer/ImporterT.hh	/^  void reserve(unsigned int nV, unsigned int nE, unsigned int nF)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(unsigned int nV, unsigned int nE, unsigned int nF)
reserve	IO/reader/OFFReader.cc	/^  _bi.reserve(nV, 3*nV, nF);$/;"	p	file:	signature:(nV, 3*nV, nF)
reserve	IO/reader/PLYReader.cc	/^    _bi.reserve(vertexCount_, 3* vertexCount_ , faceCount_);$/;"	p	file:	signature:(vertexCount_, 3* vertexCount_ , faceCount_)
reserve	Mesh/ArrayKernel.cc	/^  edges_.reserve(_n_edges);$/;"	p	file:	signature:(_n_edges)
reserve	Mesh/ArrayKernel.cc	/^  faces_.reserve(_n_faces);$/;"	p	file:	signature:(_n_faces)
reserve	Mesh/ArrayKernel.cc	/^  vertices_.reserve(_n_vertices);$/;"	p	file:	signature:(_n_vertices)
reserve	Mesh/ArrayKernel.cc	/^void ArrayKernel::reserve(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )$/;"	f	class:OpenMesh::ArrayKernel	signature:(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
reserve	Mesh/ArrayKernel.hh	/^    { handles_.reserve(_capacity_hint); }$/;"	p	signature:(_capacity_hint)
reserve	Mesh/ArrayKernel.hh	/^  void reserve(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces );$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
reserve	Mesh/ArrayKernelT.cc	/^  fh_map.reserve(nF);$/;"	p	file:	signature:(nF)
reserve	Mesh/ArrayKernelT.cc	/^  hh_map.reserve(nH);$/;"	p	file:	signature:(nH)
reserve	Mesh/ArrayKernelT.cc	/^  vh_map.reserve(nV);$/;"	p	file:	signature:(nV)
reserve	Mesh/BaseKernel.hh	/^  void eprops_reserve(unsigned int _n) const { eprops_.reserve(_n); }$/;"	p	signature:(_n)
reserve	Mesh/BaseKernel.hh	/^  void fprops_reserve(unsigned int _n) const { fprops_.reserve(_n); }$/;"	p	signature:(_n)
reserve	Mesh/BaseKernel.hh	/^  void hprops_reserve(unsigned int _n) const { hprops_.reserve(_n); }$/;"	p	signature:(_n)
reserve	Mesh/BaseKernel.hh	/^  void vprops_reserve(unsigned int _n) const { vprops_.reserve(_n); }$/;"	p	signature:(_n)
reserve	Utils/BaseProperty.hh	/^  virtual void reserve(size_t _n) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _n)
reserve	Utils/Property.hh	/^  virtual void reserve(size_t _n) { data_.reserve(_n);    }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n)
reserve	Utils/Property.hh	/^  virtual void reserve(size_t _n) { data_.reserve(_n);    }$/;"	p	signature:(_n)
reserve	Utils/PropertyContainer.hh	/^  void reserve(size_t _n) const {$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(size_t _n) const
reserved_	IO/OMFormat.hh	/^      unsigned reserved_: SIZE_RESERVED;$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
reset	Mesh/BaseKernel.hh	/^    _ph.reset();$/;"	p	signature:()
reset	Mesh/Handles.hh	/^  void reset() { idx_=-1; }$/;"	f	class:OpenMesh::BaseHandle	access:public	signature:()
resize	Geometry/LoopSchemeMaskT.hh	/^      tang0_weights_[k].resize(k);$/;"	p	signature:(k)
resize	Geometry/LoopSchemeMaskT.hh	/^      tang1_weights_[k].resize(k);$/;"	p	signature:(k)
resize	IO/OMFormat.hh	/^      _pn.resize(size);$/;"	p	signature:(size)
resize	IO/SR_binary_spec.hh	/^    _val.resize(len);$/;"	p	signature:(len)
resize	Mesh/ArrayKernel.cc	/^  edges_.resize(_n_edges);$/;"	p	file:	signature:(_n_edges)
resize	Mesh/ArrayKernel.cc	/^  faces_.resize(_n_faces);$/;"	p	file:	signature:(_n_faces)
resize	Mesh/ArrayKernel.cc	/^  vertices_.resize(_n_vertices);$/;"	p	file:	signature:(_n_vertices)
resize	Mesh/ArrayKernel.cc	/^void ArrayKernel::resize( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )$/;"	f	class:OpenMesh::ArrayKernel	signature:( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
resize	Mesh/ArrayKernel.hh	/^  void resize( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces );$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:( unsigned int _n_vertices, unsigned int _n_edges, unsigned int _n_faces )
resize	Mesh/BaseKernel.hh	/^  void eprops_resize(unsigned int _n) const { eprops_.resize(_n); }$/;"	p	signature:(_n)
resize	Mesh/BaseKernel.hh	/^  void fprops_resize(unsigned int _n) const { fprops_.resize(_n); }$/;"	p	signature:(_n)
resize	Mesh/BaseKernel.hh	/^  void hprops_resize(unsigned int _n) const { hprops_.resize(_n); }$/;"	p	signature:(_n)
resize	Mesh/BaseKernel.hh	/^  void mprops_resize(unsigned int _n) const { mprops_.resize(_n); }$/;"	p	signature:(_n)
resize	Mesh/BaseKernel.hh	/^  void vprops_resize(unsigned int _n) const { vprops_.resize(_n); }$/;"	p	signature:(_n)
resize	Mesh/PolyConnectivity.cc	/^    edgeData_.resize(n);$/;"	p	file:	signature:(n)
resize	Utils/BaseProperty.hh	/^  virtual void resize(size_t _n) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _n)
resize	Utils/Property.hh	/^  virtual void resize(size_t _n)  { data_.resize(_n);     }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n)
resize	Utils/Property.hh	/^  virtual void resize(size_t _n)  { data_.resize(_n);     }$/;"	p	signature:(_n)
resize	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->resize(n_); }$/;"	p	signature:(n_)
resize	Utils/PropertyContainer.hh	/^  void resize(size_t _n) const {$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(size_t _n) const
resolution	Utils/RandomNumberGenerator.cc	/^double RandomNumberGenerator::resolution() const {$/;"	f	class:OpenMesh::RandomNumberGenerator	signature:() const
resolution	Utils/RandomNumberGenerator.hh	/^  double resolution() const;$/;"	p	class:OpenMesh::RandomNumberGenerator	access:public	signature:() const
resolution_	Utils/RandomNumberGenerator.hh	/^  const double resolution_;$/;"	m	class:OpenMesh::RandomNumberGenerator	access:private
restore	IO/OMFormat.hh	/^    size_t restore( std::istream& _is, bool _swap )$/;"	f	struct:OpenMesh::IO::OMFormat::Header	access:public	signature:( std::istream& _is, bool _swap )
restore	IO/OMFormat.hh	/^  restore( std::istream& _is, OMFormat::Chunk::Header& _hdr, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, OMFormat::Chunk::Header& _hdr, bool _swap )
restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<1>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<1>, bool _swap )
restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<2>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<2>, bool _swap )
restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<3>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<3>, bool _swap )
restore	IO/OMFormat.hh	/^  restore( std::istream& _is, VecT& _vec, GenProg::Int2Type<4>,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, GenProg::Int2Type<4>, bool _swap )
restore	IO/OMFormat.hh	/^  restore( std::istream& _is,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap)
restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is, OMFormat::Chunk::PropertyName& _pn,$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, OMFormat::Chunk::PropertyName& _pn, bool _swap )
restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is, OMFormat::Header& _hdr, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, OMFormat::Header& _hdr, bool _swap )
restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is,$/;"	p	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
restore	IO/OMFormat.hh	/^  size_t restore( std::istream& _is,$/;"	p	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
restore	IO/OMFormatT.cc	/^  restore( std::istream& _is, $/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
restore	IO/OMFormatT.cc	/^  restore( std::istream& _is, $/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
restore	IO/SR_binary.hh	/^  size_t restore( std::istream& \/* _is *\/,$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:( std::istream& , value_type& , bool )
restore	IO/SR_binary_spec.hh	/^  size_t restore( std::istream& _os, value_type& _v, bool _swap=false)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:( std::istream& _os, value_type& _v, bool _swap=false)
restore	IO/SR_binary_spec.hh	/^  size_t restore(std::istream& _is, value_type& _val, bool _swap=false)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(std::istream& _is, value_type& _val, bool _swap=false)
restore	IO/StoreRestore.hh	/^size_t restore( std::istream& _is, T& _v, bool _swap=false)$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, T& _v, bool _swap=false)
restore	Utils/BaseProperty.hh	/^  virtual size_t restore( std::istream& _istr, bool _swap ) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:( std::istream& _istr, bool _swap )
restore	Utils/Property.hh	/^  size_t restore( std::istream& _istr, bool \/* _swap *\/ )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::istream& _istr, bool )
restore	Utils/Property.hh	/^  size_t restore( std::istream& _istr, bool _swap )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::istream& _istr, bool _swap )
restore	Utils/Property.hh	/^  virtual size_t restore( std::istream& _istr, bool _swap )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::istream& _istr, bool _swap )
restore_binary_custom_data	IO/reader/OMReader.cc	/^size_t _OMReader_::restore_binary_custom_data(std::istream& _is, BaseProperty* _bp, size_t _n_elem, bool _swap) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(std::istream& _is, BaseProperty* _bp, size_t _n_elem, bool _swap) const
restore_binary_custom_data	IO/reader/OMReader.hh	/^  size_t restore_binary_custom_data( std::istream& _is,$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( std::istream& _is, BaseProperty* _bp, size_t _n_elem, bool _swap) const
result	IO/reader/OBJReader.cc	/^  bool result = read(in, _bi, _opt);$/;"	l
result	IO/reader/OFFReader.cc	/^  bool result = read(ifile, _bi, _opt);$/;"	l
result	IO/reader/OMReader.cc	/^  bool result = read(ifs, _bi, _opt);$/;"	l
result	IO/reader/OMReader.cc	/^  bool result = read_binary(_is, _bi, _opt);$/;"	l
result	IO/reader/PLYReader.cc	/^    bool result = read(in, _bi, _opt);$/;"	l
result	IO/reader/STLReader.cc	/^  bool result = false;$/;"	l
result	IO/writer/OBJWriter.cc	/^  bool result = write(out, _be, _opt);$/;"	l
result	IO/writer/OFFWriter.cc	/^  bool result = (_opt.check(Options::Binary) ?$/;"	l
result	IO/writer/PLYWriter.cc	/^  bool result = (_opt.check(Options::Binary) ?$/;"	l
result	IO/writer/STLWriter.cc	/^  bool result = write(out, _be, _opt, _precision);$/;"	l
retain	Utils/PropertyManager.hh	/^            pm.retain();$/;"	p	signature:()
retain	Utils/PropertyManager.hh	/^        inline void retain(bool doRetain = true) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(bool doRetain = true)
retain_	Utils/PropertyManager.hh	/^                bool retain_;$/;"	m	class:OpenMesh::PropertyManager::Proxy	access:private
retain_	Utils/PropertyManager.hh	/^        bool retain_;$/;"	m	class:OpenMesh::PropertyManager	access:private
return_type	Utils/color_cast.hh	/^  typedef Vec3f return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef Vec3i return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef Vec3uc return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef Vec3ui return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef Vec4f return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef Vec4i return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef Vec4uc return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef Vec4ui return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef const dst_t&  return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/color_cast.hh	/^  typedef dst_t  return_type;$/;"	t	struct:OpenMesh::color_caster	access:public
return_type	Utils/vector_cast.hh	/^  typedef const dst_t&  return_type;$/;"	t	struct:OpenMesh::vector_caster	access:public
return_type	Utils/vector_cast.hh	/^  typedef dst_t  return_type;$/;"	t	struct:OpenMesh::vector_caster	access:public
reverse_byte_order	IO/SR_rbo.hh	/^T reverse_byte_order(const T& a)$/;"	f	namespace:OpenMesh::IO	signature:(const T& a)
reverse_byte_order	IO/SR_rbo.hh	/^template <> inline bool&  reverse_byte_order(bool & _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(bool & _t)
reverse_byte_order	IO/SR_rbo.hh	/^template <> inline char&  reverse_byte_order(char & _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(char & _t)
reverse_byte_order	IO/SR_rbo.hh	/^template <> inline signed char&  reverse_byte_order(signed char & _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(signed char & _t)
reverse_byte_order	IO/SR_rbo.hh	/^template <> inline uchar& reverse_byte_order(uchar& _t) { return _t; }$/;"	f	namespace:OpenMesh::IO	signature:(uchar& _t)
reverse_byte_order	IO/SR_rbo.hh	/^template <typename T> T& reverse_byte_order(  T& _t )$/;"	f	namespace:OpenMesh::IO	signature:( T& _t )
reverse_byte_order	IO/SR_rbo.hh	/^template <typename T> inline T* reverse_byte_order(T* t);$/;"	p	namespace:OpenMesh::IO	signature:(T* t)
rgb_t	IO/SR_types.hh	/^typedef uint8_t        rgb_t[3];$/;"	t	namespace:OpenMesh::IO
rgba_t	IO/SR_types.hh	/^typedef uint8_t        rgba_t[4];$/;"	t	namespace:OpenMesh::IO
right_trim	IO/reader/BaseReader.hh	/^static inline std::string &right_trim(std::string &_string) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string &_string)
runtime_error	Utils/PropertyManager.hh	/^                    throw std::runtime_error(oss.str());$/;"	p	class:OpenMesh::PropertyManager::std	signature:(oss.str())
s	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
s	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	m	union:OpenMesh::IO::u1	file:	access:public
s	IO/IOManager.cc	/^    std::string s = " ";$/;"	l
sane_aarg	Geometry/MathDefs.hh	/^inline T sane_aarg(T _aarg)$/;"	f	namespace:OpenMesh	signature:(T _aarg)
sc	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	l
sc	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	l
scalar_size	IO/OMFormat.hh	/^  inline size_t scalar_size( const Chunk::Header& _hdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( const Chunk::Header& _hdr )
scalar_size_	IO/reader/PLYReader.hh	/^  mutable std::map<ValueType, int> scalar_size_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
scalar_type	IO/OMFormat.hh	/^    typedef typename vector_traits<VecT>::value_type scalar_type;$/;"	t
sector_normal	Mesh/PolyMeshT.hh	/^    Normal sector_normal;$/;"	l
selected	Mesh/Status.hh	/^  bool selected() const  { return is_bit_set(SELECTED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
set	Geometry/QuadricT.hh	/^  void set(Scalar _a, Scalar _b, Scalar _c, Scalar _d,$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(Scalar _a, Scalar _b, Scalar _c, Scalar _d, Scalar _e, Scalar _f, Scalar _g, Scalar _h, Scalar _i, Scalar _j)
set	IO/Options.hh	/^  Options& set( const value_type _rhs)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs)
set_Ka	IO/reader/OBJReader.cc	/^        mat.set_Ka(f1,f2,f3);$/;"	p	file:	signature:(f1,f2,f3)
set_Ka	IO/reader/OBJReader.hh	/^    void set_Ka( float r, float g, float b )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float r, float g, float b )
set_Kd	IO/reader/OBJReader.cc	/^        mat.set_Kd(f1,f2,f3);$/;"	p	file:	signature:(f1,f2,f3)
set_Kd	IO/reader/OBJReader.hh	/^    void set_Kd( float r, float g, float b )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float r, float g, float b )
set_Ks	IO/reader/OBJReader.cc	/^        mat.set_Ks(f1,f2,f3);$/;"	p	file:	signature:(f1,f2,f3)
set_Ks	IO/reader/OBJReader.hh	/^    void set_Ks( float r, float g, float b )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float r, float g, float b )
set_Tr	IO/reader/OBJReader.cc	/^        mat.set_Tr(f1);$/;"	p	file:	signature:(f1)
set_Tr	IO/reader/OBJReader.hh	/^    void set_Tr( float t )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( float t )
set_bit	Mesh/Status.hh	/^  void set_bit(unsigned int _s) { status_ |= _s; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s)
set_bits	IO/SR_binary_spec.hh	/^    _v.set_bits(v);$/;"	p	signature:(v)
set_bits	Mesh/Status.hh	/^  void set_bits(unsigned int _bits) { status_ = _bits; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _bits)
set_boundary	Mesh/ArrayKernel.hh	/^  void set_boundary(HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec3f& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec3uc& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec4f& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(EdgeHandle _eh, const Vec4uc& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec3f& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec3uc& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec4f& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec4uc& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec3f& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec3uc& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4f& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec4f& _color)
set_color	IO/importer/BaseImporter.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4uc& _color) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec4uc& _color)
set_color	IO/importer/ImporterT.hh	/^          mesh_.set_color(_eh, color_cast<Color>(_color));$/;"	p	signature:(_eh, color_cast<Color>(_color))
set_color	IO/importer/ImporterT.hh	/^      mesh_.set_color(_fh, color_cast<Color>(_color));$/;"	p	signature:(_fh, color_cast<Color>(_color))
set_color	IO/importer/ImporterT.hh	/^      mesh_.set_color(_vh, color_cast<Color>(_color));$/;"	p	signature:(_vh, color_cast<Color>(_color))
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec3f& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec3uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec3uc& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec4f& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(EdgeHandle _eh, const Vec4uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(EdgeHandle _eh, const Vec4uc& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec3f& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec3uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec3uc& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec4f& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(FaceHandle _fh, const Vec4uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec4uc& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec3f& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec3uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec3uc& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4f& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec4f& _color)
set_color	IO/importer/ImporterT.hh	/^  virtual void set_color(VertexHandle _vh, const Vec4uc& _color)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec4uc& _color)
set_color	IO/reader/OBJReader.cc	/^                _bi.set_color(vhandles.back(), colors[value-1]);$/;"	p	file:	signature:(vhandles.back(), colors[value-1])
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, Vec3uc( c3 ) );$/;"	p	file:	signature:( fh, Vec3uc( c3 ) )
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, Vec4uc( c4 ) );$/;"	p	file:	signature:( fh, Vec4uc( c4 ) )
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, c3f );$/;"	p	file:	signature:( fh, c3f )
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( fh, c4f );$/;"	p	file:	signature:( fh, c4f )
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, Vec3uc( c3 ) );$/;"	p	file:	signature:( vh, Vec3uc( c3 ) )
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, Vec4uc( c4 ) );$/;"	p	file:	signature:( vh, Vec4uc( c4 ) )
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, c3f );$/;"	p	file:	signature:( vh, c3f )
set_color	IO/reader/OFFReader.cc	/^              _bi.set_color( vh, c4f );$/;"	p	file:	signature:( vh, c4f )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh , Vec4uc( cA ) );$/;"	p	file:	signature:( fh , Vec4uc( cA ) )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh , cAf );$/;"	p	file:	signature:( fh , cAf )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh, Vec3uc( c ) );$/;"	p	file:	signature:( fh, Vec3uc( c ) )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( fh, cf );$/;"	p	file:	signature:( fh, cf )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, Vec3uc( c ) );$/;"	p	file:	signature:( vh, Vec3uc( c ) )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, Vec4uc( cA ) );$/;"	p	file:	signature:( vh, Vec4uc( cA ) )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, cAf );$/;"	p	file:	signature:( vh, cAf )
set_color	IO/reader/OFFReader.cc	/^            _bi.set_color( vh, cf );$/;"	p	file:	signature:( vh, cf )
set_color	IO/reader/PLYReader.cc	/^          _bi.set_color(vh, Vec4uc(c));$/;"	p	file:	signature:(vh, Vec4uc(c))
set_color	Mesh/AttribKernelT.hh	/^  void set_color(EdgeHandle _eh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(EdgeHandle _eh, const Color& _c)
set_color	Mesh/AttribKernelT.hh	/^  void set_color(FaceHandle _fh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh, const Color& _c)
set_color	Mesh/AttribKernelT.hh	/^  void set_color(HalfedgeHandle _heh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const Color& _c)
set_color	Mesh/AttribKernelT.hh	/^  void set_color(VertexHandle _vh, const Color& _c)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const Color& _c)
set_deleted	Mesh/IteratorsT.hh	/^                status.set_deleted(true);$/;"	p	signature:(true)
set_deleted	Mesh/Status.hh	/^  void set_deleted(bool _b) { change_bit(DELETED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_deleted	Mesh/gen/iterators_template.hh	/^      status.set_deleted(true);$/;"	p	signature:(true)
set_distance_to_plane	Geometry/QuadricT.hh	/^  void set_distance_to_plane(Scalar _a, Scalar _b, Scalar _c, Scalar _d)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(Scalar _a, Scalar _b, Scalar _c, Scalar _d)
set_distance_to_plane	Geometry/QuadricT.hh	/^  void set_distance_to_plane(const _Normal&  _n, const _Point& _p)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Normal& _n, const _Point& _p)
set_distance_to_point	Geometry/QuadricT.hh	/^  void set_distance_to_point(const _Point& _pt)$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:(const _Point& _pt)
set_epsilon	IO/reader/STLReader.hh	/^  void set_epsilon(float _eps) { eps_=_eps; }$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:(float _eps)
set_face_handle	Mesh/ArrayKernel.hh	/^  void set_face_handle(HalfedgeHandle _heh, FaceHandle _fh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, FaceHandle _fh)
set_face_texindex	IO/importer/BaseImporter.hh	/^  virtual void set_face_texindex( FaceHandle _fh, int _texId ) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:( FaceHandle _fh, int _texId )
set_face_texindex	IO/importer/ImporterT.hh	/^  virtual void set_face_texindex( FaceHandle _fh, int _texId ) {$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:( FaceHandle _fh, int _texId )
set_feature	Mesh/Status.hh	/^  void set_feature(bool _b) { change_bit(FEATURE, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_fixed_nonmanifold	Mesh/Status.hh	/^  void set_fixed_nonmanifold(bool _b) { change_bit(FIXEDNONMANIFOLD, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_halfedge_handle(FaceHandle _fh, HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh, HalfedgeHandle _heh)
set_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_halfedge_handle(VertexHandle _vh, HalfedgeHandle _heh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh, HalfedgeHandle _heh)
set_hidden	Mesh/IteratorsT.hh	/^                status.set_hidden(true);$/;"	p	signature:(true)
set_hidden	Mesh/Status.hh	/^  void set_hidden(bool _b) { change_bit(HIDDEN, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_hidden	Mesh/gen/iterators_template.hh	/^      status.set_hidden(true);$/;"	p	signature:(true)
set_isolated	Mesh/ArrayKernel.hh	/^  void set_isolated(VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh)
set_locked	Mesh/Status.hh	/^  void set_locked(bool _b) { change_bit(LOCKED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_map_Kd	IO/reader/OBJReader.cc	/^        mat.set_map_Kd( textureName, textureId++ );$/;"	p	file:	signature:( textureName, textureId++ )
set_map_Kd	IO/reader/OBJReader.hh	/^    void set_map_Kd( std::string _name, int _index_Kd )$/;"	f	class:OpenMesh::IO::_OBJReader_::Material	access:public	signature:( std::string _name, int _index_Kd )
set_next_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_next_halfedge_handle(HalfedgeHandle _heh, HalfedgeHandle _nheh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, HalfedgeHandle _nheh)
set_normal	IO/importer/BaseImporter.hh	/^  virtual void set_normal(FaceHandle _fh, const Vec3f& _normal) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(FaceHandle _fh, const Vec3f& _normal)
set_normal	IO/importer/BaseImporter.hh	/^  virtual void set_normal(VertexHandle _vh, const Vec3f& _normal) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec3f& _normal)
set_normal	IO/importer/ImporterT.hh	/^            mesh_.set_normal(heh,it_heNs->second);$/;"	p	signature:(heh,it_heNs->second)
set_normal	IO/importer/ImporterT.hh	/^      mesh_.set_normal(_fh, vector_cast<Normal>(_normal));$/;"	p	signature:(_fh, vector_cast<Normal>(_normal))
set_normal	IO/importer/ImporterT.hh	/^      mesh_.set_normal(_vh, vector_cast<Normal>(_normal));$/;"	p	signature:(_vh, vector_cast<Normal>(_normal))
set_normal	IO/importer/ImporterT.hh	/^  virtual void set_normal(FaceHandle _fh, const Vec3f& _normal)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(FaceHandle _fh, const Vec3f& _normal)
set_normal	IO/importer/ImporterT.hh	/^  virtual void set_normal(VertexHandle _vh, const Vec3f& _normal)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec3f& _normal)
set_normal	IO/reader/OBJReader.cc	/^                _bi.set_normal(vhandles.back(), normals[value-1]);$/;"	p	file:	signature:(vhandles.back(), normals[value-1])
set_normal	IO/reader/OFFReader.cc	/^        _bi.set_normal(vh, n);$/;"	p	file:	signature:(vh, n)
set_normal	IO/reader/PLYReader.cc	/^          _bi.set_normal(vh, n);$/;"	p	file:	signature:(vh, n)
set_normal	Mesh/AttribKernelT.hh	/^  void set_normal(FaceHandle _fh, const Normal& _n)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh, const Normal& _n)
set_normal	Mesh/AttribKernelT.hh	/^  void set_normal(HalfedgeHandle _heh, const Normal& _n)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const Normal& _n)
set_normal	Mesh/AttribKernelT.hh	/^  void set_normal(VertexHandle _vh, const Normal& _n)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const Normal& _n)
set_persistent	Utils/BaseProperty.hh	/^  virtual void set_persistent( bool _yn ) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:( bool _yn )
set_persistent	Utils/Property.hh	/^  virtual void set_persistent( bool _yn )$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( bool _yn )
set_point	Mesh/AttribKernelT.hh	/^  void set_point(VertexHandle _vh, const Point& _p)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const Point& _p)
set_prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_prev_halfedge_handle(HalfedgeHandle \/* _heh *\/, HalfedgeHandle \/* _pheh *\/,$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle , HalfedgeHandle , GenProg::False)
set_prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_prev_halfedge_handle(HalfedgeHandle _heh, HalfedgeHandle _pheh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, HalfedgeHandle _pheh)
set_prev_halfedge_handle	Mesh/ArrayKernel.hh	/^  void set_prev_halfedge_handle(HalfedgeHandle _heh, HalfedgeHandle _pheh,$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, HalfedgeHandle _pheh, GenProg::True)
set_selected	Mesh/Status.hh	/^  void set_selected(bool _b) { change_bit(SELECTED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_tagged	Mesh/Status.hh	/^  void set_tagged(bool _b) { change_bit(TAGGED, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_tagged2	Mesh/Status.hh	/^  void set_tagged2(bool _b) { change_bit(TAGGED2, _b); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(bool _b)
set_texcoord	IO/importer/BaseImporter.hh	/^  virtual void set_texcoord(HalfedgeHandle _heh, const Vec2f& _texcoord) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(HalfedgeHandle _heh, const Vec2f& _texcoord)
set_texcoord	IO/importer/BaseImporter.hh	/^  virtual void set_texcoord(VertexHandle _vh, const Vec2f& _texcoord) = 0;$/;"	p	class:OpenMesh::IO::BaseImporter	access:public	signature:(VertexHandle _vh, const Vec2f& _texcoord)
set_texcoord	IO/importer/ImporterT.hh	/^  virtual void set_texcoord(HalfedgeHandle _heh, const Vec2f& _texcoord)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(HalfedgeHandle _heh, const Vec2f& _texcoord)
set_texcoord	IO/importer/ImporterT.hh	/^  virtual void set_texcoord(VertexHandle _vh, const Vec2f& _texcoord)$/;"	f	class:OpenMesh::IO::ImporterT	access:public	signature:(VertexHandle _vh, const Vec2f& _texcoord)
set_texcoord	IO/reader/OBJReader.cc	/^                  _bi.set_texcoord(vhandles.back(), texcoords[value - 1]);$/;"	p	file:	signature:(vhandles.back(), texcoords[value - 1])
set_texcoord	IO/reader/OFFReader.cc	/^        _bi.set_texcoord(vh, t);$/;"	p	file:	signature:(vh, t)
set_texcoord	IO/reader/PLYReader.cc	/^          _bi.set_texcoord(vh, t);$/;"	p	file:	signature:(vh, t)
set_texcoord1D	Mesh/AttribKernelT.hh	/^  void set_texcoord1D(HalfedgeHandle _heh, const TexCoord1D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const TexCoord1D& _t)
set_texcoord1D	Mesh/AttribKernelT.hh	/^  void set_texcoord1D(VertexHandle _vh, const TexCoord1D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const TexCoord1D& _t)
set_texcoord2D	IO/importer/ImporterT.hh	/^      mesh_.set_texcoord2D(_heh, vector_cast<TexCoord2D>(_texcoord));$/;"	p	signature:(_heh, vector_cast<TexCoord2D>(_texcoord))
set_texcoord2D	IO/importer/ImporterT.hh	/^      mesh_.set_texcoord2D(_vh, vector_cast<TexCoord2D>(_texcoord));$/;"	p	signature:(_vh, vector_cast<TexCoord2D>(_texcoord))
set_texcoord2D	Mesh/AttribKernelT.hh	/^  void set_texcoord2D(HalfedgeHandle _heh, const TexCoord2D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const TexCoord2D& _t)
set_texcoord2D	Mesh/AttribKernelT.hh	/^  void set_texcoord2D(VertexHandle _vh, const TexCoord2D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const TexCoord2D& _t)
set_texcoord3D	Mesh/AttribKernelT.hh	/^  void set_texcoord3D(HalfedgeHandle _heh, const TexCoord3D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh, const TexCoord3D& _t)
set_texcoord3D	Mesh/AttribKernelT.hh	/^  void set_texcoord3D(VertexHandle _vh, const TexCoord3D& _t) {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh, const TexCoord3D& _t)
set_texture_index	IO/importer/ImporterT.hh	/^      mesh_.set_texture_index(_fh , _texId);$/;"	p	signature:(_fh , _texId)
set_texture_index	Mesh/AttribKernelT.hh	/^  void set_texture_index(FaceHandle _fh, const TextureIndex& _t)$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh, const TextureIndex& _t)
set_vertex_handle	Mesh/ArrayKernel.hh	/^  void set_vertex_handle(HalfedgeHandle _heh, VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh, VertexHandle _vh)
sideAngle0	Geometry/NormalConeT.cc	/^  Scalar sideAngle0 = std::max(angle_-centerAngle, _cone.angle_);$/;"	l
sideAngle1	Geometry/NormalConeT.cc	/^  Scalar sideAngle1 = std::max(_cone.angle_-centerAngle, angle_);$/;"	l
sign_a	Mesh/PolyMeshT.hh	/^      Scalar sign_a = dot(cross(v0, v1), f_n);$/;"	l
signed_	IO/OMFormat.hh	/^      unsigned signed_  : SIZE_SIGNED; \/\/ bool$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
signed_distance	Geometry/Plane3d.hh	/^  value_type signed_distance(const OpenMesh::Vec3f &_p)$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:(const OpenMesh::Vec3f &_p)
singed_distance	Geometry/Plane3d.hh	/^  value_type singed_distance(const OpenMesh::Vec3f &point)$/;"	f	class:OpenMesh::VDPM::Plane3d	access:public	signature:(const OpenMesh::Vec3f &point)
size	Geometry/VectorT_inc.hh	/^  static inline size_t size() { return DIM; }$/;"	f	class:CLASSNAME	access:public	signature:()
size	IO/OMFormat.hh	/^    assert( vector_traits< VecType >::size() < 9 );$/;"	p	signature:()
size	IO/OMFormat.hh	/^    size_t size;$/;"	l
size	IO/importer/ImporterT.hh	/^      omerr() << failed_faces_.size()$/;"	p	signature:()
size	IO/reader/OBJReader.cc	/^      omlog() << "  " << materials_.size() << " materials loaded.\\n";$/;"	p	file:	signature:()
size	Mesh/ArrayKernel.hh	/^    inline unsigned int                     size() const$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:() const
size	Mesh/ArrayKernel.hh	/^    unsigned int                            size() const$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:() const
size	Mesh/BaseKernel.cc	/^  _ostr << eprops_.size() << " eprops:\\n";$/;"	p	file:	signature:()
size	Mesh/BaseKernel.cc	/^  _ostr << fprops_.size() << " fprops:\\n";$/;"	p	file:	signature:()
size	Mesh/BaseKernel.cc	/^  _ostr << hprops_.size() << " hprops:\\n";$/;"	p	file:	signature:()
size	Mesh/BaseKernel.cc	/^  _ostr << mprops_.size() << " mprops:\\n";$/;"	p	file:	signature:()
size	Mesh/BaseKernel.cc	/^  _ostr << vprops_.size() << " vprops:\\n";$/;"	p	file:	signature:()
size	Utils/Property.hh	/^    assert( size_t(_idx) < data_.size() );$/;"	p	signature:()
size	Utils/Property.hh	/^    assert( size_t(_idx) < data_.size());$/;"	p	signature:()
size	Utils/PropertyContainer.hh	/^  size_t size() const { return properties_.size(); }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:() const
size	Utils/vector_traits.hh	/^  static size_t size() { return size_; }$/;"	f	struct:OpenMesh::vector_traits	access:public	signature:()
size_	Geometry/VectorT_inc.hh	/^  static const size_t size_ = DIM;$/;"	m	class:CLASSNAME	access:public
size_	Utils/vector_traits.hh	/^  static const size_t size_ = T::size_;$/;"	m	struct:OpenMesh::vector_traits	access:public
size_max	IO/OMFormat.hh	/^      static const size_t size_max = 256;$/;"	m	class:OpenMesh::IO::OMFormat::Chunk::PropertyName	access:public
size_of	IO/SR_binary.hh	/^  static size_t size_of(const value_type&) { return UnknownSize; }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(const value_type&)
size_of	IO/SR_binary.hh	/^  static size_t size_of(void) { return UnknownSize; }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(void)
size_of	IO/SR_binary_spec.hh	/^  static size_t size_of() { return UnknownSize; }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:()
size_of	IO/SR_binary_spec.hh	/^  static size_t size_of() { return sizeof(status_t); }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:()
size_of	IO/SR_binary_spec.hh	/^  static size_t size_of(const value_type &_v)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(const value_type &_v)
size_of	IO/SR_binary_spec.hh	/^  static size_t size_of(const value_type&) { return size_of(); }$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(const value_type&)
size_of	IO/StoreRestore.hh	/^size_t size_of( const T& _v ) $/;"	f	namespace:OpenMesh::IO	signature:( const T& _v )
size_of	IO/StoreRestore.hh	/^size_t size_of(void) $/;"	f	namespace:OpenMesh::IO	signature:(void)
size_of	IO/reader/OMReader.cc	/^      size_t size_of = OMFormat::chunk_data_size(header_, chunk_header_);$/;"	l
size_of	IO/reader/OMReader.cc	/^      size_t size_of = header_.n_vertices_ * OMFormat::vector_size(chunk_header_);$/;"	l
size_of	Utils/BaseProperty.hh	/^  virtual size_t       size_of() const$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:() const
size_of	Utils/BaseProperty.hh	/^  virtual size_t       size_of(size_t _n_elem) const$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:(size_t _n_elem) const
size_of	Utils/Property.hh	/^  virtual size_t       size_of() const      { return size_of( n_elements() ); }$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
size_of	Utils/Property.hh	/^  virtual size_t       size_of() const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:() const
size_of	Utils/Property.hh	/^  virtual size_t       size_of(size_t \/* _n_elem *\/) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t ) const
size_of	Utils/Property.hh	/^  virtual size_t       size_of(size_t _n_elem) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n_elem) const
size_of	Utils/Property.hh	/^  virtual size_t size_of(size_t _n_elem) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _n_elem) const
size_of	Utils/Property.hh	/^  virtual size_t size_of(void) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(void) const
skip_bits_	Mesh/IteratorsT.hh	/^        unsigned int skip_bits_;$/;"	m	class:OpenMesh::Iterators::GenericIteratorT	access:protected
skip_bits_	Mesh/gen/iterators_template.hh	/^  unsigned int  skip_bits_;$/;"	m	class:IteratorT	access:private
skip_bwd	Mesh/IteratorsT.hh	/^        void skip_bwd() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:private	signature:()
skip_bwd	Mesh/gen/iterators_template.hh	/^  void skip_bwd() $/;"	f	class:IteratorT	access:private	signature:()
skip_fwd	Mesh/IteratorsT.hh	/^        void skip_fwd() {$/;"	f	class:OpenMesh::Iterators::GenericIteratorT	access:private	signature:()
skip_fwd	Mesh/gen/iterators_template.hh	/^  void skip_fwd() $/;"	f	class:IteratorT	access:private	signature:()
split	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split(FaceHandle fh, VertexHandle vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle fh, VertexHandle vh)
split	Mesh/PolyConnectivity.hh	/^  void split(FaceHandle _fh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
split	Mesh/PolyMeshT.hh	/^  inline void split(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
split	Mesh/PolyMeshT.hh	/^  inline void split(EdgeHandle _eh, const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(EdgeHandle _eh, const Point& _p)
split	Mesh/PolyMeshT.hh	/^  inline void split(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
split	Mesh/PolyMeshT.hh	/^  inline void split(FaceHandle _fh, const Point& _p)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh, const Point& _p)
split	Mesh/PolyMeshT.hh	/^  { Kernel::split(_fh, _vh); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_fh, _vh)
split	Mesh/PolyMeshT.hh	/^  { Kernel::split(_fh, add_vertex(_p)); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_fh, add_vertex(_p))
split	Mesh/TriConnectivity.cc	/^void TriConnectivity::split(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
split	Mesh/TriConnectivity.hh	/^  inline void split(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
split	Mesh/TriConnectivity.hh	/^  void split(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
split	Mesh/TriConnectivity.hh	/^  { PolyConnectivity::split(_fh, _vh); }$/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_fh, _vh)
split	Mesh/TriMeshT.hh	/^    Kernel::split(_eh, _vh);$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, _vh)
split	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split(_eh, vh); return vh;$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, vh)
split	Mesh/TriMeshT.hh	/^  inline VertexHandle split(EdgeHandle _eh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, const Point& _p)
split	Mesh/TriMeshT.hh	/^  inline VertexHandle split(FaceHandle _fh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, const Point& _p)
split	Mesh/TriMeshT.hh	/^  inline void split(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
split	Mesh/TriMeshT.hh	/^  inline void split(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
split	Mesh/TriMeshT.hh	/^  { PolyMesh::split(_fh, _vh); }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, _vh)
split	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p); PolyMesh::split(_fh, vh); return vh; }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, vh)
split_copy	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split_copy(FaceHandle fh, VertexHandle vh) {$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle fh, VertexHandle vh)
split_copy	Mesh/PolyConnectivity.hh	/^  void split_copy(FaceHandle _fh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
split_copy	Mesh/TriConnectivity.cc	/^void TriConnectivity::split_copy(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
split_copy	Mesh/TriConnectivity.hh	/^  inline void split_copy(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
split_copy	Mesh/TriConnectivity.hh	/^  void split_copy(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
split_copy	Mesh/TriConnectivity.hh	/^  { PolyConnectivity::split_copy(_fh, _vh); }$/;"	p	class:OpenMesh::TriConnectivity::PolyConnectivity	signature:(_fh, _vh)
split_copy	Mesh/TriMeshT.hh	/^    Kernel::split_copy(_eh, _vh);$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, _vh)
split_copy	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split_copy(_eh, vh); return vh;$/;"	p	class:OpenMesh::TriMeshT::Kernel	signature:(_eh, vh)
split_copy	Mesh/TriMeshT.hh	/^  inline VertexHandle split_copy(EdgeHandle _eh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, const Point& _p)
split_copy	Mesh/TriMeshT.hh	/^  inline VertexHandle split_copy(FaceHandle _fh, const Point& _p)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, const Point& _p)
split_copy	Mesh/TriMeshT.hh	/^  inline void split_copy(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
split_copy	Mesh/TriMeshT.hh	/^  inline void split_copy(FaceHandle _fh, VertexHandle _vh)$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(FaceHandle _fh, VertexHandle _vh)
split_copy	Mesh/TriMeshT.hh	/^  { PolyMesh::split_copy(_fh, _vh); }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, _vh)
split_copy	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p);  PolyMesh::split_copy(_fh, vh); return vh; }$/;"	p	class:OpenMesh::TriMeshT::PolyMesh	signature:(_fh, vh)
split_edge	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split_edge(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
split_edge	Mesh/PolyConnectivity.hh	/^  void split_edge(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
split_edge	Mesh/PolyMeshT.hh	/^  { Kernel::split_edge(_eh, _vh); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_eh, _vh)
split_edge	Mesh/PolyMeshT.hh	/^  { Kernel::split_edge(_eh, add_vertex(_p)); }$/;"	p	class:OpenMesh::PolyMeshT::Kernel	signature:(_eh, add_vertex(_p))
split_edge_copy	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::split_edge_copy(EdgeHandle _eh, VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(EdgeHandle _eh, VertexHandle _vh)
split_edge_copy	Mesh/PolyConnectivity.hh	/^  void split_edge_copy(EdgeHandle _eh, VertexHandle _vh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(EdgeHandle _eh, VertexHandle _vh)
start	IO/reader/OBJReader.cc	/^  size_t start = _string.find_first_not_of(" \\t\\r\\n");$/;"	l
start	IO/reader/STLReader.cc	/^  size_t start = _string.find_first_not_of(" \\t\\r\\n");$/;"	l
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceEdgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceFaceIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::FaceVertexIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexEdgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexFaceIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:protected
start_	Mesh/CirculatorsT.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:OpenMesh::Iterators::VertexVertexIterT	access:protected
start_	Mesh/gen/circulators_template.hh	/^  HalfedgeHandle   start_, heh_;$/;"	m	class:CirculatorT	access:private
start_vh	Mesh/PolyConnectivity.cc	/^  VertexHandle start_vh = from_vertex_handle(base_heh);$/;"	l
static_cast	IO/reader/OMReader.cc	/^    evt.push_back(static_cast<char>(_is.get()));$/;"	p	file:	signature:(_is.get())
stats	Utils/BaseProperty.cc	/^void BaseProperty::stats(std::ostream& _ostr) const$/;"	f	class:OpenMesh::BaseProperty	signature:(std::ostream& _ostr) const
stats	Utils/BaseProperty.hh	/^  virtual void stats(std::ostream& _ostr) const;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(std::ostream& _ostr) const
status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(EdgeHandle _eh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh)
status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(FaceHandle _fh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh)
status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(HalfedgeHandle _hh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _hh)
status	Mesh/ArrayKernel.hh	/^  StatusInfo&                               status(VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh)
status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(EdgeHandle _eh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle _eh) const
status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(FaceHandle _fh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle _fh) const
status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(HalfedgeHandle _hh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _hh) const
status	Mesh/ArrayKernel.hh	/^  const StatusInfo&                         status(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
status	Mesh/IteratorsT.hh	/^                Attributes::StatusInfo status;$/;"	l
status	Mesh/gen/iterators_template.hh	/^      Attributes::StatusInfo status;$/;"	l
status_	Mesh/Status.hh	/^  value_type status_;$/;"	m	class:OpenMesh::Attributes::StatusInfo	access:private
status_pph	Mesh/ArrayKernel.hh	/^  inline EdgeStatusPropertyHandle           status_pph(EdgeHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(EdgeHandle ) const
status_pph	Mesh/ArrayKernel.hh	/^  inline FaceStatusPropertyHandle           status_pph(FaceHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(FaceHandle ) const
status_pph	Mesh/ArrayKernel.hh	/^  inline HalfedgeStatusPropertyHandle       status_pph(HalfedgeHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle ) const
status_pph	Mesh/ArrayKernel.hh	/^  inline VertexStatusPropertyHandle         status_pph(VertexHandle \/*_hnd*\/) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle ) const
status_t	IO/SR_binary_spec.hh	/^  typedef value_type::value_type           status_t;$/;"	t	struct:OpenMesh::IO::binary	access:public
step_weights_	Geometry/LoopSchemeMaskT.hh	/^  Scalar                                    step_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
store	IO/OMFormat.hh	/^    size_t store( std::ostream& _os, bool _swap ) const$/;"	f	struct:OpenMesh::IO::OMFormat::Header	access:public	signature:( std::ostream& _os, bool _swap ) const
store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const OMFormat::Chunk::PropertyName& _pn,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const OMFormat::Chunk::PropertyName& _pn, bool _swap )
store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const OMFormat::Header& _hdr, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const OMFormat::Header& _hdr, bool _swap)
store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<1>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<1>, bool _swap )
store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<2>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<2>, bool _swap )
store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<3>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<3>, bool _swap )
store	IO/OMFormat.hh	/^  size_t store( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<4>,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, GenProg::Int2Type<4>, bool _swap )
store	IO/OMFormat.hh	/^  store( std::ostream& _os, const OMFormat::Chunk::Header& _hdr, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const OMFormat::Chunk::Header& _hdr, bool _swap)
store	IO/OMFormat.hh	/^  store( std::ostream& _os,$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap)
store	IO/OMFormat.hh	/^  store( std::ostream& _os,$/;"	p	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
store	IO/OMFormat.hh	/^  store( std::ostream& _os,$/;"	p	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
store	IO/OMFormatT.cc	/^  store( std::ostream& _os, $/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_signed)
store	IO/OMFormatT.cc	/^  store( std::ostream& _os, $/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _val, OMFormat::Chunk::Integer_Size _b, bool _swap, t_unsigned)
store	IO/SR_binary.hh	/^  size_t store( std::ostream& \/* _os *\/,$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:( std::ostream& , const value_type& , bool )
store	IO/SR_binary_spec.hh	/^  size_t store(std::ostream& _os, const value_type& _v, bool _swap=false)$/;"	f	struct:OpenMesh::IO::binary	access:public	signature:(std::ostream& _os, const value_type& _v, bool _swap=false)
store	IO/StoreRestore.hh	/^size_t store( std::ostream& _os, const T& _v, bool _swap=false)$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const T& _v, bool _swap=false)
store	Utils/BaseProperty.hh	/^  virtual size_t store( std::ostream& _ostr, bool _swap ) const = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:( std::ostream& _ostr, bool _swap ) const
store	Utils/Property.hh	/^  size_t store( std::ostream& _ostr, bool \/* _swap *\/ ) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::ostream& _ostr, bool ) const
store	Utils/Property.hh	/^  size_t store( std::ostream& _ostr, bool _swap ) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::ostream& _ostr, bool _swap ) const
store	Utils/Property.hh	/^  virtual size_t store( std::ostream& _ostr, bool _swap ) const$/;"	f	class:OpenMesh::PropertyT	access:public	signature:( std::ostream& _ostr, bool _swap ) const
store_binary_custom_chunk	IO/writer/OMWriter.cc	/^size_t _OMWriter_::store_binary_custom_chunk(std::ostream& _os,$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(std::ostream& _os, const BaseProperty& _bp, OMFormat::Chunk::Entity _entity, bool _swap) const
store_binary_custom_chunk	IO/writer/OMWriter.hh	/^  size_t store_binary_custom_chunk( std::ostream&, const BaseProperty&,$/;"	p	class:OpenMesh::IO::_OMWriter_	access:protected	signature:( std::ostream&, const BaseProperty&, OMFormat::Chunk::Entity, bool) const
stream	IO/reader/OBJReader.cc	/^    std::stringstream stream(line);$/;"	p	file:	signature:(line)
stream	IO/reader/OFFReader.cc	/^      std::stringstream stream( line );$/;"	p	file:	signature:( line )
stream	IO/reader/OFFReader.cc	/^    std::stringstream stream( line );$/;"	p	file:	signature:( line )
streamPos	IO/reader/PLYReader.cc	/^    size_t streamPos = _is.tellg();$/;"	l
streambuffer_	System/mostream.hh	/^  multiplex_streambuf  streambuffer_;$/;"	m	class:OpenMesh::mostream	access:private
string	Utils/Property.hh	/^  virtual void push_back()        { data_.push_back(std::string()); }$/;"	p	signature:()
strstream	IO/reader/STLReader.cc	/^        std::stringstream strstream(line);$/;"	p	file:	signature:(line)
strstream	IO/reader/STLReader.cc	/^      std::stringstream strstream(line);$/;"	p	file:	signature:(line)
supports	IO/reader/OMReader.cc	/^bool _OMReader_::supports(const OMFormat::uint8 \/* version *\/) const$/;"	f	class:OpenMesh::IO::_OMReader_	signature:(const OMFormat::uint8 ) const
supports	IO/reader/OMReader.hh	/^  bool supports( const OMFormat::uint8 version ) const;$/;"	p	class:OpenMesh::IO::_OMReader_	access:private	signature:( const OMFormat::uint8 version ) const
swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[0], dc.c[7]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[0], dc.c[7])
swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[1], dc.c[6]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[1], dc.c[6])
swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[2], dc.c[5]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[2], dc.c[5])
swap	IO/BinaryHelper.cc	/^    std::swap(dc.c[3], dc.c[4]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(dc.c[3], dc.c[4])
swap	IO/BinaryHelper.cc	/^    std::swap(fc.c[0], fc.c[3]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(fc.c[0], fc.c[3])
swap	IO/BinaryHelper.cc	/^    std::swap(fc.c[1], fc.c[2]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(fc.c[1], fc.c[2])
swap	IO/BinaryHelper.cc	/^    std::swap(ic.c[0], ic.c[3]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(ic.c[0], ic.c[3])
swap	IO/BinaryHelper.cc	/^    std::swap(ic.c[1], ic.c[2]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(ic.c[1], ic.c[2])
swap	IO/BinaryHelper.cc	/^  if (_swap) std::swap(sc.c[0], sc.c[1]);$/;"	p	class:OpenMesh::IO::std	file:	signature:(sc.c[0], sc.c[1])
swap	IO/reader/OFFReader.cc	/^   bool swap = _opt.check( Options::Swap );$/;"	l
swap	IO/reader/OMReader.cc	/^  bool swap = _opt.check(Options::Swap) || (Endian::local() == Endian::MSB);$/;"	l
swap	IO/reader/PLYReader.cc	/^    bool swap = _opt.check(Options::Swap);$/;"	l
swap	IO/writer/OMWriter.cc	/^  bool swap = _opt.check(Options::Swap) || (Endian::local() == Endian::MSB);$/;"	l
swap	Mesh/ArrayKernelT.cc	/^      std::swap(edges_[i0], edges_[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(edges_[i0], edges_[i1])
swap	Mesh/ArrayKernelT.cc	/^      std::swap(faces_[i0], faces_[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(faces_[i0], faces_[i1])
swap	Mesh/ArrayKernelT.cc	/^      std::swap(fh_map[i0], fh_map[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(fh_map[i0], fh_map[i1])
swap	Mesh/ArrayKernelT.cc	/^      std::swap(hh_map[2*i0+1], hh_map[2*i1+1]);$/;"	p	class:OpenMesh::std	file:	signature:(hh_map[2*i0+1], hh_map[2*i1+1])
swap	Mesh/ArrayKernelT.cc	/^      std::swap(hh_map[2*i0], hh_map[2*i1]);$/;"	p	class:OpenMesh::std	file:	signature:(hh_map[2*i0], hh_map[2*i1])
swap	Mesh/ArrayKernelT.cc	/^      std::swap(vertices_[i0], vertices_[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(vertices_[i0], vertices_[i1])
swap	Mesh/ArrayKernelT.cc	/^      std::swap(vh_map[i0],  vh_map[i1]);$/;"	p	class:OpenMesh::std	file:	signature:(vh_map[i0], vh_map[i1])
swap	Mesh/BaseKernel.hh	/^    eprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
swap	Mesh/BaseKernel.hh	/^    fprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
swap	Mesh/BaseKernel.hh	/^    hprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
swap	Mesh/BaseKernel.hh	/^    vprops_.swap(_i0, _i1);$/;"	p	signature:(_i0, _i1)
swap	Mesh/PolyConnectivity.cc	/^    std::swap(del_fh, rem_fh);$/;"	p	class:OpenMesh::std	file:	signature:(del_fh, rem_fh)
swap	Utils/BaseProperty.hh	/^  virtual void swap(size_t _i0, size_t _i1) = 0;$/;"	p	class:OpenMesh::BaseProperty	access:public	signature:(size_t _i0, size_t _i1)
swap	Utils/Property.hh	/^    std::swap(data_[_i0], data_[_i1]);$/;"	p	class:OpenMesh::PropertyT::std	signature:(data_[_i0], data_[_i1])
swap	Utils/Property.hh	/^  virtual void swap(size_t _i0, size_t _i1) {$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _i0, size_t _i1)
swap	Utils/Property.hh	/^  virtual void swap(size_t _i0, size_t _i1)$/;"	f	class:OpenMesh::PropertyT	access:public	signature:(size_t _i0, size_t _i1)
swap	Utils/Property.hh	/^  { std::swap(data_[_i0], data_[_i1]); }$/;"	p	class:OpenMesh::PropertyT::std	signature:(data_[_i0], data_[_i1])
swap	Utils/PropertyContainer.hh	/^    void operator()(BaseProperty* _p) const { if (_p) _p->swap(i0_, i1_); }$/;"	p	signature:(i0_, i1_)
swap	Utils/PropertyContainer.hh	/^  void swap(size_t _i0, size_t _i1) const {$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:(size_t _i0, size_t _i1) const
swap	Utils/PropertyManager.hh	/^            std::swap(mesh_, rhs.mesh_);$/;"	p	class:OpenMesh::PropertyManager::std	signature:(mesh_, rhs.mesh_)
swap	Utils/PropertyManager.hh	/^            std::swap(prop_, rhs.prop_);$/;"	p	class:OpenMesh::PropertyManager::std	signature:(prop_, rhs.prop_)
swap	Utils/PropertyManager.hh	/^            std::swap(retain_, rhs.retain_);$/;"	p	class:OpenMesh::PropertyManager::std	signature:(retain_, rhs.retain_)
swap	Utils/PropertyManager.hh	/^        void swap(PropertyManager &rhs) {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:(PropertyManager &rhs)
swapFlag	IO/reader/STLReader.cc	/^  bool                       swapFlag;$/;"	l
swapFlag	IO/reader/STLReader.cc	/^  bool swapFlag = (endian_test.c[3] == 1);$/;"	l
swap_	IO/SR_binary_spec.hh	/^  bool          swap_;$/;"	m	struct:OpenMesh::IO::FunctorRestore	access:public
swap_	IO/SR_binary_spec.hh	/^  bool          swap_;$/;"	m	struct:OpenMesh::IO::FunctorStore	access:public
sync	System/mostream.hh	/^  virtual int sync() $/;"	f	class:OpenMesh::multiplex_streambuf	access:protected	signature:()
sz	Mesh/ArrayKernel.hh	/^      unsigned int sz = 0;$/;"	l
t	IO/reader/OFFReader.cc	/^      stream >> t[0]; stream >> t[1];$/;"	l
t	IO/reader/OFFReader.cc	/^  OpenMesh::Vec2f         t;$/;"	l
t	IO/reader/PLYReader.cc	/^                _in >> t[0];$/;"	l
t	IO/reader/PLYReader.cc	/^                _in >> t[1];$/;"	l
t	IO/reader/PLYReader.cc	/^    OpenMesh::Vec2f        t;  \/\/ TexCoords$/;"	l
t	IO/reader/PLYReader.cc	/^    OpenMesh::Vec2f t;$/;"	l
t	IO/writer/OBJWriter.cc	/^  Vec2f t;$/;"	l
t	IO/writer/OFFWriter.cc	/^      _out << " " << t[0] << " " << t[1];$/;"	l
t	IO/writer/OFFWriter.cc	/^  Vec2f t;$/;"	l
t	IO/writer/OMWriter.cc	/^  Vec2f t;$/;"	l
t	IO/writer/PLYWriter.cc	/^    	_out << " " << t[0] << " " << t[1];$/;"	l
t	IO/writer/PLYWriter.cc	/^  OpenMesh::Vec2f t;$/;"	l
t	IO/writer/PLYWriter.cc	/^  Vec2f t;$/;"	l
t	Utils/Property.hh	/^  { bool t(data_[_i0]); data_[_i0]=data_[_i1]; data_[_i1]=t; }$/;"	p	signature:(data_[_i0])
t0	Mesh/TriConnectivity.cc	/^    HalfedgeHandle t0 = opposite_halfedge_handle(e0);$/;"	l
t1	Mesh/TriConnectivity.cc	/^    set_next_halfedge_handle(prev_halfedge_handle(h0), t1);$/;"	l
t1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle t1 = opposite_halfedge_handle(e1);$/;"	l
t2	Mesh/TriConnectivity.cc	/^    HalfedgeHandle t2 = opposite_halfedge_handle(e2);$/;"	l
t_end	System/mostream.hh	/^    tlist_iter t_it(targets_.begin()), t_end(targets_.end());$/;"	p	signature:(targets_.end())
t_end	System/mostream.hh	/^    tmap_iter t_it(target_map_.begin()), t_end(target_map_.end());$/;"	p	signature:(target_map_.end())
t_it	System/mostream.hh	/^    tlist_iter t_it(targets_.begin()), t_end(targets_.end());$/;"	p	signature:(targets_.begin())
t_it	System/mostream.hh	/^    tmap_iter  t_it = target_map_.find(key);$/;"	l
t_it	System/mostream.hh	/^    tmap_iter t_it(target_map_.begin()), t_end(target_map_.end());$/;"	p	signature:(target_map_.begin())
t_signed	IO/OMFormat.hh	/^  typedef GenProg::True  t_signed;$/;"	t	namespace:OpenMesh::IO
t_unsigned	IO/OMFormat.hh	/^  typedef GenProg::False t_unsigned;$/;"	t	namespace:OpenMesh::IO
tagged	Mesh/Status.hh	/^  bool tagged() const  { return is_bit_set(TAGGED); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
tagged2	Mesh/Status.hh	/^  bool tagged2() const  { return is_bit_set(TAGGED2); }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:() const
tang0_weights_	Geometry/LoopSchemeMaskT.hh	/^  std::vector<Scalar>                       tang0_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
tang1_weights_	Geometry/LoopSchemeMaskT.hh	/^  std::vector<Scalar>                       tang1_weights_[cache_size];$/;"	m	class:OpenMesh::LoopSchemeMaskT	access:protected
target_	System/mostream.hh	/^  T& target_;$/;"	m	class:OpenMesh::multiplex_target	access:private
target_list	System/mostream.hh	/^  typedef std::vector<target_type*>       target_list;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
target_map	System/mostream.hh	/^  typedef std::map<void*, target_type*>   target_map;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
target_map_	System/mostream.hh	/^  target_map   target_map_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
target_type	System/mostream.hh	/^  typedef basic_multiplex_target          target_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
targets_	System/mostream.hh	/^  target_list  targets_;$/;"	m	class:OpenMesh::multiplex_streambuf	access:private
texcoord	IO/exporter/BaseExporter.hh	/^  virtual Vec2f  texcoord(VertexHandle _vh) const = 0;$/;"	p	class:OpenMesh::IO::BaseExporter	access:public	signature:(VertexHandle _vh) const
texcoord	IO/exporter/ExporterT.hh	/^  Vec2f  texcoord(VertexHandle _vh) const$/;"	f	class:OpenMesh::IO::ExporterT	access:public	signature:(VertexHandle _vh) const
texcoord1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D& texcoord1D(HalfedgeHandle _heh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
texcoord1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D& texcoord1D(VertexHandle _vh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
texcoord2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D& texcoord2D(HalfedgeHandle _heh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
texcoord2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D& texcoord2D(VertexHandle _vh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
texcoord3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D& texcoord3D(HalfedgeHandle _heh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(HalfedgeHandle _heh) const
texcoord3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D& texcoord3D(VertexHandle _vh) const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(VertexHandle _vh) const
texcoords	IO/reader/OBJReader.cc	/^  std::vector<Vec2f>        texcoords;$/;"	l
texcoords1D	Mesh/AttribKernelT.hh	/^  const TexCoord1D* texcoords1D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
texcoords2D	Mesh/AttribKernelT.hh	/^  const TexCoord2D* texcoords2D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
texcoords3D	Mesh/AttribKernelT.hh	/^  const TexCoord3D* texcoords3D() const {$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
textureId	IO/reader/OBJReader.cc	/^  int         textureId = 1;$/;"	l
textureName	IO/reader/OBJReader.cc	/^  std::string textureName;$/;"	l
texture_index	Mesh/AttribKernelT.hh	/^  const TextureIndex& texture_index(FaceHandle _fh) const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:(FaceHandle _fh) const
theInstance	Utils/SingletonT.hh	/^    static T theInstance;$/;"	l
tlist_iter	System/mostream.hh	/^  typedef target_list::iterator           tlist_iter;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
tmap_iter	System/mostream.hh	/^  typedef target_map::iterator            tmap_iter;$/;"	t	class:OpenMesh::multiplex_streambuf	access:private
tmp	IO/IOManager.cc	/^    std::string tmp = " ";$/;"	l
tmp	IO/reader/OBJReader.cc	/^            std::stringstream tmp( vertex );$/;"	p	file:	signature:( vertex )
tmp	IO/reader/OBJReader.cc	/^            std::stringstream tmp( vertex.substr(0,found) );$/;"	p	file:	signature:( vertex.substr(0,found) )
tmp	IO/reader/OFFReader.cc	/^  float32_t tmp;$/;"	l
tmp	IO/reader/OFFReader.cc	/^  uint32_t tmp;$/;"	l
tmp	IO/reader/PLYReader.cc	/^                    _in >> tmp;$/;"	l
tmp	IO/reader/PLYReader.cc	/^            float64_t tmp;$/;"	l
tmp	IO/reader/PLYReader.cc	/^        float32_t tmp;$/;"	l
tmp	IO/reader/PLYReader.cc	/^    float                  tmp;$/;"	l
tmp	IO/reader/PLYReader.cc	/^    float tmp;$/;"	l
tmp	IO/writer/OFFWriter.cc	/^  float32_t tmp = value;$/;"	l
tmp	IO/writer/OFFWriter.cc	/^  uint32_t tmp = value;$/;"	l
tmp	IO/writer/PLYWriter.cc	/^  float32_t tmp;$/;"	l
tmp	Utils/RandomNumberGenerator.cc	/^  double tmp = resolution_;$/;"	l
tmp1	IO/reader/PLYReader.cc	/^            _is >> tmp1;$/;"	l
tmp1	IO/reader/PLYReader.cc	/^            std::string tmp1;$/;"	l
tmp2	IO/reader/PLYReader.cc	/^                _is >> tmp2;$/;"	l
tmp2	IO/reader/PLYReader.cc	/^            std::string tmp2;$/;"	l
tmp32	IO/writer/PLYWriter.cc	/^  uint32_t tmp32;$/;"	l
tmp8	IO/writer/PLYWriter.cc	/^  uint8_t tmp8;$/;"	l
tmp_char	IO/reader/PLYReader.cc	/^    int8_t tmp_char;$/;"	l
tmp_int16_t	IO/reader/PLYReader.cc	/^    int16_t tmp_int16_t;$/;"	l
tmp_int32_t	IO/reader/PLYReader.cc	/^    int32_t tmp_int32_t;$/;"	l
tmp_uchar	IO/reader/PLYReader.cc	/^    uint8_t tmp_uchar;$/;"	l
tmp_uint16_t	IO/reader/PLYReader.cc	/^    uint16_t tmp_uint16_t;$/;"	l
tmp_uint32_t	IO/reader/PLYReader.cc	/^    uint32_t tmp_uint32_t;$/;"	l
to_char_type	System/mostream.hh	/^    static char to_char_type(int_type c) { return char(c); }$/;"	f	struct:OpenMesh::multiplex_streambuf::traits_type	access:public	signature:(int_type c)
to_vertex_handle	Mesh/ArrayKernel.hh	/^  VertexHandle to_vertex_handle(HalfedgeHandle _heh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(HalfedgeHandle _heh) const
to_vertex_handle	Mesh/PolyConnectivity.cc	/^    vhandles.push_back(to_vertex_handle(hh));$/;"	p	file:	signature:(hh)
to_vertex_handle	Mesh/PolyConnectivity.cc	/^  VertexHandle v0(to_vertex_handle(v1v0));$/;"	p	file:	signature:(v1v0)
to_vertex_handle	Mesh/PolyConnectivity.cc	/^  VertexHandle v1(to_vertex_handle(v0v1));  $/;"	p	file:	signature:(v0v1)
to_vertex_handle	Mesh/PolyMeshT.cc	/^    VertexHandle r1_v(to_vertex_handle(cvoh_it));$/;"	p	file:	signature:(cvoh_it)
to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v0(to_vertex_handle(o0));$/;"	p	file:	signature:(o0)
to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v0(to_vertex_handle(v1v0));$/;"	p	file:	signature:(v1v0)
to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v1(to_vertex_handle(h0));$/;"	p	file:	signature:(h0)
to_vertex_handle	Mesh/TriConnectivity.cc	/^  VertexHandle    v1(to_vertex_handle(v0v1));$/;"	p	file:	signature:(v0v1)
tolower	IO/reader/BaseReader.cc	/^static inline char tolower(char c) $/;"	f	namespace:OpenMesh::IO	signature:(char c)
tolower	IO/writer/BaseWriter.cc	/^static inline char tolower(char c)$/;"	f	namespace:OpenMesh::IO	signature:(char c)
track_fhandles	Mesh/ArrayKernelT.cc	/^  const bool track_fhandles = ( !fh_to_update.empty() );$/;"	l
track_hhandles	Mesh/ArrayKernelT.cc	/^  const bool track_hhandles = ( !hh_to_update.empty() );$/;"	l
track_vhandles	Mesh/ArrayKernelT.cc	/^  const bool track_vhandles = ( !vh_to_update.empty() );$/;"	l
traits_type	System/mostream.hh	/^  struct traits_type$/;"	s	class:OpenMesh::multiplex_streambuf	access:public
traits_type	System/mostream.hh	/^  typedef base_type::traits_type      traits_type;$/;"	t	class:OpenMesh::multiplex_streambuf	access:public
transform	IO/reader/BaseReader.cc	/^    std::transform( ext.begin(), ext.end(), ext.begin(), tolower );$/;"	p	class:OpenMesh::IO::std	file:	signature:( ext.begin(), ext.end(), ext.begin(), tolower )
transform	IO/reader/BaseReader.cc	/^    std::transform( extension.begin(), extension.end(), $/;"	p	class:OpenMesh::IO::std	file:	signature:( extension.begin(), extension.end(), extension.begin(), tolower )
transform	IO/reader/BaseReader.cc	/^  std::transform( _ext.begin(), _ext.end(),  cmpExt.begin(), tolower );$/;"	p	class:OpenMesh::IO::std	file:	signature:( _ext.begin(), _ext.end(), cmpExt.begin(), tolower )
transform	IO/writer/BaseWriter.cc	/^    std::transform( extension.begin(), extension.end(), $/;"	p	class:OpenMesh::IO::std	file:	signature:( extension.begin(), extension.end(), extension.begin(), tolower )
trash	IO/reader/OFFReader.cc	/^        case 1 : stream >> trash; break; \/\/one int (isn't handled atm)$/;"	l
trash	IO/reader/OFFReader.cc	/^        case 2 : stream >> trash; stream >> trash; break; \/\/corrupt format (ignore)$/;"	l
trash	IO/reader/OFFReader.cc	/^      std::string trash;$/;"	l
trash	IO/reader/PLYReader.cc	/^                _in >> trash;$/;"	l
trash	IO/reader/PLYReader.cc	/^    std::string trash;$/;"	l
triangulate	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::triangulate()$/;"	f	class:OpenMesh::PolyConnectivity	signature:()
triangulate	Mesh/PolyConnectivity.cc	/^void PolyConnectivity::triangulate(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh)
triangulate	Mesh/PolyConnectivity.hh	/^  void triangulate();$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:()
triangulate	Mesh/PolyConnectivity.hh	/^  void triangulate(FaceHandle _fh);$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh)
trim	IO/reader/BaseReader.hh	/^static inline std::string &trim(std::string &_string) {$/;"	f	namespace:OpenMesh::IO	signature:(std::string &_string)
trimStdString	IO/reader/STLReader.cc	/^void trimStdString( std::string& _string) {$/;"	f	namespace:OpenMesh::IO	signature:( std::string& _string)
trimString	IO/reader/OBJReader.cc	/^void trimString( std::string& _string) {$/;"	f	namespace:OpenMesh::IO	signature:( std::string& _string)
two	Mesh/PolyConnectivity.cc	/^    HalfedgeHandle one, two;$/;"	l
type	Geometry/QuadricT.hh	/^  typedef QuadricT<Scalar> type;$/;"	t	class:OpenMesh::Geometry::QuadricT	access:public
type_	IO/OMFormat.hh	/^      unsigned type_    : SIZE_TYPE;   \/\/ 0 pos, 1 normal, 2 texcoord,$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
u	IO/reader/OBJReader.cc	/^      stream >> u; stream >> v;$/;"	l
u	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
u1	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; }  sc;$/;"	u	file:
u1	IO/BinaryHelper.cc	/^  union u1 { short int s; unsigned char c[2]; } sc;$/;"	u	file:
u2	IO/BinaryHelper.cc	/^  union u2 { int i; unsigned char c[4]; } ic;$/;"	u	file:
u3	IO/BinaryHelper.cc	/^  union u3 { float f; unsigned char c[4]; } fc;$/;"	u	file:
u4	IO/BinaryHelper.cc	/^  union u4 { double d; unsigned char c[8]; } dc;$/;"	u	file:
uchar	IO/OMFormat.hh	/^  typedef unsigned char      uchar;$/;"	t	namespace:OpenMesh::IO::OMFormat
uchar	IO/SR_types.hh	/^typedef unsigned char    uchar;$/;"	t	namespace:OpenMesh::IO
uint	System/config.h	/^typedef unsigned int uint;$/;"	t
uint16	IO/OMFormat.hh	/^  typedef uint16_t           uint16;$/;"	t	namespace:OpenMesh::IO::OMFormat
uint16_t	IO/SR_types.hh	/^typedef short          int16_t; typedef unsigned short     uint16_t;$/;"	t	namespace:OpenMesh::IO
uint32	IO/OMFormat.hh	/^  typedef uint32_t           uint32;$/;"	t	namespace:OpenMesh::IO::OMFormat
uint32_t	IO/SR_types.hh	/^typedef int            int32_t; typedef unsigned int       uint32_t;$/;"	t	namespace:OpenMesh::IO
uint64	IO/OMFormat.hh	/^  typedef uint64_t           uint64;$/;"	t	namespace:OpenMesh::IO::OMFormat
uint64_t	IO/SR_types.hh	/^typedef __int64        int64_t; typedef unsigned __int64   uint64_t;$/;"	t	namespace:OpenMesh::IO
uint64_t	IO/SR_types.hh	/^typedef long long      int64_t; typedef unsigned long long uint64_t;$/;"	t	namespace:OpenMesh::IO
uint8	IO/OMFormat.hh	/^  typedef uint8_t            uint8;$/;"	t	namespace:OpenMesh::IO::OMFormat
uint8_t	IO/SR_types.hh	/^typedef char           int8_t;  typedef unsigned char      uint8_t;$/;"	t	namespace:OpenMesh::IO
ulong	IO/SR_types.hh	/^typedef unsigned long    ulong;$/;"	t	namespace:OpenMesh::IO
unroll	Geometry/VectorT.hh	124;"	d
unroll	Geometry/VectorT.hh	137;"	d
unroll	Geometry/VectorT.hh	152;"	d
unroll	Geometry/VectorT.hh	157;"	d
unroll	Geometry/VectorT.hh	163;"	d
unroll	Geometry/VectorT.hh	168;"	d
unroll	Geometry/VectorT.hh	174;"	d
unroll	Geometry/VectorT.hh	179;"	d
unroll	Geometry/VectorT_inc.hh	54;"	d
unroll_comb	Geometry/VectorT.hh	153;"	d
unroll_comb	Geometry/VectorT.hh	158;"	d
unroll_comb	Geometry/VectorT.hh	164;"	d
unroll_comb	Geometry/VectorT.hh	169;"	d
unroll_comb	Geometry/VectorT.hh	175;"	d
unroll_comb	Geometry/VectorT.hh	180;"	d
unroll_csv	Geometry/VectorT.hh	154;"	d
unroll_csv	Geometry/VectorT.hh	159;"	d
unroll_csv	Geometry/VectorT.hh	165;"	d
unroll_csv	Geometry/VectorT.hh	170;"	d
unroll_csv	Geometry/VectorT.hh	176;"	d
unroll_csv	Geometry/VectorT.hh	181;"	d
unset	IO/Options.hh	/^  Options& unset( const value_type _rhs)$/;"	f	class:OpenMesh::IO::Options	access:public	signature:( const value_type _rhs)
unset	IO/writer/PLYWriter.cc	/^    _opt.unset(Options::FaceColor);$/;"	p	file:	signature:(Options::FaceColor)
unset	IO/writer/PLYWriter.cc	/^    _opt.unset(Options::FaceNormal);$/;"	p	file:	signature:(Options::FaceNormal)
unset_bit	Mesh/Status.hh	/^  void unset_bit(unsigned int _s) { status_ &= ~_s; }$/;"	f	class:OpenMesh::Attributes::StatusInfo	access:public	signature:(unsigned int _s)
unused_	IO/OMFormat.hh	/^      unsigned unused_  : 16; \/\/ fill up to 32 bits$/;"	m	struct:OpenMesh::IO::OMFormat::Chunk::Header	access:public
update_face_normals	Mesh/PolyMeshT.cc	/^update_face_normals()$/;"	f	class:OpenMesh::PolyMeshT	signature:()
update_face_normals	Mesh/PolyMeshT.hh	/^  void update_face_normals();$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:()
update_halfedge_normals	Mesh/PolyMeshT.cc	/^update_halfedge_normals(const double _feature_angle)$/;"	f	class:OpenMesh::PolyMeshT	signature:(const double _feature_angle)
update_halfedge_normals	Mesh/PolyMeshT.hh	/^  void update_halfedge_normals(const double _feature_angle = 0.8);$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:(const double _feature_angle = 0.8)
update_normal	Mesh/PolyMeshT.hh	/^  void update_normal(FaceHandle _fh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(FaceHandle _fh)
update_normal	Mesh/PolyMeshT.hh	/^  void update_normal(HalfedgeHandle _heh, const double _feature_angle = 0.8)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(HalfedgeHandle _heh, const double _feature_angle = 0.8)
update_normal	Mesh/PolyMeshT.hh	/^  void update_normal(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:(VertexHandle _vh)
update_normals	Mesh/PolyMeshT.cc	/^update_normals()$/;"	f	class:OpenMesh::PolyMeshT	signature:()
update_normals	Mesh/PolyMeshT.hh	/^  void update_normals();$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:()
update_read_filters	IO/IOManager.cc	/^update_read_filters()$/;"	f	class:OpenMesh::IO::_IOManager_	signature:()
update_read_filters	IO/IOManager.hh	/^  void update_read_filters();$/;"	p	class:OpenMesh::IO::_IOManager_	access:private	signature:()
update_vertex_normals	Mesh/PolyMeshT.cc	/^update_vertex_normals()$/;"	f	class:OpenMesh::PolyMeshT	signature:()
update_vertex_normals	Mesh/PolyMeshT.hh	/^  void update_vertex_normals();$/;"	p	class:OpenMesh::PolyMeshT	access:public	signature:()
update_write_filters	IO/IOManager.cc	/^update_write_filters()$/;"	f	class:OpenMesh::IO::_IOManager_	signature:()
update_write_filters	IO/IOManager.hh	/^  void update_write_filters();$/;"	p	class:OpenMesh::IO::_IOManager_	access:private	signature:()
useMatrial	IO/writer/OBJWriter.cc	/^  bool useMatrial = false;$/;"	l
userOptions	IO/reader/OBJReader.cc	/^  Options userOptions = _opt;$/;"	l
userOptions_	IO/reader/OFFReader.hh	/^  mutable Options userOptions_;$/;"	m	class:OpenMesh::IO::_OFFReader_	access:private
userOptions_	IO/reader/PLYReader.hh	/^  mutable Options userOptions_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
ushort	IO/SR_types.hh	/^typedef unsigned short   ushort;$/;"	t	namespace:OpenMesh::IO
v	IO/OMFormatT.cc	/^	OMFormat::int16 v = static_cast<OMFormat::int16>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::int16 v;$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::int32 v = static_cast<OMFormat::int32>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::int32 v;$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::int64 v = static_cast<OMFormat::int64>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::int64 v;$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::int8 v = static_cast<OMFormat::int8>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::int8 v;$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint16 v = static_cast<OMFormat::uint16>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint16 v;$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint32 v = static_cast<OMFormat::uint32>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint32 v;$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint64 v = static_cast<OMFormat::uint64>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint64 v;$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint8 v = static_cast<OMFormat::uint8>(_val);$/;"	l
v	IO/OMFormatT.cc	/^	OMFormat::uint8 v;$/;"	l
v	IO/SR_binary_spec.hh	/^    status_t v;$/;"	l
v	IO/SR_binary_spec.hh	/^    status_t v=_v.bits();$/;"	l
v	IO/reader/OBJReader.cc	/^      stream >> u; stream >> v;$/;"	l
v	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
v	IO/reader/OFFReader.cc	/^    _in >> v[0]; _in >> v[1]; _in >> v[2];$/;"	l
v	IO/reader/OFFReader.cc	/^  OpenMesh::Vec3f         v, n;$/;"	l
v	IO/reader/PLYReader.cc	/^                _in >> v[0];$/;"	l
v	IO/reader/PLYReader.cc	/^                _in >> v[1];$/;"	l
v	IO/reader/PLYReader.cc	/^                _in >> v[2];$/;"	l
v	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f        v, n;  \/\/ Vertex$/;"	l
v	IO/reader/PLYReader.cc	/^    OpenMesh::Vec3f v, n;$/;"	l
v	IO/reader/STLReader.cc	/^        strstream >> v[0];$/;"	l
v	IO/reader/STLReader.cc	/^        strstream >> v[1];$/;"	l
v	IO/reader/STLReader.cc	/^        strstream >> v[2];$/;"	l
v	IO/reader/STLReader.cc	/^  OpenMesh::Vec3f            v;$/;"	l
v	IO/writer/OBJWriter.cc	/^  Vec3f v, n;$/;"	l
v	IO/writer/OFFWriter.cc	/^    _out << v[0] << " " << v[1] << " " << v[2];$/;"	l
v	IO/writer/OFFWriter.cc	/^  Vec3f v, n;$/;"	l
v	IO/writer/OMWriter.cc	/^  Vec3f v;$/;"	l
v	IO/writer/PLYWriter.cc	/^    _out << v[0] << " " << v[1] << " " << v[2];$/;"	l
v	IO/writer/PLYWriter.cc	/^  Vec3f v, n;$/;"	l
v0	Mesh/PolyConnectivity.cc	/^    VertexHandle   v0, v1;$/;"	l
v0	Mesh/PolyConnectivity.cc	/^  VertexHandle    v0 = to_vertex_handle(h0);$/;"	l
v0	Mesh/PolyMeshT.hh	/^    Normal v0, v1;$/;"	l
v0	Mesh/TriConnectivity.cc	/^  VertexHandle  v0 = _vh;$/;"	l
v0v1	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v0v1), v0v1);$/;"	l
v0v1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v0v1 = new_edge(v0, v1);$/;"	l
v0v1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
v0v1_triangle	Mesh/PolyConnectivity.cc	/^  bool v0v1_triangle = false;$/;"	l
v1	Mesh/PolyConnectivity.cc	/^    VertexHandle   v0, v1;$/;"	l
v1	Mesh/PolyConnectivity.cc	/^  VertexHandle    v1 = to_vertex_handle(h1);$/;"	l
v1	Mesh/PolyMeshT.hh	/^    Normal v0, v1;$/;"	l
v1	Mesh/TriConnectivity.cc	/^    VertexHandle v1 = to_vertex_handle(h1);$/;"	l
v1	Mesh/TriConnectivity.cc	/^  VertexHandle  v1 = to_vertex_handle(_h0);$/;"	l
v1v0	Mesh/TriConnectivity.cc	/^    set_halfedge_handle(face_handle(v1v0), v1v0);$/;"	l
v1v0	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1v0 = opposite_halfedge_handle(v0v1);$/;"	l
v1v0_triangle	Mesh/PolyConnectivity.cc	/^  bool v1v0_triangle = false;$/;"	l
v1vl	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
v2	Mesh/TriConnectivity.cc	/^  VertexHandle   v2 = to_vertex_handle(o0);$/;"	l
v2f	IO/reader/OMReader.cc	/^          _bi.set_texcoord(VertexHandle(vidx), v2f);$/;"	l
v2f	IO/reader/OMReader.cc	/^  OpenMesh::Vec2f v2f;$/;"	l
v3	Mesh/TriConnectivity.cc	/^    VertexHandle v3 = to_vertex_handle(o1);$/;"	l
v3f	IO/reader/OMReader.cc	/^          _bi.set_normal(FaceHandle(fidx), v3f);$/;"	l
v3f	IO/reader/OMReader.cc	/^          _bi.set_normal(VertexHandle(vidx), v3f);$/;"	l
v3f	IO/reader/OMReader.cc	/^  OpenMesh::Vec3f v3f;  \/\/ normal$/;"	l
v3f	IO/reader/OMReader.cc	/^  OpenMesh::Vec3f v3f;$/;"	l
v3uc	IO/reader/OMReader.cc	/^          _bi.set_color(FaceHandle(fidx), v3uc);$/;"	l
v3uc	IO/reader/OMReader.cc	/^          _bi.set_color(VertexHandle(vidx), v3uc);$/;"	l
v3uc	IO/reader/OMReader.cc	/^  OpenMesh::Vec3uc v3uc; \/\/ rgb$/;"	l
vMap	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>            vMap(comp);$/;"	p	file:	signature:(comp)
vMap	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>  vMap;$/;"	l
vMapIt	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>::iterator  vMapIt;$/;"	l
vMapIt	IO/reader/STLReader.cc	/^  std::map<Vec3f, VertexHandle, CmpVec>::iterator vMapIt;$/;"	l
v_01_n	Mesh/PolyConnectivity.cc	/^  VertexHandle v_01_n = to_vertex_handle(next_halfedge_handle(v0v1));  $/;"	l
v_01_p	Mesh/PolyConnectivity.cc	/^  VertexHandle v_01_p = from_vertex_handle(prev_halfedge_handle(v0v1));$/;"	l
v_10_n	Mesh/PolyConnectivity.cc	/^  VertexHandle v_10_n = to_vertex_handle(next_halfedge_handle(v1v0));$/;"	l
v_10_p	Mesh/PolyConnectivity.cc	/^  VertexHandle v_10_p = from_vertex_handle(prev_halfedge_handle(v1v0));$/;"	l
v_end	Mesh/PolyConnectivity.cc	/^                                      v_end(vhandles.end());$/;"	p	file:	signature:(vhandles.end())
v_it	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_VHandlePointer::iterator v_it(vh_to_update.begin()), v_it_end(vh_to_update.end());$/;"	p	file:	signature:(vh_to_update.begin())
v_it	Mesh/PolyConnectivity.cc	/^  std::vector<VertexHandle>::iterator v_it(vhandles.begin()),$/;"	p	file:	signature:(vhandles.begin())
v_it_end	Mesh/ArrayKernelT.cc	/^  typename std_API_Container_VHandlePointer::iterator v_it(vh_to_update.begin()), v_it_end(vh_to_update.end());$/;"	p	file:	signature:(vh_to_update.end())
va0	Mesh/TriConnectivity.cc	/^  VertexHandle   va0 = to_vertex_handle(a0);$/;"	l
va1	Mesh/TriConnectivity.cc	/^  VertexHandle   va1 = to_vertex_handle(a1);$/;"	l
val	IO/OMFormat.hh	/^    OMFormat::uint16 val; val << _hdr;$/;"	l
val	IO/OMFormat.hh	/^    OMFormat::uint16 val;$/;"	l
val	IO/OMFormat.hh	/^    _hdr << val;$/;"	l
valence	Mesh/PolyConnectivity.cc	/^uint PolyConnectivity::valence(FaceHandle _fh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(FaceHandle _fh) const
valence	Mesh/PolyConnectivity.cc	/^uint PolyConnectivity::valence(VertexHandle _vh) const$/;"	f	class:OpenMesh::PolyConnectivity	signature:(VertexHandle _vh) const
valence	Mesh/PolyConnectivity.hh	/^  uint valence(FaceHandle _fh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(FaceHandle _fh) const
valence	Mesh/PolyConnectivity.hh	/^  uint valence(VertexHandle _vh) const;$/;"	p	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh) const
valence	Mesh/PolyMeshT.cc	/^  Scalar valence = 0.0;$/;"	l
value	IO/reader/OBJReader.cc	/^            tmp >> value;$/;"	l
value	IO/reader/OBJReader.cc	/^      int value;$/;"	l
valueType	IO/reader/PLYReader.cc	/^                    ValueType valueType = get_property_type(tmp1, tmp2);$/;"	l
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::EdgeHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::FaceHandle         value_handle;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::HalfedgeHandle     value_handle;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
value_handle	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::VertexHandle       value_handle;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
value_handle	Mesh/IteratorsT.hh	/^        typedef ValueHandle                     value_handle;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
value_handle	Mesh/gen/circulators_template.hh	/^  typedef TargetHandle         value_handle;$/;"	t	class:CirculatorT	access:public
value_handle	Mesh/gen/iterators_template.hh	/^  typedef TargetHandle         value_handle;$/;"	t	class:IteratorT	access:public
value_type	Geometry/Plane3d.hh	/^  typedef vector_type::value_type value_type;$/;"	t	class:OpenMesh::VDPM::Plane3d	access:public
value_type	Geometry/QuadricT.hh	/^  typedef Scalar           value_type;$/;"	t	class:OpenMesh::Geometry::QuadricT	access:public
value_type	Geometry/VectorT_inc.hh	/^  typedef Scalar value_type;$/;"	t	class:CLASSNAME	access:public
value_type	IO/Options.hh	/^  typedef enum_type value_type;$/;"	t	class:OpenMesh::IO::Options	access:public
value_type	IO/SR_binary.hh	/^  typedef T     value_type;$/;"	t	struct:OpenMesh::IO::binary	access:public
value_type	IO/SR_binary_spec.hh	/^  typedef OpenMesh::Attributes::StatusInfo value_type;$/;"	t	struct:OpenMesh::IO::binary	access:public
value_type	IO/SR_binary_spec.hh	/^  typedef std::string value_type;$/;"	t	struct:OpenMesh::IO::binary	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceEdgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexEdgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::FaceEdgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Edge               value_type;$/;"	t	class:OpenMesh::Iterators::VertexEdgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceFaceIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexFaceIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::FaceFaceIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Face               value_type;$/;"	t	class:OpenMesh::Iterators::VertexFaceIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceHalfedgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexIHalfedgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexOHalfedgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::FaceHalfedgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::VertexIHalfedgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Halfedge           value_type;$/;"	t	class:OpenMesh::Iterators::VertexOHalfedgeIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::ConstFaceVertexIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::ConstVertexVertexIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::FaceVertexIterT	access:public
value_type	Mesh/CirculatorsT.hh	/^  typedef typename Mesh::Vertex             value_type;$/;"	t	class:OpenMesh::Iterators::VertexVertexIterT	access:public
value_type	Mesh/IteratorsT.hh	/^        typedef value_handle                    value_type;$/;"	t	class:OpenMesh::Iterators::GenericIteratorT	access:public
value_type	Mesh/Status.hh	/^  typedef unsigned int value_type;$/;"	t	class:OpenMesh::Attributes::StatusInfo	access:public
value_type	Mesh/gen/circulators_template.hh	/^  typedef TargetType           value_type;$/;"	t	class:CirculatorT	access:public
value_type	Mesh/gen/iterators_template.hh	/^  typedef TargetType           value_type;$/;"	t	class:IteratorT	access:public
value_type	Utils/Property.hh	/^  typedef T                                       value_type;$/;"	t	class:OpenMesh::PropertyT	access:public
value_type	Utils/Property.hh	/^  typedef T                                       value_type;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::EPropHandleT	access:public
value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::FPropHandleT	access:public
value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::HPropHandleT	access:public
value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::MPropHandleT	access:public
value_type	Utils/Property.hh	/^  typedef T                       value_type;$/;"	t	struct:OpenMesh::VPropHandleT	access:public
value_type	Utils/Property.hh	/^  typedef bool                                    value_type;$/;"	t	class:OpenMesh::PropertyT	access:public
value_type	Utils/Property.hh	/^  typedef std::string                             value_type;$/;"	t	class:OpenMesh::PropertyT	access:public
value_type	Utils/vector_traits.hh	/^  typedef typename T::value_type  value_type;$/;"	t	struct:OpenMesh::vector_traits	access:public
values_	Geometry/VectorT.hh	/^    float   values_[4];$/;"	m	union:OpenMesh::VectorDataT::__anon3	access:public
values_	Geometry/VectorT.hh	/^  Scalar values_[N];$/;"	m	struct:OpenMesh::VectorDataT	access:public
values_	Geometry/VectorT_inc.hh	/^    Base::values_[0] = v0; Base::values_[1] = v1;$/;"	m	class:CLASSNAME::Base
values_	Geometry/VectorT_inc.hh	/^    Base::values_[0]=v0; Base::values_[1]=v1; Base::values_[2]=v2; Base::values_[3]=v3;$/;"	m	class:CLASSNAME::Base
values_	Geometry/VectorT_inc.hh	/^    Base::values_[0]=v0; Base::values_[1]=v1; Base::values_[2]=v2;$/;"	m	class:CLASSNAME::Base
values_	Geometry/VectorT_inc.hh	/^    Base::values_[0]=v0; Base::values_[1]=v1;Base::values_[2]=v2; Base::values_[3]=v3; Base::values_[4]=v4;$/;"	m	class:CLASSNAME::Base
values_	Geometry/VectorT_inc.hh	/^    Base::values_[3]=v3; Base::values_[4]=v4; Base::values_[5]=v5;$/;"	m	class:CLASSNAME::Base
vb0	Mesh/TriConnectivity.cc	/^  VertexHandle   vb0 = to_vertex_handle(b0);$/;"	l
vb1	Mesh/TriConnectivity.cc	/^  VertexHandle   vb1 = to_vertex_handle(b1);$/;"	l
ve_begin	Mesh/PolyConnectivity.hh	/^  VertexEdgeIter ve_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
ve_end	Mesh/PolyConnectivity.hh	/^  VertexEdgeIter ve_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
ve_iter	Mesh/PolyConnectivity.hh	/^  VertexEdgeIter ve_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vec0	Mesh/PolyMeshT.hh	/^    Normal vec0, vec1;$/;"	l
vec1	Mesh/PolyMeshT.hh	/^    Normal vec0, vec1;$/;"	l
vector_cast	Mesh/PolyMeshT.cc	/^  Normal p1p0(vector_cast<Normal>(_p0));  p1p0 -= vector_cast<Normal>(_p1);$/;"	p	file:	signature:(_p0)
vector_cast	Mesh/PolyMeshT.cc	/^  Normal p1p2(vector_cast<Normal>(_p2));  p1p2 -= vector_cast<Normal>(_p1);$/;"	p	file:	signature:(_p2)
vector_cast	Utils/vector_cast.hh	/^vector_cast(const src_t& _src )$/;"	f	namespace:OpenMesh	signature:(const src_t& _src )
vector_caster	Utils/vector_cast.hh	/^struct vector_caster$/;"	s	namespace:OpenMesh
vector_caster	Utils/vector_cast.hh	/^struct vector_caster<dst_t,dst_t>$/;"	s	namespace:OpenMesh
vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<1> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<1> )
vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<2> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<2> )
vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<3> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<3> )
vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<4> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<4> )
vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<5> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<5> )
vector_copy	Utils/vector_cast.hh	/^inline void vector_copy( const src_t &_src, dst_t &_dst, GenProg::Int2Type<6> )$/;"	f	namespace:OpenMesh	signature:( const src_t &_src, dst_t &_dst, GenProg::Int2Type<6> )
vector_restore	IO/OMFormat.hh	/^  vector_restore( std::istream& _is, VecT& _vec, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::istream& _is, VecT& _vec, bool _swap )
vector_size	IO/OMFormat.hh	/^  inline size_t vector_size( const Chunk::Header& _chdr )$/;"	f	namespace:OpenMesh::IO::OMFormat	signature:( const Chunk::Header& _chdr )
vector_store	IO/OMFormat.hh	/^  size_t vector_store( std::ostream& _os, const VecT& _vec, bool _swap )$/;"	f	namespace:OpenMesh::IO	signature:( std::ostream& _os, const VecT& _vec, bool _swap )
vector_traits	Utils/vector_traits.hh	/^struct vector_traits$/;"	s	namespace:OpenMesh
vector_type	Geometry/Plane3d.hh	/^  typedef OpenMesh::Vec3f         vector_type;$/;"	t	class:OpenMesh::VDPM::Plane3d	access:public
vector_type	Geometry/VectorT_inc.hh	/^  typedef VectorT<Scalar,DIM>  vector_type;$/;"	t	class:CLASSNAME	access:public
vector_type	Utils/Property.hh	/^  typedef std::vector<T>                          vector_type;$/;"	t	class:OpenMesh::PropertyT	access:public
vector_type	Utils/Property.hh	/^  typedef std::vector<T>                          vector_type;$/;"	t	struct:OpenMesh::BasePropHandleT	access:public
vector_type	Utils/Property.hh	/^  typedef std::vector<bool>                       vector_type;$/;"	t	class:OpenMesh::PropertyT	access:public
vector_type	Utils/Property.hh	/^  typedef std::vector<std::string>                vector_type;$/;"	t	class:OpenMesh::PropertyT	access:public
vector_type	Utils/vector_traits.hh	/^  typedef typename T::vector_type vector_type;$/;"	t	struct:OpenMesh::vector_traits	access:public
version	IO/reader/PLYReader.cc	/^    _is >> version;$/;"	l
version	IO/reader/PLYReader.cc	/^    float version;$/;"	l
version_	IO/OMFormat.hh	/^    uint8  version_;$/;"	m	struct:OpenMesh::IO::OMFormat::Header	access:public
version_	IO/writer/OMWriter.cc	/^const OMFormat::uint8 _OMWriter_::version_  = OMFormat::mk_version(1,2);$/;"	m	class:OpenMesh::IO::_OMWriter_	file:
version_	IO/writer/OMWriter.hh	/^  static const OMFormat::uint8 version_;$/;"	m	class:OpenMesh::IO::_OMWriter_	access:protected
vertex	IO/reader/OBJReader.cc	/^        lineData >> vertex;$/;"	l
vertex	IO/reader/OBJReader.cc	/^        std::string vertex;$/;"	l
vertex	Mesh/ArrayKernel.hh	/^  Vertex& vertex(VertexHandle _vh)$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh)
vertex	Mesh/ArrayKernel.hh	/^  const Vertex& vertex(VertexHandle _vh) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(VertexHandle _vh) const
vertexCount	Mesh/ArrayKernelT.cc	/^  const int vertexCount   = vertices_.size();$/;"	l
vertexCount_	IO/reader/PLYReader.cc	/^                _is >> vertexCount_;$/;"	l
vertexCount_	IO/reader/PLYReader.hh	/^  mutable unsigned int vertexCount_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
vertexDimensionTooHigh	IO/reader/OFFReader.cc	/^  bool vertexDimensionTooHigh = false;$/;"	l
vertexDimension_	IO/reader/PLYReader.hh	/^  mutable uint vertexDimension_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
vertexHandles	IO/reader/OBJReader.cc	/^  std::vector<VertexHandle> vertexHandles;$/;"	l
vertexPropertyCount_	IO/reader/PLYReader.hh	/^  mutable unsigned int vertexPropertyCount_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
vertexPropertyMap_	IO/reader/PLYReader.hh	/^  mutable std::map< int , std::pair< VertexProperty, ValueType> > vertexPropertyMap_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
vertexType_	IO/reader/PLYReader.hh	/^  mutable ValueType vertexType_;$/;"	m	class:OpenMesh::IO::_PLYReader_	access:private
vertex_bit_masks_	Mesh/ArrayKernel.hh	/^  BitMaskContainer                          vertex_bit_masks_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
vertex_colors	Mesh/AttribKernelT.hh	/^  const Color* vertex_colors() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
vertex_colors_	Mesh/AttribKernelT.hh	/^  VertexColorsPropertyHandle                vertex_colors_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
vertex_colors_pph	Mesh/AttribKernelT.hh	/^  VertexColorsPropertyHandle                vertex_colors_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
vertex_handle	Mesh/ArrayKernel.hh	/^  VertexHandle vertex_handle(unsigned int _i) const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:(unsigned int _i) const
vertex_handle_	Mesh/ArrayItems.hh	/^    VertexHandle    vertex_handle_;$/;"	m	class:OpenMesh::ArrayItems::Halfedge_without_prev	access:private
vertex_has_color	IO/Options.hh	/^  bool vertex_has_color()    const { return check(VertexColor); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
vertex_has_normal	IO/Options.hh	/^  bool vertex_has_normal()   const { return check(VertexNormal); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
vertex_has_texcoord	IO/Options.hh	/^  bool vertex_has_texcoord() const { return check(VertexTexCoord); }$/;"	f	class:OpenMesh::IO::Options	access:public	signature:() const
vertex_inverse_map	Mesh/ArrayKernelT.cc	/^  std::map <int, int> vertex_inverse_map;$/;"	l
vertex_normals	Mesh/AttribKernelT.hh	/^  const Normal* vertex_normals() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
vertex_normals_	Mesh/AttribKernelT.hh	/^  VertexNormalsPropertyHandle               vertex_normals_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
vertex_normals_pph	Mesh/AttribKernelT.hh	/^  VertexNormalsPropertyHandle               vertex_normals_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
vertex_split	Mesh/TriConnectivity.cc	/^TriConnectivity::vertex_split(VertexHandle v0, VertexHandle v1,$/;"	f	class:OpenMesh::TriConnectivity	signature:(VertexHandle v0, VertexHandle v1, VertexHandle vl, VertexHandle vr)
vertex_split	Mesh/TriConnectivity.hh	/^  HalfedgeHandle vertex_split(VertexHandle v0, VertexHandle v1,$/;"	p	class:OpenMesh::TriConnectivity	access:public	signature:(VertexHandle v0, VertexHandle v1, VertexHandle vl, VertexHandle vr)
vertex_split	Mesh/TriMeshT.hh	/^  inline HalfedgeHandle vertex_split(Point _v0_point,  VertexHandle _v1,$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(Point _v0_point, VertexHandle _v1, VertexHandle _vl, VertexHandle _vr)
vertex_split	Mesh/TriMeshT.hh	/^  inline HalfedgeHandle vertex_split(VertexHandle _v0, VertexHandle _v1,$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:(VertexHandle _v0, VertexHandle _v1, VertexHandle _vl, VertexHandle _vr)
vertex_status_	Mesh/ArrayKernel.hh	/^  VertexStatusPropertyHandle                vertex_status_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
vertex_status_pph	Mesh/ArrayKernel.hh	/^  inline VertexStatusPropertyHandle         vertex_status_pph() const$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
vertex_texcoords1D_	Mesh/AttribKernelT.hh	/^  VertexTexCoords1DPropertyHandle           vertex_texcoords1D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
vertex_texcoords1D_pph	Mesh/AttribKernelT.hh	/^  VertexTexCoords1DPropertyHandle           vertex_texcoords1D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
vertex_texcoords2D_	Mesh/AttribKernelT.hh	/^  VertexTexCoords2DPropertyHandle           vertex_texcoords2D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
vertex_texcoords2D_pph	Mesh/AttribKernelT.hh	/^  VertexTexCoords2DPropertyHandle           vertex_texcoords2D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
vertex_texcoords3D_	Mesh/AttribKernelT.hh	/^  VertexTexCoords3DPropertyHandle           vertex_texcoords3D_;$/;"	m	class:OpenMesh::AttribKernelT	access:private
vertex_texcoords3D_pph	Mesh/AttribKernelT.hh	/^  VertexTexCoords3DPropertyHandle           vertex_texcoords3D_pph() const$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:() const
vertices	Mesh/PolyConnectivity.hh	/^  ConstVertexRange vertices() const { return ConstVertexRange(*this); }$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
vertices_	Mesh/ArrayKernel.hh	/^  VertexContainer                           vertices_;$/;"	m	class:OpenMesh::ArrayKernel	access:private
vertices_begin	Mesh/ArrayKernel.hh	/^  KernelConstVertexIter vertices_begin() const  { return vertices_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
vertices_begin	Mesh/ArrayKernel.hh	/^  KernelVertexIter      vertices_begin()        { return vertices_.begin(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
vertices_begin	Mesh/PolyConnectivity.hh	/^  ConstVertexIter vertices_begin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
vertices_begin	Mesh/PolyConnectivity.hh	/^  VertexIter vertices_begin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
vertices_empty	Mesh/ArrayKernel.hh	/^  bool vertices_empty()  const { return vertices_.empty(); }$/;"	f	class:OpenMesh::ArrayKernel	access:public	signature:() const
vertices_end	Mesh/ArrayKernel.hh	/^  KernelConstVertexIter vertices_end() const    { return vertices_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:() const
vertices_end	Mesh/ArrayKernel.hh	/^  KernelVertexIter      vertices_end()          { return vertices_.end(); }$/;"	f	class:OpenMesh::ArrayKernel	access:private	signature:()
vertices_end	Mesh/ArrayKernelT.cc	/^    KernelVertexIter v_it(vertices_begin()), v_end(vertices_end());$/;"	p	file:	signature:()
vertices_end	Mesh/PolyConnectivity.hh	/^  ConstVertexIter vertices_end() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
vertices_end	Mesh/PolyConnectivity.hh	/^  VertexIter vertices_end()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
vertices_end	Mesh/PolyMeshT.cc	/^  VertexIter  v_it(Kernel::vertices_begin()), v_end(Kernel::vertices_end());$/;"	p	file:	signature:()
vertices_sbegin	Mesh/PolyConnectivity.hh	/^  ConstVertexIter vertices_sbegin() const$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:() const
vertices_sbegin	Mesh/PolyConnectivity.hh	/^  VertexIter vertices_sbegin()$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
vf_begin	Mesh/PolyConnectivity.hh	/^  VertexFaceIter vf_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vf_end	Mesh/PolyConnectivity.hh	/^  VertexFaceIter vf_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vf_iter	Mesh/PolyConnectivity.hh	/^  VertexFaceIter vf_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vfrom	Mesh/PolyConnectivity.cc	/^  VertexHandle vfrom = from_vertex_handle(h0);$/;"	l
vh	IO/importer/ImporterT.hh	/^          typename Mesh::VertexHandle vh = mesh_.to_vertex_handle(heh);$/;"	l
vh	IO/reader/OFFReader.cc	/^  VertexHandle            vh;$/;"	l
vh	IO/reader/PLYReader.cc	/^    VertexHandle           vh;$/;"	l
vh	IO/reader/PLYReader.cc	/^    VertexHandle vh;$/;"	l
vh	IO/writer/OBJWriter.cc	/^  VertexHandle vh;$/;"	l
vh	IO/writer/OFFWriter.cc	/^  VertexHandle vh;$/;"	l
vh	IO/writer/PLYWriter.cc	/^  VertexHandle vh;$/;"	l
vh	Mesh/ArrayKernelT.cc	/^    VertexHandle     vh;$/;"	l
vh	Mesh/PolyConnectivity.cc	/^  VertexHandle                   vh;$/;"	l
vh	Mesh/PolyConnectivity.cc	/^  VertexHandle    vh = to_vertex_handle(h);$/;"	l
vh	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split(_eh, vh); return vh;$/;"	l
vh	Mesh/TriMeshT.hh	/^    const VertexHandle vh = this->add_vertex(_p); Kernel::split_copy(_eh, vh); return vh;$/;"	l
vh	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p);  PolyMesh::split_copy(_fh, vh); return vh; }$/;"	l
vh	Mesh/TriMeshT.hh	/^  { const VertexHandle vh = this->add_vertex(_p); PolyMesh::split(_fh, vh); return vh; }$/;"	l
vh0	Mesh/PolyConnectivity.cc	/^  VertexHandle vh0 = to_vertex_handle(_prev_heh);$/;"	l
vh0	Mesh/PolyConnectivity.cc	/^  VertexHandle vh0 = to_vertex_handle(heh0);$/;"	l
vh1	Mesh/PolyConnectivity.cc	/^  VertexHandle vh1 = from_vertex_handle(_next_heh);$/;"	l
vh1	Mesh/PolyConnectivity.cc	/^  VertexHandle vh1 = to_vertex_handle(heh1);$/;"	l
vh_map	Mesh/ArrayKernelT.cc	/^  std::vector<VertexHandle>    vh_map;$/;"	l
vh_val	Mesh/PolyMeshT.cc	/^  unsigned int vh_val = valence(_vh);$/;"	l
vhandles	IO/importer/ImporterT.hh	/^        VHandles&  vhandles = failed_faces_[i];$/;"	l
vhandles	IO/reader/OBJReader.cc	/^  BaseImporter::VHandles    vhandles;$/;"	l
vhandles	IO/reader/OFFReader.cc	/^  BaseImporter::VHandles  vhandles;$/;"	l
vhandles	IO/reader/OMReader.cc	/^      BaseImporter::VHandles vhandles;$/;"	l
vhandles	IO/reader/PLYReader.cc	/^    BaseImporter::VHandles vhandles;$/;"	l
vhandles	IO/reader/STLReader.cc	/^  BaseImporter::VHandles     vhandles;$/;"	l
vhandles	IO/writer/OBJWriter.cc	/^    _be.get_vhandles(FaceHandle(i), vhandles);$/;"	l
vhandles	IO/writer/OBJWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
vhandles	IO/writer/OFFWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	l
vhandles	IO/writer/OFFWriter.cc	/^    std::vector<VertexHandle> vhandles;$/;"	l
vhandles	IO/writer/OFFWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
vhandles	IO/writer/OMWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
vhandles	IO/writer/PLYWriter.cc	/^      _be.get_vhandles(FaceHandle(i), vhandles);$/;"	l
vhandles	IO/writer/PLYWriter.cc	/^    std::vector<VertexHandle> vhandles;$/;"	l
vhandles	IO/writer/PLYWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
vhandles	IO/writer/STLWriter.cc	/^  std::vector<VertexHandle> vhandles;$/;"	l
vhandles	Mesh/PolyConnectivity.cc	/^  std::vector<VertexHandle>  vhandles;$/;"	l
vhandles	Mesh/TriConnectivity.cc	/^    VertexHandle vhandles[3];$/;"	l
vhs	Mesh/PolyConnectivity.cc	/^  VertexHandle vhs[3] = { _vh0, _vh1, _vh2 };$/;"	l
vhs	Mesh/PolyConnectivity.cc	/^  VertexHandle vhs[4] = { _vh0, _vh1, _vh2, _vh3 };$/;"	l
vhs	Mesh/TriConnectivity.cc	/^  VertexHandle vhs[3] = { _vh0, _vh1, _vh2 };$/;"	l
vidx	IO/reader/OMReader.cc	/^      size_t vidx = 0;$/;"	l
vidx	IO/reader/OMReader.cc	/^  size_t vidx = 0;$/;"	l
vih_begin	Mesh/PolyConnectivity.hh	/^  VertexIHalfedgeIter vih_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vih_end	Mesh/PolyConnectivity.hh	/^  VertexIHalfedgeIter vih_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vih_iter	Mesh/PolyConnectivity.hh	/^  VertexIHalfedgeIter vih_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vl	Mesh/PolyConnectivity.cc	/^      VertexHandle vl = to_vertex_handle(next_halfedge_handle(v0v1));$/;"	l
vlv1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
vo	Mesh/PolyConnectivity.cc	/^  VertexHandle    vo = to_vertex_handle(o);$/;"	l
voh_begin	Mesh/PolyConnectivity.hh	/^  VertexOHalfedgeIter voh_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
voh_end	Mesh/PolyConnectivity.hh	/^  VertexOHalfedgeIter voh_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
voh_iter	Mesh/PolyConnectivity.hh	/^  VertexOHalfedgeIter voh_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::vprop_stats( std::string& _string ) const$/;"	f	class:OpenMesh::BaseKernel	signature:( std::string& _string ) const
vprop_stats	Mesh/BaseKernel.cc	/^void BaseKernel::vprop_stats(std::ostream& _ostr ) const$/;"	f	class:OpenMesh::BaseKernel	signature:(std::ostream& _ostr ) const
vprop_stats	Mesh/BaseKernel.hh	/^  void vprop_stats( std::string& _string ) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:( std::string& _string ) const
vprop_stats	Mesh/BaseKernel.hh	/^  void vprop_stats(std::ostream& _ostr = std::clog) const;$/;"	p	class:OpenMesh::BaseKernel	access:public	signature:(std::ostream& _ostr = std::clog) const
vprops_	Mesh/BaseKernel.hh	/^  PropertyContainer  vprops_;$/;"	m	class:OpenMesh::BaseKernel	access:private
vprops_begin	Mesh/BaseKernel.hh	/^  const_prop_iterator vprops_begin() const { return vprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
vprops_begin	Mesh/BaseKernel.hh	/^  prop_iterator vprops_begin() { return vprops_.begin(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
vprops_clear	Mesh/BaseKernel.hh	/^  void vprops_clear() {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:()
vprops_end	Mesh/BaseKernel.hh	/^  const_prop_iterator vprops_end()   const { return vprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:() const
vprops_end	Mesh/BaseKernel.hh	/^  prop_iterator vprops_end()   { return vprops_.end(); }$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
vprops_reserve	Mesh/BaseKernel.hh	/^  void vprops_reserve(unsigned int _n) const { vprops_.reserve(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
vprops_resize	Mesh/BaseKernel.hh	/^  void vprops_resize(unsigned int _n) const { vprops_.resize(_n); }$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _n) const
vprops_swap	Mesh/BaseKernel.hh	/^  void vprops_swap(unsigned int _i0, unsigned int _i1) const {$/;"	f	class:OpenMesh::BaseKernel	access:protected	signature:(unsigned int _i0, unsigned int _i1) const
vps	Mesh/BaseKernel.cc	/^  const PropertyContainer::Properties& vps = vprops_.properties();$/;"	l
vr	Mesh/PolyConnectivity.cc	/^      VertexHandle vr = to_vertex_handle(next_halfedge_handle(v1v0));$/;"	l
vrv1	Mesh/TriConnectivity.cc	/^  HalfedgeHandle v1vl, vlv1, vrv1, v0v1;$/;"	l
vv_begin	Mesh/PolyConnectivity.hh	/^  VertexVertexIter vv_begin(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vv_end	Mesh/PolyConnectivity.hh	/^  VertexVertexIter vv_end(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
vv_iter	Mesh/PolyConnectivity.hh	/^  VertexVertexIter vv_iter(VertexHandle _vh)$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:(VertexHandle _vh)
w	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[3])
weight	Geometry/LoopSchemeMaskT.hh	/^    double weight = (3.0\/8.0)\/(1.0 - proj_weight + (3.0\/8.0));$/;"	l
weight	Geometry/LoopSchemeMaskT.hh	/^    double weight = (64.0*_valence)\/(40.0 - denom*denom) - _valence;$/;"	l
weight	Geometry/LoopSchemeMaskT.hh	/^    double weight = proj_weight - (3.0\/8.0);$/;"	l
write	IO/IOManager.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision)
write	IO/IOManager.cc	/^write(std::ostream& _os,const std::string &_ext, BaseExporter& _be, Options _opt, std::streamsize _precision)$/;"	f	class:OpenMesh::IO::_IOManager_	signature:(std::ostream& _os,const std::string &_ext, BaseExporter& _be, Options _opt, std::streamsize _precision)
write	IO/IOManager.hh	/^  bool write(const std::string& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(const std::string& _filename, BaseExporter& _be, Options _opt=Options::Default, std::streamsize _precision = 6)
write	IO/IOManager.hh	/^  bool write(std::ostream& _filename,$/;"	p	class:OpenMesh::IO::_IOManager_	access:public	signature:(std::ostream& _filename, const std::string& _ext, BaseExporter& _be, Options _opt=Options::Default, std::streamsize _precision = 6)
write	IO/OMFormat.hh	/^      _os.write( _pn.c_str(), _pn.size() ); \/\/ size bytes$/;"	p	signature:( _pn.c_str(), _pn.size() )
write	IO/SR_binary_spec.hh	/^      _os.write( _v.data(), len );$/;"	p	signature:( _v.data(), len )
write	IO/writer/BaseWriter.hh	/^  virtual bool write(const std::string& _filename,$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision = 6) const
write	IO/writer/BaseWriter.hh	/^  virtual bool write(std::ostream& _os,$/;"	p	class:OpenMesh::IO::BaseWriter	access:public	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision = 6) const
write	IO/writer/OBJWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/OBJWriter.cc	/^write(std::ostream& _out, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/OBJWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/OBJWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/OFFWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/OFFWriter.cc	/^write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/OFFWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/OFFWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/OMWriter.cc	/^_OMWriter_::write(const std::string& _filename, BaseExporter& _be,$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize ) const
write	IO/writer/OMWriter.cc	/^_OMWriter_::write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize \/*_precision*\/) const$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize ) const
write	IO/writer/OMWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:protected	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/OMWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/PLYWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/PLYWriter.cc	/^write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/PLYWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/PLYWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/STLWriter.cc	/^  _out.write(header, 80);$/;"	p	file:	signature:(header, 80)
write	IO/writer/STLWriter.cc	/^write(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/STLWriter.cc	/^write(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt, std::streamsize _precision) const
write	IO/writer/STLWriter.hh	/^  bool write(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:(const std::string&, BaseExporter&, Options, std::streamsize _precision = 6) const
write	IO/writer/STLWriter.hh	/^  bool write(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:public	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
writeMaterial	IO/writer/OBJWriter.cc	/^writeMaterial(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OBJWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
writeMaterial	IO/writer/OBJWriter.hh	/^  bool writeMaterial(std::ostream& _out, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OBJWriter_	access:private	signature:(std::ostream& _out, BaseExporter&, Options) const
writeValue	IO/writer/OFFWriter.cc	/^void _OFFWriter_::writeValue(std::ostream& _out, float value) const {$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, float value) const
writeValue	IO/writer/OFFWriter.cc	/^void _OFFWriter_::writeValue(std::ostream& _out, int value) const {$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, int value) const
writeValue	IO/writer/OFFWriter.cc	/^void _OFFWriter_::writeValue(std::ostream& _out, unsigned int value) const {$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, unsigned int value) const
writeValue	IO/writer/OFFWriter.hh	/^  void writeValue(std::ostream& _out, float value) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _out, float value) const
writeValue	IO/writer/OFFWriter.hh	/^  void writeValue(std::ostream& _out, int value) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _out, int value) const
writeValue	IO/writer/OFFWriter.hh	/^  void writeValue(std::ostream& _out, unsigned int value) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _out, unsigned int value) const
writeValue	IO/writer/PLYWriter.cc	/^void _PLYWriter_::writeValue(ValueType _type, std::ostream& _out, float value) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(ValueType _type, std::ostream& _out, float value) const
writeValue	IO/writer/PLYWriter.cc	/^void _PLYWriter_::writeValue(ValueType _type, std::ostream& _out, int value) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(ValueType _type, std::ostream& _out, int value) const
writeValue	IO/writer/PLYWriter.cc	/^void _PLYWriter_::writeValue(ValueType _type, std::ostream& _out, unsigned int value) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(ValueType _type, std::ostream& _out, unsigned int value) const
writeValue	IO/writer/PLYWriter.hh	/^  void writeValue(ValueType _type, std::ostream& _out, float value) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(ValueType _type, std::ostream& _out, float value) const
writeValue	IO/writer/PLYWriter.hh	/^  void writeValue(ValueType _type, std::ostream& _out, int value) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(ValueType _type, std::ostream& _out, int value) const
writeValue	IO/writer/PLYWriter.hh	/^  void writeValue(ValueType _type, std::ostream& _out, unsigned int value) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(ValueType _type, std::ostream& _out, unsigned int value) const
write_ascii	IO/writer/OFFWriter.cc	/^write_ascii(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
write_ascii	IO/writer/OFFWriter.hh	/^  bool write_ascii(std::ostream& _in, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _in, BaseExporter&, Options) const
write_ascii	IO/writer/PLYWriter.cc	/^write_ascii(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
write_ascii	IO/writer/PLYWriter.hh	/^  bool write_ascii(std::ostream& _out, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(std::ostream& _out, BaseExporter&, Options) const
write_binary	IO/writer/OFFWriter.cc	/^write_binary(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_OFFWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
write_binary	IO/writer/OFFWriter.hh	/^  bool write_binary(std::ostream& _in, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OFFWriter_	access:protected	signature:(std::ostream& _in, BaseExporter&, Options) const
write_binary	IO/writer/OMWriter.cc	/^bool _OMWriter_::write_binary(std::ostream& _os, BaseExporter& _be,$/;"	f	class:OpenMesh::IO::_OMWriter_	signature:(std::ostream& _os, BaseExporter& _be, Options _opt) const
write_binary	IO/writer/OMWriter.hh	/^  bool write_binary(std::ostream&, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_OMWriter_	access:protected	signature:(std::ostream&, BaseExporter&, Options) const
write_binary	IO/writer/PLYWriter.cc	/^write_binary(std::ostream& _out, BaseExporter& _be, Options _opt) const$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options _opt) const
write_binary	IO/writer/PLYWriter.hh	/^  bool write_binary(std::ostream& _out, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(std::ostream& _out, BaseExporter&, Options) const
write_double	IO/BinaryHelper.cc	/^void write_double(double _d, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(double _d, FILE* _out, bool _swap)
write_double	IO/BinaryHelper.cc	/^void write_double(double _d, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(double _d, std::ostream& _out, bool _swap)
write_double	IO/BinaryHelper.hh	/^void write_double(double _d, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(double _d, FILE* _out, bool _swap=false)
write_double	IO/BinaryHelper.hh	/^void write_double(double _d, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(double _d, std::ostream& _out, bool _swap=false)
write_filters_	IO/IOManager.hh	/^  std::string write_filters_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
write_float	IO/BinaryHelper.cc	/^void write_float(float _f, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(float _f, FILE* _out, bool _swap)
write_float	IO/BinaryHelper.cc	/^void write_float(float _f, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(float _f, std::ostream& _out, bool _swap)
write_float	IO/BinaryHelper.hh	/^void write_float(float _f, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(float _f, FILE* _out, bool _swap=false)
write_float	IO/BinaryHelper.hh	/^void write_float(float _f, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(float _f, std::ostream& _out, bool _swap=false)
write_header	IO/writer/PLYWriter.cc	/^void _PLYWriter_::write_header(std::ostream& _out, BaseExporter& _be, Options& _opt) const {$/;"	f	class:OpenMesh::IO::_PLYWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options& _opt) const
write_header	IO/writer/PLYWriter.hh	/^  void write_header(std::ostream& _out, BaseExporter& _be, Options& _opt) const;$/;"	p	class:OpenMesh::IO::_PLYWriter_	access:protected	signature:(std::ostream& _out, BaseExporter& _be, Options& _opt) const
write_int	IO/BinaryHelper.cc	/^void write_int(int _i, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(int _i, FILE* _out, bool _swap)
write_int	IO/BinaryHelper.cc	/^void write_int(int _i, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(int _i, std::ostream& _out, bool _swap)
write_int	IO/BinaryHelper.hh	/^void write_int(int _i, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(int _i, FILE* _out, bool _swap=false)
write_int	IO/BinaryHelper.hh	/^void write_int(int _i, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(int _i, std::ostream& _out, bool _swap=false)
write_mesh	IO/MeshIO.hh	/^bool write_mesh(const Mesh&        _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(const Mesh& _mesh, const std::string& _filename, Options _opt = Options::Default, std::streamsize _precision = 6)
write_mesh	IO/MeshIO.hh	/^bool write_mesh(const Mesh&        _mesh,$/;"	f	namespace:OpenMesh::IO	signature:(const Mesh& _mesh, std::ostream& _os, const std::string& _ext, Options _opt = Options::Default, std::streamsize _precision = 6)
write_short	IO/BinaryHelper.cc	/^void write_short(short int _i, FILE* _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(short int _i, FILE* _out, bool _swap)
write_short	IO/BinaryHelper.cc	/^void write_short(short int _i, std::ostream& _out, bool _swap)$/;"	f	namespace:OpenMesh::IO	signature:(short int _i, std::ostream& _out, bool _swap)
write_short	IO/BinaryHelper.hh	/^void write_short(short int _i, FILE* _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(short int _i, FILE* _out, bool _swap=false)
write_short	IO/BinaryHelper.hh	/^void write_short(short int _i, std::ostream& _out, bool _swap=false);$/;"	p	namespace:OpenMesh::IO	signature:(short int _i, std::ostream& _out, bool _swap=false)
write_stla	IO/writer/STLWriter.cc	/^write_stla(const std::string& _filename, BaseExporter& _be, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options ) const
write_stla	IO/writer/STLWriter.cc	/^write_stla(std::ostream& _out, BaseExporter& _be, Options \/* _opt *\/, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options , std::streamsize _precision) const
write_stla	IO/writer/STLWriter.hh	/^  bool write_stla(const std::string&, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(const std::string&, BaseExporter&, Options) const
write_stla	IO/writer/STLWriter.hh	/^  bool write_stla(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
write_stlb	IO/writer/STLWriter.cc	/^write_stlb(const std::string& _filename, BaseExporter& _be, Options \/* _opt *\/) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(const std::string& _filename, BaseExporter& _be, Options ) const
write_stlb	IO/writer/STLWriter.cc	/^write_stlb(std::ostream& _out, BaseExporter& _be, Options \/* _opt *\/, std::streamsize _precision) const$/;"	f	class:OpenMesh::IO::_STLWriter_	signature:(std::ostream& _out, BaseExporter& _be, Options , std::streamsize _precision) const
write_stlb	IO/writer/STLWriter.hh	/^  bool write_stlb(const std::string&, BaseExporter&, Options) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(const std::string&, BaseExporter&, Options) const
write_stlb	IO/writer/STLWriter.hh	/^  bool write_stlb(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const;$/;"	p	class:OpenMesh::IO::_STLWriter_	access:private	signature:(std::ostream&, BaseExporter&, Options, std::streamsize _precision = 6) const
writer_modules_	IO/IOManager.hh	/^  std::set<BaseWriter*> writer_modules_;$/;"	m	class:OpenMesh::IO::_IOManager_	access:private
ww	Geometry/QuadricT.hh	/^  Scalar ww() const { return j_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
x	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[0])
x	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]);$/;"	p	signature:(_v[0])
x	IO/reader/OBJReader.cc	/^      stream >> x; stream >> y; stream >> z;$/;"	l
x	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
xw	Geometry/QuadricT.hh	/^  Scalar xw() const { return d_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
xx	Geometry/QuadricT.hh	/^  Scalar xx() const { return a_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
xy	Geometry/QuadricT.hh	/^  Scalar xy() const { return b_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
xz	Geometry/QuadricT.hh	/^  Scalar xz() const { return c_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
y	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[1])
y	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]);$/;"	p	signature:(_v[1])
y	IO/reader/OBJReader.cc	/^      stream >> x; stream >> y; stream >> z;$/;"	l
y	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
yw	Geometry/QuadricT.hh	/^  Scalar yw() const { return g_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
yy	Geometry/QuadricT.hh	/^  Scalar yy() const { return e_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
yz	Geometry/QuadricT.hh	/^  Scalar yz() const { return f_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
z	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]), w(_v[3]);$/;"	p	signature:(_v[2])
z	Geometry/QuadricT.hh	/^    Scalar x(_v[0]), y(_v[1]), z(_v[2]);$/;"	p	signature:(_v[2])
z	IO/reader/OBJReader.cc	/^      stream >> x; stream >> y; stream >> z;$/;"	l
z	IO/reader/OBJReader.cc	/^  float                     x, y, z, u, v;$/;"	l
zw	Geometry/QuadricT.hh	/^  Scalar zw() const { return i_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
zz	Geometry/QuadricT.hh	/^  Scalar zz() const { return h_; }$/;"	f	class:OpenMesh::Geometry::QuadricT	access:public	signature:() const
~ArrayKernel	Mesh/ArrayKernel.cc	/^ArrayKernel::~ArrayKernel()$/;"	f	class:OpenMesh::ArrayKernel	signature:()
~ArrayKernel	Mesh/ArrayKernel.hh	/^  virtual ~ArrayKernel();$/;"	p	class:OpenMesh::ArrayKernel	access:public	signature:()
~AttribKernelT	Mesh/AttribKernelT.hh	/^  virtual ~AttribKernelT()$/;"	f	class:OpenMesh::AttribKernelT	access:public	signature:()
~AutoPropertyHandleT	Utils/AutoPropertyHandleT.hh	/^  ~AutoPropertyHandleT()$/;"	f	class:OpenMesh::AutoPropertyHandleT	access:public	signature:()
~AutoStatusSetT	Mesh/ArrayKernel.hh	/^    ~AutoStatusSetT()$/;"	f	class:OpenMesh::ArrayKernel::AutoStatusSetT	access:public	signature:()
~BaseExporter	IO/exporter/BaseExporter.hh	/^  virtual ~BaseExporter() { }$/;"	f	class:OpenMesh::IO::BaseExporter	access:public	signature:()
~BaseImporter	IO/importer/BaseImporter.hh	/^  virtual ~BaseImporter() {}$/;"	f	class:OpenMesh::IO::BaseImporter	access:public	signature:()
~BaseKernel	Mesh/BaseKernel.hh	/^  virtual ~BaseKernel() {$/;"	f	class:OpenMesh::BaseKernel	access:public	signature:()
~BaseMesh	Mesh/BaseMesh.hh	/^  virtual ~BaseMesh(void) {;}$/;"	f	class:OpenMesh::BaseMesh	access:public	signature:(void)
~BaseProperty	Utils/BaseProperty.hh	/^  virtual ~BaseProperty() {}$/;"	f	class:OpenMesh::BaseProperty	access:public	signature:()
~BaseReader	IO/reader/BaseReader.hh	/^  virtual ~BaseReader() {};$/;"	f	class:OpenMesh::IO::BaseReader	access:public	signature:()
~BaseWriter	IO/writer/BaseWriter.hh	/^  virtual ~BaseWriter() {};$/;"	f	class:OpenMesh::IO::BaseWriter	access:public	signature:()
~Enabler	IO/writer/OMWriter.cc	/^  ~Enabler() { obj_.enable(); }$/;"	f	struct:OpenMesh::IO::Enabler	access:public	signature:()
~ExtStatusSetT	Mesh/ArrayKernel.hh	/^    ~ExtStatusSetT()$/;"	f	class:OpenMesh::ArrayKernel::ExtStatusSetT	access:public	signature:()
~Options	IO/Options.hh	/^  ~Options()$/;"	f	class:OpenMesh::IO::Options	access:public	signature:()
~PolyConnectivity	Mesh/PolyConnectivity.hh	/^  virtual ~PolyConnectivity() {}$/;"	f	class:OpenMesh::PolyConnectivity	access:public	signature:()
~PolyMeshT	Mesh/PolyMeshT.hh	/^  virtual ~PolyMeshT() {}$/;"	f	class:OpenMesh::PolyMeshT	access:public	signature:()
~PropertyContainer	Utils/PropertyContainer.hh	/^  virtual ~PropertyContainer() { std::for_each(properties_.begin(), properties_.end(), Delete()); }$/;"	f	class:OpenMesh::PropertyContainer	access:public	signature:()
~PropertyManager	Utils/PropertyManager.hh	/^        ~PropertyManager() {$/;"	f	class:OpenMesh::PropertyManager	access:public	signature:()
~SingletonT	Utils/SingletonT.hh	/^  virtual ~SingletonT()$/;"	f	class:OpenMesh::SingletonT	access:private	signature:()
~StatusSetT	Mesh/ArrayKernel.hh	/^    ~StatusSetT()$/;"	f	class:OpenMesh::ArrayKernel::StatusSetT	access:public	signature:()
~TriConnectivity	Mesh/TriConnectivity.hh	/^  virtual ~TriConnectivity() {}$/;"	f	class:OpenMesh::TriConnectivity	access:public	signature:()
~TriMeshT	Mesh/TriMeshT.hh	/^  virtual ~TriMeshT() {}$/;"	f	class:OpenMesh::TriMeshT	access:public	signature:()
~_OBJReader_	IO/reader/OBJReader.hh	/^  virtual ~_OBJReader_() { }$/;"	f	class:OpenMesh::IO::_OBJReader_	access:public	signature:()
~_OBJWriter_	IO/writer/OBJWriter.hh	/^  virtual ~_OBJWriter_() {};$/;"	f	class:OpenMesh::IO::_OBJWriter_	access:public	signature:()
~_OFFReader_	IO/reader/OFFReader.hh	/^  virtual ~_OFFReader_() {};$/;"	f	class:OpenMesh::IO::_OFFReader_	access:public	signature:()
~_OFFWriter_	IO/writer/OFFWriter.hh	/^  virtual ~_OFFWriter_() {};$/;"	f	class:OpenMesh::IO::_OFFWriter_	access:public	signature:()
~_OMReader_	IO/reader/OMReader.hh	/^  virtual ~_OMReader_() { }$/;"	f	class:OpenMesh::IO::_OMReader_	access:public	signature:()
~_OMWriter_	IO/writer/OMWriter.hh	/^  virtual ~_OMWriter_() {};$/;"	f	class:OpenMesh::IO::_OMWriter_	access:public	signature:()
~_PLYWriter_	IO/writer/PLYWriter.hh	/^  virtual ~_PLYWriter_() {};$/;"	f	class:OpenMesh::IO::_PLYWriter_	access:public	signature:()
~_STLReader_	IO/reader/STLReader.hh	/^  virtual ~_STLReader_() {};$/;"	f	class:OpenMesh::IO::_STLReader_	access:public	signature:()
~_STLWriter_	IO/writer/STLWriter.hh	/^  virtual ~_STLWriter_() {};$/;"	f	class:OpenMesh::IO::_STLWriter_	access:public	signature:()
~basic_multiplex_target	System/mostream.hh	/^  virtual ~basic_multiplex_target() {}$/;"	f	class:OpenMesh::basic_multiplex_target	access:public	signature:()
~multiplex_streambuf	System/mostream.hh	/^  ~multiplex_streambuf()$/;"	f	class:OpenMesh::multiplex_streambuf	access:public	signature:()
