!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGN_CAMERA	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
ALIGN_FRAME	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
ALIGN_FRAME	/usr/include/QGLViewer/tags	/^ALIGN_FRAME	qglviewer.h	\/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$\/;"	e	enum:QGLViewer::ClickAction$/;"	v	typeref:enum:
ANIMATION	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
AXIS	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
AxisPlaneConstraint	/usr/include/QGLViewer/constraint.h	/^    AxisPlaneConstraint();$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:()
AxisPlaneConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT AxisPlaneConstraint : public Constraint$/;"	c	namespace:qglviewer	inherits:Constraint
CAMERA	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	e	enum:QGLViewer::MouseHandler
CAMERA_MODE	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
CENTER_FRAME	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
CENTER_SCENE	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
CENTER_SCENE	/usr/include/QGLViewer/tags	/^ALIGN_FRAME	qglviewer.h	\/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$\/;"	e	enum:QGLViewer::ClickAction$/;"	v	typeref:enum:
Camera	/usr/include/QGLViewer/camera.h	/^    Camera();$/;"	p	class:qglviewer::Camera	access:public	signature:()
Camera	/usr/include/QGLViewer/camera.h	/^    Camera(const Camera& camera);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Camera& camera)
Camera	/usr/include/QGLViewer/camera.h	/^  class QGLVIEWER_EXPORT Camera : public QObject$/;"	c	namespace:qglviewer	inherits:QObject
CameraConstraint	/usr/include/QGLViewer/constraint.h	/^    explicit CameraConstraint(const Camera* const camera);$/;"	p	class:qglviewer::CameraConstraint	access:public	signature:(const Camera* const camera)
CameraConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT CameraConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer	inherits:AxisPlaneConstraint
ClickAction	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	g	class:QGLViewer	access:protected
ClickActionPrivate	/usr/include/QGLViewer/qglviewer.h	/^	struct ClickActionPrivate {$/;"	s	class:QGLViewer	access:private
Constraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT Constraint$/;"	c	namespace:qglviewer
DECREASE_FLYSPEED	/usr/include/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
DISPLAY_FPS	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
DRAW_AXIS	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
DRAW_GRID	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
DRIVE	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
DomUtils	/usr/include/QGLViewer/domUtils.h	/^class DomUtils$/;"	c
DomUtils::QColorDomElement	/usr/include/QGLViewer/domUtils.h	/^  static QDomElement QColorDomElement(const QColor& color, const QString& name, QDomDocument& doc)$/;"	f	class:DomUtils	access:public	signature:(const QColor& color, const QString& name, QDomDocument& doc)
DomUtils::QColorFromDom	/usr/include/QGLViewer/domUtils.h	/^  static QColor QColorFromDom(const QDomElement& e)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e)
DomUtils::boolFromDom	/usr/include/QGLViewer/domUtils.h	/^  static bool boolFromDom(const QDomElement& e, const QString& attribute, bool defValue)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e, const QString& attribute, bool defValue)
DomUtils::floatFromDom	/usr/include/QGLViewer/domUtils.h	/^  static float floatFromDom(const QDomElement& e, const QString& attribute, float defValue)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e, const QString& attribute, float defValue)
DomUtils::intFromDom	/usr/include/QGLViewer/domUtils.h	/^  static int intFromDom(const QDomElement& e, const QString& attribute, int defValue)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e, const QString& attribute, int defValue)
DomUtils::warning	/usr/include/QGLViewer/domUtils.h	/^  static void warning(const QString& message)$/;"	f	class:DomUtils	access:private	signature:(const QString& message)
EDIT_CAMERA	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
ENABLE_TEXT	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
EXIT_VIEWER	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
FORBIDDEN	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
FPSIsDisplayed	/usr/include/QGLViewer/qglviewer.h	/^	bool FPSIsDisplayed() const { return FPSIsDisplayed_; };$/;"	f	class:QGLViewer	access:public	signature:() const
FPSIsDisplayedChanged	/usr/include/QGLViewer/qglviewer.h	/^	void FPSIsDisplayedChanged(bool displayed);$/;"	p	class:QGLViewer	access:public	signature:(bool displayed)
FPSIsDisplayed_	/usr/include/QGLViewer/qglviewer.h	/^	bool FPSIsDisplayed_;	\/\/ Frame Per Seconds$/;"	m	class:QGLViewer	access:private
FRAME	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	e	enum:QGLViewer::MouseHandler
FREE	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
FULL_SCREEN	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
Frame	/usr/include/QGLViewer/frame.h	/^    Frame();$/;"	p	class:qglviewer::Frame	access:public	signature:()
Frame	/usr/include/QGLViewer/frame.h	/^    Frame(const Frame& frame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame& frame)
Frame	/usr/include/QGLViewer/frame.h	/^    Frame(const Vec& position, const Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& position, const Quaternion& orientation)
Frame	/usr/include/QGLViewer/frame.h	/^  class QGLVIEWER_EXPORT Frame : public QObject$/;"	c	namespace:qglviewer	inherits:QObject
HELP	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
INCREASE_FLYSPEED	/usr/include/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
IODistance	/usr/include/QGLViewer/camera.h	/^    float IODistance() const { return IODistance_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
IODistance_	/usr/include/QGLViewer/camera.h	/^    float IODistance_;		     \/\/ inter-ocular distance, in meters$/;"	m	class:qglviewer::Camera	access:private
KeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      KeyFrame(const Frame& fr, float t);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const Frame& fr, float t)
KeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      KeyFrame(const Frame* fr, float t);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const Frame* fr, float t)
KeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    class KeyFrame$/;"	c	class:qglviewer::KeyFrameInterpolator	access:private
KeyFrameInterpolator	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    KeyFrameInterpolator(Frame* fr=NULL);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(Frame* fr=NULL)
KeyFrameInterpolator	/usr/include/QGLViewer/keyFrameInterpolator.h	/^  class QGLVIEWER_EXPORT KeyFrameInterpolator : public QObject$/;"	c	namespace:qglviewer	inherits:QObject
KeyboardAction	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	g	class:QGLViewer	access:protected
LOOK_AROUND	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
LocalConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT LocalConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer	inherits:AxisPlaneConstraint
MOVE_BACKWARD	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
MOVE_CAMERA_DOWN	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_CAMERA_LEFT	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_CAMERA_RIGHT	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_CAMERA_UP	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_FORWARD	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
M_PI	/usr/include/QGLViewer/config.h	51;"	d
ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    ManipulatedCameraFrame();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:()
ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    ManipulatedCameraFrame(const ManipulatedCameraFrame& mcf);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const ManipulatedCameraFrame& mcf)
ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^  class QGLVIEWER_EXPORT ManipulatedCameraFrame : public ManipulatedFrame$/;"	c	namespace:qglviewer	inherits:ManipulatedFrame
ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^    ManipulatedFrame();$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:()
ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^    ManipulatedFrame(const ManipulatedFrame& mf);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const ManipulatedFrame& mf)
ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^  class QGLVIEWER_EXPORT ManipulatedFrame : public Frame, public MouseGrabber$/;"	c	namespace:qglviewer	inherits:Frame,MouseGrabber
MouseAction	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseAction { NO_MOUSE_ACTION,$/;"	g	class:QGLViewer	access:public
MouseActionPrivate	/usr/include/QGLViewer/qglviewer.h	/^	struct MouseActionPrivate {$/;"	s	class:QGLViewer	access:private
MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    MouseGrabber();$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:()
MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    MouseGrabber(const MouseGrabber&);$/;"	p	class:qglviewer::MouseGrabber	access:private	signature:(const MouseGrabber&)
MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^  class QGLVIEWER_EXPORT MouseGrabber$/;"	c	namespace:qglviewer
MouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    static const QList<MouseGrabber*>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
MouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    static const QList<MouseGrabber>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
MouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    static const QPtrList<MouseGrabber>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
MouseGrabberPool_	/usr/include/QGLViewer/mouseGrabber.h	/^    static QList<MouseGrabber*> MouseGrabberPool_;$/;"	m	class:qglviewer::MouseGrabber	access:private
MouseGrabberPool_	/usr/include/QGLViewer/mouseGrabber.h	/^    static QPtrList<MouseGrabber> MouseGrabberPool_;$/;"	m	class:qglviewer::MouseGrabber	access:private
MouseHandler	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	g	class:QGLViewer	access:protected
NO_CLICK_ACTION	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
NO_MOUSE_ACTION	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseAction { NO_MOUSE_ACTION,$/;"	e	enum:QGLViewer::MouseAction
ORTHOGRAPHIC	/usr/include/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	e	enum:qglviewer::Camera::Type
PERSPECTIVE	/usr/include/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	e	enum:qglviewer::Camera::Type
PLANE	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
QColorDomElement	/usr/include/QGLViewer/domUtils.h	/^  static QDomElement QColorDomElement(const QColor& color, const QString& name, QDomDocument& doc)$/;"	f	class:DomUtils	access:public	signature:(const QColor& color, const QString& name, QDomDocument& doc)
QColorFromDom	/usr/include/QGLViewer/domUtils.h	/^  static QColor QColorFromDom(const QDomElement& e)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e)
QGLVIEWER_CAMERA_H	/usr/include/QGLViewer/camera.h	24;"	d
QGLVIEWER_CONFIG_H	/usr/include/QGLViewer/config.h	29;"	d
QGLVIEWER_CONSTRAINT_H	/usr/include/QGLViewer/constraint.h	24;"	d
QGLVIEWER_EXPORT	/usr/include/QGLViewer/config.h	55;"	d
QGLVIEWER_EXPORT	/usr/include/QGLViewer/config.h	57;"	d
QGLVIEWER_EXPORT	/usr/include/QGLViewer/config.h	68;"	d
QGLVIEWER_FRAME_H	/usr/include/QGLViewer/frame.h	24;"	d
QGLVIEWER_KEY_FRAME_INTERPOLATOR_H	/usr/include/QGLViewer/keyFrameInterpolator.h	24;"	d
QGLVIEWER_MANIPULATED_CAMERA_FRAME_H	/usr/include/QGLViewer/manipulatedCameraFrame.h	24;"	d
QGLVIEWER_MANIPULATED_FRAME_H	/usr/include/QGLViewer/manipulatedFrame.h	24;"	d
QGLVIEWER_MOUSE_GRABBER_H	/usr/include/QGLViewer/mouseGrabber.h	24;"	d
QGLVIEWER_QGLVIEWER_H	/usr/include/QGLViewer/qglviewer.h	24;"	d
QGLVIEWER_QT_VERSION_WITHOUT_GLUT	/usr/include/QGLViewer/config.h	79;"	d
QGLVIEWER_QUATERNION_H	/usr/include/QGLViewer/quaternion.h	24;"	d
QGLVIEWER_UNION_NOT_SUPPORTED	/usr/include/QGLViewer/vec.h	75;"	d
QGLVIEWER_VEC_H	/usr/include/QGLViewer/vec.h	24;"	d
QGLVIEWER_VERSION	/usr/include/QGLViewer/config.h	31;"	d
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	QGLViewer(QGLContext* context, QWidget* parent, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)$/;"	f	class:QGLViewer	access:public	signature:(QGLContext* context, QWidget* parent, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	QGLViewer(const QGLViewer& v);$/;"	p	class:QGLViewer	access:private	signature:(const QGLViewer& v)
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(QGLContext *context, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0);$/;"	p	class:QGLViewer	access:public	signature:(QGLContext *context, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0);$/;"	p	class:QGLViewer	access:public	signature:(QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(QWidget* parent=NULL, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)$/;"	f	class:QGLViewer	access:public	signature:(QWidget* parent=NULL, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(const QGLFormat& format, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0);$/;"	p	class:QGLViewer	access:public	signature:(const QGLFormat& format, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(const QGLFormat& format, QWidget* parent=0, const char* name=0, const QGLWidget* shareWidget=0,Qt::WFlags flags=0)$/;"	f	class:QGLViewer	access:public	signature:(const QGLFormat& format, QWidget* parent=0, const char* name=0, const QGLWidget* shareWidget=0,Qt::WFlags flags=0)
QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^class QGLVIEWER_EXPORT QGLViewer : public QGLWidget$/;"	c	inherits:QGLWidget
QGLViewer::ALIGN_CAMERA	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::ALIGN_FRAME	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::ANIMATION	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::CAMERA	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	e	enum:QGLViewer::MouseHandler
QGLViewer::CAMERA_MODE	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::CENTER_FRAME	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::CENTER_SCENE	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::ClickAction	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	g	class:QGLViewer	access:protected
QGLViewer::ClickActionPrivate	/usr/include/QGLViewer/qglviewer.h	/^	struct ClickActionPrivate {$/;"	s	class:QGLViewer	access:private
QGLViewer::ClickActionPrivate::button	/usr/include/QGLViewer/qglviewer.h	/^		QtMouseButtons button;$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
QGLViewer::ClickActionPrivate::buttonsBefore	/usr/include/QGLViewer/qglviewer.h	/^		QtMouseButtons buttonsBefore; \/\/ only defined when doubleClick is true$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
QGLViewer::ClickActionPrivate::doubleClick	/usr/include/QGLViewer/qglviewer.h	/^		bool doubleClick;$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
QGLViewer::ClickActionPrivate::modifiers	/usr/include/QGLViewer/qglviewer.h	/^		QtKeyboardModifiers modifiers;$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
QGLViewer::ClickActionPrivate::operator <	/usr/include/QGLViewer/qglviewer.h	/^		bool operator<(const ClickActionPrivate& cap) const$/;"	f	struct:QGLViewer::ClickActionPrivate	access:public	signature:(const ClickActionPrivate& cap) const
QGLViewer::DECREASE_FLYSPEED	/usr/include/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::DISPLAY_FPS	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::DRAW_AXIS	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::DRAW_GRID	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::DRIVE	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::EDIT_CAMERA	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::ENABLE_TEXT	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::EXIT_VIEWER	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::FPSIsDisplayed	/usr/include/QGLViewer/qglviewer.h	/^	bool FPSIsDisplayed() const { return FPSIsDisplayed_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::FPSIsDisplayedChanged	/usr/include/QGLViewer/qglviewer.h	/^	void FPSIsDisplayedChanged(bool displayed);$/;"	p	class:QGLViewer	access:public	signature:(bool displayed)
QGLViewer::FPSIsDisplayed_	/usr/include/QGLViewer/qglviewer.h	/^	bool FPSIsDisplayed_;	\/\/ Frame Per Seconds$/;"	m	class:QGLViewer	access:private
QGLViewer::FRAME	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	e	enum:QGLViewer::MouseHandler
QGLViewer::FULL_SCREEN	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::HELP	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::INCREASE_FLYSPEED	/usr/include/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::KeyboardAction	/usr/include/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	g	class:QGLViewer	access:protected
QGLViewer::LOOK_AROUND	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::MOVE_BACKWARD	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::MOVE_CAMERA_DOWN	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::MOVE_CAMERA_LEFT	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::MOVE_CAMERA_RIGHT	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::MOVE_CAMERA_UP	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::MOVE_FORWARD	/usr/include/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::MouseAction	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseAction { NO_MOUSE_ACTION,$/;"	g	class:QGLViewer	access:public
QGLViewer::MouseActionPrivate	/usr/include/QGLViewer/qglviewer.h	/^	struct MouseActionPrivate {$/;"	s	class:QGLViewer	access:private
QGLViewer::MouseActionPrivate::action	/usr/include/QGLViewer/qglviewer.h	/^		MouseAction action;$/;"	m	struct:QGLViewer::MouseActionPrivate	access:public
QGLViewer::MouseActionPrivate::handler	/usr/include/QGLViewer/qglviewer.h	/^		MouseHandler handler;$/;"	m	struct:QGLViewer::MouseActionPrivate	access:public
QGLViewer::MouseActionPrivate::withConstraint	/usr/include/QGLViewer/qglviewer.h	/^		bool withConstraint;$/;"	m	struct:QGLViewer::MouseActionPrivate	access:public
QGLViewer::MouseHandler	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	g	class:QGLViewer	access:protected
QGLViewer::NO_CLICK_ACTION	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::NO_MOUSE_ACTION	/usr/include/QGLViewer/qglviewer.h	/^	enum MouseAction { NO_MOUSE_ACTION,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	QGLViewer(QGLContext* context, QWidget* parent, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)$/;"	f	class:QGLViewer	access:public	signature:(QGLContext* context, QWidget* parent, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer::QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	QGLViewer(const QGLViewer& v);$/;"	p	class:QGLViewer	access:private	signature:(const QGLViewer& v)
QGLViewer::QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(QGLContext *context, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0);$/;"	p	class:QGLViewer	access:public	signature:(QGLContext *context, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer::QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0);$/;"	p	class:QGLViewer	access:public	signature:(QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer::QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(QWidget* parent=NULL, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)$/;"	f	class:QGLViewer	access:public	signature:(QWidget* parent=NULL, const char* name=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer::QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(const QGLFormat& format, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0);$/;"	p	class:QGLViewer	access:public	signature:(const QGLFormat& format, QWidget* parent=0, const QGLWidget* shareWidget=0, Qt::WFlags flags=0)
QGLViewer::QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	explicit QGLViewer(const QGLFormat& format, QWidget* parent=0, const char* name=0, const QGLWidget* shareWidget=0,Qt::WFlags flags=0)$/;"	f	class:QGLViewer	access:public	signature:(const QGLFormat& format, QWidget* parent=0, const char* name=0, const QGLWidget* shareWidget=0,Qt::WFlags flags=0)
QGLViewer::QGLViewerIndex	/usr/include/QGLViewer/qglviewer.h	/^	static int QGLViewerIndex(const QGLViewer* const viewer) { return QGLViewer::QGLViewerPool_.find(viewer); };$/;"	f	class:QGLViewer	access:public	signature:(const QGLViewer* const viewer)
QGLViewer::QGLViewerIndex	/usr/include/QGLViewer/qglviewer.h	/^	static int QGLViewerIndex(const QGLViewer* const viewer) { return QGLViewer::QGLViewerPool_.indexOf(const_cast<QGLViewer*>(viewer)); };$/;"	f	class:QGLViewer	access:public	signature:(const QGLViewer* const viewer)
QGLViewer::QGLViewerPool	/usr/include/QGLViewer/qglviewer.h	/^	static const QList<QGLViewer*>& QGLViewerPool() { return QGLViewer::QGLViewerPool_; };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::QGLViewerPool	/usr/include/QGLViewer/qglviewer.h	/^	static const QPtrList<QGLViewer>& QGLViewerPool() { return QGLViewer::QGLViewerPool_; };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::QGLViewerPool_	/usr/include/QGLViewer/qglviewer.h	/^	static QList<QGLViewer*> QGLViewerPool_;$/;"	m	class:QGLViewer	access:private
QGLViewer::QGLViewerPool_	/usr/include/QGLViewer/qglviewer.h	/^	static QPtrList<QGLViewer> QGLViewerPool_;$/;"	m	class:QGLViewer	access:private
QGLViewer::RAP_FROM_PIXEL	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::RAP_IS_CENTER	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::ROLL	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::ROTATE	/usr/include/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::SAVE_SCREENSHOT	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::SCREEN_ROTATE	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::SCREEN_TRANSLATE	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_TRANSLATE, ZOOM_ON_REGION };$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::SELECT	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::SHOW_ENTIRE_SCENE	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::SNAPSHOT_TO_CLIPBOARD	/usr/include/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::STEREO	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
QGLViewer::TRANSLATE	/usr/include/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::TileRegion	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	c	class:QGLViewer	access:private
QGLViewer::TileRegion::textScale	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
QGLViewer::TileRegion::xMax	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
QGLViewer::TileRegion::xMin	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
QGLViewer::TileRegion::yMax	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
QGLViewer::TileRegion::yMin	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
QGLViewer::ZOOM	/usr/include/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::ZOOM_ON_PIXEL	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::ZOOM_ON_REGION	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_TRANSLATE, ZOOM_ON_REGION };$/;"	e	enum:QGLViewer::MouseAction
QGLViewer::ZOOM_TO_FIT	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
QGLViewer::aboutQGLViewer	/usr/include/QGLViewer/qglviewer.h	/^		virtual void aboutQGLViewer();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::addKeyFrameKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameKeyboardModifiers() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::addKeyFrameKeyboardModifiers_	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameKeyboardModifiers_, playPathKeyboardModifiers_;$/;"	m	class:QGLViewer	access:private
QGLViewer::addKeyFrameStateKey	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameStateKey() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::animate	/usr/include/QGLViewer/qglviewer.h	/^		virtual void animate() { emit animateNeeded(); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::animateNeeded	/usr/include/QGLViewer/qglviewer.h	/^	void animateNeeded();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::animationIsStarted	/usr/include/QGLViewer/qglviewer.h	/^	bool animationIsStarted() const { return animationStarted_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::animationPeriod	/usr/include/QGLViewer/qglviewer.h	/^	int animationPeriod() const { return animationPeriod_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::animationPeriod_	/usr/include/QGLViewer/qglviewer.h	/^	int animationPeriod_;   \/\/ period in msecs$/;"	m	class:QGLViewer	access:private
QGLViewer::animationStarted_	/usr/include/QGLViewer/qglviewer.h	/^	bool animationStarted_; \/\/ animation mode started$/;"	m	class:QGLViewer	access:private
QGLViewer::animationTimerId_	/usr/include/QGLViewer/qglviewer.h	/^	int animationTimerId_;$/;"	m	class:QGLViewer	access:private
QGLViewer::aspectRatio	/usr/include/QGLViewer/qglviewer.h	/^	float aspectRatio() const { return static_cast<float>(width())\/static_cast<float>(height()); };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::autoBufferSwap	/usr/include/QGLViewer/qglviewer.h	/^	bool autoBufferSwap() const;$/;"	p	class:QGLViewer	access:protected	signature:() const
QGLViewer::axisIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^	bool axisIsDrawn() const { return axisIsDrawn_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::axisIsDrawnChanged	/usr/include/QGLViewer/qglviewer.h	/^	void axisIsDrawnChanged(bool drawn);$/;"	p	class:QGLViewer	access:public	signature:(bool drawn)
QGLViewer::axisIsDrawn_	/usr/include/QGLViewer/qglviewer.h	/^	bool axisIsDrawn_;	\/\/ world axis$/;"	m	class:QGLViewer	access:private
QGLViewer::backgroundColor	/usr/include/QGLViewer/qglviewer.h	/^	QColor backgroundColor() const { return backgroundColor_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::backgroundColor_	/usr/include/QGLViewer/qglviewer.h	/^	QColor backgroundColor_, foregroundColor_;$/;"	m	class:QGLViewer	access:private
QGLViewer::beginSelection	/usr/include/QGLViewer/qglviewer.h	/^	virtual void beginSelection(const QPoint& point);$/;"	p	class:QGLViewer	access:protected	signature:(const QPoint& point)
QGLViewer::bufferTextureHeight_	/usr/include/QGLViewer/qglviewer.h	/^	int bufferTextureWidth_, bufferTextureHeight_;$/;"	m	class:QGLViewer	access:private
QGLViewer::bufferTextureId	/usr/include/QGLViewer/qglviewer.h	/^	GLuint bufferTextureId() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::bufferTextureId_	/usr/include/QGLViewer/qglviewer.h	/^	GLuint bufferTextureId_;$/;"	m	class:QGLViewer	access:private
QGLViewer::bufferTextureMaxU	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU() const { return bufferTextureMaxU_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::bufferTextureMaxU_	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU_, bufferTextureMaxV_;$/;"	m	class:QGLViewer	access:private
QGLViewer::bufferTextureMaxV	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxV() const { return bufferTextureMaxV_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::bufferTextureMaxV_	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU_, bufferTextureMaxV_;$/;"	m	class:QGLViewer	access:private
QGLViewer::bufferTextureWidth_	/usr/include/QGLViewer/qglviewer.h	/^	int bufferTextureWidth_, bufferTextureHeight_;$/;"	m	class:QGLViewer	access:private
QGLViewer::camera	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::Camera* camera() const { return camera_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::cameraIsEdited	/usr/include/QGLViewer/qglviewer.h	/^	bool cameraIsEdited() const { return cameraIsEdited_; }$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::cameraIsEditedChanged	/usr/include/QGLViewer/qglviewer.h	/^	void cameraIsEditedChanged(bool edited);$/;"	p	class:QGLViewer	access:public	signature:(bool edited)
QGLViewer::cameraIsEdited_	/usr/include/QGLViewer/qglviewer.h	/^	bool cameraIsEdited_;$/;"	m	class:QGLViewer	access:private
QGLViewer::cameraIsInRevolveMode	/usr/include/QGLViewer/qglviewer.h	/^	bool cameraIsInRevolveMode() const;$/;"	p	class:QGLViewer	access:private	signature:() const
QGLViewer::cameraPathKeysString	/usr/include/QGLViewer/qglviewer.h	/^	QString cameraPathKeysString() const;$/;"	p	class:QGLViewer	access:private	signature:() const
QGLViewer::camera_	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::Camera* camera_;$/;"	m	class:QGLViewer	access:private
QGLViewer::clickAction	/usr/include/QGLViewer/qglviewer.h	/^	ClickAction clickAction(int state, bool doubleClick, QtMouseButtons buttonsBefore) const;$/;"	p	class:QGLViewer	access:public	signature:(int state, bool doubleClick, QtMouseButtons buttonsBefore) const
QGLViewer::clickActionString	/usr/include/QGLViewer/qglviewer.h	/^	static QString clickActionString(QGLViewer::ClickAction ca);$/;"	p	class:QGLViewer	access:private	signature:(QGLViewer::ClickAction ca)
QGLViewer::clickBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<ClickActionPrivate, ClickAction> clickBinding_;$/;"	m	class:QGLViewer	access:private
QGLViewer::closeEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void closeEvent(QCloseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QCloseEvent *)
QGLViewer::connectAllCameraKFIInterpolatedSignals	/usr/include/QGLViewer/qglviewer.h	/^	void connectAllCameraKFIInterpolatedSignals(bool connection=true);$/;"	p	class:QGLViewer	access:private	signature:(bool connection=true)
QGLViewer::convertToGLFormat	/usr/include/QGLViewer/qglviewer.h	/^	static QImage convertToGLFormat(const QImage & image);$/;"	p	class:QGLViewer	access:public	signature:(const QImage & image)
QGLViewer::copyBufferToTexture	/usr/include/QGLViewer/qglviewer.h	/^		void copyBufferToTexture(GLint internalFormat, GLenum format=GL_NONE);$/;"	p	class:QGLViewer	access:public	signature:(GLint internalFormat, GLenum format=GL_NONE)
QGLViewer::currentFPS	/usr/include/QGLViewer/qglviewer.h	/^	float currentFPS() { return f_p_s_; };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::defaultConstructor	/usr/include/QGLViewer/qglviewer.h	/^	void defaultConstructor();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::delayedFullScreen	/usr/include/QGLViewer/qglviewer.h	/^			void delayedFullScreen() { move(prevPos_); setFullScreen(); };$/;"	f	class:QGLViewer	access:private	signature:()
QGLViewer::disabledMouseGrabbers_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<size_t, bool> disabledMouseGrabbers_;$/;"	m	class:QGLViewer	access:private
QGLViewer::displayFPS	/usr/include/QGLViewer/qglviewer.h	/^	void displayFPS();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::displayMessage	/usr/include/QGLViewer/qglviewer.h	/^	void displayMessage(const QString& message, int delay=2000);$/;"	p	class:QGLViewer	access:public	signature:(const QString& message, int delay=2000)
QGLViewer::displayMessage_	/usr/include/QGLViewer/qglviewer.h	/^	bool displayMessage_;$/;"	m	class:QGLViewer	access:private
QGLViewer::displaysInStereo	/usr/include/QGLViewer/qglviewer.h	/^	bool displaysInStereo() const { return stereo_; }$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::domElement	/usr/include/QGLViewer/qglviewer.h	/^	virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:QGLViewer	access:public	signature:(const QString& name, QDomDocument& document) const
QGLViewer::draw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void draw() {};$/;"	f	class:QGLViewer	access:protected	signature:()
QGLViewer::drawArrow	/usr/include/QGLViewer/qglviewer.h	/^	static void drawArrow(const qglviewer::Vec& from, const qglviewer::Vec& to, float radius=-1.0f, int nbSubdivisions=12);$/;"	p	class:QGLViewer	access:public	signature:(const qglviewer::Vec& from, const qglviewer::Vec& to, float radius=-1.0f, int nbSubdivisions=12)
QGLViewer::drawArrow	/usr/include/QGLViewer/qglviewer.h	/^	static void drawArrow(float length=1.0f, float radius=-1.0f, int nbSubdivisions=12);$/;"	p	class:QGLViewer	access:public	signature:(float length=1.0f, float radius=-1.0f, int nbSubdivisions=12)
QGLViewer::drawAxis	/usr/include/QGLViewer/qglviewer.h	/^	static void drawAxis(float length=1.0f);$/;"	p	class:QGLViewer	access:public	signature:(float length=1.0f)
QGLViewer::drawFinished	/usr/include/QGLViewer/qglviewer.h	/^	void drawFinished(bool automatic);$/;"	p	class:QGLViewer	access:public	signature:(bool automatic)
QGLViewer::drawGrid	/usr/include/QGLViewer/qglviewer.h	/^	static void drawGrid(float size=1.0f, int nbSubdivisions=10);$/;"	p	class:QGLViewer	access:public	signature:(float size=1.0f, int nbSubdivisions=10)
QGLViewer::drawLight	/usr/include/QGLViewer/qglviewer.h	/^	virtual void drawLight(GLenum light, float scale = 1.0f) const;$/;"	p	class:QGLViewer	access:protected	signature:(GLenum light, float scale = 1.0f) const
QGLViewer::drawNeeded	/usr/include/QGLViewer/qglviewer.h	/^	void drawNeeded();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::drawText	/usr/include/QGLViewer/qglviewer.h	/^	void drawText(int x, int y, const QString& text, const QFont& fnt=QFont());$/;"	p	class:QGLViewer	access:public	signature:(int x, int y, const QString& text, const QFont& fnt=QFont())
QGLViewer::drawVectorial	/usr/include/QGLViewer/qglviewer.h	/^	friend void drawVectorial(void* param);$/;"	p	class:QGLViewer	access:friend	signature:(void* param)
QGLViewer::drawVectorial	/usr/include/QGLViewer/qglviewer.h	/^	void drawVectorial() { paintGL(); };$/;"	f	class:QGLViewer	access:private	signature:()
QGLViewer::drawVisualHints	/usr/include/QGLViewer/qglviewer.h	/^	virtual void drawVisualHints();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::drawWithNames	/usr/include/QGLViewer/qglviewer.h	/^	virtual void drawWithNames() {};$/;"	f	class:QGLViewer	access:protected	signature:()
QGLViewer::endSelection	/usr/include/QGLViewer/qglviewer.h	/^	virtual void endSelection(const QPoint& point);$/;"	p	class:QGLViewer	access:protected	signature:(const QPoint& point)
QGLViewer::f_p_s_	/usr/include/QGLViewer/qglviewer.h	/^	float f_p_s_;$/;"	m	class:QGLViewer	access:private
QGLViewer::fastDraw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void fastDraw();$/;"	p	class:QGLViewer	access:protected	signature:()
QGLViewer::foregroundColor	/usr/include/QGLViewer/qglviewer.h	/^	QColor foregroundColor() const { return foregroundColor_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::foregroundColor_	/usr/include/QGLViewer/qglviewer.h	/^	QColor backgroundColor_, foregroundColor_;$/;"	m	class:QGLViewer	access:private
QGLViewer::formatClickActionPrivate	/usr/include/QGLViewer/qglviewer.h	/^    static QString formatClickActionPrivate(ClickActionPrivate cap);$/;"	p	class:QGLViewer	access:private	signature:(ClickActionPrivate cap)
QGLViewer::fpsCounter_	/usr/include/QGLViewer/qglviewer.h	/^	unsigned int fpsCounter_;$/;"	m	class:QGLViewer	access:private
QGLViewer::fpsString_	/usr/include/QGLViewer/qglviewer.h	/^	QString fpsString_;$/;"	m	class:QGLViewer	access:private
QGLViewer::fpsTime_	/usr/include/QGLViewer/qglviewer.h	/^	QTime fpsTime_;$/;"	m	class:QGLViewer	access:private
QGLViewer::frameBufferSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	QImage frameBufferSnapshot();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::fullScreen_	/usr/include/QGLViewer/qglviewer.h	/^	bool fullScreen_;	\/\/ full screen mode$/;"	m	class:QGLViewer	access:private
QGLViewer::getClickButtonState	/usr/include/QGLViewer/qglviewer.h	/^	void getClickButtonState(ClickAction action, int& state, bool& doubleClick, QtMouseButtons& buttonsBefore) const;$/;"	p	class:QGLViewer	access:public	signature:(ClickAction action, int& state, bool& doubleClick, QtMouseButtons& buttonsBefore) const
QGLViewer::grabFrameBuffer	/usr/include/QGLViewer/qglviewer.h	/^	virtual QImage grabFrameBuffer(bool withAlpha=false);$/;"	p	class:QGLViewer	access:public	signature:(bool withAlpha=false)
QGLViewer::gridIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^	bool gridIsDrawn() const { return gridIsDrawn_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::gridIsDrawnChanged	/usr/include/QGLViewer/qglviewer.h	/^	void gridIsDrawnChanged(bool drawn);$/;"	p	class:QGLViewer	access:public	signature:(bool drawn)
QGLViewer::gridIsDrawn_	/usr/include/QGLViewer/qglviewer.h	/^	bool gridIsDrawn_;	\/\/ world XY grid$/;"	m	class:QGLViewer	access:private
QGLViewer::handleKeyboardAction	/usr/include/QGLViewer/qglviewer.h	/^	void handleKeyboardAction(KeyboardAction id);$/;"	p	class:QGLViewer	access:private	signature:(KeyboardAction id)
QGLViewer::hasMouseTracking	/usr/include/QGLViewer/qglviewer.h	/^	bool hasMouseTracking () const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::height	/usr/include/QGLViewer/qglviewer.h	/^	int height() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::help	/usr/include/QGLViewer/qglviewer.h	/^		virtual void help();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::helpRequired	/usr/include/QGLViewer/qglviewer.h	/^	void helpRequired();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::helpString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString helpString() const { return tr("No help available."); };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::helpWidget	/usr/include/QGLViewer/qglviewer.h	/^	QTabWidget* helpWidget() { return helpWidget_; }$/;"	f	class:QGLViewer	access:protected	signature:()
QGLViewer::helpWidget_	/usr/include/QGLViewer/qglviewer.h	/^	QTabWidget* helpWidget_;$/;"	m	class:QGLViewer	access:private
QGLViewer::hideMessage	/usr/include/QGLViewer/qglviewer.h	/^			void hideMessage();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::init	/usr/include/QGLViewer/qglviewer.h	/^	virtual void init() { emit viewerInitialized(); };$/;"	f	class:QGLViewer	access:protected	signature:()
QGLViewer::initFromDOMElement	/usr/include/QGLViewer/qglviewer.h	/^		virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:QGLViewer	access:public	signature:(const QDomElement& element)
QGLViewer::initializeGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void initializeGL();$/;"	p	class:QGLViewer	access:protected	signature:()
QGLViewer::initializeSnapshotFormats	/usr/include/QGLViewer/qglviewer.h	/^	void initializeSnapshotFormats();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::isFullScreen	/usr/include/QGLViewer/qglviewer.h	/^	bool isFullScreen() const { return fullScreen_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::isSharing	/usr/include/QGLViewer/qglviewer.h	/^	bool isSharing() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::isValid	/usr/include/QGLViewer/qglviewer.h	/^	bool isValid() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::keyDescription_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<int, QString> keyDescription_;$/;"	m	class:QGLViewer	access:private
QGLViewer::keyFrameKey	/usr/include/QGLViewer/qglviewer.h	/^	Qt::Key keyFrameKey(int index) const;$/;"	p	class:QGLViewer	access:public	signature:(int index) const
QGLViewer::keyPressEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void keyPressEvent(QKeyEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QKeyEvent *)
QGLViewer::keyboardAccelerator	/usr/include/QGLViewer/qglviewer.h	/^	int keyboardAccelerator(KeyboardAction action) const;$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action) const
QGLViewer::keyboardActionDescription_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<KeyboardAction, QString> keyboardActionDescription_;$/;"	m	class:QGLViewer	access:private
QGLViewer::keyboardBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<KeyboardAction, int> keyboardBinding_;$/;"	m	class:QGLViewer	access:private
QGLViewer::keyboardString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString keyboardString() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::makeCurrent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void makeCurrent();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::manipulatedFrame	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::ManipulatedFrame* manipulatedFrame() const { return manipulatedFrame_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::manipulatedFrameIsACamera_	/usr/include/QGLViewer/qglviewer.h	/^	bool manipulatedFrameIsACamera_;$/;"	m	class:QGLViewer	access:private
QGLViewer::manipulatedFrame_	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::ManipulatedFrame* manipulatedFrame_;$/;"	m	class:QGLViewer	access:private
QGLViewer::messageTimer_	/usr/include/QGLViewer/qglviewer.h	/^	QTimer messageTimer_;$/;"	m	class:QGLViewer	access:private
QGLViewer::message_	/usr/include/QGLViewer/qglviewer.h	/^	QString message_;$/;"	m	class:QGLViewer	access:private
QGLViewer::mouseAction	/usr/include/QGLViewer/qglviewer.h	/^	MouseAction mouseAction(int state) const;$/;"	p	class:QGLViewer	access:public	signature:(int state) const
QGLViewer::mouseActionString	/usr/include/QGLViewer/qglviewer.h	/^	static QString mouseActionString(QGLViewer::MouseAction ma);$/;"	p	class:QGLViewer	access:private	signature:(QGLViewer::MouseAction ma)
QGLViewer::mouseBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<int, MouseActionPrivate> mouseBinding_;$/;"	m	class:QGLViewer	access:private
QGLViewer::mouseBindingsString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString mouseBindingsString () const { return mouseString(); }$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::mouseButtonState	/usr/include/QGLViewer/qglviewer.h	/^	int mouseButtonState(MouseHandler handler, MouseAction action, bool withConstraint=true) const;$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, MouseAction action, bool withConstraint=true) const
QGLViewer::mouseDescription_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<ClickActionPrivate, QString> mouseDescription_;$/;"	m	class:QGLViewer	access:private
QGLViewer::mouseDoubleClickEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mouseDoubleClickEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
QGLViewer::mouseGrabber	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::MouseGrabber* mouseGrabber() const { return mouseGrabber_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::mouseGrabberChanged	/usr/include/QGLViewer/qglviewer.h	/^	void mouseGrabberChanged(qglviewer::MouseGrabber* mouseGrabber);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::MouseGrabber* mouseGrabber)
QGLViewer::mouseGrabberIsAManipulatedCameraFrame_	/usr/include/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsAManipulatedCameraFrame_;$/;"	m	class:QGLViewer	access:private
QGLViewer::mouseGrabberIsAManipulatedFrame_	/usr/include/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsAManipulatedFrame_;$/;"	m	class:QGLViewer	access:private
QGLViewer::mouseGrabberIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsEnabled(const qglviewer::MouseGrabber* const mouseGrabber) { return !disabledMouseGrabbers_.contains(reinterpret_cast<size_t>(mouseGrabber)); };$/;"	f	class:QGLViewer	access:public	signature:(const qglviewer::MouseGrabber* const mouseGrabber)
QGLViewer::mouseGrabber_	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::MouseGrabber* mouseGrabber_;$/;"	m	class:QGLViewer	access:private
QGLViewer::mouseHandler	/usr/include/QGLViewer/qglviewer.h	/^	int mouseHandler(int state) const;$/;"	p	class:QGLViewer	access:public	signature:(int state) const
QGLViewer::mouseMoveEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mouseMoveEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
QGLViewer::mousePressEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mousePressEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
QGLViewer::mouseReleaseEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mouseReleaseEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
QGLViewer::mouseString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString mouseString() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::openSnapshotFormatDialog	/usr/include/QGLViewer/qglviewer.h	/^	bool openSnapshotFormatDialog();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::operator =	/usr/include/QGLViewer/qglviewer.h	/^	QGLViewer& operator=(const QGLViewer& v);$/;"	p	class:QGLViewer	access:private	signature:(const QGLViewer& v)
QGLViewer::paintGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void paintGL();$/;"	p	class:QGLViewer	access:protected	signature:()
QGLViewer::pathIndex_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<Qt::Key, int> pathIndex_;$/;"	m	class:QGLViewer	access:private
QGLViewer::pathKey	/usr/include/QGLViewer/qglviewer.h	/^	Qt::Key pathKey(int index) const;$/;"	p	class:QGLViewer	access:public	signature:(int index) const
QGLViewer::performClickAction	/usr/include/QGLViewer/qglviewer.h	/^	void performClickAction(ClickAction ca, const QMouseEvent* const e);$/;"	p	class:QGLViewer	access:private	signature:(ClickAction ca, const QMouseEvent* const e)
QGLViewer::playKeyFramePathStateKey	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers playKeyFramePathStateKey() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::playPathKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers playPathKeyboardModifiers() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::playPathKeyboardModifiers_	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameKeyboardModifiers_, playPathKeyboardModifiers_;$/;"	m	class:QGLViewer	access:private
QGLViewer::playPathStateKey	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers playPathStateKey() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::pointSelected	/usr/include/QGLViewer/qglviewer.h	/^	void pointSelected(const QMouseEvent* e);$/;"	p	class:QGLViewer	access:public	signature:(const QMouseEvent* e)
QGLViewer::postDraw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void postDraw();$/;"	p	class:QGLViewer	access:protected	signature:()
QGLViewer::postSelection	/usr/include/QGLViewer/qglviewer.h	/^	virtual void postSelection(const QPoint& point) { Q_UNUSED(point); };$/;"	f	class:QGLViewer	access:protected	signature:(const QPoint& point)
QGLViewer::preDraw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void preDraw();$/;"	p	class:QGLViewer	access:protected	signature:()
QGLViewer::preDrawStereo	/usr/include/QGLViewer/qglviewer.h	/^	virtual void preDrawStereo(bool leftBuffer=true);$/;"	p	class:QGLViewer	access:protected	signature:(bool leftBuffer=true)
QGLViewer::prevPos_	/usr/include/QGLViewer/qglviewer.h	/^	QPoint prevPos_;	\/\/ Previous window position, used for full screen mode$/;"	m	class:QGLViewer	access:private
QGLViewer::previousBufferTextureFormat_	/usr/include/QGLViewer/qglviewer.h	/^	unsigned int previousBufferTextureFormat_;$/;"	m	class:QGLViewer	access:private
QGLViewer::previousBufferTextureInternalFormat_	/usr/include/QGLViewer/qglviewer.h	/^	int previousBufferTextureInternalFormat_;$/;"	m	class:QGLViewer	access:private
QGLViewer::previousCameraZClippingCoefficient_	/usr/include/QGLViewer/qglviewer.h	/^	float previousCameraZClippingCoefficient_;$/;"	m	class:QGLViewer	access:private
QGLViewer::previousPathId_	/usr/include/QGLViewer/qglviewer.h	/^	int previousPathId_; \/\/ Double key press recognition$/;"	m	class:QGLViewer	access:private
QGLViewer::qglClearColor	/usr/include/QGLViewer/qglviewer.h	/^	void qglClearColor(const QColor& color) const;$/;"	p	class:QGLViewer	access:public	signature:(const QColor& color) const
QGLViewer::qglColor	/usr/include/QGLViewer/qglviewer.h	/^	void qglColor(const QColor& color) const;$/;"	p	class:QGLViewer	access:public	signature:(const QColor& color) const
QGLViewer::resetVisualHints	/usr/include/QGLViewer/qglviewer.h	/^		virtual void resetVisualHints();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::resize	/usr/include/QGLViewer/qglviewer.h	/^		virtual void resize(int width, int height);$/;"	p	class:QGLViewer	access:public	signature:(int width, int height)
QGLViewer::resizeGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void resizeGL(int width, int height);$/;"	p	class:QGLViewer	access:protected	signature:(int width, int height)
QGLViewer::restoreFromFile	/usr/include/QGLViewer/qglviewer.h	/^		bool restoreFromFile(const QString& fileName=QString::null);$/;"	p	class:QGLViewer	access:public	signature:(const QString& fileName=QString::null)
QGLViewer::restoreStateFromFile	/usr/include/QGLViewer/qglviewer.h	/^		virtual bool restoreStateFromFile();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::saveImageSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	bool saveImageSnapshot(const QString& fileName);$/;"	p	class:QGLViewer	access:private	signature:(const QString& fileName)
QGLViewer::saveSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	void saveSnapshot(bool automatic=true, bool overwrite=false);$/;"	p	class:QGLViewer	access:public	signature:(bool automatic=true, bool overwrite=false)
QGLViewer::saveSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	void saveSnapshot(const QString& fileName, bool overwrite=false);$/;"	p	class:QGLViewer	access:public	signature:(const QString& fileName, bool overwrite=false)
QGLViewer::saveStateToFile	/usr/include/QGLViewer/qglviewer.h	/^		virtual void saveStateToFile(); \/\/ cannot be const because of QMessageBox$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::saveStateToFileForAllViewers	/usr/include/QGLViewer/qglviewer.h	/^	static void saveStateToFileForAllViewers();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::saveToFile	/usr/include/QGLViewer/qglviewer.h	/^		void saveToFile(const QString& fileName=QString::null);$/;"	p	class:QGLViewer	access:public	signature:(const QString& fileName=QString::null)
QGLViewer::scaledFont	/usr/include/QGLViewer/qglviewer.h	/^	QFont scaledFont(const QFont& font) const {$/;"	f	class:QGLViewer	access:public	signature:(const QFont& font) const
QGLViewer::sceneCenter	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::Vec sceneCenter() const { return camera()->sceneCenter(); }$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::sceneRadius	/usr/include/QGLViewer/qglviewer.h	/^	float sceneRadius() const { return camera()->sceneRadius(); }$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::select	/usr/include/QGLViewer/qglviewer.h	/^		virtual void select(const QMouseEvent* event);$/;"	p	class:QGLViewer	access:public	signature:(const QMouseEvent* event)
QGLViewer::select	/usr/include/QGLViewer/qglviewer.h	/^		virtual void select(const QPoint& point);$/;"	p	class:QGLViewer	access:public	signature:(const QPoint& point)
QGLViewer::selectBuffer	/usr/include/QGLViewer/qglviewer.h	/^	GLuint* selectBuffer() { return selectBuffer_; };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::selectBufferSize	/usr/include/QGLViewer/qglviewer.h	/^	int selectBufferSize() const { return selectBufferSize_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::selectBufferSize_	/usr/include/QGLViewer/qglviewer.h	/^	int selectBufferSize_;$/;"	m	class:QGLViewer	access:private
QGLViewer::selectBuffer_	/usr/include/QGLViewer/qglviewer.h	/^	GLuint* selectBuffer_;$/;"	m	class:QGLViewer	access:private
QGLViewer::selectRegionHeight	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionHeight() const { return selectRegionHeight_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::selectRegionHeight_	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionWidth_, selectRegionHeight_;$/;"	m	class:QGLViewer	access:private
QGLViewer::selectRegionWidth	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionWidth() const { return selectRegionWidth_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::selectRegionWidth_	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionWidth_, selectRegionHeight_;$/;"	m	class:QGLViewer	access:private
QGLViewer::selectedName	/usr/include/QGLViewer/qglviewer.h	/^	int selectedName() const { return selectedObjectId_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::selectedObjectId_	/usr/include/QGLViewer/qglviewer.h	/^	int selectedObjectId_;$/;"	m	class:QGLViewer	access:private
QGLViewer::setAddKeyFrameKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setAddKeyFrameKeyboardModifiers(QtKeyboardModifiers modifiers);$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers)
QGLViewer::setAddKeyFrameStateKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setAddKeyFrameStateKey(int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(int buttonState)
QGLViewer::setAnimationPeriod	/usr/include/QGLViewer/qglviewer.h	/^		void setAnimationPeriod(int period) { animationPeriod_ = period; };$/;"	f	class:QGLViewer	access:public	signature:(int period)
QGLViewer::setAutoBufferSwap	/usr/include/QGLViewer/qglviewer.h	/^		void setAutoBufferSwap(bool on);$/;"	p	class:QGLViewer	access:protected	signature:(bool on)
QGLViewer::setAxisIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void setAxisIsDrawn(bool draw=true) { axisIsDrawn_ = draw; emit axisIsDrawnChanged(draw); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool draw=true)
QGLViewer::setBackgroundColor	/usr/include/QGLViewer/qglviewer.h	/^		void setBackgroundColor(const QColor& color) { backgroundColor_=color; qglClearColor(color); };$/;"	f	class:QGLViewer	access:public	signature:(const QColor& color)
QGLViewer::setCamera	/usr/include/QGLViewer/qglviewer.h	/^		void setCamera(qglviewer::Camera* const camera);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::Camera* const camera)
QGLViewer::setCameraIsEdited	/usr/include/QGLViewer/qglviewer.h	/^		void setCameraIsEdited(bool edit=true);$/;"	p	class:QGLViewer	access:public	signature:(bool edit=true)
QGLViewer::setDefaultMouseBindings	/usr/include/QGLViewer/qglviewer.h	/^	void setDefaultMouseBindings();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::setDefaultShortcuts	/usr/include/QGLViewer/qglviewer.h	/^	void setDefaultShortcuts();$/;"	p	class:QGLViewer	access:private	signature:()
QGLViewer::setFPSIsDisplayed	/usr/include/QGLViewer/qglviewer.h	/^		void setFPSIsDisplayed(bool display=true) { FPSIsDisplayed_ = display; emit FPSIsDisplayedChanged(display); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool display=true)
QGLViewer::setForegroundColor	/usr/include/QGLViewer/qglviewer.h	/^		void setForegroundColor(const QColor& color) { foregroundColor_ = color; };$/;"	f	class:QGLViewer	access:public	signature:(const QColor& color)
QGLViewer::setFullScreen	/usr/include/QGLViewer/qglviewer.h	/^		void setFullScreen(bool fullScreen=true);$/;"	p	class:QGLViewer	access:public	signature:(bool fullScreen=true)
QGLViewer::setGridIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void setGridIsDrawn(bool draw=true) { gridIsDrawn_ = draw; emit gridIsDrawnChanged(draw); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool draw=true)
QGLViewer::setHandlerKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^		void setHandlerKeyboardModifiers(MouseHandler handler, QtKeyboardModifiers modifiers);$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, QtKeyboardModifiers modifiers)
QGLViewer::setHandlerStateKey	/usr/include/QGLViewer/qglviewer.h	/^		void setHandlerStateKey(MouseHandler handler, int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, int buttonState)
QGLViewer::setKeyDescription	/usr/include/QGLViewer/qglviewer.h	/^		void setKeyDescription(int key, QString description);$/;"	p	class:QGLViewer	access:public	signature:(int key, QString description)
QGLViewer::setKeyFrameKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setKeyFrameKey(int index, int key);$/;"	p	class:QGLViewer	access:public	signature:(int index, int key)
QGLViewer::setKeyboardAccelerator	/usr/include/QGLViewer/qglviewer.h	/^		void setKeyboardAccelerator(KeyboardAction action, int key);$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action, int key)
QGLViewer::setManipulatedFrame	/usr/include/QGLViewer/qglviewer.h	/^		void setManipulatedFrame(qglviewer::ManipulatedFrame* frame);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::ManipulatedFrame* frame)
QGLViewer::setMouseBinding	/usr/include/QGLViewer/qglviewer.h	/^		void setMouseBinding(int state, MouseHandler handler, MouseAction action, bool withConstraint=true);$/;"	p	class:QGLViewer	access:public	signature:(int state, MouseHandler handler, MouseAction action, bool withConstraint=true)
QGLViewer::setMouseBinding	/usr/include/QGLViewer/qglviewer.h	/^	void setMouseBinding(int state, ClickAction action, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton);$/;"	p	class:QGLViewer	access:public	signature:(int state, ClickAction action, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton)
QGLViewer::setMouseBindingDescription	/usr/include/QGLViewer/qglviewer.h	/^	void setMouseBindingDescription(int state, QString description, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton);$/;"	p	class:QGLViewer	access:public	signature:(int state, QString description, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton)
QGLViewer::setMouseGrabber	/usr/include/QGLViewer/qglviewer.h	/^		void setMouseGrabber(qglviewer::MouseGrabber* mouseGrabber);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::MouseGrabber* mouseGrabber)
QGLViewer::setMouseGrabberIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^	void setMouseGrabberIsEnabled(const qglviewer::MouseGrabber* const mouseGrabber, bool enabled=true);$/;"	p	class:QGLViewer	access:public	signature:(const qglviewer::MouseGrabber* const mouseGrabber, bool enabled=true)
QGLViewer::setMouseStateKey	/usr/include/QGLViewer/qglviewer.h	/^		void setMouseStateKey(MouseHandler handler, int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, int buttonState)
QGLViewer::setMouseTracking	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setMouseTracking(bool enable);$/;"	p	class:QGLViewer	access:public	signature:(bool enable)
QGLViewer::setPathKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPathKey(int key, int index = 0);$/;"	p	class:QGLViewer	access:public	signature:(int key, int index = 0)
QGLViewer::setPlayKeyFramePathStateKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPlayKeyFramePathStateKey(int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(int buttonState)
QGLViewer::setPlayPathKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPlayPathKeyboardModifiers(QtKeyboardModifiers modifiers);$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers)
QGLViewer::setPlayPathStateKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPlayPathStateKey(int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(int buttonState)
QGLViewer::setSceneBoundingBox	/usr/include/QGLViewer/qglviewer.h	/^		void setSceneBoundingBox(const qglviewer::Vec& min, const qglviewer::Vec& max) { camera()->setSceneBoundingBox(min,max); }$/;"	f	class:QGLViewer	access:public	signature:(const qglviewer::Vec& min, const qglviewer::Vec& max)
QGLViewer::setSceneCenter	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setSceneCenter(const qglviewer::Vec& center) { camera()->setSceneCenter(center); }$/;"	f	class:QGLViewer	access:public	signature:(const qglviewer::Vec& center)
QGLViewer::setSceneRadius	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setSceneRadius(float radius) { camera()->setSceneRadius(radius); }$/;"	f	class:QGLViewer	access:public	signature:(float radius)
QGLViewer::setSelectBufferSize	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectBufferSize(int size);$/;"	p	class:QGLViewer	access:public	signature:(int size)
QGLViewer::setSelectRegionHeight	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectRegionHeight(int height) { selectRegionHeight_ = height; };$/;"	f	class:QGLViewer	access:public	signature:(int height)
QGLViewer::setSelectRegionWidth	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectRegionWidth(int width) { selectRegionWidth_ = width; };$/;"	f	class:QGLViewer	access:public	signature:(int width)
QGLViewer::setSelectedName	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectedName(int id) { selectedObjectId_=id; };$/;"	f	class:QGLViewer	access:public	signature:(int id)
QGLViewer::setShortcut	/usr/include/QGLViewer/qglviewer.h	/^		void setShortcut(KeyboardAction action, int key);$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action, int key)
QGLViewer::setSnapshotCounter	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotCounter(int counter) { snapshotCounter_ = counter; };$/;"	f	class:QGLViewer	access:public	signature:(int counter)
QGLViewer::setSnapshotFileName	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotFileName(const QString& name);$/;"	p	class:QGLViewer	access:public	signature:(const QString& name)
QGLViewer::setSnapshotFormat	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotFormat(const QString& format) { snapshotFormat_ = format; };$/;"	f	class:QGLViewer	access:public	signature:(const QString& format)
QGLViewer::setSnapshotQuality	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotQuality(int quality) { snapshotQuality_ = quality; };$/;"	f	class:QGLViewer	access:public	signature:(int quality)
QGLViewer::setStateFileName	/usr/include/QGLViewer/qglviewer.h	/^		void setStateFileName(const QString& name) { stateFileName_ = name; };$/;"	f	class:QGLViewer	access:public	signature:(const QString& name)
QGLViewer::setStereoDisplay	/usr/include/QGLViewer/qglviewer.h	/^		void setStereoDisplay(bool stereo=true);$/;"	p	class:QGLViewer	access:public	signature:(bool stereo=true)
QGLViewer::setTextIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^		void setTextIsEnabled(bool enable=true) { textIsEnabled_ = enable; emit textIsEnabledChanged(enable); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool enable=true)
QGLViewer::setVisualHintsMask	/usr/include/QGLViewer/qglviewer.h	/^	virtual void setVisualHintsMask(int mask, int delay = 2000);$/;"	p	class:QGLViewer	access:public	signature:(int mask, int delay = 2000)
QGLViewer::setWheelBinding	/usr/include/QGLViewer/qglviewer.h	/^		void setWheelBinding(QtKeyboardModifiers modifiers, MouseHandler handler, MouseAction action, bool withConstraint=true);$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers, MouseHandler handler, MouseAction action, bool withConstraint=true)
QGLViewer::shortcut	/usr/include/QGLViewer/qglviewer.h	/^	int shortcut(KeyboardAction action) const;$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action) const
QGLViewer::shortcutBindingsString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString shortcutBindingsString () const { return keyboardString(); }$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::showEntireScene	/usr/include/QGLViewer/qglviewer.h	/^		void showEntireScene() { camera()->showEntireScene(); if (updateGLOK_) updateGL(); }$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::sizeHint	/usr/include/QGLViewer/qglviewer.h	/^	virtual QSize sizeHint() const { return QSize(600, 400); }$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::snapshotCounter	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotCounter() const { return snapshotCounter_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::snapshotCounter_	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotCounter_, snapshotQuality_;$/;"	m	class:QGLViewer	access:private
QGLViewer::snapshotFileName	/usr/include/QGLViewer/qglviewer.h	/^	const QString& snapshotFileName() const { return snapshotFileName_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::snapshotFileName_	/usr/include/QGLViewer/qglviewer.h	/^	QString snapshotFileName_, snapshotFormat_;$/;"	m	class:QGLViewer	access:private
QGLViewer::snapshotFilename	/usr/include/QGLViewer/qglviewer.h	/^	const QString& snapshotFilename() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::snapshotFormat	/usr/include/QGLViewer/qglviewer.h	/^	const QString& snapshotFormat() const { return snapshotFormat_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::snapshotFormat_	/usr/include/QGLViewer/qglviewer.h	/^	QString snapshotFileName_, snapshotFormat_;$/;"	m	class:QGLViewer	access:private
QGLViewer::snapshotQuality	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotQuality() { return snapshotQuality_; };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::snapshotQuality_	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotCounter_, snapshotQuality_;$/;"	m	class:QGLViewer	access:private
QGLViewer::snapshotToClipboard	/usr/include/QGLViewer/qglviewer.h	/^	void snapshotToClipboard();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::startAnimation	/usr/include/QGLViewer/qglviewer.h	/^		virtual void startAnimation();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::startScreenCoordinatesSystem	/usr/include/QGLViewer/qglviewer.h	/^	virtual void startScreenCoordinatesSystem(bool upward=false) const;$/;"	p	class:QGLViewer	access:public	signature:(bool upward=false) const
QGLViewer::stateFileName	/usr/include/QGLViewer/qglviewer.h	/^	QString stateFileName() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::stateFileName_	/usr/include/QGLViewer/qglviewer.h	/^	QString stateFileName_;$/;"	m	class:QGLViewer	access:private
QGLViewer::stereoChanged	/usr/include/QGLViewer/qglviewer.h	/^	void stereoChanged(bool on);$/;"	p	class:QGLViewer	access:public	signature:(bool on)
QGLViewer::stereo_	/usr/include/QGLViewer/qglviewer.h	/^	bool stereo_;		\/\/ stereo display$/;"	m	class:QGLViewer	access:private
QGLViewer::stopAnimation	/usr/include/QGLViewer/qglviewer.h	/^		virtual void stopAnimation();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::stopScreenCoordinatesSystem	/usr/include/QGLViewer/qglviewer.h	/^	virtual void stopScreenCoordinatesSystem() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::textIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^	bool textIsEnabled() const { return textIsEnabled_; };$/;"	f	class:QGLViewer	access:public	signature:() const
QGLViewer::textIsEnabledChanged	/usr/include/QGLViewer/qglviewer.h	/^	void textIsEnabledChanged(bool enabled);$/;"	p	class:QGLViewer	access:public	signature:(bool enabled)
QGLViewer::textIsEnabled_	/usr/include/QGLViewer/qglviewer.h	/^	bool textIsEnabled_;	\/\/ drawText() actually draws text or not$/;"	m	class:QGLViewer	access:private
QGLViewer::tileRegion_	/usr/include/QGLViewer/qglviewer.h	/^	TileRegion* tileRegion_;$/;"	m	class:QGLViewer	access:private
QGLViewer::timerEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void timerEvent(QTimerEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QTimerEvent *)
QGLViewer::toggleAnimation	/usr/include/QGLViewer/qglviewer.h	/^		void toggleAnimation() { if (animationIsStarted()) stopAnimation(); else startAnimation(); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::toggleAxisIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void toggleAxisIsDrawn() { setAxisIsDrawn(!axisIsDrawn()); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::toggleCameraIsEdited	/usr/include/QGLViewer/qglviewer.h	/^		void toggleCameraIsEdited() { setCameraIsEdited(!cameraIsEdited()); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::toggleCameraMode	/usr/include/QGLViewer/qglviewer.h	/^		void toggleCameraMode();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::toggleFPSIsDisplayed	/usr/include/QGLViewer/qglviewer.h	/^		void toggleFPSIsDisplayed() { setFPSIsDisplayed(!FPSIsDisplayed()); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::toggleFullScreen	/usr/include/QGLViewer/qglviewer.h	/^		void toggleFullScreen() { setFullScreen(!isFullScreen()); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::toggleGridIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void toggleGridIsDrawn() { setGridIsDrawn(!gridIsDrawn()); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::toggleStereoDisplay	/usr/include/QGLViewer/qglviewer.h	/^		void toggleStereoDisplay() { setStereoDisplay(!stereo_); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::toggleTextIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^		void toggleTextIsEnabled() { setTextIsEnabled(!textIsEnabled()); };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewer::updateGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void updateGL();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::updateGLOK_	/usr/include/QGLViewer/qglviewer.h	/^	bool updateGLOK_;$/;"	m	class:QGLViewer	access:private
QGLViewer::viewerInitialized	/usr/include/QGLViewer/qglviewer.h	/^	void viewerInitialized();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewer::visualHint_	/usr/include/QGLViewer/qglviewer.h	/^	int visualHint_;$/;"	m	class:QGLViewer	access:private
QGLViewer::wheelAction	/usr/include/QGLViewer/qglviewer.h	/^	MouseAction wheelAction(QtKeyboardModifiers modifiers) const;$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers) const
QGLViewer::wheelBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<QtKeyboardModifiers, MouseActionPrivate> wheelBinding_;$/;"	m	class:QGLViewer	access:private
QGLViewer::wheelButtonState	/usr/include/QGLViewer/qglviewer.h	/^	int wheelButtonState(MouseHandler handler, MouseAction action, bool withConstraint=true) const;$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, MouseAction action, bool withConstraint=true) const
QGLViewer::wheelEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void wheelEvent(QWheelEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QWheelEvent *)
QGLViewer::wheelHandler	/usr/include/QGLViewer/qglviewer.h	/^	int wheelHandler(QtKeyboardModifiers modifiers) const;$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers) const
QGLViewer::width	/usr/include/QGLViewer/qglviewer.h	/^	int width() const;$/;"	p	class:QGLViewer	access:public	signature:() const
QGLViewer::~QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	virtual ~QGLViewer();$/;"	p	class:QGLViewer	access:public	signature:()
QGLViewerIndex	/usr/include/QGLViewer/qglviewer.h	/^	static int QGLViewerIndex(const QGLViewer* const viewer) { return QGLViewer::QGLViewerPool_.find(viewer); };$/;"	f	class:QGLViewer	access:public	signature:(const QGLViewer* const viewer)
QGLViewerIndex	/usr/include/QGLViewer/qglviewer.h	/^	static int QGLViewerIndex(const QGLViewer* const viewer) { return QGLViewer::QGLViewerPool_.indexOf(const_cast<QGLViewer*>(viewer)); };$/;"	f	class:QGLViewer	access:public	signature:(const QGLViewer* const viewer)
QGLViewerPool	/usr/include/QGLViewer/qglviewer.h	/^	static const QList<QGLViewer*>& QGLViewerPool() { return QGLViewer::QGLViewerPool_; };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewerPool	/usr/include/QGLViewer/qglviewer.h	/^	static const QPtrList<QGLViewer>& QGLViewerPool() { return QGLViewer::QGLViewerPool_; };$/;"	f	class:QGLViewer	access:public	signature:()
QGLViewerPool_	/usr/include/QGLViewer/qglviewer.h	/^	static QList<QGLViewer*> QGLViewerPool_;$/;"	m	class:QGLViewer	access:private
QGLViewerPool_	/usr/include/QGLViewer/qglviewer.h	/^	static QPtrList<QGLViewer> QGLViewerPool_;$/;"	m	class:QGLViewer	access:private
QT_CLEAN_NAMESPACE	/usr/include/QGLViewer/config.h	35;"	d
Q_OS_WIN32	/usr/include/QGLViewer/config.h	44;"	d
QtKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	44;"	d
QtMouseButtons	/usr/include/QGLViewer/qglviewer.h	45;"	d
Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion()$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(const Quaternion& Q)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& Q)
Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(const Vec& axis, double angle)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Vec& axis, double angle)
Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(const Vec& from, const Vec& to);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& from, const Vec& to)
Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(double q0, double q1, double q2, double q3)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(double q0, double q1, double q2, double q3)
Quaternion	/usr/include/QGLViewer/quaternion.h	/^		explicit Quaternion(const QDomElement& element);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const QDomElement& element)
Quaternion	/usr/include/QGLViewer/quaternion.h	/^	class QGLVIEWER_EXPORT Quaternion$/;"	c	namespace:qglviewer
RAP_FROM_PIXEL	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
RAP_IS_CENTER	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
ROLL	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
ROTATE	/usr/include/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
SAVE_SCREENSHOT	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
SCREEN_ROTATE	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
SCREEN_TRANSLATE	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_TRANSLATE, ZOOM_ON_REGION };$/;"	e	enum:QGLViewer::MouseAction
SELECT	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
SHOW_ENTIRE_SCENE	/usr/include/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
SHOW_ENTIRE_SCENE	/usr/include/QGLViewer/tags	/^ALIGN_FRAME	qglviewer.h	\/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$\/;"	e	enum:QGLViewer::ClickAction$/;"	v	typeref:enum:
SNAPSHOT_TO_CLIPBOARD	/usr/include/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
STEREO	/usr/include/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
TRANSLATE	/usr/include/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
TileRegion	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	c	class:QGLViewer	access:private
Type	/usr/include/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	g	class:qglviewer::Camera	access:public
Type	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	g	class:qglviewer::AxisPlaneConstraint	access:public
Vec	/usr/include/QGLViewer/vec.h	/^  Vec() : x(0.0), y(0.0), z(0.0) {}$/;"	f	class:qglviewer::Vec	access:public	signature:()
Vec	/usr/include/QGLViewer/vec.h	/^  Vec(float X, float Y, float Z) : x(X), y(Y), z(Z) {}$/;"	f	class:qglviewer::Vec	access:public	signature:(float X, float Y, float Z)
Vec	/usr/include/QGLViewer/vec.h	/^  explicit Vec(const C& c) : x(c[0]), y(c[1]), z(c[2]) {}$/;"	f	class:qglviewer::Vec	access:public	signature:(const C& c)
Vec	/usr/include/QGLViewer/vec.h	/^  explicit Vec(const QDomElement& element);$/;"	p	class:qglviewer::Vec	access:public	signature:(const QDomElement& element)
Vec	/usr/include/QGLViewer/vec.h	/^class QGLVIEWER_EXPORT Vec$/;"	c	namespace:qglviewer
WorldConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT WorldConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer	inherits:AxisPlaneConstraint
ZOOM	/usr/include/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
ZOOM_ON_PIXEL	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
ZOOM_ON_REGION	/usr/include/QGLViewer/qglviewer.h	/^		SCREEN_TRANSLATE, ZOOM_ON_REGION };$/;"	e	enum:QGLViewer::MouseAction
ZOOM_TO_FIT	/usr/include/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
aboutQGLViewer	/usr/include/QGLViewer/qglviewer.h	/^		virtual void aboutQGLViewer();$/;"	p	class:QGLViewer	access:public	signature:()
action	/usr/include/QGLViewer/qglviewer.h	/^		MouseAction action;$/;"	m	struct:QGLViewer::MouseActionPrivate	access:public
action_	/usr/include/QGLViewer/manipulatedFrame.h	/^    int action_; \/\/ Should be a QGLViewer::MouseAction, but include loop$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
addInMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    void addInMouseGrabberPool();$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:()
addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame& frame);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame& frame)
addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame& frame, float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame& frame, float time)
addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame* const frame);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame* const frame)
addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame* const frame, float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame* const frame, float time)
addKeyFrameKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameKeyboardModifiers() const;$/;"	p	class:QGLViewer	access:public	signature:() const
addKeyFrameKeyboardModifiers_	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameKeyboardModifiers_, playPathKeyboardModifiers_;$/;"	m	class:QGLViewer	access:private
addKeyFrameStateKey	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameStateKey() const;$/;"	p	class:QGLViewer	access:public	signature:() const
addKeyFrameToPath	/usr/include/QGLViewer/camera.h	/^    virtual void addKeyFrameToPath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
address	/usr/include/QGLViewer/vec.h	/^  const float* address() const { qWarning("Vec::address() is deprecated, use operator const float* instead."); return operator const float*(); };$/;"	f	class:qglviewer::Vec	access:public	signature:() const
alignWithFrame	/usr/include/QGLViewer/frame.h	/^    void alignWithFrame(const Frame* const frame, bool move=false, float threshold=0.85f);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame* const frame, bool move=false, float threshold=0.85f)
angle	/usr/include/QGLViewer/quaternion.h	/^		float angle() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
animate	/usr/include/QGLViewer/qglviewer.h	/^		virtual void animate() { emit animateNeeded(); };$/;"	f	class:QGLViewer	access:public	signature:()
animateNeeded	/usr/include/QGLViewer/qglviewer.h	/^	void animateNeeded();$/;"	p	class:QGLViewer	access:public	signature:()
animationIsStarted	/usr/include/QGLViewer/qglviewer.h	/^	bool animationIsStarted() const { return animationStarted_; };$/;"	f	class:QGLViewer	access:public	signature:() const
animationPeriod	/usr/include/QGLViewer/qglviewer.h	/^	int animationPeriod() const { return animationPeriod_; };$/;"	f	class:QGLViewer	access:public	signature:() const
animationPeriod_	/usr/include/QGLViewer/qglviewer.h	/^	int animationPeriod_;   \/\/ period in msecs$/;"	m	class:QGLViewer	access:private
animationStarted_	/usr/include/QGLViewer/qglviewer.h	/^	bool animationStarted_; \/\/ animation mode started$/;"	m	class:QGLViewer	access:private
animationTimerId_	/usr/include/QGLViewer/qglviewer.h	/^	int animationTimerId_;$/;"	m	class:QGLViewer	access:private
aspectRatio	/usr/include/QGLViewer/camera.h	/^    float aspectRatio() const { return static_cast<float>(screenWidth_)\/static_cast<float>(screenHeight_); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
aspectRatio	/usr/include/QGLViewer/qglviewer.h	/^	float aspectRatio() const { return static_cast<float>(width())\/static_cast<float>(height()); };$/;"	f	class:QGLViewer	access:public	signature:() const
autoBufferSwap	/usr/include/QGLViewer/qglviewer.h	/^	bool autoBufferSwap() const;$/;"	p	class:QGLViewer	access:protected	signature:() const
axis	/usr/include/QGLViewer/quaternion.h	/^		Vec axis() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
axisIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^	bool axisIsDrawn() const { return axisIsDrawn_; };$/;"	f	class:QGLViewer	access:public	signature:() const
axisIsDrawnChanged	/usr/include/QGLViewer/qglviewer.h	/^	void axisIsDrawnChanged(bool drawn);$/;"	p	class:QGLViewer	access:public	signature:(bool drawn)
axisIsDrawn_	/usr/include/QGLViewer/qglviewer.h	/^	bool axisIsDrawn_;	\/\/ world axis$/;"	m	class:QGLViewer	access:private
backgroundColor	/usr/include/QGLViewer/qglviewer.h	/^	QColor backgroundColor() const { return backgroundColor_; };$/;"	f	class:QGLViewer	access:public	signature:() const
backgroundColor_	/usr/include/QGLViewer/qglviewer.h	/^	QColor backgroundColor_, foregroundColor_;$/;"	m	class:QGLViewer	access:private
beginSelection	/usr/include/QGLViewer/qglviewer.h	/^	virtual void beginSelection(const QPoint& point);$/;"	p	class:QGLViewer	access:protected	signature:(const QPoint& point)
boolFromDom	/usr/include/QGLViewer/domUtils.h	/^  static bool boolFromDom(const QDomElement& e, const QString& attribute, bool defValue)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e, const QString& attribute, bool defValue)
bufferTextureHeight_	/usr/include/QGLViewer/qglviewer.h	/^	int bufferTextureWidth_, bufferTextureHeight_;$/;"	m	class:QGLViewer	access:private
bufferTextureId	/usr/include/QGLViewer/qglviewer.h	/^	GLuint bufferTextureId() const;$/;"	p	class:QGLViewer	access:public	signature:() const
bufferTextureId_	/usr/include/QGLViewer/qglviewer.h	/^	GLuint bufferTextureId_;$/;"	m	class:QGLViewer	access:private
bufferTextureMaxU	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU() const { return bufferTextureMaxU_; };$/;"	f	class:QGLViewer	access:public	signature:() const
bufferTextureMaxU_	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU_, bufferTextureMaxV_;$/;"	m	class:QGLViewer	access:private
bufferTextureMaxV	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxV() const { return bufferTextureMaxV_; };$/;"	f	class:QGLViewer	access:public	signature:() const
bufferTextureMaxV_	/usr/include/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU_, bufferTextureMaxV_;$/;"	m	class:QGLViewer	access:private
bufferTextureWidth_	/usr/include/QGLViewer/qglviewer.h	/^	int bufferTextureWidth_, bufferTextureHeight_;$/;"	m	class:QGLViewer	access:private
button	/usr/include/QGLViewer/qglviewer.h	/^		QtMouseButtons button;$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
buttonsBefore	/usr/include/QGLViewer/qglviewer.h	/^		QtMouseButtons buttonsBefore; \/\/ only defined when doubleClick is true$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
camera	/usr/include/QGLViewer/constraint.h	/^    const Camera* camera() const { return camera_; };$/;"	f	class:qglviewer::CameraConstraint	access:public	signature:() const
camera	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::Camera* camera() const { return camera_; };$/;"	f	class:QGLViewer	access:public	signature:() const
cameraCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec cameraCoordinatesOf(const Vec& src) const { return frame()->coordinatesOf(src); };$/;"	f	class:qglviewer::Camera	access:public	signature:(const Vec& src) const
cameraIsEdited	/usr/include/QGLViewer/qglviewer.h	/^	bool cameraIsEdited() const { return cameraIsEdited_; }$/;"	f	class:QGLViewer	access:public	signature:() const
cameraIsEditedChanged	/usr/include/QGLViewer/qglviewer.h	/^	void cameraIsEditedChanged(bool edited);$/;"	p	class:QGLViewer	access:public	signature:(bool edited)
cameraIsEdited_	/usr/include/QGLViewer/qglviewer.h	/^	bool cameraIsEdited_;$/;"	m	class:QGLViewer	access:private
cameraIsInRevolveMode	/usr/include/QGLViewer/qglviewer.h	/^	bool cameraIsInRevolveMode() const;$/;"	p	class:QGLViewer	access:private	signature:() const
cameraPathKeysString	/usr/include/QGLViewer/qglviewer.h	/^	QString cameraPathKeysString() const;$/;"	p	class:QGLViewer	access:private	signature:() const
camera_	/usr/include/QGLViewer/constraint.h	/^    const Camera* const camera_;$/;"	m	class:qglviewer::CameraConstraint	access:private
camera_	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::Camera* camera_;$/;"	m	class:QGLViewer	access:private
centerScene	/usr/include/QGLViewer/camera.h	/^    void centerScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
checkIfGrabsMouse	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void checkIfGrabsMouse(int x, int y, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(int x, int y, const Camera* const camera)
checkIfGrabsMouse	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void checkIfGrabsMouse(int x, int y, const Camera* const camera) = 0;$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:(int x, int y, const Camera* const camera)
clearMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    void clearMouseGrabberPool(bool autoDelete=false);$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:(bool autoDelete=false)
clickAction	/usr/include/QGLViewer/qglviewer.h	/^	ClickAction clickAction(int state, bool doubleClick, QtMouseButtons buttonsBefore) const;$/;"	p	class:QGLViewer	access:public	signature:(int state, bool doubleClick, QtMouseButtons buttonsBefore) const
clickActionString	/usr/include/QGLViewer/qglviewer.h	/^	static QString clickActionString(QGLViewer::ClickAction ca);$/;"	p	class:QGLViewer	access:private	signature:(QGLViewer::ClickAction ca)
clickBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<ClickActionPrivate, ClickAction> clickBinding_;$/;"	m	class:QGLViewer	access:private
closeEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void closeEvent(QCloseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QCloseEvent *)
closedPath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool closedPath() const { return closedPath_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
closedPath_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool closedPath_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
computeModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void computeModelViewMatrix() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
computeMouseSpeed	/usr/include/QGLViewer/manipulatedFrame.h	/^    void computeMouseSpeed(const QMouseEvent* const e);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(const QMouseEvent* const e)
computeProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void computeProjectionMatrix() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
computeTangent	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      void computeTangent(const KeyFrame* const prev, const KeyFrame* const next);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const KeyFrame* const prev, const KeyFrame* const next)
connectAllCameraKFIInterpolatedSignals	/usr/include/QGLViewer/qglviewer.h	/^	void connectAllCameraKFIInterpolatedSignals(bool connection=true);$/;"	p	class:QGLViewer	access:private	signature:(bool connection=true)
constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);$/;"	p	class:qglviewer::CameraConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);$/;"	p	class:qglviewer::LocalConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);$/;"	p	class:qglviewer::WorldConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::Constraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec&     translation, Frame* const frame);$/;"	p	class:qglviewer::CameraConstraint	access:public	signature:(Vec& translation, Frame* const frame)
constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec&     translation, Frame* const frame);$/;"	p	class:qglviewer::LocalConstraint	access:public	signature:(Vec& translation, Frame* const frame)
constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec&     translation, Frame* const frame);$/;"	p	class:qglviewer::WorldConstraint	access:public	signature:(Vec& translation, Frame* const frame)
constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Vec& translation, Frame* const frame)
constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::Constraint	access:public	signature:(Vec& translation, Frame* const frame)
constraint	/usr/include/QGLViewer/frame.h	/^    Constraint* constraint() const { return constraint_; }$/;"	f	class:qglviewer::Frame	access:public	signature:() const
constraint_	/usr/include/QGLViewer/frame.h	/^    Constraint* constraint_;$/;"	m	class:qglviewer::Frame	access:private
convertClickToLine	/usr/include/QGLViewer/camera.h	/^    void convertClickToLine(const QPoint& pixel, Vec& orig, Vec& dir) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel, Vec& orig, Vec& dir) const
convertToGLFormat	/usr/include/QGLViewer/qglviewer.h	/^	static QImage convertToGLFormat(const QImage & image);$/;"	p	class:QGLViewer	access:public	signature:(const QImage & image)
coordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec coordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
coordinatesOfFrom	/usr/include/QGLViewer/frame.h	/^    Vec coordinatesOfFrom(const Vec& src, const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const from) const
coordinatesOfIn	/usr/include/QGLViewer/frame.h	/^    Vec coordinatesOfIn(const Vec& src, const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const in) const
copyBufferToTexture	/usr/include/QGLViewer/qglviewer.h	/^		void copyBufferToTexture(GLint internalFormat, GLenum format=GL_NONE);$/;"	p	class:QGLViewer	access:public	signature:(GLint internalFormat, GLenum format=GL_NONE)
cross	/usr/include/QGLViewer/vec.h	/^  friend Vec cross(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
currentFPS	/usr/include/QGLViewer/qglviewer.h	/^	float currentFPS() { return f_p_s_; };$/;"	f	class:QGLViewer	access:public	signature:()
currentFrameValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool currentFrameValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
currentFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QMutableListIterator<KeyFrame*>* currentFrame_[4];$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
currentFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QPtrListIterator<KeyFrame>* currentFrame_[4];$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
defaultConstructor	/usr/include/QGLViewer/qglviewer.h	/^	void defaultConstructor();$/;"	p	class:QGLViewer	access:private	signature:()
deformedBallQuaternion	/usr/include/QGLViewer/manipulatedFrame.h	/^    Quaternion deformedBallQuaternion(int x, int y, float cx, float cy, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(int x, int y, float cx, float cy, const Camera* const camera)
delay_	/usr/include/QGLViewer/manipulatedFrame.h	/^    int delay_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
delayedFullScreen	/usr/include/QGLViewer/qglviewer.h	/^			void delayedFullScreen() { move(prevPos_); setFullScreen(); };$/;"	f	class:QGLViewer	access:private	signature:()
deletePath	/usr/include/QGLViewer/camera.h	/^    virtual void deletePath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
deletePath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void deletePath();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
dirIsFixed_	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool dirIsFixed_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
disabledMouseGrabbers_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<size_t, bool> disabledMouseGrabbers_;$/;"	m	class:QGLViewer	access:private
displayFPS	/usr/include/QGLViewer/qglviewer.h	/^	void displayFPS();$/;"	p	class:QGLViewer	access:private	signature:()
displayMessage	/usr/include/QGLViewer/qglviewer.h	/^	void displayMessage(const QString& message, int delay=2000);$/;"	p	class:QGLViewer	access:public	signature:(const QString& message, int delay=2000)
displayMessage_	/usr/include/QGLViewer/qglviewer.h	/^	bool displayMessage_;$/;"	m	class:QGLViewer	access:private
displaysInStereo	/usr/include/QGLViewer/qglviewer.h	/^	bool displaysInStereo() const { return stereo_; }$/;"	f	class:QGLViewer	access:public	signature:() const
distanceToSceneCenter	/usr/include/QGLViewer/camera.h	/^    float distanceToSceneCenter() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
domElement	/usr/include/QGLViewer/camera.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const QString& name, QDomDocument& document) const
domElement	/usr/include/QGLViewer/frame.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const QString& name, QDomDocument& document) const
domElement	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const QString& name, QDomDocument& document) const
domElement	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const QString& name, QDomDocument& document) const
domElement	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const QString& name, QDomDocument& document) const
domElement	/usr/include/QGLViewer/qglviewer.h	/^	virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:QGLViewer	access:public	signature:(const QString& name, QDomDocument& document) const
domElement	/usr/include/QGLViewer/quaternion.h	/^		QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const QString& name, QDomDocument& document) const
domElement	/usr/include/QGLViewer/vec.h	/^  QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Vec	access:public	signature:(const QString& name, QDomDocument& document) const
dot	/usr/include/QGLViewer/quaternion.h	/^		static double dot(const Quaternion& a, const Quaternion& b) { return a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& b)
doubleClick	/usr/include/QGLViewer/qglviewer.h	/^		bool doubleClick;$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
draw	/usr/include/QGLViewer/camera.h	/^    virtual void draw(bool drawFarPlane=true, float scale=1.0) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool drawFarPlane=true, float scale=1.0) const
draw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void draw() {};$/;"	f	class:QGLViewer	access:protected	signature:()
drawAllPaths	/usr/include/QGLViewer/camera.h	/^    virtual void drawAllPaths();$/;"	p	class:qglviewer::Camera	access:public	signature:()
drawArrow	/usr/include/QGLViewer/qglviewer.h	/^	static void drawArrow(const qglviewer::Vec& from, const qglviewer::Vec& to, float radius=-1.0f, int nbSubdivisions=12);$/;"	p	class:QGLViewer	access:public	signature:(const qglviewer::Vec& from, const qglviewer::Vec& to, float radius=-1.0f, int nbSubdivisions=12)
drawArrow	/usr/include/QGLViewer/qglviewer.h	/^	static void drawArrow(float length=1.0f, float radius=-1.0f, int nbSubdivisions=12);$/;"	p	class:QGLViewer	access:public	signature:(float length=1.0f, float radius=-1.0f, int nbSubdivisions=12)
drawAxis	/usr/include/QGLViewer/qglviewer.h	/^	static void drawAxis(float length=1.0f);$/;"	p	class:QGLViewer	access:public	signature:(float length=1.0f)
drawCamera	/usr/include/QGLViewer/camera.h	/^    static void drawCamera(float scale=1.0, float aspectRatio=1.33, float fieldOfView=M_PI\/4.0);$/;"	p	class:qglviewer::Camera	access:public	signature:(float scale=1.0, float aspectRatio=1.33, float fieldOfView=M_PI/4.0)
drawFinished	/usr/include/QGLViewer/qglviewer.h	/^	void drawFinished(bool automatic);$/;"	p	class:QGLViewer	access:public	signature:(bool automatic)
drawGrid	/usr/include/QGLViewer/qglviewer.h	/^	static void drawGrid(float size=1.0f, int nbSubdivisions=10);$/;"	p	class:QGLViewer	access:public	signature:(float size=1.0f, int nbSubdivisions=10)
drawLight	/usr/include/QGLViewer/qglviewer.h	/^	virtual void drawLight(GLenum light, float scale = 1.0f) const;$/;"	p	class:QGLViewer	access:protected	signature:(GLenum light, float scale = 1.0f) const
drawNeeded	/usr/include/QGLViewer/qglviewer.h	/^	void drawNeeded();$/;"	p	class:QGLViewer	access:public	signature:()
drawPath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void drawPath(int mask=1, int nbFrames=6, float scale=1.0f);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int mask=1, int nbFrames=6, float scale=1.0f)
drawText	/usr/include/QGLViewer/qglviewer.h	/^	void drawText(int x, int y, const QString& text, const QFont& fnt=QFont());$/;"	p	class:QGLViewer	access:public	signature:(int x, int y, const QString& text, const QFont& fnt=QFont())
drawVectorial	/usr/include/QGLViewer/qglviewer.h	/^	friend void drawVectorial(void* param);$/;"	p	class:QGLViewer	access:friend	signature:(void* param)
drawVectorial	/usr/include/QGLViewer/qglviewer.h	/^	void drawVectorial() { paintGL(); };$/;"	f	class:QGLViewer	access:private	signature:()
drawVisualHints	/usr/include/QGLViewer/qglviewer.h	/^	virtual void drawVisualHints();$/;"	p	class:QGLViewer	access:public	signature:()
drawWithNames	/usr/include/QGLViewer/qglviewer.h	/^	virtual void drawWithNames() {};$/;"	f	class:QGLViewer	access:protected	signature:()
driveSpeed_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    float driveSpeed_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
duration	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float duration() const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
endReached	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void endReached();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
endSelection	/usr/include/QGLViewer/qglviewer.h	/^	virtual void endSelection(const QPoint& point);$/;"	p	class:QGLViewer	access:protected	signature:(const QPoint& point)
exp	/usr/include/QGLViewer/quaternion.h	/^		Quaternion exp();$/;"	p	class:qglviewer::Quaternion	access:public	signature:()
f_p_s_	/usr/include/QGLViewer/qglviewer.h	/^	float f_p_s_;$/;"	m	class:QGLViewer	access:private
fastDraw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void fastDraw();$/;"	p	class:QGLViewer	access:protected	signature:()
fieldOfView	/usr/include/QGLViewer/camera.h	/^    float fieldOfView() const { return fieldOfView_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
fieldOfView_	/usr/include/QGLViewer/camera.h	/^    float fieldOfView_; \/\/ in radians$/;"	m	class:qglviewer::Camera	access:private
firstTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float firstTime() const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
fitBoundingBox	/usr/include/QGLViewer/camera.h	/^    void fitBoundingBox(const Vec& min, const Vec& max);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& min, const Vec& max)
fitScreenRegion	/usr/include/QGLViewer/camera.h	/^    void fitScreenRegion(const QRect& rectangle);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QRect& rectangle)
fitSphere	/usr/include/QGLViewer/camera.h	/^    void fitSphere(const Vec& center, float radius);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& center, float radius)
flipOrientationIfNeeded	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      void flipOrientationIfNeeded(const Quaternion& prev);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const Quaternion& prev)
floatFromDom	/usr/include/QGLViewer/domUtils.h	/^  static float floatFromDom(const QDomElement& e, const QString& attribute, float defValue)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e, const QString& attribute, float defValue)
flySpeed	/usr/include/QGLViewer/camera.h	/^    float flySpeed() const { return frame()->flySpeed(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
flySpeed	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    float flySpeed() const { return flySpeed_; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:() const
flySpeed_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    float flySpeed_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
flyTimer_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    QTimer flyTimer_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
flyUpVector	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec flyUpVector() const { return flyUpVector_; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:() const
flyUpVector_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec flyUpVector_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
flyUpdate	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void flyUpdate();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:()
focusDistance	/usr/include/QGLViewer/camera.h	/^    float focusDistance() const { return focusDistance_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
focusDistance_	/usr/include/QGLViewer/camera.h	/^    float focusDistance_;	     \/\/ in scene units$/;"	m	class:qglviewer::Camera	access:private
foregroundColor	/usr/include/QGLViewer/qglviewer.h	/^	QColor foregroundColor() const { return foregroundColor_; };$/;"	f	class:QGLViewer	access:public	signature:() const
foregroundColor_	/usr/include/QGLViewer/qglviewer.h	/^	QColor backgroundColor_, foregroundColor_;$/;"	m	class:QGLViewer	access:private
format	/usr/include/QGLViewer/tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
formatClickActionPrivate	/usr/include/QGLViewer/qglviewer.h	/^    static QString formatClickActionPrivate(ClickActionPrivate cap);$/;"	p	class:QGLViewer	access:private	signature:(ClickActionPrivate cap)
fpsCounter_	/usr/include/QGLViewer/qglviewer.h	/^	unsigned int fpsCounter_;$/;"	m	class:QGLViewer	access:private
fpsString_	/usr/include/QGLViewer/qglviewer.h	/^	QString fpsString_;$/;"	m	class:QGLViewer	access:private
fpsTime_	/usr/include/QGLViewer/qglviewer.h	/^	QTime fpsTime_;$/;"	m	class:QGLViewer	access:private
frame	/usr/include/QGLViewer/camera.h	/^    ManipulatedCameraFrame* frame() const { return frame_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
frame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      const Frame* frame() const { return frame_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
frame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Frame* frame() const { return frame_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
frameBufferSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	QImage frameBufferSnapshot();$/;"	p	class:QGLViewer	access:private	signature:()
frame_	/usr/include/QGLViewer/camera.h	/^    ManipulatedCameraFrame* frame_;$/;"	m	class:qglviewer::Camera	access:private
frame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      const Frame* const frame_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
frame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Frame* frame_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
fullScreen_	/usr/include/QGLViewer/qglviewer.h	/^	bool fullScreen_;	\/\/ full screen mode$/;"	m	class:QGLViewer	access:private
getAxisAngle	/usr/include/QGLViewer/quaternion.h	/^		void getAxisAngle(Vec& axis, float& angle) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(Vec& axis, float& angle) const
getCameraCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getCameraCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3]) const
getClickButtonState	/usr/include/QGLViewer/qglviewer.h	/^	void getClickButtonState(ClickAction action, int& state, bool& doubleClick, QtMouseButtons& buttonsBefore) const;$/;"	p	class:QGLViewer	access:public	signature:(ClickAction action, int& state, bool& doubleClick, QtMouseButtons& buttonsBefore) const
getCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getCoordinatesOfFrom	/usr/include/QGLViewer/frame.h	/^    void getCoordinatesOfFrom(const float src[3], float res[3], const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const from) const
getCoordinatesOfIn	/usr/include/QGLViewer/frame.h	/^    void getCoordinatesOfIn(const float src[3], float res[3], const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const in) const
getFrustumPlanesCoefficients	/usr/include/QGLViewer/camera.h	/^    void getFrustumPlanesCoefficients(GLdouble coef[6][4]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble coef[6][4]) const
getInverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getInverseCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getInverseMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getInverseMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[16]) const
getInverseMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getInverseMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[4][4]) const
getInverseRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getInverseRotationMatrix(float m[3][3]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(float m[3][3]) const
getInverseTransformOf	/usr/include/QGLViewer/frame.h	/^    void getInverseTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getLocalCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getLocalCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getLocalInverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getLocalInverseCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getLocalInverseTransformOf	/usr/include/QGLViewer/frame.h	/^    void getLocalInverseTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getLocalTransformOf	/usr/include/QGLViewer/frame.h	/^    void getLocalTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getMatrix	/usr/include/QGLViewer/frame.h	/^    void getMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[16]) const
getMatrix	/usr/include/QGLViewer/frame.h	/^    void getMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[4][4]) const
getMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[16]) const
getMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[4][4]) const
getModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void getModelViewMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble m[16]) const
getModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void getModelViewMatrix(GLfloat m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLfloat m[16]) const
getModelViewProjectionMatrix	/usr/include/QGLViewer/camera.h	/^	void getModelViewProjectionMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble m[16]) const
getOrientation	/usr/include/QGLViewer/frame.h	/^    void getOrientation(double& q0, double& q1, double& q2, double& q3) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(double& q0, double& q1, double& q2, double& q3) const
getOrthoWidthHeight	/usr/include/QGLViewer/camera.h	/^    virtual void getOrthoWidthHeight(GLdouble& halfWidth, GLdouble& halfHeight) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble& halfWidth, GLdouble& halfHeight) const
getPosition	/usr/include/QGLViewer/frame.h	/^    void getPosition(float& x, float& y, float& z) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(float& x, float& y, float& z) const
getProjectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getProjectedCoordinatesOf(const float src[3], float res[3], const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3], const Frame* frame=NULL) const
getProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void getProjectionMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble m[16]) const
getProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void getProjectionMatrix(GLfloat m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLfloat m[16]) const
getRotation	/usr/include/QGLViewer/frame.h	/^    void getRotation(double& q0, double& q1, double& q2, double& q3) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(double& q0, double& q1, double& q2, double& q3) const
getRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getRotationMatrix(float m[3][3]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(float m[3][3]) const
getTransformOf	/usr/include/QGLViewer/frame.h	/^    void getTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
getTransformOfFrom	/usr/include/QGLViewer/frame.h	/^    void getTransformOfFrom(const float src[3], float res[3], const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const from) const
getTransformOfIn	/usr/include/QGLViewer/frame.h	/^    void getTransformOfIn(const float src[3], float res[3], const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const in) const
getTranslation	/usr/include/QGLViewer/frame.h	/^    void getTranslation(float& x, float& y, float& z) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(float& x, float& y, float& z) const
getUnprojectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getUnprojectedCoordinatesOf(const float src[3], float res[3], const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3], const Frame* frame=NULL) const
getViewport	/usr/include/QGLViewer/camera.h	/^    void getViewport(GLint viewport[4]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLint viewport[4]) const
getWorldCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getWorldCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3]) const
getWorldMatrix	/usr/include/QGLViewer/frame.h	/^    void getWorldMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[16]) const
getWorldMatrix	/usr/include/QGLViewer/frame.h	/^    void getWorldMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[4][4]) const
grabFrameBuffer	/usr/include/QGLViewer/qglviewer.h	/^	virtual QImage grabFrameBuffer(bool withAlpha=false);$/;"	p	class:QGLViewer	access:public	signature:(bool withAlpha=false)
grabsMouse	/usr/include/QGLViewer/mouseGrabber.h	/^    bool grabsMouse() const { return grabsMouse_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:() const
grabsMouse_	/usr/include/QGLViewer/mouseGrabber.h	/^    bool grabsMouse_;$/;"	m	class:qglviewer::MouseGrabber	access:private
gridIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^	bool gridIsDrawn() const { return gridIsDrawn_; };$/;"	f	class:QGLViewer	access:public	signature:() const
gridIsDrawnChanged	/usr/include/QGLViewer/qglviewer.h	/^	void gridIsDrawnChanged(bool drawn);$/;"	p	class:QGLViewer	access:public	signature:(bool drawn)
gridIsDrawn_	/usr/include/QGLViewer/qglviewer.h	/^	bool gridIsDrawn_;	\/\/ world XY grid$/;"	m	class:QGLViewer	access:private
handleKeyboardAction	/usr/include/QGLViewer/qglviewer.h	/^	void handleKeyboardAction(KeyboardAction id);$/;"	p	class:QGLViewer	access:private	signature:(KeyboardAction id)
handler	/usr/include/QGLViewer/qglviewer.h	/^		MouseHandler handler;$/;"	m	struct:QGLViewer::MouseActionPrivate	access:public
hasMouseTracking	/usr/include/QGLViewer/qglviewer.h	/^	bool hasMouseTracking () const;$/;"	p	class:QGLViewer	access:public	signature:() const
height	/usr/include/QGLViewer/qglviewer.h	/^	int height() const;$/;"	p	class:QGLViewer	access:public	signature:() const
help	/usr/include/QGLViewer/qglviewer.h	/^		virtual void help();$/;"	p	class:QGLViewer	access:public	signature:()
helpRequired	/usr/include/QGLViewer/qglviewer.h	/^	void helpRequired();$/;"	p	class:QGLViewer	access:public	signature:()
helpString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString helpString() const { return tr("No help available."); };$/;"	f	class:QGLViewer	access:public	signature:() const
helpWidget	/usr/include/QGLViewer/qglviewer.h	/^	QTabWidget* helpWidget() { return helpWidget_; }$/;"	f	class:QGLViewer	access:protected	signature:()
helpWidget_	/usr/include/QGLViewer/qglviewer.h	/^	QTabWidget* helpWidget_;$/;"	m	class:QGLViewer	access:private
hideMessage	/usr/include/QGLViewer/qglviewer.h	/^			void hideMessage();$/;"	p	class:QGLViewer	access:private	signature:()
horizontalFieldOfView	/usr/include/QGLViewer/camera.h	/^    float horizontalFieldOfView() const { return 2.0 * atan ( tan(fieldOfView()\/2.0) * aspectRatio() ); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
init	/usr/include/QGLViewer/qglviewer.h	/^	virtual void init() { emit viewerInitialized(); };$/;"	f	class:QGLViewer	access:protected	signature:()
initFromDOMElement	/usr/include/QGLViewer/camera.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QDomElement& element)
initFromDOMElement	/usr/include/QGLViewer/frame.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Frame	access:public	signature:(const QDomElement& element)
initFromDOMElement	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const QDomElement& element)
initFromDOMElement	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const QDomElement& element)
initFromDOMElement	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const QDomElement& element)
initFromDOMElement	/usr/include/QGLViewer/qglviewer.h	/^		virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:QGLViewer	access:public	signature:(const QDomElement& element)
initFromDOMElement	/usr/include/QGLViewer/quaternion.h	/^		void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const QDomElement& element)
initFromDOMElement	/usr/include/QGLViewer/vec.h	/^  void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Vec	access:public	signature:(const QDomElement& element)
initializeGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void initializeGL();$/;"	p	class:QGLViewer	access:protected	signature:()
initializeSnapshotFormats	/usr/include/QGLViewer/qglviewer.h	/^	void initializeSnapshotFormats();$/;"	p	class:QGLViewer	access:private	signature:()
intFromDom	/usr/include/QGLViewer/domUtils.h	/^  static int intFromDom(const QDomElement& e, const QString& attribute, int defValue)$/;"	f	class:DomUtils	access:public	signature:(const QDomElement& e, const QString& attribute, int defValue)
interpolateAtTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void interpolateAtTime(float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(float time)
interpolateTo	/usr/include/QGLViewer/camera.h	/^    void interpolateTo(const Frame& fr, float duration);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Frame& fr, float duration)
interpolateToFitScene	/usr/include/QGLViewer/camera.h	/^    void interpolateToFitScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
interpolateToZoomOnPixel	/usr/include/QGLViewer/camera.h	/^    void interpolateToZoomOnPixel(const QPoint& pixel);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel)
interpolated	/usr/include/QGLViewer/frame.h	/^    void interpolated();$/;"	p	class:qglviewer::Frame	access:public	signature:()
interpolated	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void interpolated();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
interpolationIsStarted	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool interpolationIsStarted() const { return interpolationStarted_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
interpolationKfi_	/usr/include/QGLViewer/camera.h	/^    KeyFrameInterpolator* interpolationKfi_;$/;"	m	class:qglviewer::Camera	access:private
interpolationPeriod	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    int interpolationPeriod() const { return period_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
interpolationSpeed	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationSpeed() const { return interpolationSpeed_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
interpolationSpeed_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationSpeed_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
interpolationStarted_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool interpolationStarted_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
interpolationTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationTime() const { return interpolationTime_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
interpolationTime_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationTime_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
invalidateValues	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void invalidateValues() { valuesAreValid_ = false; pathIsValid_ = false; splineCacheIsValid_ = false; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
inverse	/usr/include/QGLViewer/frame.h	/^    Frame inverse() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
inverse	/usr/include/QGLViewer/quaternion.h	/^		Quaternion inverse() const { return Quaternion(-q[0], -q[1], -q[2], q[3]); }$/;"	f	class:qglviewer::Quaternion	access:public	signature:() const
inverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec inverseCoordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
inverseMatrix	/usr/include/QGLViewer/quaternion.h	/^		const GLdouble* inverseMatrix() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
inverseRotate	/usr/include/QGLViewer/quaternion.h	/^		Vec inverseRotate(const Vec& v) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& v) const
inverseTransformOf	/usr/include/QGLViewer/frame.h	/^    Vec inverseTransformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
invert	/usr/include/QGLViewer/quaternion.h	/^		void invert() { q[0] = -q[0]; q[1] = -q[1]; q[2] = -q[2]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
isFullScreen	/usr/include/QGLViewer/qglviewer.h	/^	bool isFullScreen() const { return fullScreen_; };$/;"	f	class:QGLViewer	access:public	signature:() const
isInMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    bool isInMouseGrabberPool() const { return MouseGrabber::MouseGrabberPool_.contains(const_cast<MouseGrabber*>(this)); };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:() const
isInMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    bool isInMouseGrabberPool() const { return MouseGrabber::MouseGrabberPool_.findRef(this) != -1; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:() const
isManipulated	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool isManipulated() const;$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:() const
isSharing	/usr/include/QGLViewer/qglviewer.h	/^	bool isSharing() const;$/;"	p	class:QGLViewer	access:public	signature:() const
isSpinning	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool isSpinning() const { return isSpinning_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
isSpinning_	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool isSpinning_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
isValid	/usr/include/QGLViewer/qglviewer.h	/^	bool isValid() const;$/;"	p	class:QGLViewer	access:public	signature:() const
keepsGrabbingMouse_	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool keepsGrabbingMouse_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
keyDescription_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<int, QString> keyDescription_;$/;"	m	class:QGLViewer	access:private
keyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Frame keyFrame(int index) const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int index) const
keyFrameInterpolator	/usr/include/QGLViewer/camera.h	/^    KeyFrameInterpolator* keyFrameInterpolator(int i) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(int i) const
keyFrameKey	/usr/include/QGLViewer/qglviewer.h	/^	Qt::Key keyFrameKey(int index) const;$/;"	p	class:QGLViewer	access:public	signature:(int index) const
keyFrameTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float keyFrameTime(int index) const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int index) const
keyFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    mutable QList<KeyFrame*> keyFrame_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
keyFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    mutable QPtrList<KeyFrame> keyFrame_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
keyPressEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void keyPressEvent(QKeyEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QKeyEvent *)
keyboardAccelerator	/usr/include/QGLViewer/qglviewer.h	/^	int keyboardAccelerator(KeyboardAction action) const;$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action) const
keyboardActionDescription_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<KeyboardAction, QString> keyboardActionDescription_;$/;"	m	class:QGLViewer	access:private
keyboardBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<KeyboardAction, int> keyboardBinding_;$/;"	m	class:QGLViewer	access:private
keyboardString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString keyboardString() const;$/;"	p	class:QGLViewer	access:public	signature:() const
kfi_	/usr/include/QGLViewer/camera.h	/^    QMap<int, KeyFrameInterpolator*> kfi_;$/;"	m	class:qglviewer::Camera	access:private
lastTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float lastTime() const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
last_move_time	/usr/include/QGLViewer/manipulatedFrame.h	/^    QTime last_move_time;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
lnDif	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion lnDif(const Quaternion& a, const Quaternion& b);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& b)
loadModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    virtual void loadModelViewMatrix(bool reset=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool reset=true) const
loadModelViewMatrixStereo	/usr/include/QGLViewer/camera.h	/^    virtual void loadModelViewMatrixStereo(bool leftBuffer=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool leftBuffer=true) const
loadProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    virtual void loadProjectionMatrix(bool reset=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool reset=true) const
loadProjectionMatrixStereo	/usr/include/QGLViewer/camera.h	/^    virtual void loadProjectionMatrixStereo(bool leftBuffer=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool leftBuffer=true) const
localCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec localCoordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
localInverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec localInverseCoordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
localInverseTransformOf	/usr/include/QGLViewer/frame.h	/^    Vec localInverseTransformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
localTransformOf	/usr/include/QGLViewer/frame.h	/^    Vec localTransformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
log	/usr/include/QGLViewer/quaternion.h	/^		Quaternion log();$/;"	p	class:qglviewer::Quaternion	access:public	signature:()
lookAt	/usr/include/QGLViewer/camera.h	/^    void lookAt(const Vec& target);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& target)
loopInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool loopInterpolation() const { return loopInterpolation_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
loopInterpolation_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool loopInterpolation_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
makeCurrent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void makeCurrent();$/;"	p	class:QGLViewer	access:public	signature:()
manipulated	/usr/include/QGLViewer/manipulatedFrame.h	/^    void manipulated();$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:()
manipulatedFrame	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::ManipulatedFrame* manipulatedFrame() const { return manipulatedFrame_; };$/;"	f	class:QGLViewer	access:public	signature:() const
manipulatedFrameIsACamera_	/usr/include/QGLViewer/qglviewer.h	/^	bool manipulatedFrameIsACamera_;$/;"	m	class:QGLViewer	access:private
manipulatedFrame_	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::ManipulatedFrame* manipulatedFrame_;$/;"	m	class:QGLViewer	access:private
matrix	/usr/include/QGLViewer/frame.h	/^    const GLdouble* matrix() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
matrix	/usr/include/QGLViewer/quaternion.h	/^		const GLdouble* matrix() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
messageTimer_	/usr/include/QGLViewer/qglviewer.h	/^	QTimer messageTimer_;$/;"	m	class:QGLViewer	access:private
message_	/usr/include/QGLViewer/qglviewer.h	/^	QString message_;$/;"	m	class:QGLViewer	access:private
modelViewMatrix_	/usr/include/QGLViewer/camera.h	/^    mutable GLdouble modelViewMatrix_[16]; \/\/ Buffered model view matrix.$/;"	m	class:qglviewer::Camera	access:private
modified	/usr/include/QGLViewer/frame.h	/^    void modified();$/;"	p	class:qglviewer::Frame	access:public	signature:()
modifiers	/usr/include/QGLViewer/qglviewer.h	/^		QtKeyboardModifiers modifiers;$/;"	m	struct:QGLViewer::ClickActionPrivate	access:public
mouseAction	/usr/include/QGLViewer/qglviewer.h	/^	MouseAction mouseAction(int state) const;$/;"	p	class:QGLViewer	access:public	signature:(int state) const
mouseActionString	/usr/include/QGLViewer/qglviewer.h	/^	static QString mouseActionString(QGLViewer::MouseAction ma);$/;"	p	class:QGLViewer	access:private	signature:(QGLViewer::MouseAction ma)
mouseBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<int, MouseActionPrivate> mouseBinding_;$/;"	m	class:QGLViewer	access:private
mouseBindingsString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString mouseBindingsString () const { return mouseString(); }$/;"	f	class:QGLViewer	access:public	signature:() const
mouseButtonState	/usr/include/QGLViewer/qglviewer.h	/^	int mouseButtonState(MouseHandler handler, MouseAction action, bool withConstraint=true) const;$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, MouseAction action, bool withConstraint=true) const
mouseDescription_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<ClickActionPrivate, QString> mouseDescription_;$/;"	m	class:QGLViewer	access:private
mouseDoubleClickEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseDoubleClickEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseDoubleClickEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mouseDoubleClickEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
mouseGrabber	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::MouseGrabber* mouseGrabber() const { return mouseGrabber_; };$/;"	f	class:QGLViewer	access:public	signature:() const
mouseGrabberChanged	/usr/include/QGLViewer/qglviewer.h	/^	void mouseGrabberChanged(qglviewer::MouseGrabber* mouseGrabber);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::MouseGrabber* mouseGrabber)
mouseGrabberIsAManipulatedCameraFrame_	/usr/include/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsAManipulatedCameraFrame_;$/;"	m	class:QGLViewer	access:private
mouseGrabberIsAManipulatedFrame_	/usr/include/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsAManipulatedFrame_;$/;"	m	class:QGLViewer	access:private
mouseGrabberIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsEnabled(const qglviewer::MouseGrabber* const mouseGrabber) { return !disabledMouseGrabbers_.contains(reinterpret_cast<size_t>(mouseGrabber)); };$/;"	f	class:QGLViewer	access:public	signature:(const qglviewer::MouseGrabber* const mouseGrabber)
mouseGrabber_	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::MouseGrabber* mouseGrabber_;$/;"	m	class:QGLViewer	access:private
mouseHandler	/usr/include/QGLViewer/qglviewer.h	/^	int mouseHandler(int state) const;$/;"	p	class:QGLViewer	access:public	signature:(int state) const
mouseMoveEvent	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void mouseMoveEvent   (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseMoveEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mouseMoveEvent       (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseMoveEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mouseMoveEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseMoveEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mouseMoveEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
mouseOriginalDirection	/usr/include/QGLViewer/manipulatedFrame.h	/^    int mouseOriginalDirection(const QMouseEvent* const e);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(const QMouseEvent* const e)
mousePressEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mousePressEvent      (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mousePressEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mousePressEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mousePressEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mousePressEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
mouseReleaseEvent	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void mouseReleaseEvent(QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseReleaseEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mouseReleaseEvent    (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseReleaseEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mouseReleaseEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
mouseReleaseEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void mouseReleaseEvent(QMouseEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QMouseEvent *)
mouseSpeed_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float mouseSpeed_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
mouseString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString mouseString() const;$/;"	p	class:QGLViewer	access:public	signature:() const
negate	/usr/include/QGLViewer/quaternion.h	/^		void negate() { invert(); q[3] = -q[3]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
norm	/usr/include/QGLViewer/vec.h	/^  float norm() const { return sqrt(x*x + y*y + z*z); }$/;"	f	class:qglviewer::Vec	access:public	signature:() const
normalize	/usr/include/QGLViewer/quaternion.h	/^		double normalize()$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
normalize	/usr/include/QGLViewer/vec.h	/^  float normalize()$/;"	f	class:qglviewer::Vec	access:public	signature:()
normalized	/usr/include/QGLViewer/quaternion.h	/^		Quaternion normalized() const$/;"	f	class:qglviewer::Quaternion	access:public	signature:() const
numberOfKeyFrames	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    int numberOfKeyFrames() const { return keyFrame_.count(); };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
openSnapshotFormatDialog	/usr/include/QGLViewer/qglviewer.h	/^	bool openSnapshotFormatDialog();$/;"	p	class:QGLViewer	access:public	signature:()
operator !=	/usr/include/QGLViewer/vec.h	/^  friend bool operator!=(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
operator *	/usr/include/QGLViewer/quaternion.h	/^		friend Quaternion operator*(const Quaternion& a, const Quaternion& b)$/;"	f	class:qglviewer::Quaternion	access:friend	signature:(const Quaternion& a, const Quaternion& b)
operator *	/usr/include/QGLViewer/quaternion.h	/^		friend Vec operator*(const Quaternion& q, const Vec& v)$/;"	f	class:qglviewer::Quaternion	access:friend	signature:(const Quaternion& q, const Vec& v)
operator *	/usr/include/QGLViewer/vec.h	/^  friend Vec operator*(const Vec &a, float k)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, float k)
operator *	/usr/include/QGLViewer/vec.h	/^  friend Vec operator*(float k, const Vec &a)$/;"	f	class:qglviewer::Vec	access:friend	signature:(float k, const Vec &a)
operator *	/usr/include/QGLViewer/vec.h	/^  friend float operator*(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
operator *=	/usr/include/QGLViewer/quaternion.h	/^		Quaternion& operator*=(const Quaternion &q)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion &q)
operator *=	/usr/include/QGLViewer/vec.h	/^  Vec& operator*=(float k)$/;"	f	class:qglviewer::Vec	access:public	signature:(float k)
operator +	/usr/include/QGLViewer/vec.h	/^  friend Vec operator+(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
operator +=	/usr/include/QGLViewer/vec.h	/^  Vec& operator+=(const Vec &a)$/;"	f	class:qglviewer::Vec	access:public	signature:(const Vec &a)
operator -	/usr/include/QGLViewer/vec.h	/^  friend Vec operator-(const Vec &a)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a)
operator -	/usr/include/QGLViewer/vec.h	/^  friend Vec operator-(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
operator -=	/usr/include/QGLViewer/vec.h	/^  Vec& operator-=(const Vec &a)$/;"	f	class:qglviewer::Vec	access:public	signature:(const Vec &a)
operator /	/usr/include/QGLViewer/vec.h	/^  friend Vec operator\/(const Vec &a, float k)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, float k)
operator /=	/usr/include/QGLViewer/vec.h	/^  Vec& operator\/=(float k)$/;"	f	class:qglviewer::Vec	access:public	signature:(float k)
operator <	/usr/include/QGLViewer/qglviewer.h	/^		bool operator<(const ClickActionPrivate& cap) const$/;"	f	struct:QGLViewer::ClickActionPrivate	access:public	signature:(const ClickActionPrivate& cap) const
operator <<	/usr/include/QGLViewer/quaternion.h	/^		std::ostream& operator<<(std::ostream& o, const qglviewer::Vec&);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(std::ostream& o, const qglviewer::Vec&)
operator <<	/usr/include/QGLViewer/vec.h	/^  std::ostream& operator<<(std::ostream& o, const qglviewer::Vec&);$/;"	p	class:qglviewer::Vec	access:public	signature:(std::ostream& o, const qglviewer::Vec&)
operator =	/usr/include/QGLViewer/camera.h	/^    Camera& operator=(const Camera& camera);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Camera& camera)
operator =	/usr/include/QGLViewer/frame.h	/^    Frame& operator=(const Frame& frame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame& frame)
operator =	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    ManipulatedCameraFrame& operator=(const ManipulatedCameraFrame& mcf);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const ManipulatedCameraFrame& mcf)
operator =	/usr/include/QGLViewer/manipulatedFrame.h	/^    ManipulatedFrame& operator=(const ManipulatedFrame& mf);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const ManipulatedFrame& mf)
operator =	/usr/include/QGLViewer/mouseGrabber.h	/^    MouseGrabber& operator=(const MouseGrabber&);$/;"	p	class:qglviewer::MouseGrabber	access:private	signature:(const MouseGrabber&)
operator =	/usr/include/QGLViewer/qglviewer.h	/^	QGLViewer& operator=(const QGLViewer& v);$/;"	p	class:QGLViewer	access:private	signature:(const QGLViewer& v)
operator =	/usr/include/QGLViewer/quaternion.h	/^		Quaternion& operator=(const Quaternion& Q)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& Q)
operator =	/usr/include/QGLViewer/vec.h	/^  Vec& operator=(const Vec& v)$/;"	f	class:qglviewer::Vec	access:public	signature:(const Vec& v)
operator ==	/usr/include/QGLViewer/vec.h	/^  friend bool operator==(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
operator []	/usr/include/QGLViewer/quaternion.h	/^		double operator[](int i) const { return q[i]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:(int i) const
operator []	/usr/include/QGLViewer/quaternion.h	/^		double& operator[](int i) { return q[i]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:(int i)
operator []	/usr/include/QGLViewer/vec.h	/^  float operator[](int i) const {$/;"	f	class:qglviewer::Vec	access:public	signature:(int i) const
operator []	/usr/include/QGLViewer/vec.h	/^  float& operator[](int i) {$/;"	f	class:qglviewer::Vec	access:public	signature:(int i)
operator ^	/usr/include/QGLViewer/vec.h	/^  friend Vec operator^(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
operator const float*	/usr/include/QGLViewer/vec.h	/^  operator const float*() const {$/;"	f	class:qglviewer::Vec	access:public	signature:() const
operator float*	/usr/include/QGLViewer/vec.h	/^  operator float*() {$/;"	f	class:qglviewer::Vec	access:public	signature:()
orientation	/usr/include/QGLViewer/camera.h	/^    Quaternion orientation() const { return frame()->orientation(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
orientation	/usr/include/QGLViewer/frame.h	/^    Quaternion orientation() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
orientation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion orientation() const { return q_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
orthoCoef_	/usr/include/QGLViewer/camera.h	/^    float orthoCoef_;$/;"	m	class:qglviewer::Camera	access:private
orthogonalVec	/usr/include/QGLViewer/vec.h	/^  Vec orthogonalVec() const;$/;"	p	class:qglviewer::Vec	access:public	signature:() const
p_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec p_, tgP_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
paintGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void paintGL();$/;"	p	class:QGLViewer	access:protected	signature:()
pathIndex_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<Qt::Key, int> pathIndex_;$/;"	m	class:QGLViewer	access:private
pathIsValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool pathIsValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
pathKey	/usr/include/QGLViewer/qglviewer.h	/^	Qt::Key pathKey(int index) const;$/;"	p	class:QGLViewer	access:public	signature:(int index) const
path_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QList<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
path_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QValueVector<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
path_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QVector<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
performClickAction	/usr/include/QGLViewer/qglviewer.h	/^	void performClickAction(ClickAction ca, const QMouseEvent* const e);$/;"	p	class:QGLViewer	access:private	signature:(ClickAction ca, const QMouseEvent* const e)
period_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    int period_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
physicalDistanceToScreen	/usr/include/QGLViewer/camera.h	/^    float physicalDistanceToScreen() const { return physicalDistanceToScreen_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
physicalDistanceToScreen_	/usr/include/QGLViewer/camera.h	/^    float physicalDistanceToScreen_; \/\/ in meters$/;"	m	class:qglviewer::Camera	access:private
physicalScreenWidth	/usr/include/QGLViewer/camera.h	/^    float physicalScreenWidth() const { return physicalScreenWidth_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
physicalScreenWidth_	/usr/include/QGLViewer/camera.h	/^    float physicalScreenWidth_;	     \/\/ in meters$/;"	m	class:qglviewer::Camera	access:private
pitchYawQuaternion	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Quaternion pitchYawQuaternion(int x, int y, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:(int x, int y, const Camera* const camera)
pixelGLRatio	/usr/include/QGLViewer/camera.h	/^    float pixelGLRatio(const Vec& position) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& position) const
playKeyFramePathStateKey	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers playKeyFramePathStateKey() const;$/;"	p	class:QGLViewer	access:public	signature:() const
playPath	/usr/include/QGLViewer/camera.h	/^    virtual void playPath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
playPathKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers playPathKeyboardModifiers() const;$/;"	p	class:QGLViewer	access:public	signature:() const
playPathKeyboardModifiers_	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers addKeyFrameKeyboardModifiers_, playPathKeyboardModifiers_;$/;"	m	class:QGLViewer	access:private
playPathStateKey	/usr/include/QGLViewer/qglviewer.h	/^	QtKeyboardModifiers playPathStateKey() const;$/;"	p	class:QGLViewer	access:public	signature:() const
pointSelected	/usr/include/QGLViewer/qglviewer.h	/^	void pointSelected(const QMouseEvent* e);$/;"	p	class:QGLViewer	access:public	signature:(const QMouseEvent* e)
pointUnderPixel	/usr/include/QGLViewer/camera.h	/^    Vec pointUnderPixel(const QPoint& pixel, bool& found) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel, bool& found) const
position	/usr/include/QGLViewer/camera.h	/^    Vec position() const { return frame()->position(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
position	/usr/include/QGLViewer/frame.h	/^    Vec position() const { return inverseCoordinatesOf(Vec(0.0,0.0,0.0)); };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
position	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec position() const { return p_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
postDraw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void postDraw();$/;"	p	class:QGLViewer	access:protected	signature:()
postSelection	/usr/include/QGLViewer/qglviewer.h	/^	virtual void postSelection(const QPoint& point) { Q_UNUSED(point); };$/;"	f	class:QGLViewer	access:protected	signature:(const QPoint& point)
preDraw	/usr/include/QGLViewer/qglviewer.h	/^	virtual void preDraw();$/;"	p	class:QGLViewer	access:protected	signature:()
preDrawStereo	/usr/include/QGLViewer/qglviewer.h	/^	virtual void preDrawStereo(bool leftBuffer=true);$/;"	p	class:QGLViewer	access:protected	signature:(bool leftBuffer=true)
pressPos_	/usr/include/QGLViewer/manipulatedFrame.h	/^    QPoint prevPos_, pressPos_;$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
prevPos_	/usr/include/QGLViewer/manipulatedFrame.h	/^    QPoint prevPos_, pressPos_;$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
prevPos_	/usr/include/QGLViewer/qglviewer.h	/^	QPoint prevPos_;	\/\/ Previous window position, used for full screen mode$/;"	m	class:QGLViewer	access:private
previousBufferTextureFormat_	/usr/include/QGLViewer/qglviewer.h	/^	unsigned int previousBufferTextureFormat_;$/;"	m	class:QGLViewer	access:private
previousBufferTextureInternalFormat_	/usr/include/QGLViewer/qglviewer.h	/^	int previousBufferTextureInternalFormat_;$/;"	m	class:QGLViewer	access:private
previousCameraZClippingCoefficient_	/usr/include/QGLViewer/qglviewer.h	/^	float previousCameraZClippingCoefficient_;$/;"	m	class:QGLViewer	access:private
previousConstraint_	/usr/include/QGLViewer/manipulatedFrame.h	/^    Constraint* previousConstraint_; \/\/ When manipulation is without Contraint.$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
previousPathId_	/usr/include/QGLViewer/qglviewer.h	/^	int previousPathId_; \/\/ Double key press recognition$/;"	m	class:QGLViewer	access:private
projectOnAxis	/usr/include/QGLViewer/vec.h	/^  void projectOnAxis(const Vec& direction);$/;"	p	class:qglviewer::Vec	access:public	signature:(const Vec& direction)
projectOnLine	/usr/include/QGLViewer/frame.h	/^    void projectOnLine(const Vec& origin, const Vec& direction);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& origin, const Vec& direction)
projectOnPlane	/usr/include/QGLViewer/vec.h	/^  void projectOnPlane(const Vec& normal);$/;"	p	class:qglviewer::Vec	access:public	signature:(const Vec& normal)
projectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec projectedCoordinatesOf(const Vec& src, const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& src, const Frame* frame=NULL) const
projectionMatrix_	/usr/include/QGLViewer/camera.h	/^    mutable GLdouble projectionMatrix_[16]; \/\/ Buffered projection matrix.$/;"	m	class:qglviewer::Camera	access:private
q	/usr/include/QGLViewer/quaternion.h	/^		double q[4];$/;"	m	class:qglviewer::Quaternion	access:private
qMax	/usr/include/QGLViewer/config.h	98;"	d
q_	/usr/include/QGLViewer/frame.h	/^    Quaternion q_;$/;"	m	class:qglviewer::Frame	access:private
q_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion q_, tgQ_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
qglClearColor	/usr/include/QGLViewer/qglviewer.h	/^	void qglClearColor(const QColor& color) const;$/;"	p	class:QGLViewer	access:public	signature:(const QColor& color) const
qglColor	/usr/include/QGLViewer/qglviewer.h	/^	void qglColor(const QColor& color) const;$/;"	p	class:QGLViewer	access:public	signature:(const QColor& color) const
qglviewer	/usr/include/QGLViewer/camera.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/constraint.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/frame.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/keyFrameInterpolator.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/manipulatedFrame.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/mouseGrabber.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/qglviewer.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/quaternion.h	/^namespace qglviewer {$/;"	n
qglviewer	/usr/include/QGLViewer/vec.h	/^namespace qglviewer {$/;"	n
qglviewer::AxisPlaneConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT AxisPlaneConstraint : public Constraint$/;"	c	namespace:qglviewer	inherits:Constraint
qglviewer::AxisPlaneConstraint::AXIS	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
qglviewer::AxisPlaneConstraint::AxisPlaneConstraint	/usr/include/QGLViewer/constraint.h	/^    AxisPlaneConstraint();$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:()
qglviewer::AxisPlaneConstraint::FORBIDDEN	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
qglviewer::AxisPlaneConstraint::FREE	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
qglviewer::AxisPlaneConstraint::PLANE	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
qglviewer::AxisPlaneConstraint::Type	/usr/include/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	g	class:qglviewer::AxisPlaneConstraint	access:public
qglviewer::AxisPlaneConstraint::constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
qglviewer::AxisPlaneConstraint::constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Vec& translation, Frame* const frame)
qglviewer::AxisPlaneConstraint::rotationConstraintDir_	/usr/include/QGLViewer/constraint.h	/^    Vec rotationConstraintDir_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
qglviewer::AxisPlaneConstraint::rotationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    Vec rotationConstraintDirection() const { return rotationConstraintDir_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
qglviewer::AxisPlaneConstraint::rotationConstraintType	/usr/include/QGLViewer/constraint.h	/^    Type rotationConstraintType() const { return rotationConstraintType_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
qglviewer::AxisPlaneConstraint::rotationConstraintType_	/usr/include/QGLViewer/constraint.h	/^    Type rotationConstraintType_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
qglviewer::AxisPlaneConstraint::setRotationConstraint	/usr/include/QGLViewer/constraint.h	/^    void setRotationConstraint(Type type, const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type, const Vec& direction)
qglviewer::AxisPlaneConstraint::setRotationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    void setRotationConstraintDirection(const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(const Vec& direction)
qglviewer::AxisPlaneConstraint::setRotationConstraintType	/usr/include/QGLViewer/constraint.h	/^    void setRotationConstraintType(Type type);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type)
qglviewer::AxisPlaneConstraint::setTranslationConstraint	/usr/include/QGLViewer/constraint.h	/^    void setTranslationConstraint(Type type, const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type, const Vec& direction)
qglviewer::AxisPlaneConstraint::setTranslationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    void setTranslationConstraintDirection(const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(const Vec& direction)
qglviewer::AxisPlaneConstraint::setTranslationConstraintType	/usr/include/QGLViewer/constraint.h	/^    void setTranslationConstraintType(Type type) { translationConstraintType_ = type; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type)
qglviewer::AxisPlaneConstraint::translationConstraintDir_	/usr/include/QGLViewer/constraint.h	/^    Vec translationConstraintDir_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
qglviewer::AxisPlaneConstraint::translationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    Vec translationConstraintDirection() const { return translationConstraintDir_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
qglviewer::AxisPlaneConstraint::translationConstraintType	/usr/include/QGLViewer/constraint.h	/^    Type translationConstraintType() const { return translationConstraintType_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
qglviewer::AxisPlaneConstraint::translationConstraintType_	/usr/include/QGLViewer/constraint.h	/^    Type translationConstraintType_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
qglviewer::AxisPlaneConstraint::~AxisPlaneConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~AxisPlaneConstraint() {};$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:()
qglviewer::Camera	/usr/include/QGLViewer/camera.h	/^  class QGLVIEWER_EXPORT Camera : public QObject$/;"	c	namespace:qglviewer	inherits:QObject
qglviewer::Camera::Camera	/usr/include/QGLViewer/camera.h	/^    Camera();$/;"	p	class:qglviewer::Camera	access:public	signature:()
qglviewer::Camera::Camera	/usr/include/QGLViewer/camera.h	/^    Camera(const Camera& camera);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Camera& camera)
qglviewer::Camera::IODistance	/usr/include/QGLViewer/camera.h	/^    float IODistance() const { return IODistance_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::IODistance_	/usr/include/QGLViewer/camera.h	/^    float IODistance_;		     \/\/ inter-ocular distance, in meters$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::ORTHOGRAPHIC	/usr/include/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	e	enum:qglviewer::Camera::Type
qglviewer::Camera::PERSPECTIVE	/usr/include/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	e	enum:qglviewer::Camera::Type
qglviewer::Camera::Type	/usr/include/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	g	class:qglviewer::Camera	access:public
qglviewer::Camera::addKeyFrameToPath	/usr/include/QGLViewer/camera.h	/^    virtual void addKeyFrameToPath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
qglviewer::Camera::aspectRatio	/usr/include/QGLViewer/camera.h	/^    float aspectRatio() const { return static_cast<float>(screenWidth_)\/static_cast<float>(screenHeight_); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::cameraCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec cameraCoordinatesOf(const Vec& src) const { return frame()->coordinatesOf(src); };$/;"	f	class:qglviewer::Camera	access:public	signature:(const Vec& src) const
qglviewer::Camera::centerScene	/usr/include/QGLViewer/camera.h	/^    void centerScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
qglviewer::Camera::computeModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void computeModelViewMatrix() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::computeProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void computeProjectionMatrix() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::convertClickToLine	/usr/include/QGLViewer/camera.h	/^    void convertClickToLine(const QPoint& pixel, Vec& orig, Vec& dir) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel, Vec& orig, Vec& dir) const
qglviewer::Camera::deletePath	/usr/include/QGLViewer/camera.h	/^    virtual void deletePath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
qglviewer::Camera::distanceToSceneCenter	/usr/include/QGLViewer/camera.h	/^    float distanceToSceneCenter() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::domElement	/usr/include/QGLViewer/camera.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const QString& name, QDomDocument& document) const
qglviewer::Camera::draw	/usr/include/QGLViewer/camera.h	/^    virtual void draw(bool drawFarPlane=true, float scale=1.0) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool drawFarPlane=true, float scale=1.0) const
qglviewer::Camera::drawAllPaths	/usr/include/QGLViewer/camera.h	/^    virtual void drawAllPaths();$/;"	p	class:qglviewer::Camera	access:public	signature:()
qglviewer::Camera::drawCamera	/usr/include/QGLViewer/camera.h	/^    static void drawCamera(float scale=1.0, float aspectRatio=1.33, float fieldOfView=M_PI\/4.0);$/;"	p	class:qglviewer::Camera	access:public	signature:(float scale=1.0, float aspectRatio=1.33, float fieldOfView=M_PI/4.0)
qglviewer::Camera::fieldOfView	/usr/include/QGLViewer/camera.h	/^    float fieldOfView() const { return fieldOfView_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::fieldOfView_	/usr/include/QGLViewer/camera.h	/^    float fieldOfView_; \/\/ in radians$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::fitBoundingBox	/usr/include/QGLViewer/camera.h	/^    void fitBoundingBox(const Vec& min, const Vec& max);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& min, const Vec& max)
qglviewer::Camera::fitScreenRegion	/usr/include/QGLViewer/camera.h	/^    void fitScreenRegion(const QRect& rectangle);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QRect& rectangle)
qglviewer::Camera::fitSphere	/usr/include/QGLViewer/camera.h	/^    void fitSphere(const Vec& center, float radius);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& center, float radius)
qglviewer::Camera::flySpeed	/usr/include/QGLViewer/camera.h	/^    float flySpeed() const { return frame()->flySpeed(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::focusDistance	/usr/include/QGLViewer/camera.h	/^    float focusDistance() const { return focusDistance_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::focusDistance_	/usr/include/QGLViewer/camera.h	/^    float focusDistance_;	     \/\/ in scene units$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::frame	/usr/include/QGLViewer/camera.h	/^    ManipulatedCameraFrame* frame() const { return frame_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::frame_	/usr/include/QGLViewer/camera.h	/^    ManipulatedCameraFrame* frame_;$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::getCameraCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getCameraCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Camera::getFrustumPlanesCoefficients	/usr/include/QGLViewer/camera.h	/^    void getFrustumPlanesCoefficients(GLdouble coef[6][4]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble coef[6][4]) const
qglviewer::Camera::getModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void getModelViewMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble m[16]) const
qglviewer::Camera::getModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void getModelViewMatrix(GLfloat m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLfloat m[16]) const
qglviewer::Camera::getModelViewProjectionMatrix	/usr/include/QGLViewer/camera.h	/^	void getModelViewProjectionMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble m[16]) const
qglviewer::Camera::getOrthoWidthHeight	/usr/include/QGLViewer/camera.h	/^    virtual void getOrthoWidthHeight(GLdouble& halfWidth, GLdouble& halfHeight) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble& halfWidth, GLdouble& halfHeight) const
qglviewer::Camera::getProjectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getProjectedCoordinatesOf(const float src[3], float res[3], const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3], const Frame* frame=NULL) const
qglviewer::Camera::getProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void getProjectionMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLdouble m[16]) const
qglviewer::Camera::getProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void getProjectionMatrix(GLfloat m[16]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLfloat m[16]) const
qglviewer::Camera::getUnprojectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getUnprojectedCoordinatesOf(const float src[3], float res[3], const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3], const Frame* frame=NULL) const
qglviewer::Camera::getViewport	/usr/include/QGLViewer/camera.h	/^    void getViewport(GLint viewport[4]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(GLint viewport[4]) const
qglviewer::Camera::getWorldCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    void getWorldCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Camera::horizontalFieldOfView	/usr/include/QGLViewer/camera.h	/^    float horizontalFieldOfView() const { return 2.0 * atan ( tan(fieldOfView()\/2.0) * aspectRatio() ); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::initFromDOMElement	/usr/include/QGLViewer/camera.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QDomElement& element)
qglviewer::Camera::interpolateTo	/usr/include/QGLViewer/camera.h	/^    void interpolateTo(const Frame& fr, float duration);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Frame& fr, float duration)
qglviewer::Camera::interpolateToFitScene	/usr/include/QGLViewer/camera.h	/^    void interpolateToFitScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
qglviewer::Camera::interpolateToZoomOnPixel	/usr/include/QGLViewer/camera.h	/^    void interpolateToZoomOnPixel(const QPoint& pixel);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel)
qglviewer::Camera::interpolationKfi_	/usr/include/QGLViewer/camera.h	/^    KeyFrameInterpolator* interpolationKfi_;$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::keyFrameInterpolator	/usr/include/QGLViewer/camera.h	/^    KeyFrameInterpolator* keyFrameInterpolator(int i) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(int i) const
qglviewer::Camera::kfi_	/usr/include/QGLViewer/camera.h	/^    QMap<int, KeyFrameInterpolator*> kfi_;$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::loadModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    virtual void loadModelViewMatrix(bool reset=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool reset=true) const
qglviewer::Camera::loadModelViewMatrixStereo	/usr/include/QGLViewer/camera.h	/^    virtual void loadModelViewMatrixStereo(bool leftBuffer=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool leftBuffer=true) const
qglviewer::Camera::loadProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    virtual void loadProjectionMatrix(bool reset=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool reset=true) const
qglviewer::Camera::loadProjectionMatrixStereo	/usr/include/QGLViewer/camera.h	/^    virtual void loadProjectionMatrixStereo(bool leftBuffer=true) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(bool leftBuffer=true) const
qglviewer::Camera::lookAt	/usr/include/QGLViewer/camera.h	/^    void lookAt(const Vec& target);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& target)
qglviewer::Camera::modelViewMatrix_	/usr/include/QGLViewer/camera.h	/^    mutable GLdouble modelViewMatrix_[16]; \/\/ Buffered model view matrix.$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::operator =	/usr/include/QGLViewer/camera.h	/^    Camera& operator=(const Camera& camera);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Camera& camera)
qglviewer::Camera::orientation	/usr/include/QGLViewer/camera.h	/^    Quaternion orientation() const { return frame()->orientation(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::orthoCoef_	/usr/include/QGLViewer/camera.h	/^    float orthoCoef_;$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::physicalDistanceToScreen	/usr/include/QGLViewer/camera.h	/^    float physicalDistanceToScreen() const { return physicalDistanceToScreen_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::physicalDistanceToScreen_	/usr/include/QGLViewer/camera.h	/^    float physicalDistanceToScreen_; \/\/ in meters$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::physicalScreenWidth	/usr/include/QGLViewer/camera.h	/^    float physicalScreenWidth() const { return physicalScreenWidth_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::physicalScreenWidth_	/usr/include/QGLViewer/camera.h	/^    float physicalScreenWidth_;	     \/\/ in meters$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::pixelGLRatio	/usr/include/QGLViewer/camera.h	/^    float pixelGLRatio(const Vec& position) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& position) const
qglviewer::Camera::playPath	/usr/include/QGLViewer/camera.h	/^    virtual void playPath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
qglviewer::Camera::pointUnderPixel	/usr/include/QGLViewer/camera.h	/^    Vec pointUnderPixel(const QPoint& pixel, bool& found) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel, bool& found) const
qglviewer::Camera::position	/usr/include/QGLViewer/camera.h	/^    Vec position() const { return frame()->position(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::projectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec projectedCoordinatesOf(const Vec& src, const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& src, const Frame* frame=NULL) const
qglviewer::Camera::projectionMatrix_	/usr/include/QGLViewer/camera.h	/^    mutable GLdouble projectionMatrix_[16]; \/\/ Buffered projection matrix.$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::resetPath	/usr/include/QGLViewer/camera.h	/^    virtual void resetPath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
qglviewer::Camera::revolveAroundPoint	/usr/include/QGLViewer/camera.h	/^    Vec revolveAroundPoint() const { return frame()->revolveAroundPoint(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::rightVector	/usr/include/QGLViewer/camera.h	/^    Vec rightVector() const$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::sceneCenter	/usr/include/QGLViewer/camera.h	/^    Vec sceneCenter() const { return sceneCenter_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::sceneCenter_	/usr/include/QGLViewer/camera.h	/^    Vec sceneCenter_;$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::sceneRadius	/usr/include/QGLViewer/camera.h	/^    float sceneRadius() const { return sceneRadius_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::sceneRadius_	/usr/include/QGLViewer/camera.h	/^    float sceneRadius_; \/\/ OpenGL units$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::screenHeight	/usr/include/QGLViewer/camera.h	/^    int screenHeight() const { return screenHeight_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::screenHeight_	/usr/include/QGLViewer/camera.h	/^    int screenWidth_, screenHeight_;  \/\/ size of the window, in pixels$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::screenWidth	/usr/include/QGLViewer/camera.h	/^    int screenWidth() const { return screenWidth_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::screenWidth_	/usr/include/QGLViewer/camera.h	/^    int screenWidth_, screenHeight_;  \/\/ size of the window, in pixels$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::setAspectRatio	/usr/include/QGLViewer/camera.h	/^    void setAspectRatio(float aspect) { setScreenWidthAndHeight(int(100.0*aspect), 100); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float aspect)
qglviewer::Camera::setFOVToFitScene	/usr/include/QGLViewer/camera.h	/^    void setFOVToFitScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
qglviewer::Camera::setFieldOfView	/usr/include/QGLViewer/camera.h	/^    void setFieldOfView(float fov) { fieldOfView_ = fov; setFocusDistance(sceneRadius() \/ tan(fov\/2.0)); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float fov)
qglviewer::Camera::setFlySpeed	/usr/include/QGLViewer/camera.h	/^    void setFlySpeed(float speed) { frame()->setFlySpeed(speed); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float speed)
qglviewer::Camera::setFocusDistance	/usr/include/QGLViewer/camera.h	/^    void setFocusDistance(float distance) { focusDistance_ = distance; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float distance)
qglviewer::Camera::setFrame	/usr/include/QGLViewer/camera.h	/^    void setFrame(ManipulatedCameraFrame* const mcf);$/;"	p	class:qglviewer::Camera	access:public	signature:(ManipulatedCameraFrame* const mcf)
qglviewer::Camera::setFromModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void setFromModelViewMatrix(const GLdouble* const modelViewMatrix);$/;"	p	class:qglviewer::Camera	access:public	signature:(const GLdouble* const modelViewMatrix)
qglviewer::Camera::setFromProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void setFromProjectionMatrix(const float matrix[12]);$/;"	p	class:qglviewer::Camera	access:public	signature:(const float matrix[12])
qglviewer::Camera::setHorizontalFieldOfView	/usr/include/QGLViewer/camera.h	/^    void setHorizontalFieldOfView(float hfov) { setFieldOfView( 2.0 * atan (tan(hfov \/ 2.0) \/ aspectRatio()) ); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float hfov)
qglviewer::Camera::setIODistance	/usr/include/QGLViewer/camera.h	/^    void setIODistance(float distance) { IODistance_ = distance; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float distance)
qglviewer::Camera::setKeyFrameInterpolator	/usr/include/QGLViewer/camera.h	/^    void setKeyFrameInterpolator(int i, KeyFrameInterpolator* const kfi);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i, KeyFrameInterpolator* const kfi)
qglviewer::Camera::setOrientation	/usr/include/QGLViewer/camera.h	/^    void setOrientation(const Quaternion& q);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Quaternion& q)
qglviewer::Camera::setOrientation	/usr/include/QGLViewer/camera.h	/^    void setOrientation(float theta, float phi);$/;"	p	class:qglviewer::Camera	access:public	signature:(float theta, float phi)
qglviewer::Camera::setPhysicalDistanceToScreen	/usr/include/QGLViewer/camera.h	/^    void setPhysicalDistanceToScreen(float distance) { physicalDistanceToScreen_ = distance; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float distance)
qglviewer::Camera::setPhysicalScreenWidth	/usr/include/QGLViewer/camera.h	/^    void setPhysicalScreenWidth(float width) { physicalScreenWidth_ = width; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float width)
qglviewer::Camera::setPosition	/usr/include/QGLViewer/camera.h	/^    void setPosition(const Vec& pos) { frame()->setPosition(pos); };$/;"	f	class:qglviewer::Camera	access:public	signature:(const Vec& pos)
qglviewer::Camera::setRevolveAroundPoint	/usr/include/QGLViewer/camera.h	/^    void setRevolveAroundPoint(const Vec& rap);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& rap)
qglviewer::Camera::setRevolveAroundPointFromPixel	/usr/include/QGLViewer/camera.h	/^    bool setRevolveAroundPointFromPixel(const QPoint& pixel);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel)
qglviewer::Camera::setSceneBoundingBox	/usr/include/QGLViewer/camera.h	/^    void setSceneBoundingBox(const Vec& min, const Vec& max);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& min, const Vec& max)
qglviewer::Camera::setSceneCenter	/usr/include/QGLViewer/camera.h	/^    void setSceneCenter(const Vec& center);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& center)
qglviewer::Camera::setSceneCenterFromPixel	/usr/include/QGLViewer/camera.h	/^    bool setSceneCenterFromPixel(const QPoint& pixel);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel)
qglviewer::Camera::setSceneRadius	/usr/include/QGLViewer/camera.h	/^    void setSceneRadius(float radius);$/;"	p	class:qglviewer::Camera	access:public	signature:(float radius)
qglviewer::Camera::setScreenWidthAndHeight	/usr/include/QGLViewer/camera.h	/^    void setScreenWidthAndHeight(int width, int height);$/;"	p	class:qglviewer::Camera	access:public	signature:(int width, int height)
qglviewer::Camera::setType	/usr/include/QGLViewer/camera.h	/^    void setType(Type type);$/;"	p	class:qglviewer::Camera	access:public	signature:(Type type)
qglviewer::Camera::setUpVector	/usr/include/QGLViewer/camera.h	/^    void setUpVector(const Vec& up, bool noMove=true);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& up, bool noMove=true)
qglviewer::Camera::setViewDirection	/usr/include/QGLViewer/camera.h	/^    void setViewDirection(const Vec& direction);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& direction)
qglviewer::Camera::setZClippingCoefficient	/usr/include/QGLViewer/camera.h	/^    void setZClippingCoefficient(float coef) { zClippingCoef_ = coef; }$/;"	f	class:qglviewer::Camera	access:public	signature:(float coef)
qglviewer::Camera::setZNearCoefficient	/usr/include/QGLViewer/camera.h	/^    void setZNearCoefficient(float coef) { zNearCoef_ = coef; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float coef)
qglviewer::Camera::showEntireScene	/usr/include/QGLViewer/camera.h	/^    void showEntireScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
qglviewer::Camera::type	/usr/include/QGLViewer/camera.h	/^    Type type() const { return type_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::type_	/usr/include/QGLViewer/camera.h	/^    Type type_; \/\/ PERSPECTIVE or ORTHOGRAPHIC$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::unprojectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec unprojectedCoordinatesOf(const Vec& src, const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& src, const Frame* frame=NULL) const
qglviewer::Camera::upVector	/usr/include/QGLViewer/camera.h	/^    Vec upVector() const$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::viewDirection	/usr/include/QGLViewer/camera.h	/^    Vec viewDirection() const { return frame()->inverseTransformOf(Vec(0.0, 0.0, -1.0)); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::worldCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec worldCoordinatesOf(const Vec& src) const { return frame()->inverseCoordinatesOf(src); };$/;"	f	class:qglviewer::Camera	access:public	signature:(const Vec& src) const
qglviewer::Camera::zClippingCoef_	/usr/include/QGLViewer/camera.h	/^    float zClippingCoef_;$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::zClippingCoefficient	/usr/include/QGLViewer/camera.h	/^    float zClippingCoefficient() const { return zClippingCoef_; }$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::zFar	/usr/include/QGLViewer/camera.h	/^    virtual float zFar()  const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::zNear	/usr/include/QGLViewer/camera.h	/^    virtual float zNear() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::zNearCoef_	/usr/include/QGLViewer/camera.h	/^    float zNearCoef_;$/;"	m	class:qglviewer::Camera	access:private
qglviewer::Camera::zNearCoefficient	/usr/include/QGLViewer/camera.h	/^    float zNearCoefficient() const { return zNearCoef_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
qglviewer::Camera::~Camera	/usr/include/QGLViewer/camera.h	/^    virtual ~Camera();$/;"	p	class:qglviewer::Camera	access:public	signature:()
qglviewer::CameraConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT CameraConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer	inherits:AxisPlaneConstraint
qglviewer::CameraConstraint::CameraConstraint	/usr/include/QGLViewer/constraint.h	/^    explicit CameraConstraint(const Camera* const camera);$/;"	p	class:qglviewer::CameraConstraint	access:public	signature:(const Camera* const camera)
qglviewer::CameraConstraint::camera	/usr/include/QGLViewer/constraint.h	/^    const Camera* camera() const { return camera_; };$/;"	f	class:qglviewer::CameraConstraint	access:public	signature:() const
qglviewer::CameraConstraint::camera_	/usr/include/QGLViewer/constraint.h	/^    const Camera* const camera_;$/;"	m	class:qglviewer::CameraConstraint	access:private
qglviewer::CameraConstraint::constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);$/;"	p	class:qglviewer::CameraConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
qglviewer::CameraConstraint::constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec&     translation, Frame* const frame);$/;"	p	class:qglviewer::CameraConstraint	access:public	signature:(Vec& translation, Frame* const frame)
qglviewer::CameraConstraint::~CameraConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~CameraConstraint() {};$/;"	f	class:qglviewer::CameraConstraint	access:public	signature:()
qglviewer::Constraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT Constraint$/;"	c	namespace:qglviewer
qglviewer::Constraint::constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::Constraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
qglviewer::Constraint::constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::Constraint	access:public	signature:(Vec& translation, Frame* const frame)
qglviewer::Constraint::~Constraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~Constraint() {};$/;"	f	class:qglviewer::Constraint	access:public	signature:()
qglviewer::Frame	/usr/include/QGLViewer/frame.h	/^  class QGLVIEWER_EXPORT Frame : public QObject$/;"	c	namespace:qglviewer	inherits:QObject
qglviewer::Frame::Frame	/usr/include/QGLViewer/frame.h	/^    Frame();$/;"	p	class:qglviewer::Frame	access:public	signature:()
qglviewer::Frame::Frame	/usr/include/QGLViewer/frame.h	/^    Frame(const Frame& frame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame& frame)
qglviewer::Frame::Frame	/usr/include/QGLViewer/frame.h	/^    Frame(const Vec& position, const Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& position, const Quaternion& orientation)
qglviewer::Frame::alignWithFrame	/usr/include/QGLViewer/frame.h	/^    void alignWithFrame(const Frame* const frame, bool move=false, float threshold=0.85f);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame* const frame, bool move=false, float threshold=0.85f)
qglviewer::Frame::constraint	/usr/include/QGLViewer/frame.h	/^    Constraint* constraint() const { return constraint_; }$/;"	f	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::constraint_	/usr/include/QGLViewer/frame.h	/^    Constraint* constraint_;$/;"	m	class:qglviewer::Frame	access:private
qglviewer::Frame::coordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec coordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::coordinatesOfFrom	/usr/include/QGLViewer/frame.h	/^    Vec coordinatesOfFrom(const Vec& src, const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const from) const
qglviewer::Frame::coordinatesOfIn	/usr/include/QGLViewer/frame.h	/^    Vec coordinatesOfIn(const Vec& src, const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const in) const
qglviewer::Frame::domElement	/usr/include/QGLViewer/frame.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const QString& name, QDomDocument& document) const
qglviewer::Frame::getCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getCoordinatesOfFrom	/usr/include/QGLViewer/frame.h	/^    void getCoordinatesOfFrom(const float src[3], float res[3], const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const from) const
qglviewer::Frame::getCoordinatesOfIn	/usr/include/QGLViewer/frame.h	/^    void getCoordinatesOfIn(const float src[3], float res[3], const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const in) const
qglviewer::Frame::getInverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getInverseCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getInverseTransformOf	/usr/include/QGLViewer/frame.h	/^    void getInverseTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getLocalCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getLocalCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getLocalInverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    void getLocalInverseCoordinatesOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getLocalInverseTransformOf	/usr/include/QGLViewer/frame.h	/^    void getLocalInverseTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getLocalTransformOf	/usr/include/QGLViewer/frame.h	/^    void getLocalTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getMatrix	/usr/include/QGLViewer/frame.h	/^    void getMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[16]) const
qglviewer::Frame::getMatrix	/usr/include/QGLViewer/frame.h	/^    void getMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[4][4]) const
qglviewer::Frame::getOrientation	/usr/include/QGLViewer/frame.h	/^    void getOrientation(double& q0, double& q1, double& q2, double& q3) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(double& q0, double& q1, double& q2, double& q3) const
qglviewer::Frame::getPosition	/usr/include/QGLViewer/frame.h	/^    void getPosition(float& x, float& y, float& z) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(float& x, float& y, float& z) const
qglviewer::Frame::getRotation	/usr/include/QGLViewer/frame.h	/^    void getRotation(double& q0, double& q1, double& q2, double& q3) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(double& q0, double& q1, double& q2, double& q3) const
qglviewer::Frame::getTransformOf	/usr/include/QGLViewer/frame.h	/^    void getTransformOf(const float src[3], float res[3]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3]) const
qglviewer::Frame::getTransformOfFrom	/usr/include/QGLViewer/frame.h	/^    void getTransformOfFrom(const float src[3], float res[3], const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const from) const
qglviewer::Frame::getTransformOfIn	/usr/include/QGLViewer/frame.h	/^    void getTransformOfIn(const float src[3], float res[3], const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const float src[3], float res[3], const Frame* const in) const
qglviewer::Frame::getTranslation	/usr/include/QGLViewer/frame.h	/^    void getTranslation(float& x, float& y, float& z) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(float& x, float& y, float& z) const
qglviewer::Frame::getWorldMatrix	/usr/include/QGLViewer/frame.h	/^    void getWorldMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[16]) const
qglviewer::Frame::getWorldMatrix	/usr/include/QGLViewer/frame.h	/^    void getWorldMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(GLdouble m[4][4]) const
qglviewer::Frame::initFromDOMElement	/usr/include/QGLViewer/frame.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Frame	access:public	signature:(const QDomElement& element)
qglviewer::Frame::interpolated	/usr/include/QGLViewer/frame.h	/^    void interpolated();$/;"	p	class:qglviewer::Frame	access:public	signature:()
qglviewer::Frame::inverse	/usr/include/QGLViewer/frame.h	/^    Frame inverse() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::inverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec inverseCoordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::inverseTransformOf	/usr/include/QGLViewer/frame.h	/^    Vec inverseTransformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::localCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec localCoordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::localInverseCoordinatesOf	/usr/include/QGLViewer/frame.h	/^    Vec localInverseCoordinatesOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::localInverseTransformOf	/usr/include/QGLViewer/frame.h	/^    Vec localInverseTransformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::localTransformOf	/usr/include/QGLViewer/frame.h	/^    Vec localTransformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::matrix	/usr/include/QGLViewer/frame.h	/^    const GLdouble* matrix() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::modified	/usr/include/QGLViewer/frame.h	/^    void modified();$/;"	p	class:qglviewer::Frame	access:public	signature:()
qglviewer::Frame::operator =	/usr/include/QGLViewer/frame.h	/^    Frame& operator=(const Frame& frame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame& frame)
qglviewer::Frame::orientation	/usr/include/QGLViewer/frame.h	/^    Quaternion orientation() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::position	/usr/include/QGLViewer/frame.h	/^    Vec position() const { return inverseCoordinatesOf(Vec(0.0,0.0,0.0)); };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::projectOnLine	/usr/include/QGLViewer/frame.h	/^    void projectOnLine(const Vec& origin, const Vec& direction);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& origin, const Vec& direction)
qglviewer::Frame::q_	/usr/include/QGLViewer/frame.h	/^    Quaternion q_;$/;"	m	class:qglviewer::Frame	access:private
qglviewer::Frame::referenceFrame	/usr/include/QGLViewer/frame.h	/^    const Frame* referenceFrame() const { return referenceFrame_; };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::referenceFrame_	/usr/include/QGLViewer/frame.h	/^    const Frame* referenceFrame_;$/;"	m	class:qglviewer::Frame	access:private
qglviewer::Frame::rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(Quaternion& q);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& q)
qglviewer::Frame::rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(const Quaternion& q);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Quaternion& q)
qglviewer::Frame::rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(double q0, double q1, double q2, double q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double q0, double q1, double q2, double q3)
qglviewer::Frame::rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(double& q0, double& q1, double& q2, double& q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double& q0, double& q1, double& q2, double& q3)
qglviewer::Frame::rotateAroundPoint	/usr/include/QGLViewer/frame.h	/^    void rotateAroundPoint(Quaternion& rotation, const Vec& point);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& rotation, const Vec& point)
qglviewer::Frame::rotateAroundPoint	/usr/include/QGLViewer/frame.h	/^    void rotateAroundPoint(const Quaternion& rotation, const Vec& point);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Quaternion& rotation, const Vec& point)
qglviewer::Frame::rotation	/usr/include/QGLViewer/frame.h	/^    Quaternion rotation() const { return q_; };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::setConstraint	/usr/include/QGLViewer/frame.h	/^    void setConstraint(Constraint* const constraint) { constraint_ = constraint; }$/;"	f	class:qglviewer::Frame	access:public	signature:(Constraint* const constraint)
qglviewer::Frame::setFromMatrix	/usr/include/QGLViewer/frame.h	/^    void setFromMatrix(const GLdouble m[16]);$/;"	p	class:qglviewer::Frame	access:public	signature:(const GLdouble m[16])
qglviewer::Frame::setFromMatrix	/usr/include/QGLViewer/frame.h	/^    void setFromMatrix(const GLdouble m[4][4]);$/;"	p	class:qglviewer::Frame	access:public	signature:(const GLdouble m[4][4])
qglviewer::Frame::setOrientation	/usr/include/QGLViewer/frame.h	/^    void setOrientation(const Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Quaternion& orientation)
qglviewer::Frame::setOrientation	/usr/include/QGLViewer/frame.h	/^    void setOrientation(double q0, double q1, double q2, double q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double q0, double q1, double q2, double q3)
qglviewer::Frame::setOrientationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setOrientationWithConstraint(Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& orientation)
qglviewer::Frame::setPosition	/usr/include/QGLViewer/frame.h	/^    void setPosition(const Vec& position);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& position)
qglviewer::Frame::setPosition	/usr/include/QGLViewer/frame.h	/^    void setPosition(float x, float y, float z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float x, float y, float z)
qglviewer::Frame::setPositionAndOrientation	/usr/include/QGLViewer/frame.h	/^    void setPositionAndOrientation(const Vec& position, const Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& position, const Quaternion& orientation)
qglviewer::Frame::setPositionAndOrientationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setPositionAndOrientationWithConstraint(Vec& position, Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& position, Quaternion& orientation)
qglviewer::Frame::setPositionWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setPositionWithConstraint(Vec& position);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& position)
qglviewer::Frame::setReferenceFrame	/usr/include/QGLViewer/frame.h	/^    void setReferenceFrame(const Frame* const refFrame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame* const refFrame)
qglviewer::Frame::setRotation	/usr/include/QGLViewer/frame.h	/^    void setRotation(const Quaternion& rotation) { q_ = rotation; emit modified(); };$/;"	f	class:qglviewer::Frame	access:public	signature:(const Quaternion& rotation)
qglviewer::Frame::setRotation	/usr/include/QGLViewer/frame.h	/^    void setRotation(double q0, double q1, double q2, double q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double q0, double q1, double q2, double q3)
qglviewer::Frame::setRotationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setRotationWithConstraint(Quaternion& rotation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& rotation)
qglviewer::Frame::setTranslation	/usr/include/QGLViewer/frame.h	/^    void setTranslation(const Vec& translation) { t_ = translation; emit modified(); };$/;"	f	class:qglviewer::Frame	access:public	signature:(const Vec& translation)
qglviewer::Frame::setTranslation	/usr/include/QGLViewer/frame.h	/^    void setTranslation(float x, float y, float z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float x, float y, float z)
qglviewer::Frame::setTranslationAndRotation	/usr/include/QGLViewer/frame.h	/^    void setTranslationAndRotation(const Vec& translation, const Quaternion& rotation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& translation, const Quaternion& rotation)
qglviewer::Frame::setTranslationAndRotationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setTranslationAndRotationWithConstraint(Vec& translation, Quaternion& rotation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& translation, Quaternion& rotation)
qglviewer::Frame::setTranslationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setTranslationWithConstraint(Vec& translation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& translation)
qglviewer::Frame::settingAsReferenceFrameWillCreateALoop	/usr/include/QGLViewer/frame.h	/^    bool settingAsReferenceFrameWillCreateALoop(const Frame* const frame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame* const frame)
qglviewer::Frame::t_	/usr/include/QGLViewer/frame.h	/^    Vec t_;$/;"	m	class:qglviewer::Frame	access:private
qglviewer::Frame::transformOf	/usr/include/QGLViewer/frame.h	/^    Vec transformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
qglviewer::Frame::transformOfFrom	/usr/include/QGLViewer/frame.h	/^    Vec transformOfFrom(const Vec& src, const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const from) const
qglviewer::Frame::transformOfIn	/usr/include/QGLViewer/frame.h	/^    Vec transformOfIn(const Vec& src, const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const in) const
qglviewer::Frame::translate	/usr/include/QGLViewer/frame.h	/^    void translate(Vec& t);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& t)
qglviewer::Frame::translate	/usr/include/QGLViewer/frame.h	/^    void translate(const Vec& t);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& t)
qglviewer::Frame::translate	/usr/include/QGLViewer/frame.h	/^    void translate(float x, float y, float z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float x, float y, float z)
qglviewer::Frame::translate	/usr/include/QGLViewer/frame.h	/^    void translate(float& x, float& y, float& z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float& x, float& y, float& z)
qglviewer::Frame::translation	/usr/include/QGLViewer/frame.h	/^    Vec translation() const { return t_; };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::worldInverse	/usr/include/QGLViewer/frame.h	/^    Frame worldInverse() const { return Frame(-(orientation().inverseRotate(position())), orientation().inverse()); }$/;"	f	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::worldMatrix	/usr/include/QGLViewer/frame.h	/^    const GLdouble* worldMatrix() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
qglviewer::Frame::~Frame	/usr/include/QGLViewer/frame.h	/^    virtual ~Frame() {};$/;"	f	class:qglviewer::Frame	access:public	signature:()
qglviewer::KeyFrameInterpolator	/usr/include/QGLViewer/keyFrameInterpolator.h	/^  class QGLVIEWER_EXPORT KeyFrameInterpolator : public QObject$/;"	c	namespace:qglviewer	inherits:QObject
qglviewer::KeyFrameInterpolator::KeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    class KeyFrame$/;"	c	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::KeyFrame::KeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      KeyFrame(const Frame& fr, float t);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const Frame& fr, float t)
qglviewer::KeyFrameInterpolator::KeyFrame::KeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      KeyFrame(const Frame* fr, float t);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const Frame* fr, float t)
qglviewer::KeyFrameInterpolator::KeyFrame::computeTangent	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      void computeTangent(const KeyFrame* const prev, const KeyFrame* const next);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const KeyFrame* const prev, const KeyFrame* const next)
qglviewer::KeyFrameInterpolator::KeyFrame::flipOrientationIfNeeded	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      void flipOrientationIfNeeded(const Quaternion& prev);$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:(const Quaternion& prev)
qglviewer::KeyFrameInterpolator::KeyFrame::frame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      const Frame* frame() const { return frame_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
qglviewer::KeyFrameInterpolator::KeyFrame::frame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      const Frame* const frame_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
qglviewer::KeyFrameInterpolator::KeyFrame::orientation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion orientation() const { return q_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
qglviewer::KeyFrameInterpolator::KeyFrame::p_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec p_, tgP_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
qglviewer::KeyFrameInterpolator::KeyFrame::position	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec position() const { return p_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
qglviewer::KeyFrameInterpolator::KeyFrame::q_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion q_, tgQ_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
qglviewer::KeyFrameInterpolator::KeyFrame::tgP	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec tgP() const { return tgP_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
qglviewer::KeyFrameInterpolator::KeyFrame::tgP_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec p_, tgP_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
qglviewer::KeyFrameInterpolator::KeyFrame::tgQ	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion tgQ() const { return tgQ_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
qglviewer::KeyFrameInterpolator::KeyFrame::tgQ_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion q_, tgQ_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
qglviewer::KeyFrameInterpolator::KeyFrame::time	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      float time() const { return time_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
qglviewer::KeyFrameInterpolator::KeyFrame::time_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      float time_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
qglviewer::KeyFrameInterpolator::KeyFrame::updateValuesFromPointer	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      void updateValuesFromPointer();$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:()
qglviewer::KeyFrameInterpolator::KeyFrameInterpolator	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    KeyFrameInterpolator(Frame* fr=NULL);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(Frame* fr=NULL)
qglviewer::KeyFrameInterpolator::addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame& frame);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame& frame)
qglviewer::KeyFrameInterpolator::addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame& frame, float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame& frame, float time)
qglviewer::KeyFrameInterpolator::addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame* const frame);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame* const frame)
qglviewer::KeyFrameInterpolator::addKeyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void addKeyFrame(const Frame* const frame, float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const Frame* const frame, float time)
qglviewer::KeyFrameInterpolator::closedPath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool closedPath() const { return closedPath_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::closedPath_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool closedPath_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::currentFrameValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool currentFrameValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::currentFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QMutableListIterator<KeyFrame*>* currentFrame_[4];$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::currentFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QPtrListIterator<KeyFrame>* currentFrame_[4];$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::deletePath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void deletePath();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
qglviewer::KeyFrameInterpolator::domElement	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const QString& name, QDomDocument& document) const
qglviewer::KeyFrameInterpolator::drawPath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void drawPath(int mask=1, int nbFrames=6, float scale=1.0f);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int mask=1, int nbFrames=6, float scale=1.0f)
qglviewer::KeyFrameInterpolator::duration	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float duration() const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::endReached	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void endReached();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
qglviewer::KeyFrameInterpolator::firstTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float firstTime() const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::frame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Frame* frame() const { return frame_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::frame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Frame* frame_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::initFromDOMElement	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(const QDomElement& element)
qglviewer::KeyFrameInterpolator::interpolateAtTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void interpolateAtTime(float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(float time)
qglviewer::KeyFrameInterpolator::interpolated	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void interpolated();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
qglviewer::KeyFrameInterpolator::interpolationIsStarted	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool interpolationIsStarted() const { return interpolationStarted_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::interpolationPeriod	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    int interpolationPeriod() const { return period_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::interpolationSpeed	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationSpeed() const { return interpolationSpeed_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::interpolationSpeed_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationSpeed_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::interpolationStarted_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool interpolationStarted_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::interpolationTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationTime() const { return interpolationTime_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::interpolationTime_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float interpolationTime_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::invalidateValues	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void invalidateValues() { valuesAreValid_ = false; pathIsValid_ = false; splineCacheIsValid_ = false; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
qglviewer::KeyFrameInterpolator::keyFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Frame keyFrame(int index) const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int index) const
qglviewer::KeyFrameInterpolator::keyFrameTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float keyFrameTime(int index) const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int index) const
qglviewer::KeyFrameInterpolator::keyFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    mutable QList<KeyFrame*> keyFrame_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::keyFrame_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    mutable QPtrList<KeyFrame> keyFrame_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::lastTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    float lastTime() const;$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::loopInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool loopInterpolation() const { return loopInterpolation_; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::loopInterpolation_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool loopInterpolation_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::numberOfKeyFrames	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    int numberOfKeyFrames() const { return keyFrame_.count(); };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:() const
qglviewer::KeyFrameInterpolator::pathIsValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool pathIsValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::path_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QList<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::path_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QValueVector<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::path_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QVector<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::period_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    int period_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::resetInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void resetInterpolation();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
qglviewer::KeyFrameInterpolator::setClosedPath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setClosedPath(bool closed=true) { closedPath_ = closed; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(bool closed=true)
qglviewer::KeyFrameInterpolator::setFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setFrame(Frame* const frame);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(Frame* const frame)
qglviewer::KeyFrameInterpolator::setInterpolationPeriod	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationPeriod(int period) { period_ = period; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int period)
qglviewer::KeyFrameInterpolator::setInterpolationSpeed	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationSpeed(float speed) { interpolationSpeed_ = speed; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(float speed)
qglviewer::KeyFrameInterpolator::setInterpolationTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationTime(float time) { interpolationTime_ = time; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(float time)
qglviewer::KeyFrameInterpolator::setLoopInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setLoopInterpolation(bool loop=true) { loopInterpolation_ = loop; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(bool loop=true)
qglviewer::KeyFrameInterpolator::splineCacheIsValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool splineCacheIsValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::startInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void startInterpolation(int period = -1);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int period = -1)
qglviewer::KeyFrameInterpolator::stopInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void stopInterpolation();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
qglviewer::KeyFrameInterpolator::timer_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QTimer timer_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::toggleInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void toggleInterpolation() { if (interpolationIsStarted()) stopInterpolation(); else startInterpolation(); };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
qglviewer::KeyFrameInterpolator::update	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void update();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
qglviewer::KeyFrameInterpolator::updateCurrentKeyFrameForTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void updateCurrentKeyFrameForTime(float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:(float time)
qglviewer::KeyFrameInterpolator::updateModifiedFrameValues	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void updateModifiedFrameValues();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
qglviewer::KeyFrameInterpolator::updateSplineCache	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void updateSplineCache();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
qglviewer::KeyFrameInterpolator::v1	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Vec v1, v2;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::v2	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Vec v1, v2;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::valuesAreValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool valuesAreValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
qglviewer::KeyFrameInterpolator::~KeyFrameInterpolator	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual ~KeyFrameInterpolator();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
qglviewer::LocalConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT LocalConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer	inherits:AxisPlaneConstraint
qglviewer::LocalConstraint::constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);$/;"	p	class:qglviewer::LocalConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
qglviewer::LocalConstraint::constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec&     translation, Frame* const frame);$/;"	p	class:qglviewer::LocalConstraint	access:public	signature:(Vec& translation, Frame* const frame)
qglviewer::LocalConstraint::~LocalConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~LocalConstraint() {};$/;"	f	class:qglviewer::LocalConstraint	access:public	signature:()
qglviewer::ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^  class QGLVIEWER_EXPORT ManipulatedCameraFrame : public ManipulatedFrame$/;"	c	namespace:qglviewer	inherits:ManipulatedFrame
qglviewer::ManipulatedCameraFrame::ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    ManipulatedCameraFrame();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:()
qglviewer::ManipulatedCameraFrame::ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    ManipulatedCameraFrame(const ManipulatedCameraFrame& mcf);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const ManipulatedCameraFrame& mcf)
qglviewer::ManipulatedCameraFrame::domElement	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const QString& name, QDomDocument& document) const
qglviewer::ManipulatedCameraFrame::driveSpeed_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    float driveSpeed_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
qglviewer::ManipulatedCameraFrame::flySpeed	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    float flySpeed() const { return flySpeed_; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:() const
qglviewer::ManipulatedCameraFrame::flySpeed_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    float flySpeed_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
qglviewer::ManipulatedCameraFrame::flyTimer_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    QTimer flyTimer_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
qglviewer::ManipulatedCameraFrame::flyUpVector	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec flyUpVector() const { return flyUpVector_; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:() const
qglviewer::ManipulatedCameraFrame::flyUpVector_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec flyUpVector_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
qglviewer::ManipulatedCameraFrame::flyUpdate	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void flyUpdate();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:()
qglviewer::ManipulatedCameraFrame::initFromDOMElement	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const QDomElement& element)
qglviewer::ManipulatedCameraFrame::mouseMoveEvent	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void mouseMoveEvent   (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::ManipulatedCameraFrame::mouseReleaseEvent	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void mouseReleaseEvent(QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::ManipulatedCameraFrame::operator =	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    ManipulatedCameraFrame& operator=(const ManipulatedCameraFrame& mcf);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const ManipulatedCameraFrame& mcf)
qglviewer::ManipulatedCameraFrame::pitchYawQuaternion	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Quaternion pitchYawQuaternion(int x, int y, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:(int x, int y, const Camera* const camera)
qglviewer::ManipulatedCameraFrame::revolveAroundPoint	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec revolveAroundPoint() const { return revolveAroundPoint_; }$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:() const
qglviewer::ManipulatedCameraFrame::revolveAroundPoint_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec revolveAroundPoint_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
qglviewer::ManipulatedCameraFrame::setFlySpeed	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void setFlySpeed(float speed) { flySpeed_ = speed; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(float speed)
qglviewer::ManipulatedCameraFrame::setFlyUpVector	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void setFlyUpVector(const Vec& up) { flyUpVector_ = up; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const Vec& up)
qglviewer::ManipulatedCameraFrame::setRevolveAroundPoint	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void setRevolveAroundPoint(const Vec& revolveAroundPoint) { revolveAroundPoint_ = revolveAroundPoint; }$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const Vec& revolveAroundPoint)
qglviewer::ManipulatedCameraFrame::spin	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void spin();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:()
qglviewer::ManipulatedCameraFrame::startAction	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void startAction(int ma, bool withConstraint=true); \/\/ int is really a QGLViewer::MouseAction$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(int ma, bool withConstraint=true)
qglviewer::ManipulatedCameraFrame::turnQuaternion	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Quaternion turnQuaternion(int x, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:(int x, const Camera* const camera)
qglviewer::ManipulatedCameraFrame::updateFlyUpVector	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void updateFlyUpVector();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:()
qglviewer::ManipulatedCameraFrame::wheelEvent	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void wheelEvent       (QWheelEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(QWheelEvent* const event, Camera* const camera)
qglviewer::ManipulatedCameraFrame::~ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual ~ManipulatedCameraFrame() {};$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:()
qglviewer::ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^  class QGLVIEWER_EXPORT ManipulatedFrame : public Frame, public MouseGrabber$/;"	c	namespace:qglviewer	inherits:Frame,MouseGrabber
qglviewer::ManipulatedFrame::ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^    ManipulatedFrame();$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:()
qglviewer::ManipulatedFrame::ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^    ManipulatedFrame(const ManipulatedFrame& mf);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const ManipulatedFrame& mf)
qglviewer::ManipulatedFrame::action_	/usr/include/QGLViewer/manipulatedFrame.h	/^    int action_; \/\/ Should be a QGLViewer::MouseAction, but include loop$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
qglviewer::ManipulatedFrame::checkIfGrabsMouse	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void checkIfGrabsMouse(int x, int y, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(int x, int y, const Camera* const camera)
qglviewer::ManipulatedFrame::computeMouseSpeed	/usr/include/QGLViewer/manipulatedFrame.h	/^    void computeMouseSpeed(const QMouseEvent* const e);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(const QMouseEvent* const e)
qglviewer::ManipulatedFrame::deformedBallQuaternion	/usr/include/QGLViewer/manipulatedFrame.h	/^    Quaternion deformedBallQuaternion(int x, int y, float cx, float cy, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(int x, int y, float cx, float cy, const Camera* const camera)
qglviewer::ManipulatedFrame::delay_	/usr/include/QGLViewer/manipulatedFrame.h	/^    int delay_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::dirIsFixed_	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool dirIsFixed_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::domElement	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const QString& name, QDomDocument& document) const
qglviewer::ManipulatedFrame::initFromDOMElement	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const QDomElement& element)
qglviewer::ManipulatedFrame::isManipulated	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool isManipulated() const;$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:() const
qglviewer::ManipulatedFrame::isSpinning	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool isSpinning() const { return isSpinning_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
qglviewer::ManipulatedFrame::isSpinning_	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool isSpinning_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::keepsGrabbingMouse_	/usr/include/QGLViewer/manipulatedFrame.h	/^    bool keepsGrabbingMouse_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::last_move_time	/usr/include/QGLViewer/manipulatedFrame.h	/^    QTime last_move_time;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::manipulated	/usr/include/QGLViewer/manipulatedFrame.h	/^    void manipulated();$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:()
qglviewer::ManipulatedFrame::mouseDoubleClickEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::ManipulatedFrame::mouseMoveEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mouseMoveEvent       (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::ManipulatedFrame::mouseOriginalDirection	/usr/include/QGLViewer/manipulatedFrame.h	/^    int mouseOriginalDirection(const QMouseEvent* const e);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(const QMouseEvent* const e)
qglviewer::ManipulatedFrame::mousePressEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mousePressEvent      (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::ManipulatedFrame::mouseReleaseEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void mouseReleaseEvent    (QMouseEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::ManipulatedFrame::mouseSpeed_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float mouseSpeed_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::operator =	/usr/include/QGLViewer/manipulatedFrame.h	/^    ManipulatedFrame& operator=(const ManipulatedFrame& mf);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(const ManipulatedFrame& mf)
qglviewer::ManipulatedFrame::pressPos_	/usr/include/QGLViewer/manipulatedFrame.h	/^    QPoint prevPos_, pressPos_;$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
qglviewer::ManipulatedFrame::prevPos_	/usr/include/QGLViewer/manipulatedFrame.h	/^    QPoint prevPos_, pressPos_;$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
qglviewer::ManipulatedFrame::previousConstraint_	/usr/include/QGLViewer/manipulatedFrame.h	/^    Constraint* previousConstraint_; \/\/ When manipulation is without Contraint.$/;"	m	class:qglviewer::ManipulatedFrame	access:protected
qglviewer::ManipulatedFrame::rotSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float rotSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::rotationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float rotationSensitivity() const { return rotSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
qglviewer::ManipulatedFrame::setRotationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setRotationSensitivity(float sensitivity) { rotSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
qglviewer::ManipulatedFrame::setSpinningQuaternion	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setSpinningQuaternion(const Quaternion& spinningQuaternion) { spinningQuaternion_ = spinningQuaternion; }$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(const Quaternion& spinningQuaternion)
qglviewer::ManipulatedFrame::setSpinningSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setSpinningSensitivity(float sensitivity) { spinningSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
qglviewer::ManipulatedFrame::setTranslationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setTranslationSensitivity(float sensitivity) { transSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
qglviewer::ManipulatedFrame::setWheelSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setWheelSensitivity(float sensitivity) { wheelSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
qglviewer::ManipulatedFrame::spin	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void spin();$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:()
qglviewer::ManipulatedFrame::spinUpdate	/usr/include/QGLViewer/manipulatedFrame.h	/^    void spinUpdate();$/;"	p	class:qglviewer::ManipulatedFrame	access:private	signature:()
qglviewer::ManipulatedFrame::spinningQuaternion	/usr/include/QGLViewer/manipulatedFrame.h	/^    Quaternion spinningQuaternion() const { return spinningQuaternion_; }$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
qglviewer::ManipulatedFrame::spinningQuaternion_	/usr/include/QGLViewer/manipulatedFrame.h	/^    Quaternion spinningQuaternion_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::spinningSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float spinningSensitivity() const { return spinningSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
qglviewer::ManipulatedFrame::spinningSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float spinningSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::spinningTimer_	/usr/include/QGLViewer/manipulatedFrame.h	/^    QTimer spinningTimer_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::spun	/usr/include/QGLViewer/manipulatedFrame.h	/^    void spun();$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:()
qglviewer::ManipulatedFrame::startAction	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void startAction(int ma, bool withConstraint=true); \/\/ int is really a QGLViewer::MouseAction$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(int ma, bool withConstraint=true)
qglviewer::ManipulatedFrame::startSpinning	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void startSpinning(int updateInterval);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(int updateInterval)
qglviewer::ManipulatedFrame::stopSpinning	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void stopSpinning() { spinningTimer_.stop(); isSpinning_ = false; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:()
qglviewer::ManipulatedFrame::transSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float transSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::translationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float translationSensitivity() const { return transSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
qglviewer::ManipulatedFrame::wheelEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void wheelEvent           (QWheelEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QWheelEvent* const event, Camera* const camera)
qglviewer::ManipulatedFrame::wheelSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float wheelSensitivity() const { return wheelSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
qglviewer::ManipulatedFrame::wheelSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float wheelSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
qglviewer::ManipulatedFrame::~ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual ~ManipulatedFrame() {};$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:()
qglviewer::MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^  class QGLVIEWER_EXPORT MouseGrabber$/;"	c	namespace:qglviewer
qglviewer::MouseGrabber::MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    MouseGrabber();$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::MouseGrabber::MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    MouseGrabber(const MouseGrabber&);$/;"	p	class:qglviewer::MouseGrabber	access:private	signature:(const MouseGrabber&)
qglviewer::MouseGrabber::MouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    static const QList<MouseGrabber*>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::MouseGrabber::MouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    static const QList<MouseGrabber>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::MouseGrabber::MouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    static const QPtrList<MouseGrabber>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::MouseGrabber::MouseGrabberPool_	/usr/include/QGLViewer/mouseGrabber.h	/^    static QList<MouseGrabber*> MouseGrabberPool_;$/;"	m	class:qglviewer::MouseGrabber	access:private
qglviewer::MouseGrabber::MouseGrabberPool_	/usr/include/QGLViewer/mouseGrabber.h	/^    static QPtrList<MouseGrabber> MouseGrabberPool_;$/;"	m	class:qglviewer::MouseGrabber	access:private
qglviewer::MouseGrabber::addInMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    void addInMouseGrabberPool();$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::MouseGrabber::checkIfGrabsMouse	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void checkIfGrabsMouse(int x, int y, const Camera* const camera) = 0;$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:(int x, int y, const Camera* const camera)
qglviewer::MouseGrabber::clearMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    void clearMouseGrabberPool(bool autoDelete=false);$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:(bool autoDelete=false)
qglviewer::MouseGrabber::grabsMouse	/usr/include/QGLViewer/mouseGrabber.h	/^    bool grabsMouse() const { return grabsMouse_; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:() const
qglviewer::MouseGrabber::grabsMouse_	/usr/include/QGLViewer/mouseGrabber.h	/^    bool grabsMouse_;$/;"	m	class:qglviewer::MouseGrabber	access:private
qglviewer::MouseGrabber::isInMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    bool isInMouseGrabberPool() const { return MouseGrabber::MouseGrabberPool_.contains(const_cast<MouseGrabber*>(this)); };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:() const
qglviewer::MouseGrabber::isInMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    bool isInMouseGrabberPool() const { return MouseGrabber::MouseGrabberPool_.findRef(this) != -1; };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:() const
qglviewer::MouseGrabber::mouseDoubleClickEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::MouseGrabber::mouseMoveEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mouseMoveEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::MouseGrabber::mousePressEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mousePressEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::MouseGrabber::mouseReleaseEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void mouseReleaseEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QMouseEvent* const event, Camera* const camera)
qglviewer::MouseGrabber::operator =	/usr/include/QGLViewer/mouseGrabber.h	/^    MouseGrabber& operator=(const MouseGrabber&);$/;"	p	class:qglviewer::MouseGrabber	access:private	signature:(const MouseGrabber&)
qglviewer::MouseGrabber::removeFromMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    void removeFromMouseGrabberPool();$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::MouseGrabber::setGrabsMouse	/usr/include/QGLViewer/mouseGrabber.h	/^    void setGrabsMouse(bool grabs) { grabsMouse_ = grabs; };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(bool grabs)
qglviewer::MouseGrabber::wheelEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void wheelEvent(QWheelEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QWheelEvent* const event, Camera* const camera)
qglviewer::MouseGrabber::~MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual ~MouseGrabber() { MouseGrabber::MouseGrabberPool_.removeAll(this); };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::MouseGrabber::~MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual ~MouseGrabber() { MouseGrabber::MouseGrabberPool_.removeRef(this); };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
qglviewer::Quaternion	/usr/include/QGLViewer/quaternion.h	/^	class QGLVIEWER_EXPORT Quaternion$/;"	c	namespace:qglviewer
qglviewer::Quaternion::Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion()$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
qglviewer::Quaternion::Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(const Quaternion& Q)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& Q)
qglviewer::Quaternion::Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(const Vec& axis, double angle)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Vec& axis, double angle)
qglviewer::Quaternion::Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(const Vec& from, const Vec& to);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& from, const Vec& to)
qglviewer::Quaternion::Quaternion	/usr/include/QGLViewer/quaternion.h	/^		Quaternion(double q0, double q1, double q2, double q3)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(double q0, double q1, double q2, double q3)
qglviewer::Quaternion::Quaternion	/usr/include/QGLViewer/quaternion.h	/^		explicit Quaternion(const QDomElement& element);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const QDomElement& element)
qglviewer::Quaternion::angle	/usr/include/QGLViewer/quaternion.h	/^		float angle() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
qglviewer::Quaternion::axis	/usr/include/QGLViewer/quaternion.h	/^		Vec axis() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
qglviewer::Quaternion::domElement	/usr/include/QGLViewer/quaternion.h	/^		QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const QString& name, QDomDocument& document) const
qglviewer::Quaternion::dot	/usr/include/QGLViewer/quaternion.h	/^		static double dot(const Quaternion& a, const Quaternion& b) { return a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& b)
qglviewer::Quaternion::exp	/usr/include/QGLViewer/quaternion.h	/^		Quaternion exp();$/;"	p	class:qglviewer::Quaternion	access:public	signature:()
qglviewer::Quaternion::getAxisAngle	/usr/include/QGLViewer/quaternion.h	/^		void getAxisAngle(Vec& axis, float& angle) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(Vec& axis, float& angle) const
qglviewer::Quaternion::getInverseMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getInverseMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[16]) const
qglviewer::Quaternion::getInverseMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getInverseMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[4][4]) const
qglviewer::Quaternion::getInverseRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getInverseRotationMatrix(float m[3][3]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(float m[3][3]) const
qglviewer::Quaternion::getMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getMatrix(GLdouble m[16]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[16]) const
qglviewer::Quaternion::getMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getMatrix(GLdouble m[4][4]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(GLdouble m[4][4]) const
qglviewer::Quaternion::getRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void getRotationMatrix(float m[3][3]) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(float m[3][3]) const
qglviewer::Quaternion::initFromDOMElement	/usr/include/QGLViewer/quaternion.h	/^		void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const QDomElement& element)
qglviewer::Quaternion::inverse	/usr/include/QGLViewer/quaternion.h	/^		Quaternion inverse() const { return Quaternion(-q[0], -q[1], -q[2], q[3]); }$/;"	f	class:qglviewer::Quaternion	access:public	signature:() const
qglviewer::Quaternion::inverseMatrix	/usr/include/QGLViewer/quaternion.h	/^		const GLdouble* inverseMatrix() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
qglviewer::Quaternion::inverseRotate	/usr/include/QGLViewer/quaternion.h	/^		Vec inverseRotate(const Vec& v) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& v) const
qglviewer::Quaternion::invert	/usr/include/QGLViewer/quaternion.h	/^		void invert() { q[0] = -q[0]; q[1] = -q[1]; q[2] = -q[2]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
qglviewer::Quaternion::lnDif	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion lnDif(const Quaternion& a, const Quaternion& b);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& b)
qglviewer::Quaternion::log	/usr/include/QGLViewer/quaternion.h	/^		Quaternion log();$/;"	p	class:qglviewer::Quaternion	access:public	signature:()
qglviewer::Quaternion::matrix	/usr/include/QGLViewer/quaternion.h	/^		const GLdouble* matrix() const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:() const
qglviewer::Quaternion::negate	/usr/include/QGLViewer/quaternion.h	/^		void negate() { invert(); q[3] = -q[3]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
qglviewer::Quaternion::normalize	/usr/include/QGLViewer/quaternion.h	/^		double normalize()$/;"	f	class:qglviewer::Quaternion	access:public	signature:()
qglviewer::Quaternion::normalized	/usr/include/QGLViewer/quaternion.h	/^		Quaternion normalized() const$/;"	f	class:qglviewer::Quaternion	access:public	signature:() const
qglviewer::Quaternion::operator *	/usr/include/QGLViewer/quaternion.h	/^		friend Quaternion operator*(const Quaternion& a, const Quaternion& b)$/;"	f	class:qglviewer::Quaternion	access:friend	signature:(const Quaternion& a, const Quaternion& b)
qglviewer::Quaternion::operator *	/usr/include/QGLViewer/quaternion.h	/^		friend Vec operator*(const Quaternion& q, const Vec& v)$/;"	f	class:qglviewer::Quaternion	access:friend	signature:(const Quaternion& q, const Vec& v)
qglviewer::Quaternion::operator *=	/usr/include/QGLViewer/quaternion.h	/^		Quaternion& operator*=(const Quaternion &q)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion &q)
qglviewer::Quaternion::operator <<	/usr/include/QGLViewer/quaternion.h	/^		std::ostream& operator<<(std::ostream& o, const qglviewer::Vec&);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(std::ostream& o, const qglviewer::Vec&)
qglviewer::Quaternion::operator =	/usr/include/QGLViewer/quaternion.h	/^		Quaternion& operator=(const Quaternion& Q)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& Q)
qglviewer::Quaternion::operator []	/usr/include/QGLViewer/quaternion.h	/^		double operator[](int i) const { return q[i]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:(int i) const
qglviewer::Quaternion::operator []	/usr/include/QGLViewer/quaternion.h	/^		double& operator[](int i) { return q[i]; }$/;"	f	class:qglviewer::Quaternion	access:public	signature:(int i)
qglviewer::Quaternion::q	/usr/include/QGLViewer/quaternion.h	/^		double q[4];$/;"	m	class:qglviewer::Quaternion	access:private
qglviewer::Quaternion::randomQuaternion	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion randomQuaternion();$/;"	p	class:qglviewer::Quaternion	access:public	signature:()
qglviewer::Quaternion::rotate	/usr/include/QGLViewer/quaternion.h	/^		Vec rotate(const Vec& v) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& v) const
qglviewer::Quaternion::setAxisAngle	/usr/include/QGLViewer/quaternion.h	/^		void setAxisAngle(const Vec& axis, double angle)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Vec& axis, double angle)
qglviewer::Quaternion::setFromRotatedBase	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotatedBase(const Vec& X, const Vec& Y, const Vec& Z);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& X, const Vec& Y, const Vec& Z)
qglviewer::Quaternion::setFromRotatedBasis	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotatedBasis(const Vec& X, const Vec& Y, const Vec& Z);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& X, const Vec& Y, const Vec& Z)
qglviewer::Quaternion::setFromRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotationMatrix(const double m[3][3]);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const double m[3][3])
qglviewer::Quaternion::setFromRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotationMatrix(const float m[3][3]);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const float m[3][3])
qglviewer::Quaternion::setValue	/usr/include/QGLViewer/quaternion.h	/^		void setValue(double q0, double q1, double q2, double q3)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(double q0, double q1, double q2, double q3)
qglviewer::Quaternion::slerp	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion slerp(const Quaternion& a, const Quaternion& b, float t, bool allowFlip=true);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& b, float t, bool allowFlip=true)
qglviewer::Quaternion::squad	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion squad(const Quaternion& a, const Quaternion& tgA, const Quaternion& tgB, const Quaternion& b, float t);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& tgA, const Quaternion& tgB, const Quaternion& b, float t)
qglviewer::Quaternion::squadTangent	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion squadTangent(const Quaternion& before, const Quaternion& center, const Quaternion& after);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& before, const Quaternion& center, const Quaternion& after)
qglviewer::Vec	/usr/include/QGLViewer/vec.h	/^class QGLVIEWER_EXPORT Vec$/;"	c	namespace:qglviewer
qglviewer::Vec::Vec	/usr/include/QGLViewer/vec.h	/^  Vec() : x(0.0), y(0.0), z(0.0) {}$/;"	f	class:qglviewer::Vec	access:public	signature:()
qglviewer::Vec::Vec	/usr/include/QGLViewer/vec.h	/^  Vec(float X, float Y, float Z) : x(X), y(Y), z(Z) {}$/;"	f	class:qglviewer::Vec	access:public	signature:(float X, float Y, float Z)
qglviewer::Vec::Vec	/usr/include/QGLViewer/vec.h	/^  explicit Vec(const C& c) : x(c[0]), y(c[1]), z(c[2]) {}$/;"	f	class:qglviewer::Vec	access:public	signature:(const C& c)
qglviewer::Vec::Vec	/usr/include/QGLViewer/vec.h	/^  explicit Vec(const QDomElement& element);$/;"	p	class:qglviewer::Vec	access:public	signature:(const QDomElement& element)
qglviewer::Vec::address	/usr/include/QGLViewer/vec.h	/^  const float* address() const { qWarning("Vec::address() is deprecated, use operator const float* instead."); return operator const float*(); };$/;"	f	class:qglviewer::Vec	access:public	signature:() const
qglviewer::Vec::cross	/usr/include/QGLViewer/vec.h	/^  friend Vec cross(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
qglviewer::Vec::domElement	/usr/include/QGLViewer/vec.h	/^  QDomElement domElement(const QString& name, QDomDocument& document) const;$/;"	p	class:qglviewer::Vec	access:public	signature:(const QString& name, QDomDocument& document) const
qglviewer::Vec::initFromDOMElement	/usr/include/QGLViewer/vec.h	/^  void initFromDOMElement(const QDomElement& element);$/;"	p	class:qglviewer::Vec	access:public	signature:(const QDomElement& element)
qglviewer::Vec::norm	/usr/include/QGLViewer/vec.h	/^  float norm() const { return sqrt(x*x + y*y + z*z); }$/;"	f	class:qglviewer::Vec	access:public	signature:() const
qglviewer::Vec::normalize	/usr/include/QGLViewer/vec.h	/^  float normalize()$/;"	f	class:qglviewer::Vec	access:public	signature:()
qglviewer::Vec::operator !=	/usr/include/QGLViewer/vec.h	/^  friend bool operator!=(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
qglviewer::Vec::operator *	/usr/include/QGLViewer/vec.h	/^  friend Vec operator*(const Vec &a, float k)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, float k)
qglviewer::Vec::operator *	/usr/include/QGLViewer/vec.h	/^  friend Vec operator*(float k, const Vec &a)$/;"	f	class:qglviewer::Vec	access:friend	signature:(float k, const Vec &a)
qglviewer::Vec::operator *	/usr/include/QGLViewer/vec.h	/^  friend float operator*(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
qglviewer::Vec::operator *=	/usr/include/QGLViewer/vec.h	/^  Vec& operator*=(float k)$/;"	f	class:qglviewer::Vec	access:public	signature:(float k)
qglviewer::Vec::operator +	/usr/include/QGLViewer/vec.h	/^  friend Vec operator+(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
qglviewer::Vec::operator +=	/usr/include/QGLViewer/vec.h	/^  Vec& operator+=(const Vec &a)$/;"	f	class:qglviewer::Vec	access:public	signature:(const Vec &a)
qglviewer::Vec::operator -	/usr/include/QGLViewer/vec.h	/^  friend Vec operator-(const Vec &a)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a)
qglviewer::Vec::operator -	/usr/include/QGLViewer/vec.h	/^  friend Vec operator-(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
qglviewer::Vec::operator -=	/usr/include/QGLViewer/vec.h	/^  Vec& operator-=(const Vec &a)$/;"	f	class:qglviewer::Vec	access:public	signature:(const Vec &a)
qglviewer::Vec::operator /	/usr/include/QGLViewer/vec.h	/^  friend Vec operator\/(const Vec &a, float k)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, float k)
qglviewer::Vec::operator /=	/usr/include/QGLViewer/vec.h	/^  Vec& operator\/=(float k)$/;"	f	class:qglviewer::Vec	access:public	signature:(float k)
qglviewer::Vec::operator <<	/usr/include/QGLViewer/vec.h	/^  std::ostream& operator<<(std::ostream& o, const qglviewer::Vec&);$/;"	p	class:qglviewer::Vec	access:public	signature:(std::ostream& o, const qglviewer::Vec&)
qglviewer::Vec::operator =	/usr/include/QGLViewer/vec.h	/^  Vec& operator=(const Vec& v)$/;"	f	class:qglviewer::Vec	access:public	signature:(const Vec& v)
qglviewer::Vec::operator ==	/usr/include/QGLViewer/vec.h	/^  friend bool operator==(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
qglviewer::Vec::operator []	/usr/include/QGLViewer/vec.h	/^  float operator[](int i) const {$/;"	f	class:qglviewer::Vec	access:public	signature:(int i) const
qglviewer::Vec::operator []	/usr/include/QGLViewer/vec.h	/^  float& operator[](int i) {$/;"	f	class:qglviewer::Vec	access:public	signature:(int i)
qglviewer::Vec::operator ^	/usr/include/QGLViewer/vec.h	/^  friend Vec operator^(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec	access:friend	signature:(const Vec &a, const Vec &b)
qglviewer::Vec::operator const float*	/usr/include/QGLViewer/vec.h	/^  operator const float*() const {$/;"	f	class:qglviewer::Vec	access:public	signature:() const
qglviewer::Vec::operator float*	/usr/include/QGLViewer/vec.h	/^  operator float*() {$/;"	f	class:qglviewer::Vec	access:public	signature:()
qglviewer::Vec::orthogonalVec	/usr/include/QGLViewer/vec.h	/^  Vec orthogonalVec() const;$/;"	p	class:qglviewer::Vec	access:public	signature:() const
qglviewer::Vec::projectOnAxis	/usr/include/QGLViewer/vec.h	/^  void projectOnAxis(const Vec& direction);$/;"	p	class:qglviewer::Vec	access:public	signature:(const Vec& direction)
qglviewer::Vec::projectOnPlane	/usr/include/QGLViewer/vec.h	/^  void projectOnPlane(const Vec& normal);$/;"	p	class:qglviewer::Vec	access:public	signature:(const Vec& normal)
qglviewer::Vec::setValue	/usr/include/QGLViewer/vec.h	/^  void setValue(float X, float Y, float Z)$/;"	f	class:qglviewer::Vec	access:public	signature:(float X, float Y, float Z)
qglviewer::Vec::sqNorm	/usr/include/QGLViewer/vec.h	/^  float sqNorm() const { return x*x + y*y + z*z; }$/;"	f	class:qglviewer::Vec	access:public	signature:() const
qglviewer::Vec::squaredNorm	/usr/include/QGLViewer/vec.h	/^  float squaredNorm() const { return x*x + y*y + z*z; }$/;"	f	class:qglviewer::Vec	access:public	signature:() const
qglviewer::Vec::unit	/usr/include/QGLViewer/vec.h	/^  Vec unit() const$/;"	f	class:qglviewer::Vec	access:public	signature:() const
qglviewer::Vec::x	/usr/include/QGLViewer/vec.h	/^  float x, y, z;$/;"	m	class:qglviewer::Vec	access:public
qglviewer::Vec::y	/usr/include/QGLViewer/vec.h	/^  float x, y, z;$/;"	m	class:qglviewer::Vec	access:public
qglviewer::Vec::z	/usr/include/QGLViewer/vec.h	/^  float x, y, z;$/;"	m	class:qglviewer::Vec	access:public
qglviewer::WorldConstraint	/usr/include/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT WorldConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer	inherits:AxisPlaneConstraint
qglviewer::WorldConstraint::constrainRotation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);$/;"	p	class:qglviewer::WorldConstraint	access:public	signature:(Quaternion& rotation, Frame* const frame)
qglviewer::WorldConstraint::constrainTranslation	/usr/include/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec&     translation, Frame* const frame);$/;"	p	class:qglviewer::WorldConstraint	access:public	signature:(Vec& translation, Frame* const frame)
qglviewer::WorldConstraint::~WorldConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~WorldConstraint() {};$/;"	f	class:qglviewer::WorldConstraint	access:public	signature:()
randomQuaternion	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion randomQuaternion();$/;"	p	class:qglviewer::Quaternion	access:public	signature:()
referenceFrame	/usr/include/QGLViewer/frame.h	/^    const Frame* referenceFrame() const { return referenceFrame_; };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
referenceFrame_	/usr/include/QGLViewer/frame.h	/^    const Frame* referenceFrame_;$/;"	m	class:qglviewer::Frame	access:private
removeFromMouseGrabberPool	/usr/include/QGLViewer/mouseGrabber.h	/^    void removeFromMouseGrabberPool();$/;"	p	class:qglviewer::MouseGrabber	access:public	signature:()
resetInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void resetInterpolation();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
resetPath	/usr/include/QGLViewer/camera.h	/^    virtual void resetPath(int i);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i)
resetVisualHints	/usr/include/QGLViewer/qglviewer.h	/^		virtual void resetVisualHints();$/;"	p	class:QGLViewer	access:public	signature:()
resize	/usr/include/QGLViewer/qglviewer.h	/^		virtual void resize(int width, int height);$/;"	p	class:QGLViewer	access:public	signature:(int width, int height)
resizeGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void resizeGL(int width, int height);$/;"	p	class:QGLViewer	access:protected	signature:(int width, int height)
restoreFromFile	/usr/include/QGLViewer/qglviewer.h	/^		bool restoreFromFile(const QString& fileName=QString::null);$/;"	p	class:QGLViewer	access:public	signature:(const QString& fileName=QString::null)
restoreStateFromFile	/usr/include/QGLViewer/qglviewer.h	/^		virtual bool restoreStateFromFile();$/;"	p	class:QGLViewer	access:public	signature:()
revolveAroundPoint	/usr/include/QGLViewer/camera.h	/^    Vec revolveAroundPoint() const { return frame()->revolveAroundPoint(); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
revolveAroundPoint	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec revolveAroundPoint() const { return revolveAroundPoint_; }$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:() const
revolveAroundPoint_	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Vec revolveAroundPoint_;$/;"	m	class:qglviewer::ManipulatedCameraFrame	access:private
rightVector	/usr/include/QGLViewer/camera.h	/^    Vec rightVector() const$/;"	f	class:qglviewer::Camera	access:public	signature:() const
rotSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float rotSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(Quaternion& q);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& q)
rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(const Quaternion& q);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Quaternion& q)
rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(double q0, double q1, double q2, double q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double q0, double q1, double q2, double q3)
rotate	/usr/include/QGLViewer/frame.h	/^    void rotate(double& q0, double& q1, double& q2, double& q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double& q0, double& q1, double& q2, double& q3)
rotate	/usr/include/QGLViewer/quaternion.h	/^		Vec rotate(const Vec& v) const;$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& v) const
rotateAroundPoint	/usr/include/QGLViewer/frame.h	/^    void rotateAroundPoint(Quaternion& rotation, const Vec& point);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& rotation, const Vec& point)
rotateAroundPoint	/usr/include/QGLViewer/frame.h	/^    void rotateAroundPoint(const Quaternion& rotation, const Vec& point);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Quaternion& rotation, const Vec& point)
rotation	/usr/include/QGLViewer/frame.h	/^    Quaternion rotation() const { return q_; };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
rotationConstraintDir_	/usr/include/QGLViewer/constraint.h	/^    Vec rotationConstraintDir_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
rotationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    Vec rotationConstraintDirection() const { return rotationConstraintDir_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
rotationConstraintType	/usr/include/QGLViewer/constraint.h	/^    Type rotationConstraintType() const { return rotationConstraintType_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
rotationConstraintType_	/usr/include/QGLViewer/constraint.h	/^    Type rotationConstraintType_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
rotationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float rotationSensitivity() const { return rotSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
saveImageSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	bool saveImageSnapshot(const QString& fileName);$/;"	p	class:QGLViewer	access:private	signature:(const QString& fileName)
saveSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	void saveSnapshot(bool automatic=true, bool overwrite=false);$/;"	p	class:QGLViewer	access:public	signature:(bool automatic=true, bool overwrite=false)
saveSnapshot	/usr/include/QGLViewer/qglviewer.h	/^	void saveSnapshot(const QString& fileName, bool overwrite=false);$/;"	p	class:QGLViewer	access:public	signature:(const QString& fileName, bool overwrite=false)
saveStateToFile	/usr/include/QGLViewer/qglviewer.h	/^		virtual void saveStateToFile(); \/\/ cannot be const because of QMessageBox$/;"	p	class:QGLViewer	access:public	signature:()
saveStateToFileForAllViewers	/usr/include/QGLViewer/qglviewer.h	/^	static void saveStateToFileForAllViewers();$/;"	p	class:QGLViewer	access:private	signature:()
saveToFile	/usr/include/QGLViewer/qglviewer.h	/^		void saveToFile(const QString& fileName=QString::null);$/;"	p	class:QGLViewer	access:public	signature:(const QString& fileName=QString::null)
scaledFont	/usr/include/QGLViewer/qglviewer.h	/^	QFont scaledFont(const QFont& font) const {$/;"	f	class:QGLViewer	access:public	signature:(const QFont& font) const
sceneCenter	/usr/include/QGLViewer/camera.h	/^    Vec sceneCenter() const { return sceneCenter_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
sceneCenter	/usr/include/QGLViewer/qglviewer.h	/^	qglviewer::Vec sceneCenter() const { return camera()->sceneCenter(); }$/;"	f	class:QGLViewer	access:public	signature:() const
sceneCenter_	/usr/include/QGLViewer/camera.h	/^    Vec sceneCenter_;$/;"	m	class:qglviewer::Camera	access:private
sceneRadius	/usr/include/QGLViewer/camera.h	/^    float sceneRadius() const { return sceneRadius_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
sceneRadius	/usr/include/QGLViewer/qglviewer.h	/^	float sceneRadius() const { return camera()->sceneRadius(); }$/;"	f	class:QGLViewer	access:public	signature:() const
sceneRadius_	/usr/include/QGLViewer/camera.h	/^    float sceneRadius_; \/\/ OpenGL units$/;"	m	class:qglviewer::Camera	access:private
screenHeight	/usr/include/QGLViewer/camera.h	/^    int screenHeight() const { return screenHeight_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
screenHeight_	/usr/include/QGLViewer/camera.h	/^    int screenWidth_, screenHeight_;  \/\/ size of the window, in pixels$/;"	m	class:qglviewer::Camera	access:private
screenWidth	/usr/include/QGLViewer/camera.h	/^    int screenWidth() const { return screenWidth_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
screenWidth_	/usr/include/QGLViewer/camera.h	/^    int screenWidth_, screenHeight_;  \/\/ size of the window, in pixels$/;"	m	class:qglviewer::Camera	access:private
select	/usr/include/QGLViewer/qglviewer.h	/^		virtual void select(const QMouseEvent* event);$/;"	p	class:QGLViewer	access:public	signature:(const QMouseEvent* event)
select	/usr/include/QGLViewer/qglviewer.h	/^		virtual void select(const QPoint& point);$/;"	p	class:QGLViewer	access:public	signature:(const QPoint& point)
selectBuffer	/usr/include/QGLViewer/qglviewer.h	/^	GLuint* selectBuffer() { return selectBuffer_; };$/;"	f	class:QGLViewer	access:public	signature:()
selectBufferSize	/usr/include/QGLViewer/qglviewer.h	/^	int selectBufferSize() const { return selectBufferSize_; };$/;"	f	class:QGLViewer	access:public	signature:() const
selectBufferSize_	/usr/include/QGLViewer/qglviewer.h	/^	int selectBufferSize_;$/;"	m	class:QGLViewer	access:private
selectBuffer_	/usr/include/QGLViewer/qglviewer.h	/^	GLuint* selectBuffer_;$/;"	m	class:QGLViewer	access:private
selectRegionHeight	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionHeight() const { return selectRegionHeight_; };$/;"	f	class:QGLViewer	access:public	signature:() const
selectRegionHeight_	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionWidth_, selectRegionHeight_;$/;"	m	class:QGLViewer	access:private
selectRegionWidth	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionWidth() const { return selectRegionWidth_; };$/;"	f	class:QGLViewer	access:public	signature:() const
selectRegionWidth_	/usr/include/QGLViewer/qglviewer.h	/^	int selectRegionWidth_, selectRegionHeight_;$/;"	m	class:QGLViewer	access:private
selectedName	/usr/include/QGLViewer/qglviewer.h	/^	int selectedName() const { return selectedObjectId_; };$/;"	f	class:QGLViewer	access:public	signature:() const
selectedObjectId_	/usr/include/QGLViewer/qglviewer.h	/^	int selectedObjectId_;$/;"	m	class:QGLViewer	access:private
setAddKeyFrameKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setAddKeyFrameKeyboardModifiers(QtKeyboardModifiers modifiers);$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers)
setAddKeyFrameStateKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setAddKeyFrameStateKey(int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(int buttonState)
setAnimationPeriod	/usr/include/QGLViewer/qglviewer.h	/^		void setAnimationPeriod(int period) { animationPeriod_ = period; };$/;"	f	class:QGLViewer	access:public	signature:(int period)
setAspectRatio	/usr/include/QGLViewer/camera.h	/^    void setAspectRatio(float aspect) { setScreenWidthAndHeight(int(100.0*aspect), 100); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float aspect)
setAutoBufferSwap	/usr/include/QGLViewer/qglviewer.h	/^		void setAutoBufferSwap(bool on);$/;"	p	class:QGLViewer	access:protected	signature:(bool on)
setAxisAngle	/usr/include/QGLViewer/quaternion.h	/^		void setAxisAngle(const Vec& axis, double angle)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(const Vec& axis, double angle)
setAxisIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void setAxisIsDrawn(bool draw=true) { axisIsDrawn_ = draw; emit axisIsDrawnChanged(draw); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool draw=true)
setBackgroundColor	/usr/include/QGLViewer/qglviewer.h	/^		void setBackgroundColor(const QColor& color) { backgroundColor_=color; qglClearColor(color); };$/;"	f	class:QGLViewer	access:public	signature:(const QColor& color)
setCamera	/usr/include/QGLViewer/qglviewer.h	/^		void setCamera(qglviewer::Camera* const camera);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::Camera* const camera)
setCameraIsEdited	/usr/include/QGLViewer/qglviewer.h	/^		void setCameraIsEdited(bool edit=true);$/;"	p	class:QGLViewer	access:public	signature:(bool edit=true)
setClosedPath	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setClosedPath(bool closed=true) { closedPath_ = closed; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(bool closed=true)
setConstraint	/usr/include/QGLViewer/frame.h	/^    void setConstraint(Constraint* const constraint) { constraint_ = constraint; }$/;"	f	class:qglviewer::Frame	access:public	signature:(Constraint* const constraint)
setDefaultMouseBindings	/usr/include/QGLViewer/qglviewer.h	/^	void setDefaultMouseBindings();$/;"	p	class:QGLViewer	access:private	signature:()
setDefaultShortcuts	/usr/include/QGLViewer/qglviewer.h	/^	void setDefaultShortcuts();$/;"	p	class:QGLViewer	access:private	signature:()
setFOVToFitScene	/usr/include/QGLViewer/camera.h	/^    void setFOVToFitScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
setFPSIsDisplayed	/usr/include/QGLViewer/qglviewer.h	/^		void setFPSIsDisplayed(bool display=true) { FPSIsDisplayed_ = display; emit FPSIsDisplayedChanged(display); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool display=true)
setFieldOfView	/usr/include/QGLViewer/camera.h	/^    void setFieldOfView(float fov) { fieldOfView_ = fov; setFocusDistance(sceneRadius() \/ tan(fov\/2.0)); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float fov)
setFlySpeed	/usr/include/QGLViewer/camera.h	/^    void setFlySpeed(float speed) { frame()->setFlySpeed(speed); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float speed)
setFlySpeed	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void setFlySpeed(float speed) { flySpeed_ = speed; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(float speed)
setFlyUpVector	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void setFlyUpVector(const Vec& up) { flyUpVector_ = up; };$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const Vec& up)
setFocusDistance	/usr/include/QGLViewer/camera.h	/^    void setFocusDistance(float distance) { focusDistance_ = distance; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float distance)
setForegroundColor	/usr/include/QGLViewer/qglviewer.h	/^		void setForegroundColor(const QColor& color) { foregroundColor_ = color; };$/;"	f	class:QGLViewer	access:public	signature:(const QColor& color)
setFrame	/usr/include/QGLViewer/camera.h	/^    void setFrame(ManipulatedCameraFrame* const mcf);$/;"	p	class:qglviewer::Camera	access:public	signature:(ManipulatedCameraFrame* const mcf)
setFrame	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setFrame(Frame* const frame);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(Frame* const frame)
setFromMatrix	/usr/include/QGLViewer/frame.h	/^    void setFromMatrix(const GLdouble m[16]);$/;"	p	class:qglviewer::Frame	access:public	signature:(const GLdouble m[16])
setFromMatrix	/usr/include/QGLViewer/frame.h	/^    void setFromMatrix(const GLdouble m[4][4]);$/;"	p	class:qglviewer::Frame	access:public	signature:(const GLdouble m[4][4])
setFromModelViewMatrix	/usr/include/QGLViewer/camera.h	/^    void setFromModelViewMatrix(const GLdouble* const modelViewMatrix);$/;"	p	class:qglviewer::Camera	access:public	signature:(const GLdouble* const modelViewMatrix)
setFromProjectionMatrix	/usr/include/QGLViewer/camera.h	/^    void setFromProjectionMatrix(const float matrix[12]);$/;"	p	class:qglviewer::Camera	access:public	signature:(const float matrix[12])
setFromRotatedBase	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotatedBase(const Vec& X, const Vec& Y, const Vec& Z);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& X, const Vec& Y, const Vec& Z)
setFromRotatedBasis	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotatedBasis(const Vec& X, const Vec& Y, const Vec& Z);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Vec& X, const Vec& Y, const Vec& Z)
setFromRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotationMatrix(const double m[3][3]);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const double m[3][3])
setFromRotationMatrix	/usr/include/QGLViewer/quaternion.h	/^		void setFromRotationMatrix(const float m[3][3]);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const float m[3][3])
setFullScreen	/usr/include/QGLViewer/qglviewer.h	/^		void setFullScreen(bool fullScreen=true);$/;"	p	class:QGLViewer	access:public	signature:(bool fullScreen=true)
setGrabsMouse	/usr/include/QGLViewer/mouseGrabber.h	/^    void setGrabsMouse(bool grabs) { grabsMouse_ = grabs; };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(bool grabs)
setGridIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void setGridIsDrawn(bool draw=true) { gridIsDrawn_ = draw; emit gridIsDrawnChanged(draw); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool draw=true)
setHandlerKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^		void setHandlerKeyboardModifiers(MouseHandler handler, QtKeyboardModifiers modifiers);$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, QtKeyboardModifiers modifiers)
setHandlerStateKey	/usr/include/QGLViewer/qglviewer.h	/^		void setHandlerStateKey(MouseHandler handler, int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, int buttonState)
setHorizontalFieldOfView	/usr/include/QGLViewer/camera.h	/^    void setHorizontalFieldOfView(float hfov) { setFieldOfView( 2.0 * atan (tan(hfov \/ 2.0) \/ aspectRatio()) ); };$/;"	f	class:qglviewer::Camera	access:public	signature:(float hfov)
setIODistance	/usr/include/QGLViewer/camera.h	/^    void setIODistance(float distance) { IODistance_ = distance; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float distance)
setInterpolationPeriod	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationPeriod(int period) { period_ = period; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int period)
setInterpolationSpeed	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationSpeed(float speed) { interpolationSpeed_ = speed; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(float speed)
setInterpolationTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationTime(float time) { interpolationTime_ = time; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(float time)
setKeyDescription	/usr/include/QGLViewer/qglviewer.h	/^		void setKeyDescription(int key, QString description);$/;"	p	class:QGLViewer	access:public	signature:(int key, QString description)
setKeyFrameInterpolator	/usr/include/QGLViewer/camera.h	/^    void setKeyFrameInterpolator(int i, KeyFrameInterpolator* const kfi);$/;"	p	class:qglviewer::Camera	access:public	signature:(int i, KeyFrameInterpolator* const kfi)
setKeyFrameKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setKeyFrameKey(int index, int key);$/;"	p	class:QGLViewer	access:public	signature:(int index, int key)
setKeyboardAccelerator	/usr/include/QGLViewer/qglviewer.h	/^		void setKeyboardAccelerator(KeyboardAction action, int key);$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action, int key)
setLoopInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void setLoopInterpolation(bool loop=true) { loopInterpolation_ = loop; };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:(bool loop=true)
setManipulatedFrame	/usr/include/QGLViewer/qglviewer.h	/^		void setManipulatedFrame(qglviewer::ManipulatedFrame* frame);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::ManipulatedFrame* frame)
setMouseBinding	/usr/include/QGLViewer/qglviewer.h	/^		void setMouseBinding(int state, MouseHandler handler, MouseAction action, bool withConstraint=true);$/;"	p	class:QGLViewer	access:public	signature:(int state, MouseHandler handler, MouseAction action, bool withConstraint=true)
setMouseBinding	/usr/include/QGLViewer/qglviewer.h	/^	void setMouseBinding(int state, ClickAction action, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton);$/;"	p	class:QGLViewer	access:public	signature:(int state, ClickAction action, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton)
setMouseBindingDescription	/usr/include/QGLViewer/qglviewer.h	/^	void setMouseBindingDescription(int state, QString description, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton);$/;"	p	class:QGLViewer	access:public	signature:(int state, QString description, bool doubleClick=false, QtMouseButtons buttonsBefore=Qt::NoButton)
setMouseGrabber	/usr/include/QGLViewer/qglviewer.h	/^		void setMouseGrabber(qglviewer::MouseGrabber* mouseGrabber);$/;"	p	class:QGLViewer	access:public	signature:(qglviewer::MouseGrabber* mouseGrabber)
setMouseGrabberIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^	void setMouseGrabberIsEnabled(const qglviewer::MouseGrabber* const mouseGrabber, bool enabled=true);$/;"	p	class:QGLViewer	access:public	signature:(const qglviewer::MouseGrabber* const mouseGrabber, bool enabled=true)
setMouseStateKey	/usr/include/QGLViewer/qglviewer.h	/^		void setMouseStateKey(MouseHandler handler, int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, int buttonState)
setMouseTracking	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setMouseTracking(bool enable);$/;"	p	class:QGLViewer	access:public	signature:(bool enable)
setOrientation	/usr/include/QGLViewer/camera.h	/^    void setOrientation(const Quaternion& q);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Quaternion& q)
setOrientation	/usr/include/QGLViewer/camera.h	/^    void setOrientation(float theta, float phi);$/;"	p	class:qglviewer::Camera	access:public	signature:(float theta, float phi)
setOrientation	/usr/include/QGLViewer/frame.h	/^    void setOrientation(const Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Quaternion& orientation)
setOrientation	/usr/include/QGLViewer/frame.h	/^    void setOrientation(double q0, double q1, double q2, double q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double q0, double q1, double q2, double q3)
setOrientationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setOrientationWithConstraint(Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& orientation)
setPathKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPathKey(int key, int index = 0);$/;"	p	class:QGLViewer	access:public	signature:(int key, int index = 0)
setPhysicalDistanceToScreen	/usr/include/QGLViewer/camera.h	/^    void setPhysicalDistanceToScreen(float distance) { physicalDistanceToScreen_ = distance; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float distance)
setPhysicalScreenWidth	/usr/include/QGLViewer/camera.h	/^    void setPhysicalScreenWidth(float width) { physicalScreenWidth_ = width; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float width)
setPlayKeyFramePathStateKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPlayKeyFramePathStateKey(int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(int buttonState)
setPlayPathKeyboardModifiers	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPlayPathKeyboardModifiers(QtKeyboardModifiers modifiers);$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers)
setPlayPathStateKey	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setPlayPathStateKey(int buttonState);$/;"	p	class:QGLViewer	access:public	signature:(int buttonState)
setPosition	/usr/include/QGLViewer/camera.h	/^    void setPosition(const Vec& pos) { frame()->setPosition(pos); };$/;"	f	class:qglviewer::Camera	access:public	signature:(const Vec& pos)
setPosition	/usr/include/QGLViewer/frame.h	/^    void setPosition(const Vec& position);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& position)
setPosition	/usr/include/QGLViewer/frame.h	/^    void setPosition(float x, float y, float z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float x, float y, float z)
setPositionAndOrientation	/usr/include/QGLViewer/frame.h	/^    void setPositionAndOrientation(const Vec& position, const Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& position, const Quaternion& orientation)
setPositionAndOrientationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setPositionAndOrientationWithConstraint(Vec& position, Quaternion& orientation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& position, Quaternion& orientation)
setPositionWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setPositionWithConstraint(Vec& position);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& position)
setReferenceFrame	/usr/include/QGLViewer/frame.h	/^    void setReferenceFrame(const Frame* const refFrame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame* const refFrame)
setRevolveAroundPoint	/usr/include/QGLViewer/camera.h	/^    void setRevolveAroundPoint(const Vec& rap);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& rap)
setRevolveAroundPoint	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void setRevolveAroundPoint(const Vec& revolveAroundPoint) { revolveAroundPoint_ = revolveAroundPoint; }$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:(const Vec& revolveAroundPoint)
setRevolveAroundPointFromPixel	/usr/include/QGLViewer/camera.h	/^    bool setRevolveAroundPointFromPixel(const QPoint& pixel);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel)
setRotation	/usr/include/QGLViewer/frame.h	/^    void setRotation(const Quaternion& rotation) { q_ = rotation; emit modified(); };$/;"	f	class:qglviewer::Frame	access:public	signature:(const Quaternion& rotation)
setRotation	/usr/include/QGLViewer/frame.h	/^    void setRotation(double q0, double q1, double q2, double q3);$/;"	p	class:qglviewer::Frame	access:public	signature:(double q0, double q1, double q2, double q3)
setRotationConstraint	/usr/include/QGLViewer/constraint.h	/^    void setRotationConstraint(Type type, const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type, const Vec& direction)
setRotationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    void setRotationConstraintDirection(const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(const Vec& direction)
setRotationConstraintType	/usr/include/QGLViewer/constraint.h	/^    void setRotationConstraintType(Type type);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type)
setRotationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setRotationSensitivity(float sensitivity) { rotSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
setRotationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setRotationWithConstraint(Quaternion& rotation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Quaternion& rotation)
setSceneBoundingBox	/usr/include/QGLViewer/camera.h	/^    void setSceneBoundingBox(const Vec& min, const Vec& max);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& min, const Vec& max)
setSceneBoundingBox	/usr/include/QGLViewer/qglviewer.h	/^		void setSceneBoundingBox(const qglviewer::Vec& min, const qglviewer::Vec& max) { camera()->setSceneBoundingBox(min,max); }$/;"	f	class:QGLViewer	access:public	signature:(const qglviewer::Vec& min, const qglviewer::Vec& max)
setSceneCenter	/usr/include/QGLViewer/camera.h	/^    void setSceneCenter(const Vec& center);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& center)
setSceneCenter	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setSceneCenter(const qglviewer::Vec& center) { camera()->setSceneCenter(center); }$/;"	f	class:QGLViewer	access:public	signature:(const qglviewer::Vec& center)
setSceneCenterFromPixel	/usr/include/QGLViewer/camera.h	/^    bool setSceneCenterFromPixel(const QPoint& pixel);$/;"	p	class:qglviewer::Camera	access:public	signature:(const QPoint& pixel)
setSceneRadius	/usr/include/QGLViewer/camera.h	/^    void setSceneRadius(float radius);$/;"	p	class:qglviewer::Camera	access:public	signature:(float radius)
setSceneRadius	/usr/include/QGLViewer/qglviewer.h	/^		virtual void setSceneRadius(float radius) { camera()->setSceneRadius(radius); }$/;"	f	class:QGLViewer	access:public	signature:(float radius)
setScreenWidthAndHeight	/usr/include/QGLViewer/camera.h	/^    void setScreenWidthAndHeight(int width, int height);$/;"	p	class:qglviewer::Camera	access:public	signature:(int width, int height)
setSelectBufferSize	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectBufferSize(int size);$/;"	p	class:QGLViewer	access:public	signature:(int size)
setSelectRegionHeight	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectRegionHeight(int height) { selectRegionHeight_ = height; };$/;"	f	class:QGLViewer	access:public	signature:(int height)
setSelectRegionWidth	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectRegionWidth(int width) { selectRegionWidth_ = width; };$/;"	f	class:QGLViewer	access:public	signature:(int width)
setSelectedName	/usr/include/QGLViewer/qglviewer.h	/^		void setSelectedName(int id) { selectedObjectId_=id; };$/;"	f	class:QGLViewer	access:public	signature:(int id)
setShortcut	/usr/include/QGLViewer/qglviewer.h	/^		void setShortcut(KeyboardAction action, int key);$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action, int key)
setSnapshotCounter	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotCounter(int counter) { snapshotCounter_ = counter; };$/;"	f	class:QGLViewer	access:public	signature:(int counter)
setSnapshotFileName	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotFileName(const QString& name);$/;"	p	class:QGLViewer	access:public	signature:(const QString& name)
setSnapshotFormat	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotFormat(const QString& format) { snapshotFormat_ = format; };$/;"	f	class:QGLViewer	access:public	signature:(const QString& format)
setSnapshotQuality	/usr/include/QGLViewer/qglviewer.h	/^	void setSnapshotQuality(int quality) { snapshotQuality_ = quality; };$/;"	f	class:QGLViewer	access:public	signature:(int quality)
setSpinningQuaternion	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setSpinningQuaternion(const Quaternion& spinningQuaternion) { spinningQuaternion_ = spinningQuaternion; }$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(const Quaternion& spinningQuaternion)
setSpinningSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setSpinningSensitivity(float sensitivity) { spinningSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
setStateFileName	/usr/include/QGLViewer/qglviewer.h	/^		void setStateFileName(const QString& name) { stateFileName_ = name; };$/;"	f	class:QGLViewer	access:public	signature:(const QString& name)
setStereoDisplay	/usr/include/QGLViewer/qglviewer.h	/^		void setStereoDisplay(bool stereo=true);$/;"	p	class:QGLViewer	access:public	signature:(bool stereo=true)
setTextIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^		void setTextIsEnabled(bool enable=true) { textIsEnabled_ = enable; emit textIsEnabledChanged(enable); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer	access:public	signature:(bool enable=true)
setTranslation	/usr/include/QGLViewer/frame.h	/^    void setTranslation(const Vec& translation) { t_ = translation; emit modified(); };$/;"	f	class:qglviewer::Frame	access:public	signature:(const Vec& translation)
setTranslation	/usr/include/QGLViewer/frame.h	/^    void setTranslation(float x, float y, float z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float x, float y, float z)
setTranslationAndRotation	/usr/include/QGLViewer/frame.h	/^    void setTranslationAndRotation(const Vec& translation, const Quaternion& rotation);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& translation, const Quaternion& rotation)
setTranslationAndRotationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setTranslationAndRotationWithConstraint(Vec& translation, Quaternion& rotation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& translation, Quaternion& rotation)
setTranslationConstraint	/usr/include/QGLViewer/constraint.h	/^    void setTranslationConstraint(Type type, const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type, const Vec& direction)
setTranslationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    void setTranslationConstraintDirection(const Vec& direction);$/;"	p	class:qglviewer::AxisPlaneConstraint	access:public	signature:(const Vec& direction)
setTranslationConstraintType	/usr/include/QGLViewer/constraint.h	/^    void setTranslationConstraintType(Type type) { translationConstraintType_ = type; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:(Type type)
setTranslationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setTranslationSensitivity(float sensitivity) { transSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
setTranslationWithConstraint	/usr/include/QGLViewer/frame.h	/^    void setTranslationWithConstraint(Vec& translation);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& translation)
setType	/usr/include/QGLViewer/camera.h	/^    void setType(Type type);$/;"	p	class:qglviewer::Camera	access:public	signature:(Type type)
setUpVector	/usr/include/QGLViewer/camera.h	/^    void setUpVector(const Vec& up, bool noMove=true);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& up, bool noMove=true)
setValue	/usr/include/QGLViewer/quaternion.h	/^		void setValue(double q0, double q1, double q2, double q3)$/;"	f	class:qglviewer::Quaternion	access:public	signature:(double q0, double q1, double q2, double q3)
setValue	/usr/include/QGLViewer/vec.h	/^  void setValue(float X, float Y, float Z)$/;"	f	class:qglviewer::Vec	access:public	signature:(float X, float Y, float Z)
setViewDirection	/usr/include/QGLViewer/camera.h	/^    void setViewDirection(const Vec& direction);$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& direction)
setVisualHintsMask	/usr/include/QGLViewer/qglviewer.h	/^	virtual void setVisualHintsMask(int mask, int delay = 2000);$/;"	p	class:QGLViewer	access:public	signature:(int mask, int delay = 2000)
setWheelBinding	/usr/include/QGLViewer/qglviewer.h	/^		void setWheelBinding(QtKeyboardModifiers modifiers, MouseHandler handler, MouseAction action, bool withConstraint=true);$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers, MouseHandler handler, MouseAction action, bool withConstraint=true)
setWheelSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    void setWheelSensitivity(float sensitivity) { wheelSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:(float sensitivity)
setZClippingCoefficient	/usr/include/QGLViewer/camera.h	/^    void setZClippingCoefficient(float coef) { zClippingCoef_ = coef; }$/;"	f	class:qglviewer::Camera	access:public	signature:(float coef)
setZNearCoefficient	/usr/include/QGLViewer/camera.h	/^    void setZNearCoefficient(float coef) { zNearCoef_ = coef; };$/;"	f	class:qglviewer::Camera	access:public	signature:(float coef)
settingAsReferenceFrameWillCreateALoop	/usr/include/QGLViewer/frame.h	/^    bool settingAsReferenceFrameWillCreateALoop(const Frame* const frame);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Frame* const frame)
shortcut	/usr/include/QGLViewer/qglviewer.h	/^	int shortcut(KeyboardAction action) const;$/;"	p	class:QGLViewer	access:public	signature:(KeyboardAction action) const
shortcutBindingsString	/usr/include/QGLViewer/qglviewer.h	/^	virtual QString shortcutBindingsString () const { return keyboardString(); }$/;"	f	class:QGLViewer	access:public	signature:() const
showEntireScene	/usr/include/QGLViewer/camera.h	/^    void showEntireScene();$/;"	p	class:qglviewer::Camera	access:public	signature:()
showEntireScene	/usr/include/QGLViewer/qglviewer.h	/^		void showEntireScene() { camera()->showEntireScene(); if (updateGLOK_) updateGL(); }$/;"	f	class:QGLViewer	access:public	signature:()
sizeHint	/usr/include/QGLViewer/qglviewer.h	/^	virtual QSize sizeHint() const { return QSize(600, 400); }$/;"	f	class:QGLViewer	access:public	signature:() const
slerp	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion slerp(const Quaternion& a, const Quaternion& b, float t, bool allowFlip=true);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& b, float t, bool allowFlip=true)
snapshotCounter	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotCounter() const { return snapshotCounter_; };$/;"	f	class:QGLViewer	access:public	signature:() const
snapshotCounter_	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotCounter_, snapshotQuality_;$/;"	m	class:QGLViewer	access:private
snapshotFileName	/usr/include/QGLViewer/qglviewer.h	/^	const QString& snapshotFileName() const { return snapshotFileName_; };$/;"	f	class:QGLViewer	access:public	signature:() const
snapshotFileName_	/usr/include/QGLViewer/qglviewer.h	/^	QString snapshotFileName_, snapshotFormat_;$/;"	m	class:QGLViewer	access:private
snapshotFilename	/usr/include/QGLViewer/qglviewer.h	/^	const QString& snapshotFilename() const;$/;"	p	class:QGLViewer	access:public	signature:() const
snapshotFormat	/usr/include/QGLViewer/qglviewer.h	/^	const QString& snapshotFormat() const { return snapshotFormat_; };$/;"	f	class:QGLViewer	access:public	signature:() const
snapshotFormat_	/usr/include/QGLViewer/qglviewer.h	/^	QString snapshotFileName_, snapshotFormat_;$/;"	m	class:QGLViewer	access:private
snapshotQuality	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotQuality() { return snapshotQuality_; };$/;"	f	class:QGLViewer	access:public	signature:()
snapshotQuality_	/usr/include/QGLViewer/qglviewer.h	/^	int snapshotCounter_, snapshotQuality_;$/;"	m	class:QGLViewer	access:private
snapshotToClipboard	/usr/include/QGLViewer/qglviewer.h	/^	void snapshotToClipboard();$/;"	p	class:QGLViewer	access:public	signature:()
spin	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void spin();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:()
spin	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void spin();$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:()
spinUpdate	/usr/include/QGLViewer/manipulatedFrame.h	/^    void spinUpdate();$/;"	p	class:qglviewer::ManipulatedFrame	access:private	signature:()
spinningQuaternion	/usr/include/QGLViewer/manipulatedFrame.h	/^    Quaternion spinningQuaternion() const { return spinningQuaternion_; }$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
spinningQuaternion_	/usr/include/QGLViewer/manipulatedFrame.h	/^    Quaternion spinningQuaternion_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
spinningSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float spinningSensitivity() const { return spinningSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
spinningSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float spinningSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
spinningTimer_	/usr/include/QGLViewer/manipulatedFrame.h	/^    QTimer spinningTimer_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
splineCacheIsValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool splineCacheIsValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
spun	/usr/include/QGLViewer/manipulatedFrame.h	/^    void spun();$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:()
sqNorm	/usr/include/QGLViewer/vec.h	/^  float sqNorm() const { return x*x + y*y + z*z; }$/;"	f	class:qglviewer::Vec	access:public	signature:() const
squad	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion squad(const Quaternion& a, const Quaternion& tgA, const Quaternion& tgB, const Quaternion& b, float t);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& a, const Quaternion& tgA, const Quaternion& tgB, const Quaternion& b, float t)
squadTangent	/usr/include/QGLViewer/quaternion.h	/^		static Quaternion squadTangent(const Quaternion& before, const Quaternion& center, const Quaternion& after);$/;"	p	class:qglviewer::Quaternion	access:public	signature:(const Quaternion& before, const Quaternion& center, const Quaternion& after)
squaredNorm	/usr/include/QGLViewer/vec.h	/^  float squaredNorm() const { return x*x + y*y + z*z; }$/;"	f	class:qglviewer::Vec	access:public	signature:() const
startAction	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void startAction(int ma, bool withConstraint=true); \/\/ int is really a QGLViewer::MouseAction$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(int ma, bool withConstraint=true)
startAction	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void startAction(int ma, bool withConstraint=true); \/\/ int is really a QGLViewer::MouseAction$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(int ma, bool withConstraint=true)
startAnimation	/usr/include/QGLViewer/qglviewer.h	/^		virtual void startAnimation();$/;"	p	class:QGLViewer	access:public	signature:()
startInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void startInterpolation(int period = -1);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:(int period = -1)
startScreenCoordinatesSystem	/usr/include/QGLViewer/qglviewer.h	/^	virtual void startScreenCoordinatesSystem(bool upward=false) const;$/;"	p	class:QGLViewer	access:public	signature:(bool upward=false) const
startSpinning	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void startSpinning(int updateInterval);$/;"	p	class:qglviewer::ManipulatedFrame	access:public	signature:(int updateInterval)
stateFileName	/usr/include/QGLViewer/qglviewer.h	/^	QString stateFileName() const;$/;"	p	class:QGLViewer	access:public	signature:() const
stateFileName_	/usr/include/QGLViewer/qglviewer.h	/^	QString stateFileName_;$/;"	m	class:QGLViewer	access:private
stereoChanged	/usr/include/QGLViewer/qglviewer.h	/^	void stereoChanged(bool on);$/;"	p	class:QGLViewer	access:public	signature:(bool on)
stereo_	/usr/include/QGLViewer/qglviewer.h	/^	bool stereo_;		\/\/ stereo display$/;"	m	class:QGLViewer	access:private
stopAnimation	/usr/include/QGLViewer/qglviewer.h	/^		virtual void stopAnimation();$/;"	p	class:QGLViewer	access:public	signature:()
stopInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void stopInterpolation();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
stopScreenCoordinatesSystem	/usr/include/QGLViewer/qglviewer.h	/^	virtual void stopScreenCoordinatesSystem() const;$/;"	p	class:QGLViewer	access:public	signature:() const
stopSpinning	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void stopSpinning() { spinningTimer_.stop(); isSpinning_ = false; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:()
t_	/usr/include/QGLViewer/frame.h	/^    Vec t_;$/;"	m	class:qglviewer::Frame	access:private
textIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^	bool textIsEnabled() const { return textIsEnabled_; };$/;"	f	class:QGLViewer	access:public	signature:() const
textIsEnabledChanged	/usr/include/QGLViewer/qglviewer.h	/^	void textIsEnabledChanged(bool enabled);$/;"	p	class:QGLViewer	access:public	signature:(bool enabled)
textIsEnabled_	/usr/include/QGLViewer/qglviewer.h	/^	bool textIsEnabled_;	\/\/ drawText() actually draws text or not$/;"	m	class:QGLViewer	access:private
textScale	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
tgP	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec tgP() const { return tgP_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
tgP_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Vec p_, tgP_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
tgQ	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion tgQ() const { return tgQ_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
tgQ_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      Quaternion q_, tgQ_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
tileRegion_	/usr/include/QGLViewer/qglviewer.h	/^	TileRegion* tileRegion_;$/;"	m	class:QGLViewer	access:private
time	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      float time() const { return time_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:() const
time_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      float time_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:private
timerEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void timerEvent(QTimerEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QTimerEvent *)
timer_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    QTimer timer_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
toggleAnimation	/usr/include/QGLViewer/qglviewer.h	/^		void toggleAnimation() { if (animationIsStarted()) stopAnimation(); else startAnimation(); };$/;"	f	class:QGLViewer	access:public	signature:()
toggleAxisIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void toggleAxisIsDrawn() { setAxisIsDrawn(!axisIsDrawn()); };$/;"	f	class:QGLViewer	access:public	signature:()
toggleCameraIsEdited	/usr/include/QGLViewer/qglviewer.h	/^		void toggleCameraIsEdited() { setCameraIsEdited(!cameraIsEdited()); };$/;"	f	class:QGLViewer	access:public	signature:()
toggleCameraMode	/usr/include/QGLViewer/qglviewer.h	/^		void toggleCameraMode();$/;"	p	class:QGLViewer	access:public	signature:()
toggleFPSIsDisplayed	/usr/include/QGLViewer/qglviewer.h	/^		void toggleFPSIsDisplayed() { setFPSIsDisplayed(!FPSIsDisplayed()); };$/;"	f	class:QGLViewer	access:public	signature:()
toggleFullScreen	/usr/include/QGLViewer/qglviewer.h	/^		void toggleFullScreen() { setFullScreen(!isFullScreen()); };$/;"	f	class:QGLViewer	access:public	signature:()
toggleGridIsDrawn	/usr/include/QGLViewer/qglviewer.h	/^		void toggleGridIsDrawn() { setGridIsDrawn(!gridIsDrawn()); };$/;"	f	class:QGLViewer	access:public	signature:()
toggleInterpolation	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void toggleInterpolation() { if (interpolationIsStarted()) stopInterpolation(); else startInterpolation(); };$/;"	f	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
toggleStereoDisplay	/usr/include/QGLViewer/qglviewer.h	/^		void toggleStereoDisplay() { setStereoDisplay(!stereo_); };$/;"	f	class:QGLViewer	access:public	signature:()
toggleTextIsEnabled	/usr/include/QGLViewer/qglviewer.h	/^		void toggleTextIsEnabled() { setTextIsEnabled(!textIsEnabled()); };$/;"	f	class:QGLViewer	access:public	signature:()
transSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float transSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
transformOf	/usr/include/QGLViewer/frame.h	/^    Vec transformOf(const Vec& src) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src) const
transformOfFrom	/usr/include/QGLViewer/frame.h	/^    Vec transformOfFrom(const Vec& src, const Frame* const from) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const from) const
transformOfIn	/usr/include/QGLViewer/frame.h	/^    Vec transformOfIn(const Vec& src, const Frame* const in) const;$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& src, const Frame* const in) const
translate	/usr/include/QGLViewer/frame.h	/^    void translate(Vec& t);$/;"	p	class:qglviewer::Frame	access:public	signature:(Vec& t)
translate	/usr/include/QGLViewer/frame.h	/^    void translate(const Vec& t);$/;"	p	class:qglviewer::Frame	access:public	signature:(const Vec& t)
translate	/usr/include/QGLViewer/frame.h	/^    void translate(float x, float y, float z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float x, float y, float z)
translate	/usr/include/QGLViewer/frame.h	/^    void translate(float& x, float& y, float& z);$/;"	p	class:qglviewer::Frame	access:public	signature:(float& x, float& y, float& z)
translation	/usr/include/QGLViewer/frame.h	/^    Vec translation() const { return t_; };$/;"	f	class:qglviewer::Frame	access:public	signature:() const
translationConstraintDir_	/usr/include/QGLViewer/constraint.h	/^    Vec translationConstraintDir_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
translationConstraintDirection	/usr/include/QGLViewer/constraint.h	/^    Vec translationConstraintDirection() const { return translationConstraintDir_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
translationConstraintType	/usr/include/QGLViewer/constraint.h	/^    Type translationConstraintType() const { return translationConstraintType_; };$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:() const
translationConstraintType_	/usr/include/QGLViewer/constraint.h	/^    Type translationConstraintType_;$/;"	m	class:qglviewer::AxisPlaneConstraint	access:private
translationSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float translationSensitivity() const { return transSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
turnQuaternion	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    Quaternion turnQuaternion(int x, const Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:(int x, const Camera* const camera)
type	/usr/include/QGLViewer/camera.h	/^    Type type() const { return type_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
type_	/usr/include/QGLViewer/camera.h	/^    Type type_; \/\/ PERSPECTIVE or ORTHOGRAPHIC$/;"	m	class:qglviewer::Camera	access:private
unit	/usr/include/QGLViewer/vec.h	/^  Vec unit() const$/;"	f	class:qglviewer::Vec	access:public	signature:() const
unprojectedCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec unprojectedCoordinatesOf(const Vec& src, const Frame* frame=NULL) const;$/;"	p	class:qglviewer::Camera	access:public	signature:(const Vec& src, const Frame* frame=NULL) const
upVector	/usr/include/QGLViewer/camera.h	/^    Vec upVector() const$/;"	f	class:qglviewer::Camera	access:public	signature:() const
update	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual void update();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
updateCurrentKeyFrameForTime	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void updateCurrentKeyFrameForTime(float time);$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:(float time)
updateFlyUpVector	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    void updateFlyUpVector();$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:private	signature:()
updateGL	/usr/include/QGLViewer/qglviewer.h	/^	virtual void updateGL();$/;"	p	class:QGLViewer	access:public	signature:()
updateGLOK_	/usr/include/QGLViewer/qglviewer.h	/^	bool updateGLOK_;$/;"	m	class:QGLViewer	access:private
updateModifiedFrameValues	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void updateModifiedFrameValues();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
updateSplineCache	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    void updateSplineCache();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:private	signature:()
updateValuesFromPointer	/usr/include/QGLViewer/keyFrameInterpolator.h	/^      void updateValuesFromPointer();$/;"	p	class:qglviewer::KeyFrameInterpolator::KeyFrame	access:public	signature:()
v1	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Vec v1, v2;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
v2	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    Vec v1, v2;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
valuesAreValid_	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    bool valuesAreValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator	access:private
viewDirection	/usr/include/QGLViewer/camera.h	/^    Vec viewDirection() const { return frame()->inverseTransformOf(Vec(0.0, 0.0, -1.0)); };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
viewerInitialized	/usr/include/QGLViewer/qglviewer.h	/^	void viewerInitialized();$/;"	p	class:QGLViewer	access:public	signature:()
visualHint_	/usr/include/QGLViewer/qglviewer.h	/^	int visualHint_;$/;"	m	class:QGLViewer	access:private
warning	/usr/include/QGLViewer/domUtils.h	/^  static void warning(const QString& message)$/;"	f	class:DomUtils	access:private	signature:(const QString& message)
wheelAction	/usr/include/QGLViewer/qglviewer.h	/^	MouseAction wheelAction(QtKeyboardModifiers modifiers) const;$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers) const
wheelBinding_	/usr/include/QGLViewer/qglviewer.h	/^	QMap<QtKeyboardModifiers, MouseActionPrivate> wheelBinding_;$/;"	m	class:QGLViewer	access:private
wheelButtonState	/usr/include/QGLViewer/qglviewer.h	/^	int wheelButtonState(MouseHandler handler, MouseAction action, bool withConstraint=true) const;$/;"	p	class:QGLViewer	access:public	signature:(MouseHandler handler, MouseAction action, bool withConstraint=true) const
wheelEvent	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual void wheelEvent       (QWheelEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedCameraFrame	access:protected	signature:(QWheelEvent* const event, Camera* const camera)
wheelEvent	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual void wheelEvent           (QWheelEvent* const event, Camera* const camera);$/;"	p	class:qglviewer::ManipulatedFrame	access:protected	signature:(QWheelEvent* const event, Camera* const camera)
wheelEvent	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual void wheelEvent(QWheelEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber	access:protected	signature:(QWheelEvent* const event, Camera* const camera)
wheelEvent	/usr/include/QGLViewer/qglviewer.h	/^	virtual void wheelEvent(QWheelEvent *);$/;"	p	class:QGLViewer	access:protected	signature:(QWheelEvent *)
wheelHandler	/usr/include/QGLViewer/qglviewer.h	/^	int wheelHandler(QtKeyboardModifiers modifiers) const;$/;"	p	class:QGLViewer	access:public	signature:(QtKeyboardModifiers modifiers) const
wheelSensitivity	/usr/include/QGLViewer/manipulatedFrame.h	/^    float wheelSensitivity() const { return wheelSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:() const
wheelSensitivity_	/usr/include/QGLViewer/manipulatedFrame.h	/^    float wheelSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame	access:private
width	/usr/include/QGLViewer/qglviewer.h	/^	int width() const;$/;"	p	class:QGLViewer	access:public	signature:() const
withConstraint	/usr/include/QGLViewer/qglviewer.h	/^		bool withConstraint;$/;"	m	struct:QGLViewer::MouseActionPrivate	access:public
worldCoordinatesOf	/usr/include/QGLViewer/camera.h	/^    Vec worldCoordinatesOf(const Vec& src) const { return frame()->inverseCoordinatesOf(src); };$/;"	f	class:qglviewer::Camera	access:public	signature:(const Vec& src) const
worldInverse	/usr/include/QGLViewer/frame.h	/^    Frame worldInverse() const { return Frame(-(orientation().inverseRotate(position())), orientation().inverse()); }$/;"	f	class:qglviewer::Frame	access:public	signature:() const
worldMatrix	/usr/include/QGLViewer/frame.h	/^    const GLdouble* worldMatrix() const;$/;"	p	class:qglviewer::Frame	access:public	signature:() const
x	/usr/include/QGLViewer/vec.h	/^  float x, y, z;$/;"	m	class:qglviewer::Vec	access:public
xMax	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
xMin	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
y	/usr/include/QGLViewer/vec.h	/^  float x, y, z;$/;"	m	class:qglviewer::Vec	access:public
yMax	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
yMin	/usr/include/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion	access:public
z	/usr/include/QGLViewer/vec.h	/^  float x, y, z;$/;"	m	class:qglviewer::Vec	access:public
zClippingCoef_	/usr/include/QGLViewer/camera.h	/^    float zClippingCoef_;$/;"	m	class:qglviewer::Camera	access:private
zClippingCoefficient	/usr/include/QGLViewer/camera.h	/^    float zClippingCoefficient() const { return zClippingCoef_; }$/;"	f	class:qglviewer::Camera	access:public	signature:() const
zFar	/usr/include/QGLViewer/camera.h	/^    virtual float zFar()  const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
zNear	/usr/include/QGLViewer/camera.h	/^    virtual float zNear() const;$/;"	p	class:qglviewer::Camera	access:public	signature:() const
zNearCoef_	/usr/include/QGLViewer/camera.h	/^    float zNearCoef_;$/;"	m	class:qglviewer::Camera	access:private
zNearCoefficient	/usr/include/QGLViewer/camera.h	/^    float zNearCoefficient() const { return zNearCoef_; };$/;"	f	class:qglviewer::Camera	access:public	signature:() const
~AxisPlaneConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~AxisPlaneConstraint() {};$/;"	f	class:qglviewer::AxisPlaneConstraint	access:public	signature:()
~Camera	/usr/include/QGLViewer/camera.h	/^    virtual ~Camera();$/;"	p	class:qglviewer::Camera	access:public	signature:()
~CameraConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~CameraConstraint() {};$/;"	f	class:qglviewer::CameraConstraint	access:public	signature:()
~Constraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~Constraint() {};$/;"	f	class:qglviewer::Constraint	access:public	signature:()
~Frame	/usr/include/QGLViewer/frame.h	/^    virtual ~Frame() {};$/;"	f	class:qglviewer::Frame	access:public	signature:()
~KeyFrameInterpolator	/usr/include/QGLViewer/keyFrameInterpolator.h	/^    virtual ~KeyFrameInterpolator();$/;"	p	class:qglviewer::KeyFrameInterpolator	access:public	signature:()
~LocalConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~LocalConstraint() {};$/;"	f	class:qglviewer::LocalConstraint	access:public	signature:()
~ManipulatedCameraFrame	/usr/include/QGLViewer/manipulatedCameraFrame.h	/^    virtual ~ManipulatedCameraFrame() {};$/;"	f	class:qglviewer::ManipulatedCameraFrame	access:public	signature:()
~ManipulatedFrame	/usr/include/QGLViewer/manipulatedFrame.h	/^    virtual ~ManipulatedFrame() {};$/;"	f	class:qglviewer::ManipulatedFrame	access:public	signature:()
~MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual ~MouseGrabber() { MouseGrabber::MouseGrabberPool_.removeAll(this); };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
~MouseGrabber	/usr/include/QGLViewer/mouseGrabber.h	/^    virtual ~MouseGrabber() { MouseGrabber::MouseGrabberPool_.removeRef(this); };$/;"	f	class:qglviewer::MouseGrabber	access:public	signature:()
~QGLViewer	/usr/include/QGLViewer/qglviewer.h	/^	virtual ~QGLViewer();$/;"	p	class:QGLViewer	access:public	signature:()
~WorldConstraint	/usr/include/QGLViewer/constraint.h	/^    virtual ~WorldConstraint() {};$/;"	f	class:qglviewer::WorldConstraint	access:public	signature:()
